
IdealGasSimulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b97c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800bb3c  0800bb3c  0001bb3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc98  0800bc98  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc98  0800bc98  0001bc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bca0  0800bca0  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bca0  0800bca0  0001bca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bca4  0800bca4  0001bca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  0800bca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018e8  20000138  0800bde0  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a20  0800bde0  00021a20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029d3b  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000503e  00000000  00000000  00049ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020b0  00000000  00000000  0004eee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e18  00000000  00000000  00050f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00032b8f  00000000  00000000  00052db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cb11  00000000  00000000  0008593f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001311e4  00000000  00000000  000a2450  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d3634  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a58  00000000  00000000  001d36b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000138 	.word	0x20000138
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800bb24 	.word	0x0800bb24

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000013c 	.word	0x2000013c
 80001fc:	0800bb24 	.word	0x0800bb24

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ba:	2003      	movs	r0, #3
 80005bc:	f000 ffe3 	bl	8001586 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005c0:	2005      	movs	r0, #5
 80005c2:	f00a fd49 	bl	800b058 <HAL_InitTick>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d002      	beq.n	80005d2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005cc:	2301      	movs	r3, #1
 80005ce:	71fb      	strb	r3, [r7, #7]
 80005d0:	e001      	b.n	80005d6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005d2:	f00a fb93 	bl	800acfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005d6:	79fb      	ldrb	r3, [r7, #7]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <HAL_IncTick+0x20>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_IncTick+0x24>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4413      	add	r3, r2
 80005f0:	4a04      	ldr	r2, [pc, #16]	; (8000604 <HAL_IncTick+0x24>)
 80005f2:	6013      	str	r3, [r2, #0]
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000004 	.word	0x20000004
 8000604:	20001624 	.word	0x20001624

08000608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  return uwTick;
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <HAL_GetTick+0x14>)
 800060e:	681b      	ldr	r3, [r3, #0]
}
 8000610:	4618      	mov	r0, r3
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20001624 	.word	0x20001624

08000620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000628:	f7ff ffee 	bl	8000608 <HAL_GetTick>
 800062c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000638:	d005      	beq.n	8000646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <HAL_Delay+0x40>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4413      	add	r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000646:	bf00      	nop
 8000648:	f7ff ffde 	bl	8000608 <HAL_GetTick>
 800064c:	4602      	mov	r2, r0
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	429a      	cmp	r2, r3
 8000656:	d8f7      	bhi.n	8000648 <HAL_Delay+0x28>
  {
  }
}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000004 	.word	0x20000004

08000664 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	431a      	orrs	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	609a      	str	r2, [r3, #8]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	431a      	orrs	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	609a      	str	r2, [r3, #8]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3360      	adds	r3, #96	; 0x60
 80006de:	461a      	mov	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <LL_ADC_SetOffset+0x44>)
 80006ee:	4013      	ands	r3, r2
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	430a      	orrs	r2, r1
 80006fa:	4313      	orrs	r3, r2
 80006fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000704:	bf00      	nop
 8000706:	371c      	adds	r7, #28
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	03fff000 	.word	0x03fff000

08000714 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	3360      	adds	r3, #96	; 0x60
 8000722:	461a      	mov	r2, r3
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4413      	add	r3, r2
 800072a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000734:	4618      	mov	r0, r3
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000740:	b480      	push	{r7}
 8000742:	b087      	sub	sp, #28
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3360      	adds	r3, #96	; 0x60
 8000750:	461a      	mov	r2, r3
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	431a      	orrs	r2, r3
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800076a:	bf00      	nop
 800076c:	371c      	adds	r7, #28
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000776:	b480      	push	{r7}
 8000778:	b083      	sub	sp, #12
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	431a      	orrs	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	615a      	str	r2, [r3, #20]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800079c:	b480      	push	{r7}
 800079e:	b087      	sub	sp, #28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3330      	adds	r3, #48	; 0x30
 80007ac:	461a      	mov	r2, r3
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	0a1b      	lsrs	r3, r3, #8
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	f003 030c 	and.w	r3, r3, #12
 80007b8:	4413      	add	r3, r2
 80007ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	f003 031f 	and.w	r3, r3, #31
 80007c6:	211f      	movs	r1, #31
 80007c8:	fa01 f303 	lsl.w	r3, r1, r3
 80007cc:	43db      	mvns	r3, r3
 80007ce:	401a      	ands	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	0e9b      	lsrs	r3, r3, #26
 80007d4:	f003 011f 	and.w	r1, r3, #31
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	f003 031f 	and.w	r3, r3, #31
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	431a      	orrs	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80007e8:	bf00      	nop
 80007ea:	371c      	adds	r7, #28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b087      	sub	sp, #28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	3314      	adds	r3, #20
 8000804:	461a      	mov	r2, r3
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	0e5b      	lsrs	r3, r3, #25
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	f003 0304 	and.w	r3, r3, #4
 8000810:	4413      	add	r3, r2
 8000812:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	0d1b      	lsrs	r3, r3, #20
 800081c:	f003 031f 	and.w	r3, r3, #31
 8000820:	2107      	movs	r1, #7
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43db      	mvns	r3, r3
 8000828:	401a      	ands	r2, r3
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	0d1b      	lsrs	r3, r3, #20
 800082e:	f003 031f 	and.w	r3, r3, #31
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	fa01 f303 	lsl.w	r3, r1, r3
 8000838:	431a      	orrs	r2, r3
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800083e:	bf00      	nop
 8000840:	371c      	adds	r7, #28
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
	...

0800084c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000864:	43db      	mvns	r3, r3
 8000866:	401a      	ands	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f003 0318 	and.w	r3, r3, #24
 800086e:	4908      	ldr	r1, [pc, #32]	; (8000890 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000870:	40d9      	lsrs	r1, r3
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	400b      	ands	r3, r1
 8000876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800087a:	431a      	orrs	r2, r3
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	0007ffff 	.word	0x0007ffff

08000894 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80008a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	6093      	str	r3, [r2, #8]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80008cc:	d101      	bne.n	80008d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80008ce:	2301      	movs	r3, #1
 80008d0:	e000      	b.n	80008d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80008f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000918:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800091c:	d101      	bne.n	8000922 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800091e:	2301      	movs	r3, #1
 8000920:	e000      	b.n	8000924 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	2b01      	cmp	r3, #1
 8000942:	d101      	bne.n	8000948 <LL_ADC_IsEnabled+0x18>
 8000944:	2301      	movs	r3, #1
 8000946:	e000      	b.n	800094a <LL_ADC_IsEnabled+0x1a>
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	2b04      	cmp	r3, #4
 8000968:	d101      	bne.n	800096e <LL_ADC_REG_IsConversionOngoing+0x18>
 800096a:	2301      	movs	r3, #1
 800096c:	e000      	b.n	8000970 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800096e:	2300      	movs	r3, #0
}
 8000970:	4618      	mov	r0, r3
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	f003 0308 	and.w	r3, r3, #8
 800098c:	2b08      	cmp	r3, #8
 800098e:	d101      	bne.n	8000994 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000990:	2301      	movs	r3, #1
 8000992:	e000      	b.n	8000996 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
	...

080009a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009ac:	2300      	movs	r3, #0
 80009ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d101      	bne.n	80009be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e12d      	b.n	8000c1a <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	691b      	ldr	r3, [r3, #16]
 80009c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d109      	bne.n	80009e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f00a f9bd 	bl	800ad4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff67 	bl	80008b8 <LL_ADC_IsDeepPowerDownEnabled>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d004      	beq.n	80009fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff4d 	bl	8000894 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff82 	bl	8000908 <LL_ADC_IsInternalRegulatorEnabled>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d113      	bne.n	8000a32 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ff66 	bl	80008e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000a14:	4b83      	ldr	r3, [pc, #524]	; (8000c24 <HAL_ADC_Init+0x280>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	099b      	lsrs	r3, r3, #6
 8000a1a:	4a83      	ldr	r2, [pc, #524]	; (8000c28 <HAL_ADC_Init+0x284>)
 8000a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a20:	099b      	lsrs	r3, r3, #6
 8000a22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000a24:	e002      	b.n	8000a2c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1f9      	bne.n	8000a26 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ff66 	bl	8000908 <LL_ADC_IsInternalRegulatorEnabled>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d10d      	bne.n	8000a5e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a46:	f043 0210 	orr.w	r2, r3, #16
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a52:	f043 0201 	orr.w	r2, r3, #1
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ff77 	bl	8000956 <LL_ADC_REG_IsConversionOngoing>
 8000a68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6e:	f003 0310 	and.w	r3, r3, #16
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f040 80c8 	bne.w	8000c08 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f040 80c4 	bne.w	8000c08 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a84:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000a88:	f043 0202 	orr.w	r2, r3, #2
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff4b 	bl	8000930 <LL_ADC_IsEnabled>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d10b      	bne.n	8000ab8 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000aa0:	4862      	ldr	r0, [pc, #392]	; (8000c2c <HAL_ADC_Init+0x288>)
 8000aa2:	f7ff ff45 	bl	8000930 <LL_ADC_IsEnabled>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d105      	bne.n	8000ab8 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	485f      	ldr	r0, [pc, #380]	; (8000c30 <HAL_ADC_Init+0x28c>)
 8000ab4:	f7ff fdd6 	bl	8000664 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	7e5b      	ldrb	r3, [r3, #25]
 8000abc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ac2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000ac8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000ace:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ad6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d106      	bne.n	8000af4 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aea:	3b01      	subs	r3, #1
 8000aec:	045b      	lsls	r3, r3, #17
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d009      	beq.n	8000b10 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b00:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b08:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	68da      	ldr	r2, [r3, #12]
 8000b16:	4b47      	ldr	r3, [pc, #284]	; (8000c34 <HAL_ADC_Init+0x290>)
 8000b18:	4013      	ands	r3, r2
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	6812      	ldr	r2, [r2, #0]
 8000b1e:	69b9      	ldr	r1, [r7, #24]
 8000b20:	430b      	orrs	r3, r1
 8000b22:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff14 	bl	8000956 <LL_ADC_REG_IsConversionOngoing>
 8000b2e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff21 	bl	800097c <LL_ADC_INJ_IsConversionOngoing>
 8000b3a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d140      	bne.n	8000bc4 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d13d      	bne.n	8000bc4 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	7e1b      	ldrb	r3, [r3, #24]
 8000b50:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000b52:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b5a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b6a:	f023 0306 	bic.w	r3, r3, #6
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	6812      	ldr	r2, [r2, #0]
 8000b72:	69b9      	ldr	r1, [r7, #24]
 8000b74:	430b      	orrs	r3, r1
 8000b76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d118      	bne.n	8000bb4 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000b8c:	f023 0304 	bic.w	r3, r3, #4
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000b98:	4311      	orrs	r1, r2
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b9e:	4311      	orrs	r1, r2
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f042 0201 	orr.w	r2, r2, #1
 8000bb0:	611a      	str	r2, [r3, #16]
 8000bb2:	e007      	b.n	8000bc4 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	691a      	ldr	r2, [r3, #16]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f022 0201 	bic.w	r2, r2, #1
 8000bc2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d10c      	bne.n	8000be6 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f023 010f 	bic.w	r1, r3, #15
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	1e5a      	subs	r2, r3, #1
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	430a      	orrs	r2, r1
 8000be2:	631a      	str	r2, [r3, #48]	; 0x30
 8000be4:	e007      	b.n	8000bf6 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f022 020f 	bic.w	r2, r2, #15
 8000bf4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfa:	f023 0303 	bic.w	r3, r3, #3
 8000bfe:	f043 0201 	orr.w	r2, r3, #1
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	659a      	str	r2, [r3, #88]	; 0x58
 8000c06:	e007      	b.n	8000c18 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0c:	f043 0210 	orr.w	r2, r3, #16
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000c18:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3720      	adds	r7, #32
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200000d0 	.word	0x200000d0
 8000c28:	053e2d63 	.word	0x053e2d63
 8000c2c:	50040000 	.word	0x50040000
 8000c30:	50040300 	.word	0x50040300
 8000c34:	fff0c007 	.word	0xfff0c007

08000c38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b0b6      	sub	sp, #216	; 0xd8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d101      	bne.n	8000c5a <HAL_ADC_ConfigChannel+0x22>
 8000c56:	2302      	movs	r3, #2
 8000c58:	e3d4      	b.n	8001404 <HAL_ADC_ConfigChannel+0x7cc>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fe75 	bl	8000956 <LL_ADC_REG_IsConversionOngoing>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f040 83b9 	bne.w	80013e6 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b05      	cmp	r3, #5
 8000c7a:	d824      	bhi.n	8000cc6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	3b02      	subs	r3, #2
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d81b      	bhi.n	8000cbe <HAL_ADC_ConfigChannel+0x86>
 8000c86:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <HAL_ADC_ConfigChannel+0x54>)
 8000c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8c:	08000c9d 	.word	0x08000c9d
 8000c90:	08000ca5 	.word	0x08000ca5
 8000c94:	08000cad 	.word	0x08000cad
 8000c98:	08000cb5 	.word	0x08000cb5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	605a      	str	r2, [r3, #4]
          break;
 8000ca2:	e011      	b.n	8000cc8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	2212      	movs	r2, #18
 8000ca8:	605a      	str	r2, [r3, #4]
          break;
 8000caa:	e00d      	b.n	8000cc8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	2218      	movs	r2, #24
 8000cb0:	605a      	str	r2, [r3, #4]
          break;
 8000cb2:	e009      	b.n	8000cc8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cba:	605a      	str	r2, [r3, #4]
          break;
 8000cbc:	e004      	b.n	8000cc8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	2206      	movs	r2, #6
 8000cc2:	605a      	str	r2, [r3, #4]
          break;
 8000cc4:	e000      	b.n	8000cc8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8000cc6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	6859      	ldr	r1, [r3, #4]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	f7ff fd61 	bl	800079c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fe39 	bl	8000956 <LL_ADC_REG_IsConversionOngoing>
 8000ce4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fe45 	bl	800097c <LL_ADC_INJ_IsConversionOngoing>
 8000cf2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000cf6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f040 81c1 	bne.w	8001082 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f040 81bc 	bne.w	8001082 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	d10f      	bne.n	8000d34 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f7ff fd68 	bl	80007f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fd22 	bl	8000776 <LL_ADC_SetSamplingTimeCommonConfig>
 8000d32:	e00e      	b.n	8000d52 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6818      	ldr	r0, [r3, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	6819      	ldr	r1, [r3, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	461a      	mov	r2, r3
 8000d42:	f7ff fd57 	bl	80007f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fd12 	bl	8000776 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	695a      	ldr	r2, [r3, #20]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	08db      	lsrs	r3, r3, #3
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	2b04      	cmp	r3, #4
 8000d72:	d00a      	beq.n	8000d8a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	6919      	ldr	r1, [r3, #16]
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000d84:	f7ff fca2 	bl	80006cc <LL_ADC_SetOffset>
 8000d88:	e17b      	b.n	8001082 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fcbf 	bl	8000714 <LL_ADC_GetOffsetChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d10a      	bne.n	8000db6 <HAL_ADC_ConfigChannel+0x17e>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fcb4 	bl	8000714 <LL_ADC_GetOffsetChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	0e9b      	lsrs	r3, r3, #26
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	e01e      	b.n	8000df4 <HAL_ADC_ConfigChannel+0x1bc>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fca9 	bl	8000714 <LL_ADC_GetOffsetChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000dcc:	fa93 f3a3 	rbit	r3, r3
 8000dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000dd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000ddc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d101      	bne.n	8000de8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8000de4:	2320      	movs	r3, #32
 8000de6:	e004      	b.n	8000df2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8000de8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000dec:	fab3 f383 	clz	r3, r3
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d105      	bne.n	8000e0c <HAL_ADC_ConfigChannel+0x1d4>
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	0e9b      	lsrs	r3, r3, #26
 8000e06:	f003 031f 	and.w	r3, r3, #31
 8000e0a:	e018      	b.n	8000e3e <HAL_ADC_ConfigChannel+0x206>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000e18:	fa93 f3a3 	rbit	r3, r3
 8000e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8000e20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8000e28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d101      	bne.n	8000e34 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8000e30:	2320      	movs	r3, #32
 8000e32:	e004      	b.n	8000e3e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8000e34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e38:	fab3 f383 	clz	r3, r3
 8000e3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d106      	bne.n	8000e50 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fc78 	bl	8000740 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2101      	movs	r1, #1
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fc5c 	bl	8000714 <LL_ADC_GetOffsetChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10a      	bne.n	8000e7c <HAL_ADC_ConfigChannel+0x244>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fc51 	bl	8000714 <LL_ADC_GetOffsetChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	0e9b      	lsrs	r3, r3, #26
 8000e76:	f003 021f 	and.w	r2, r3, #31
 8000e7a:	e01e      	b.n	8000eba <HAL_ADC_ConfigChannel+0x282>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2101      	movs	r1, #1
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fc46 	bl	8000714 <LL_ADC_GetOffsetChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e92:	fa93 f3a3 	rbit	r3, r3
 8000e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8000e9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8000ea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8000eaa:	2320      	movs	r3, #32
 8000eac:	e004      	b.n	8000eb8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8000eae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000eb2:	fab3 f383 	clz	r3, r3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d105      	bne.n	8000ed2 <HAL_ADC_ConfigChannel+0x29a>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	0e9b      	lsrs	r3, r3, #26
 8000ecc:	f003 031f 	and.w	r3, r3, #31
 8000ed0:	e018      	b.n	8000f04 <HAL_ADC_ConfigChannel+0x2cc>
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000ede:	fa93 f3a3 	rbit	r3, r3
 8000ee2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8000ee6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8000eee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8000ef6:	2320      	movs	r3, #32
 8000ef8:	e004      	b.n	8000f04 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8000efa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000efe:	fab3 f383 	clz	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d106      	bne.n	8000f16 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fc15 	bl	8000740 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fbf9 	bl	8000714 <LL_ADC_GetOffsetChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d10a      	bne.n	8000f42 <HAL_ADC_ConfigChannel+0x30a>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2102      	movs	r1, #2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fbee 	bl	8000714 <LL_ADC_GetOffsetChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	0e9b      	lsrs	r3, r3, #26
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	e01e      	b.n	8000f80 <HAL_ADC_ConfigChannel+0x348>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2102      	movs	r1, #2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fbe3 	bl	8000714 <LL_ADC_GetOffsetChannel>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f58:	fa93 f3a3 	rbit	r3, r3
 8000f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8000f60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8000f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8000f70:	2320      	movs	r3, #32
 8000f72:	e004      	b.n	8000f7e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8000f74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f78:	fab3 f383 	clz	r3, r3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d105      	bne.n	8000f98 <HAL_ADC_ConfigChannel+0x360>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	0e9b      	lsrs	r3, r3, #26
 8000f92:	f003 031f 	and.w	r3, r3, #31
 8000f96:	e016      	b.n	8000fc6 <HAL_ADC_ConfigChannel+0x38e>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fa4:	fa93 f3a3 	rbit	r3, r3
 8000fa8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8000faa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8000fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d101      	bne.n	8000fbc <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8000fb8:	2320      	movs	r3, #32
 8000fba:	e004      	b.n	8000fc6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8000fbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fc0:	fab3 f383 	clz	r3, r3
 8000fc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d106      	bne.n	8000fd8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fbb4 	bl	8000740 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2103      	movs	r1, #3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fb98 	bl	8000714 <LL_ADC_GetOffsetChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10a      	bne.n	8001004 <HAL_ADC_ConfigChannel+0x3cc>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fb8d 	bl	8000714 <LL_ADC_GetOffsetChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	0e9b      	lsrs	r3, r3, #26
 8000ffe:	f003 021f 	and.w	r2, r3, #31
 8001002:	e017      	b.n	8001034 <HAL_ADC_ConfigChannel+0x3fc>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2103      	movs	r1, #3
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fb82 	bl	8000714 <LL_ADC_GetOffsetChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001016:	fa93 f3a3 	rbit	r3, r3
 800101a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800101c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800101e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001026:	2320      	movs	r3, #32
 8001028:	e003      	b.n	8001032 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800102a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800102c:	fab3 f383 	clz	r3, r3
 8001030:	b2db      	uxtb	r3, r3
 8001032:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800103c:	2b00      	cmp	r3, #0
 800103e:	d105      	bne.n	800104c <HAL_ADC_ConfigChannel+0x414>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	0e9b      	lsrs	r3, r3, #26
 8001046:	f003 031f 	and.w	r3, r3, #31
 800104a:	e011      	b.n	8001070 <HAL_ADC_ConfigChannel+0x438>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001054:	fa93 f3a3 	rbit	r3, r3
 8001058:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800105a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800105c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800105e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001064:	2320      	movs	r3, #32
 8001066:	e003      	b.n	8001070 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800106a:	fab3 f383 	clz	r3, r3
 800106e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001070:	429a      	cmp	r2, r3
 8001072:	d106      	bne.n	8001082 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2200      	movs	r2, #0
 800107a:	2103      	movs	r1, #3
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fb5f 	bl	8000740 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fc52 	bl	8000930 <LL_ADC_IsEnabled>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	f040 8140 	bne.w	8001314 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	6819      	ldr	r1, [r3, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	461a      	mov	r2, r3
 80010a2:	f7ff fbd3 	bl	800084c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	4a8f      	ldr	r2, [pc, #572]	; (80012e8 <HAL_ADC_ConfigChannel+0x6b0>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	f040 8131 	bne.w	8001314 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10b      	bne.n	80010da <HAL_ADC_ConfigChannel+0x4a2>
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	0e9b      	lsrs	r3, r3, #26
 80010c8:	3301      	adds	r3, #1
 80010ca:	f003 031f 	and.w	r3, r3, #31
 80010ce:	2b09      	cmp	r3, #9
 80010d0:	bf94      	ite	ls
 80010d2:	2301      	movls	r3, #1
 80010d4:	2300      	movhi	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	e019      	b.n	800110e <HAL_ADC_ConfigChannel+0x4d6>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010e2:	fa93 f3a3 	rbit	r3, r3
 80010e6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80010e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010ea:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80010ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80010f2:	2320      	movs	r3, #32
 80010f4:	e003      	b.n	80010fe <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80010f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010f8:	fab3 f383 	clz	r3, r3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	3301      	adds	r3, #1
 8001100:	f003 031f 	and.w	r3, r3, #31
 8001104:	2b09      	cmp	r3, #9
 8001106:	bf94      	ite	ls
 8001108:	2301      	movls	r3, #1
 800110a:	2300      	movhi	r3, #0
 800110c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800110e:	2b00      	cmp	r3, #0
 8001110:	d079      	beq.n	8001206 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800111a:	2b00      	cmp	r3, #0
 800111c:	d107      	bne.n	800112e <HAL_ADC_ConfigChannel+0x4f6>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	0e9b      	lsrs	r3, r3, #26
 8001124:	3301      	adds	r3, #1
 8001126:	069b      	lsls	r3, r3, #26
 8001128:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800112c:	e015      	b.n	800115a <HAL_ADC_ConfigChannel+0x522>
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800113c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800113e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001146:	2320      	movs	r3, #32
 8001148:	e003      	b.n	8001152 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800114a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800114c:	fab3 f383 	clz	r3, r3
 8001150:	b2db      	uxtb	r3, r3
 8001152:	3301      	adds	r3, #1
 8001154:	069b      	lsls	r3, r3, #26
 8001156:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001162:	2b00      	cmp	r3, #0
 8001164:	d109      	bne.n	800117a <HAL_ADC_ConfigChannel+0x542>
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	0e9b      	lsrs	r3, r3, #26
 800116c:	3301      	adds	r3, #1
 800116e:	f003 031f 	and.w	r3, r3, #31
 8001172:	2101      	movs	r1, #1
 8001174:	fa01 f303 	lsl.w	r3, r1, r3
 8001178:	e017      	b.n	80011aa <HAL_ADC_ConfigChannel+0x572>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001182:	fa93 f3a3 	rbit	r3, r3
 8001186:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800118a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800118c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001192:	2320      	movs	r3, #32
 8001194:	e003      	b.n	800119e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001198:	fab3 f383 	clz	r3, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	3301      	adds	r3, #1
 80011a0:	f003 031f 	and.w	r3, r3, #31
 80011a4:	2101      	movs	r1, #1
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	ea42 0103 	orr.w	r1, r2, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10a      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x598>
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	0e9b      	lsrs	r3, r3, #26
 80011c0:	3301      	adds	r3, #1
 80011c2:	f003 021f 	and.w	r2, r3, #31
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	051b      	lsls	r3, r3, #20
 80011ce:	e018      	b.n	8001202 <HAL_ADC_ConfigChannel+0x5ca>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011d8:	fa93 f3a3 	rbit	r3, r3
 80011dc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80011de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80011e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80011e8:	2320      	movs	r3, #32
 80011ea:	e003      	b.n	80011f4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80011ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ee:	fab3 f383 	clz	r3, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	3301      	adds	r3, #1
 80011f6:	f003 021f 	and.w	r2, r3, #31
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001202:	430b      	orrs	r3, r1
 8001204:	e081      	b.n	800130a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800120e:	2b00      	cmp	r3, #0
 8001210:	d107      	bne.n	8001222 <HAL_ADC_ConfigChannel+0x5ea>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	0e9b      	lsrs	r3, r3, #26
 8001218:	3301      	adds	r3, #1
 800121a:	069b      	lsls	r3, r3, #26
 800121c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001220:	e015      	b.n	800124e <HAL_ADC_ConfigChannel+0x616>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800123a:	2320      	movs	r3, #32
 800123c:	e003      	b.n	8001246 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800123e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001240:	fab3 f383 	clz	r3, r3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	3301      	adds	r3, #1
 8001248:	069b      	lsls	r3, r3, #26
 800124a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001256:	2b00      	cmp	r3, #0
 8001258:	d109      	bne.n	800126e <HAL_ADC_ConfigChannel+0x636>
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	0e9b      	lsrs	r3, r3, #26
 8001260:	3301      	adds	r3, #1
 8001262:	f003 031f 	and.w	r3, r3, #31
 8001266:	2101      	movs	r1, #1
 8001268:	fa01 f303 	lsl.w	r3, r1, r3
 800126c:	e017      	b.n	800129e <HAL_ADC_ConfigChannel+0x666>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	fa93 f3a3 	rbit	r3, r3
 800127a:	61fb      	str	r3, [r7, #28]
  return result;
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001286:	2320      	movs	r3, #32
 8001288:	e003      	b.n	8001292 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	fab3 f383 	clz	r3, r3
 8001290:	b2db      	uxtb	r3, r3
 8001292:	3301      	adds	r3, #1
 8001294:	f003 031f 	and.w	r3, r3, #31
 8001298:	2101      	movs	r1, #1
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	ea42 0103 	orr.w	r1, r2, r3
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10d      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x692>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	0e9b      	lsrs	r3, r3, #26
 80012b4:	3301      	adds	r3, #1
 80012b6:	f003 021f 	and.w	r2, r3, #31
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	3b1e      	subs	r3, #30
 80012c2:	051b      	lsls	r3, r3, #20
 80012c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012c8:	e01e      	b.n	8001308 <HAL_ADC_ConfigChannel+0x6d0>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa93 f3a3 	rbit	r3, r3
 80012d6:	613b      	str	r3, [r7, #16]
  return result;
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d104      	bne.n	80012ec <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80012e2:	2320      	movs	r3, #32
 80012e4:	e006      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x6bc>
 80012e6:	bf00      	nop
 80012e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fab3 f383 	clz	r3, r3
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	3301      	adds	r3, #1
 80012f6:	f003 021f 	and.w	r2, r3, #31
 80012fa:	4613      	mov	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4413      	add	r3, r2
 8001300:	3b1e      	subs	r3, #30
 8001302:	051b      	lsls	r3, r3, #20
 8001304:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001308:	430b      	orrs	r3, r1
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	6892      	ldr	r2, [r2, #8]
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fa70 	bl	80007f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b3c      	ldr	r3, [pc, #240]	; (800140c <HAL_ADC_ConfigChannel+0x7d4>)
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d06b      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001320:	483b      	ldr	r0, [pc, #236]	; (8001410 <HAL_ADC_ConfigChannel+0x7d8>)
 8001322:	f7ff f9c5 	bl	80006b0 <LL_ADC_GetCommonPathInternalCh>
 8001326:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a39      	ldr	r2, [pc, #228]	; (8001414 <HAL_ADC_ConfigChannel+0x7dc>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d126      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001334:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001338:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d120      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a34      	ldr	r2, [pc, #208]	; (8001418 <HAL_ADC_ConfigChannel+0x7e0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d156      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800134a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800134e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001352:	4619      	mov	r1, r3
 8001354:	482e      	ldr	r0, [pc, #184]	; (8001410 <HAL_ADC_ConfigChannel+0x7d8>)
 8001356:	f7ff f998 	bl	800068a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <HAL_ADC_ConfigChannel+0x7e4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	099b      	lsrs	r3, r3, #6
 8001360:	4a2f      	ldr	r2, [pc, #188]	; (8001420 <HAL_ADC_ConfigChannel+0x7e8>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	099a      	lsrs	r2, r3, #6
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001372:	e002      	b.n	800137a <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3b01      	subs	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f9      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001380:	e03a      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a27      	ldr	r2, [pc, #156]	; (8001424 <HAL_ADC_ConfigChannel+0x7ec>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d113      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x77c>
 800138c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d10d      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <HAL_ADC_ConfigChannel+0x7e0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d12a      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80013a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013aa:	4619      	mov	r1, r3
 80013ac:	4818      	ldr	r0, [pc, #96]	; (8001410 <HAL_ADC_ConfigChannel+0x7d8>)
 80013ae:	f7ff f96c 	bl	800068a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80013b2:	e021      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1b      	ldr	r2, [pc, #108]	; (8001428 <HAL_ADC_ConfigChannel+0x7f0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d11c      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80013be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80013c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d116      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a12      	ldr	r2, [pc, #72]	; (8001418 <HAL_ADC_ConfigChannel+0x7e0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d111      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80013d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013dc:	4619      	mov	r1, r3
 80013de:	480c      	ldr	r0, [pc, #48]	; (8001410 <HAL_ADC_ConfigChannel+0x7d8>)
 80013e0:	f7ff f953 	bl	800068a <LL_ADC_SetCommonPathInternalCh>
 80013e4:	e008      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ea:	f043 0220 	orr.w	r2, r3, #32
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001400:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001404:	4618      	mov	r0, r3
 8001406:	37d8      	adds	r7, #216	; 0xd8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	80080000 	.word	0x80080000
 8001410:	50040300 	.word	0x50040300
 8001414:	c7520000 	.word	0xc7520000
 8001418:	50040000 	.word	0x50040000
 800141c:	200000d0 	.word	0x200000d0
 8001420:	053e2d63 	.word	0x053e2d63
 8001424:	cb840000 	.word	0xcb840000
 8001428:	80000001 	.word	0x80000001

0800142c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	60d3      	str	r3, [r2, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <__NVIC_GetPriorityGrouping+0x18>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	f003 0307 	and.w	r3, r3, #7
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	db0b      	blt.n	80014ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	f003 021f 	and.w	r2, r3, #31
 80014a8:	4907      	ldr	r1, [pc, #28]	; (80014c8 <__NVIC_EnableIRQ+0x38>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	095b      	lsrs	r3, r3, #5
 80014b0:	2001      	movs	r0, #1
 80014b2:	fa00 f202 	lsl.w	r2, r0, r2
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000e100 	.word	0xe000e100

080014cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	db0a      	blt.n	80014f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	490c      	ldr	r1, [pc, #48]	; (8001518 <__NVIC_SetPriority+0x4c>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f4:	e00a      	b.n	800150c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4908      	ldr	r1, [pc, #32]	; (800151c <__NVIC_SetPriority+0x50>)
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	3b04      	subs	r3, #4
 8001504:	0112      	lsls	r2, r2, #4
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	440b      	add	r3, r1
 800150a:	761a      	strb	r2, [r3, #24]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000e100 	.word	0xe000e100
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f1c3 0307 	rsb	r3, r3, #7
 800153a:	2b04      	cmp	r3, #4
 800153c:	bf28      	it	cs
 800153e:	2304      	movcs	r3, #4
 8001540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3304      	adds	r3, #4
 8001546:	2b06      	cmp	r3, #6
 8001548:	d902      	bls.n	8001550 <NVIC_EncodePriority+0x30>
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3b03      	subs	r3, #3
 800154e:	e000      	b.n	8001552 <NVIC_EncodePriority+0x32>
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	43d9      	mvns	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	4313      	orrs	r3, r2
         );
}
 800157a:	4618      	mov	r0, r3
 800157c:	3724      	adds	r7, #36	; 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ff4c 	bl	800142c <__NVIC_SetPriorityGrouping>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015ae:	f7ff ff61 	bl	8001474 <__NVIC_GetPriorityGrouping>
 80015b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	6978      	ldr	r0, [r7, #20]
 80015ba:	f7ff ffb1 	bl	8001520 <NVIC_EncodePriority>
 80015be:	4602      	mov	r2, r0
 80015c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c4:	4611      	mov	r1, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ff80 	bl	80014cc <__NVIC_SetPriority>
}
 80015cc:	bf00      	nop
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff54 	bl	8001490 <__NVIC_EnableIRQ>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e014      	b.n	800162c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	791b      	ldrb	r3, [r3, #4]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d105      	bne.n	8001618 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f009 fbda 	bl	800adcc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2202      	movs	r2, #2
 800161c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800164a:	d120      	bne.n	800168e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800165a:	d118      	bne.n	800168e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2204      	movs	r2, #4
 8001660:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	f043 0201 	orr.w	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001676:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001686:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f82d 	bl	80016e8 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800169c:	d120      	bne.n	80016e0 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016ac:	d118      	bne.n	80016e0 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2204      	movs	r2, #4
 80016b2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	f043 0202 	orr.w	r2, r3, #2
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80016d8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f94e 	bl	800197c <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	795b      	ldrb	r3, [r3, #5]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_DAC_ConfigChannel+0x1c>
 8001714:	2302      	movs	r3, #2
 8001716:	e12a      	b.n	800196e <HAL_DAC_ConfigChannel+0x272>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2201      	movs	r2, #1
 800171c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2202      	movs	r2, #2
 8001722:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b04      	cmp	r3, #4
 800172a:	d174      	bne.n	8001816 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800172c:	f7fe ff6c 	bl	8000608 <HAL_GetTick>
 8001730:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d134      	bne.n	80017a2 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001738:	e011      	b.n	800175e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800173a:	f7fe ff65 	bl	8000608 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b01      	cmp	r3, #1
 8001746:	d90a      	bls.n	800175e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	f043 0208 	orr.w	r2, r3, #8
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2203      	movs	r2, #3
 8001758:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e107      	b.n	800196e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1e6      	bne.n	800173a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800176c:	2001      	movs	r0, #1
 800176e:	f7fe ff57 	bl	8000620 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	69d2      	ldr	r2, [r2, #28]
 800177a:	641a      	str	r2, [r3, #64]	; 0x40
 800177c:	e01e      	b.n	80017bc <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800177e:	f7fe ff43 	bl	8000608 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b01      	cmp	r3, #1
 800178a:	d90a      	bls.n	80017a2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	f043 0208 	orr.w	r2, r3, #8
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2203      	movs	r2, #3
 800179c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e0e5      	b.n	800196e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	dbe8      	blt.n	800177e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80017ac:	2001      	movs	r0, #1
 80017ae:	f7fe ff37 	bl	8000620 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	69d2      	ldr	r2, [r2, #28]
 80017ba:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	ea02 0103 	and.w	r1, r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	6a1a      	ldr	r2, [r3, #32]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	409a      	lsls	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	21ff      	movs	r1, #255	; 0xff
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	ea02 0103 	and.w	r1, r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f003 0310 	and.w	r3, r3, #16
 800180c:	409a      	lsls	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d11d      	bne.n	800185a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001824:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	221f      	movs	r2, #31
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	4013      	ands	r3, r2
 8001838:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	4313      	orrs	r3, r2
 8001850:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001860:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	2207      	movs	r2, #7
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	4013      	ands	r3, r2
 8001874:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	431a      	orrs	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69fa      	ldr	r2, [r7, #28]
 8001896:	4313      	orrs	r3, r2
 8001898:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6819      	ldr	r1, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	400a      	ands	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	f640 72fe 	movw	r2, #4094	; 0xffe
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	4013      	ands	r3, r2
 80018dc:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018fe:	d104      	bne.n	800190a <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	e018      	b.n	800193c <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d104      	bne.n	800191c <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	e00f      	b.n	800193c <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 800191c:	f002 f900 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8001920:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <HAL_DAC_ConfigChannel+0x27c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d904      	bls.n	8001934 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	e003      	b.n	800193c <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800193a:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6819      	ldr	r1, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	22c0      	movs	r2, #192	; 0xc0
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	400a      	ands	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2201      	movs	r2, #1
 8001964:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3720      	adds	r7, #32
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	04c4b400 	.word	0x04c4b400

0800197c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e08d      	b.n	8001abe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <HAL_DMA_Init+0x138>)
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d80f      	bhi.n	80019ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b45      	ldr	r3, [pc, #276]	; (8001acc <HAL_DMA_Init+0x13c>)
 80019b6:	4413      	add	r3, r2
 80019b8:	4a45      	ldr	r2, [pc, #276]	; (8001ad0 <HAL_DMA_Init+0x140>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	009a      	lsls	r2, r3, #2
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a42      	ldr	r2, [pc, #264]	; (8001ad4 <HAL_DMA_Init+0x144>)
 80019ca:	641a      	str	r2, [r3, #64]	; 0x40
 80019cc:	e00e      	b.n	80019ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b40      	ldr	r3, [pc, #256]	; (8001ad8 <HAL_DMA_Init+0x148>)
 80019d6:	4413      	add	r3, r2
 80019d8:	4a3d      	ldr	r2, [pc, #244]	; (8001ad0 <HAL_DMA_Init+0x140>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	009a      	lsls	r2, r3, #2
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a3c      	ldr	r2, [pc, #240]	; (8001adc <HAL_DMA_Init+0x14c>)
 80019ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2202      	movs	r2, #2
 80019f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f8fe 	bl	8001c40 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a4c:	d102      	bne.n	8001a54 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a68:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d010      	beq.n	8001a94 <HAL_DMA_Init+0x104>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d80c      	bhi.n	8001a94 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f91e 	bl	8001cbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	e008      	b.n	8001aa6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40020407 	.word	0x40020407
 8001acc:	bffdfff8 	.word	0xbffdfff8
 8001ad0:	cccccccd 	.word	0xcccccccd
 8001ad4:	40020000 	.word	0x40020000
 8001ad8:	bffdfbf8 	.word	0xbffdfbf8
 8001adc:	40020400 	.word	0x40020400

08001ae0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afc:	f003 031c 	and.w	r3, r3, #28
 8001b00:	2204      	movs	r2, #4
 8001b02:	409a      	lsls	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d026      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x7a>
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d021      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0320 	and.w	r3, r3, #32
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d107      	bne.n	8001b34 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0204 	bic.w	r2, r2, #4
 8001b32:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b38:	f003 021c 	and.w	r2, r3, #28
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	2104      	movs	r1, #4
 8001b42:	fa01 f202 	lsl.w	r2, r1, r2
 8001b46:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d071      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001b58:	e06c      	b.n	8001c34 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	f003 031c 	and.w	r3, r3, #28
 8001b62:	2202      	movs	r2, #2
 8001b64:	409a      	lsls	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d02e      	beq.n	8001bcc <HAL_DMA_IRQHandler+0xec>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d029      	beq.n	8001bcc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0320 	and.w	r3, r3, #32
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10b      	bne.n	8001b9e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 020a 	bic.w	r2, r2, #10
 8001b94:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f003 021c 	and.w	r2, r3, #28
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	2102      	movs	r1, #2
 8001bac:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d038      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001bca:	e033      	b.n	8001c34 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	f003 031c 	and.w	r3, r3, #28
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d02a      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x156>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d025      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 020e 	bic.w	r2, r2, #14
 8001bf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f003 021c 	and.w	r2, r3, #28
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	2101      	movs	r1, #1
 8001c08:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d004      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
}
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d80a      	bhi.n	8001c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c60:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6493      	str	r3, [r2, #72]	; 0x48
 8001c68:	e007      	b.n	8001c7a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	009a      	lsls	r2, r3, #2
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001c74:	4413      	add	r3, r2
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	3b08      	subs	r3, #8
 8001c82:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001c84:	fba2 2303 	umull	r2, r3, r2, r3
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c90:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	2201      	movs	r2, #1
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	40020407 	.word	0x40020407
 8001cb0:	4002081c 	.word	0x4002081c
 8001cb4:	cccccccd 	.word	0xcccccccd
 8001cb8:	40020880 	.word	0x40020880

08001cbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a08      	ldr	r2, [pc, #32]	; (8001d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001cde:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2201      	movs	r2, #1
 8001cea:	409a      	lsls	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	1000823f 	.word	0x1000823f
 8001d00:	40020940 	.word	0x40020940

08001d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d12:	e166      	b.n	8001fe2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	4013      	ands	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8158 	beq.w	8001fdc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d00b      	beq.n	8001d4c <HAL_GPIO_Init+0x48>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d007      	beq.n	8001d4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d40:	2b11      	cmp	r3, #17
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b12      	cmp	r3, #18
 8001d4a:	d130      	bne.n	8001dae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d82:	2201      	movs	r2, #1
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	091b      	lsrs	r3, r3, #4
 8001d98:	f003 0201 	and.w	r2, r3, #1
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	2203      	movs	r2, #3
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0xea>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b12      	cmp	r3, #18
 8001dec:	d123      	bne.n	8001e36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	08da      	lsrs	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3208      	adds	r2, #8
 8001df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	08da      	lsrs	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3208      	adds	r2, #8
 8001e30:	6939      	ldr	r1, [r7, #16]
 8001e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	2203      	movs	r2, #3
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 0203 	and.w	r2, r3, #3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80b2 	beq.w	8001fdc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e78:	4b61      	ldr	r3, [pc, #388]	; (8002000 <HAL_GPIO_Init+0x2fc>)
 8001e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7c:	4a60      	ldr	r2, [pc, #384]	; (8002000 <HAL_GPIO_Init+0x2fc>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6613      	str	r3, [r2, #96]	; 0x60
 8001e84:	4b5e      	ldr	r3, [pc, #376]	; (8002000 <HAL_GPIO_Init+0x2fc>)
 8001e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e90:	4a5c      	ldr	r2, [pc, #368]	; (8002004 <HAL_GPIO_Init+0x300>)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	220f      	movs	r2, #15
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eba:	d02b      	beq.n	8001f14 <HAL_GPIO_Init+0x210>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a52      	ldr	r2, [pc, #328]	; (8002008 <HAL_GPIO_Init+0x304>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d025      	beq.n	8001f10 <HAL_GPIO_Init+0x20c>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a51      	ldr	r2, [pc, #324]	; (800200c <HAL_GPIO_Init+0x308>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d01f      	beq.n	8001f0c <HAL_GPIO_Init+0x208>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a50      	ldr	r2, [pc, #320]	; (8002010 <HAL_GPIO_Init+0x30c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d019      	beq.n	8001f08 <HAL_GPIO_Init+0x204>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a4f      	ldr	r2, [pc, #316]	; (8002014 <HAL_GPIO_Init+0x310>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d013      	beq.n	8001f04 <HAL_GPIO_Init+0x200>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a4e      	ldr	r2, [pc, #312]	; (8002018 <HAL_GPIO_Init+0x314>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00d      	beq.n	8001f00 <HAL_GPIO_Init+0x1fc>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a4d      	ldr	r2, [pc, #308]	; (800201c <HAL_GPIO_Init+0x318>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d007      	beq.n	8001efc <HAL_GPIO_Init+0x1f8>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a4c      	ldr	r2, [pc, #304]	; (8002020 <HAL_GPIO_Init+0x31c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_GPIO_Init+0x1f4>
 8001ef4:	2307      	movs	r3, #7
 8001ef6:	e00e      	b.n	8001f16 <HAL_GPIO_Init+0x212>
 8001ef8:	2308      	movs	r3, #8
 8001efa:	e00c      	b.n	8001f16 <HAL_GPIO_Init+0x212>
 8001efc:	2306      	movs	r3, #6
 8001efe:	e00a      	b.n	8001f16 <HAL_GPIO_Init+0x212>
 8001f00:	2305      	movs	r3, #5
 8001f02:	e008      	b.n	8001f16 <HAL_GPIO_Init+0x212>
 8001f04:	2304      	movs	r3, #4
 8001f06:	e006      	b.n	8001f16 <HAL_GPIO_Init+0x212>
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e004      	b.n	8001f16 <HAL_GPIO_Init+0x212>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e002      	b.n	8001f16 <HAL_GPIO_Init+0x212>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_GPIO_Init+0x212>
 8001f14:	2300      	movs	r3, #0
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	f002 0203 	and.w	r2, r2, #3
 8001f1c:	0092      	lsls	r2, r2, #2
 8001f1e:	4093      	lsls	r3, r2
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f26:	4937      	ldr	r1, [pc, #220]	; (8002004 <HAL_GPIO_Init+0x300>)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	3302      	adds	r3, #2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f34:	4b3b      	ldr	r3, [pc, #236]	; (8002024 <HAL_GPIO_Init+0x320>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f58:	4a32      	ldr	r2, [pc, #200]	; (8002024 <HAL_GPIO_Init+0x320>)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f5e:	4b31      	ldr	r3, [pc, #196]	; (8002024 <HAL_GPIO_Init+0x320>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f82:	4a28      	ldr	r2, [pc, #160]	; (8002024 <HAL_GPIO_Init+0x320>)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f88:	4b26      	ldr	r3, [pc, #152]	; (8002024 <HAL_GPIO_Init+0x320>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fac:	4a1d      	ldr	r2, [pc, #116]	; (8002024 <HAL_GPIO_Init+0x320>)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fb2:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <HAL_GPIO_Init+0x320>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fd6:	4a13      	ldr	r2, [pc, #76]	; (8002024 <HAL_GPIO_Init+0x320>)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f47f ae91 	bne.w	8001d14 <HAL_GPIO_Init+0x10>
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	371c      	adds	r7, #28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	40010000 	.word	0x40010000
 8002008:	48000400 	.word	0x48000400
 800200c:	48000800 	.word	0x48000800
 8002010:	48000c00 	.word	0x48000c00
 8002014:	48001000 	.word	0x48001000
 8002018:	48001400 	.word	0x48001400
 800201c:	48001800 	.word	0x48001800
 8002020:	48001c00 	.word	0x48001c00
 8002024:	40010400 	.word	0x40010400

08002028 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002036:	e0c9      	b.n	80021cc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002038:	2201      	movs	r2, #1
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80bc 	beq.w	80021c6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800204e:	4a66      	ldr	r2, [pc, #408]	; (80021e8 <HAL_GPIO_DeInit+0x1c0>)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	3302      	adds	r3, #2
 8002056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	220f      	movs	r2, #15
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4013      	ands	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002076:	d02b      	beq.n	80020d0 <HAL_GPIO_DeInit+0xa8>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a5c      	ldr	r2, [pc, #368]	; (80021ec <HAL_GPIO_DeInit+0x1c4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d025      	beq.n	80020cc <HAL_GPIO_DeInit+0xa4>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a5b      	ldr	r2, [pc, #364]	; (80021f0 <HAL_GPIO_DeInit+0x1c8>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d01f      	beq.n	80020c8 <HAL_GPIO_DeInit+0xa0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a5a      	ldr	r2, [pc, #360]	; (80021f4 <HAL_GPIO_DeInit+0x1cc>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d019      	beq.n	80020c4 <HAL_GPIO_DeInit+0x9c>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a59      	ldr	r2, [pc, #356]	; (80021f8 <HAL_GPIO_DeInit+0x1d0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d013      	beq.n	80020c0 <HAL_GPIO_DeInit+0x98>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a58      	ldr	r2, [pc, #352]	; (80021fc <HAL_GPIO_DeInit+0x1d4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d00d      	beq.n	80020bc <HAL_GPIO_DeInit+0x94>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a57      	ldr	r2, [pc, #348]	; (8002200 <HAL_GPIO_DeInit+0x1d8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d007      	beq.n	80020b8 <HAL_GPIO_DeInit+0x90>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a56      	ldr	r2, [pc, #344]	; (8002204 <HAL_GPIO_DeInit+0x1dc>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d101      	bne.n	80020b4 <HAL_GPIO_DeInit+0x8c>
 80020b0:	2307      	movs	r3, #7
 80020b2:	e00e      	b.n	80020d2 <HAL_GPIO_DeInit+0xaa>
 80020b4:	2308      	movs	r3, #8
 80020b6:	e00c      	b.n	80020d2 <HAL_GPIO_DeInit+0xaa>
 80020b8:	2306      	movs	r3, #6
 80020ba:	e00a      	b.n	80020d2 <HAL_GPIO_DeInit+0xaa>
 80020bc:	2305      	movs	r3, #5
 80020be:	e008      	b.n	80020d2 <HAL_GPIO_DeInit+0xaa>
 80020c0:	2304      	movs	r3, #4
 80020c2:	e006      	b.n	80020d2 <HAL_GPIO_DeInit+0xaa>
 80020c4:	2303      	movs	r3, #3
 80020c6:	e004      	b.n	80020d2 <HAL_GPIO_DeInit+0xaa>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e002      	b.n	80020d2 <HAL_GPIO_DeInit+0xaa>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <HAL_GPIO_DeInit+0xaa>
 80020d0:	2300      	movs	r3, #0
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	f002 0203 	and.w	r2, r2, #3
 80020d8:	0092      	lsls	r2, r2, #2
 80020da:	4093      	lsls	r3, r2
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d132      	bne.n	8002148 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80020e2:	4b49      	ldr	r3, [pc, #292]	; (8002208 <HAL_GPIO_DeInit+0x1e0>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	4947      	ldr	r1, [pc, #284]	; (8002208 <HAL_GPIO_DeInit+0x1e0>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80020f0:	4b45      	ldr	r3, [pc, #276]	; (8002208 <HAL_GPIO_DeInit+0x1e0>)
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	4943      	ldr	r1, [pc, #268]	; (8002208 <HAL_GPIO_DeInit+0x1e0>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80020fe:	4b42      	ldr	r3, [pc, #264]	; (8002208 <HAL_GPIO_DeInit+0x1e0>)
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	4940      	ldr	r1, [pc, #256]	; (8002208 <HAL_GPIO_DeInit+0x1e0>)
 8002108:	4013      	ands	r3, r2
 800210a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <HAL_GPIO_DeInit+0x1e0>)
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	43db      	mvns	r3, r3
 8002114:	493c      	ldr	r1, [pc, #240]	; (8002208 <HAL_GPIO_DeInit+0x1e0>)
 8002116:	4013      	ands	r3, r2
 8002118:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	220f      	movs	r2, #15
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800212a:	4a2f      	ldr	r2, [pc, #188]	; (80021e8 <HAL_GPIO_DeInit+0x1c0>)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	3302      	adds	r3, #2
 8002132:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	43da      	mvns	r2, r3
 800213a:	482b      	ldr	r0, [pc, #172]	; (80021e8 <HAL_GPIO_DeInit+0x1c0>)
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	089b      	lsrs	r3, r3, #2
 8002140:	400a      	ands	r2, r1
 8002142:	3302      	adds	r3, #2
 8002144:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2103      	movs	r1, #3
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	08da      	lsrs	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3208      	adds	r2, #8
 8002164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	220f      	movs	r2, #15
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	08d2      	lsrs	r2, r2, #3
 800217c:	4019      	ands	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3208      	adds	r2, #8
 8002182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2103      	movs	r1, #3
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	401a      	ands	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	2101      	movs	r1, #1
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	fa01 f303 	lsl.w	r3, r1, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	401a      	ands	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	2103      	movs	r1, #3
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	401a      	ands	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f47f af2f 	bne.w	8002038 <HAL_GPIO_DeInit+0x10>
  }
}
 80021da:	bf00      	nop
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40010000 	.word	0x40010000
 80021ec:	48000400 	.word	0x48000400
 80021f0:	48000800 	.word	0x48000800
 80021f4:	48000c00 	.word	0x48000c00
 80021f8:	48001000 	.word	0x48001000
 80021fc:	48001400 	.word	0x48001400
 8002200:	48001800 	.word	0x48001800
 8002204:	48001c00 	.word	0x48001c00
 8002208:	40010400 	.word	0x40010400

0800220c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]
 8002218:	4613      	mov	r3, r2
 800221a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800221c:	787b      	ldrb	r3, [r7, #1]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002222:	887a      	ldrh	r2, [r7, #2]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002228:	e002      	b.n	8002230 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800222a:	887a      	ldrh	r2, [r7, #2]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4013      	ands	r3, r2
 8002254:	041a      	lsls	r2, r3, #16
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	43d9      	mvns	r1, r3
 800225a:	887b      	ldrh	r3, [r7, #2]
 800225c:	400b      	ands	r3, r1
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	619a      	str	r2, [r3, #24]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800227c:	695a      	ldr	r2, [r3, #20]
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	4013      	ands	r3, r2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d006      	beq.n	8002294 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002286:	4a05      	ldr	r2, [pc, #20]	; (800229c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	4618      	mov	r0, r3
 8002290:	f008 f97e 	bl	800a590 <HAL_GPIO_EXTI_Callback>
  }
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40010400 	.word	0x40010400

080022a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e081      	b.n	80023b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f008 fdf6 	bl	800aeb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2224      	movs	r2, #36	; 0x24
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0201 	bic.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002300:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d107      	bne.n	800231a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	e006      	b.n	8002328 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002326:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b02      	cmp	r3, #2
 800232e:	d104      	bne.n	800233a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002338:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800234c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800235c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	ea42 0103 	orr.w	r1, r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	021a      	lsls	r2, r3, #8
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69d9      	ldr	r1, [r3, #28]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1a      	ldr	r2, [r3, #32]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2220      	movs	r2, #32
 80023a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e021      	b.n	8002414 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2224      	movs	r2, #36	; 0x24
 80023d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f008 fda9 	bl	800af40 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	4608      	mov	r0, r1
 8002426:	4611      	mov	r1, r2
 8002428:	461a      	mov	r2, r3
 800242a:	4603      	mov	r3, r0
 800242c:	817b      	strh	r3, [r7, #10]
 800242e:	460b      	mov	r3, r1
 8002430:	813b      	strh	r3, [r7, #8]
 8002432:	4613      	mov	r3, r2
 8002434:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b20      	cmp	r3, #32
 8002440:	f040 80f9 	bne.w	8002636 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <HAL_I2C_Mem_Write+0x34>
 800244a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800244c:	2b00      	cmp	r3, #0
 800244e:	d105      	bne.n	800245c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002456:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0ed      	b.n	8002638 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_I2C_Mem_Write+0x4e>
 8002466:	2302      	movs	r3, #2
 8002468:	e0e6      	b.n	8002638 <HAL_I2C_Mem_Write+0x21c>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002472:	f7fe f8c9 	bl	8000608 <HAL_GetTick>
 8002476:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2319      	movs	r3, #25
 800247e:	2201      	movs	r2, #1
 8002480:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 fac3 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0d1      	b.n	8002638 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2221      	movs	r2, #33	; 0x21
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2240      	movs	r2, #64	; 0x40
 80024a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a3a      	ldr	r2, [r7, #32]
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024bc:	88f8      	ldrh	r0, [r7, #6]
 80024be:	893a      	ldrh	r2, [r7, #8]
 80024c0:	8979      	ldrh	r1, [r7, #10]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	9301      	str	r3, [sp, #4]
 80024c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	4603      	mov	r3, r0
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 f9d3 	bl	8002878 <I2C_RequestMemoryWrite>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0a9      	b.n	8002638 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	2bff      	cmp	r3, #255	; 0xff
 80024ec:	d90e      	bls.n	800250c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	22ff      	movs	r2, #255	; 0xff
 80024f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	8979      	ldrh	r1, [r7, #10]
 80024fc:	2300      	movs	r3, #0
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 fba5 	bl	8002c54 <I2C_TransferConfig>
 800250a:	e00f      	b.n	800252c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251a:	b2da      	uxtb	r2, r3
 800251c:	8979      	ldrh	r1, [r7, #10]
 800251e:	2300      	movs	r3, #0
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 fb94 	bl	8002c54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 faad 	bl	8002a90 <I2C_WaitOnTXISFlagUntilTimeout>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e07b      	b.n	8002638 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	781a      	ldrb	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d034      	beq.n	80025e4 <HAL_I2C_Mem_Write+0x1c8>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257e:	2b00      	cmp	r3, #0
 8002580:	d130      	bne.n	80025e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002588:	2200      	movs	r2, #0
 800258a:	2180      	movs	r1, #128	; 0x80
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 fa3f 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e04d      	b.n	8002638 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2bff      	cmp	r3, #255	; 0xff
 80025a4:	d90e      	bls.n	80025c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	22ff      	movs	r2, #255	; 0xff
 80025aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	8979      	ldrh	r1, [r7, #10]
 80025b4:	2300      	movs	r3, #0
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fb49 	bl	8002c54 <I2C_TransferConfig>
 80025c2:	e00f      	b.n	80025e4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	8979      	ldrh	r1, [r7, #10]
 80025d6:	2300      	movs	r3, #0
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 fb38 	bl	8002c54 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d19e      	bne.n	800252c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 fa8c 	bl	8002b10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e01a      	b.n	8002638 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2220      	movs	r2, #32
 8002608:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <HAL_I2C_Mem_Write+0x224>)
 8002616:	400b      	ands	r3, r1
 8002618:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	e000      	b.n	8002638 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002636:	2302      	movs	r3, #2
  }
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	fe00e800 	.word	0xfe00e800

08002644 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af02      	add	r7, sp, #8
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	4608      	mov	r0, r1
 800264e:	4611      	mov	r1, r2
 8002650:	461a      	mov	r2, r3
 8002652:	4603      	mov	r3, r0
 8002654:	817b      	strh	r3, [r7, #10]
 8002656:	460b      	mov	r3, r1
 8002658:	813b      	strh	r3, [r7, #8]
 800265a:	4613      	mov	r3, r2
 800265c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b20      	cmp	r3, #32
 8002668:	f040 80fd 	bne.w	8002866 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_I2C_Mem_Read+0x34>
 8002672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002674:	2b00      	cmp	r3, #0
 8002676:	d105      	bne.n	8002684 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800267e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0f1      	b.n	8002868 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_I2C_Mem_Read+0x4e>
 800268e:	2302      	movs	r3, #2
 8002690:	e0ea      	b.n	8002868 <HAL_I2C_Mem_Read+0x224>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800269a:	f7fd ffb5 	bl	8000608 <HAL_GetTick>
 800269e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2319      	movs	r3, #25
 80026a6:	2201      	movs	r2, #1
 80026a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 f9af 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0d5      	b.n	8002868 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2222      	movs	r2, #34	; 0x22
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2240      	movs	r2, #64	; 0x40
 80026c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a3a      	ldr	r2, [r7, #32]
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026e4:	88f8      	ldrh	r0, [r7, #6]
 80026e6:	893a      	ldrh	r2, [r7, #8]
 80026e8:	8979      	ldrh	r1, [r7, #10]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	4603      	mov	r3, r0
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f913 	bl	8002920 <I2C_RequestMemoryRead>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0ad      	b.n	8002868 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	2bff      	cmp	r3, #255	; 0xff
 8002714:	d90e      	bls.n	8002734 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	22ff      	movs	r2, #255	; 0xff
 800271a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002720:	b2da      	uxtb	r2, r3
 8002722:	8979      	ldrh	r1, [r7, #10]
 8002724:	4b52      	ldr	r3, [pc, #328]	; (8002870 <HAL_I2C_Mem_Read+0x22c>)
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 fa91 	bl	8002c54 <I2C_TransferConfig>
 8002732:	e00f      	b.n	8002754 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002742:	b2da      	uxtb	r2, r3
 8002744:	8979      	ldrh	r1, [r7, #10]
 8002746:	4b4a      	ldr	r3, [pc, #296]	; (8002870 <HAL_I2C_Mem_Read+0x22c>)
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fa80 	bl	8002c54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	2200      	movs	r2, #0
 800275c:	2104      	movs	r1, #4
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f956 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e07c      	b.n	8002868 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d034      	beq.n	8002814 <HAL_I2C_Mem_Read+0x1d0>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d130      	bne.n	8002814 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	2200      	movs	r2, #0
 80027ba:	2180      	movs	r1, #128	; 0x80
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f927 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e04d      	b.n	8002868 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2bff      	cmp	r3, #255	; 0xff
 80027d4:	d90e      	bls.n	80027f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	22ff      	movs	r2, #255	; 0xff
 80027da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	8979      	ldrh	r1, [r7, #10]
 80027e4:	2300      	movs	r3, #0
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fa31 	bl	8002c54 <I2C_TransferConfig>
 80027f2:	e00f      	b.n	8002814 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002802:	b2da      	uxtb	r2, r3
 8002804:	8979      	ldrh	r1, [r7, #10]
 8002806:	2300      	movs	r3, #0
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fa20 	bl	8002c54 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d19a      	bne.n	8002754 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f974 	bl	8002b10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e01a      	b.n	8002868 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2220      	movs	r2, #32
 8002838:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6859      	ldr	r1, [r3, #4]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_I2C_Mem_Read+0x230>)
 8002846:	400b      	ands	r3, r1
 8002848:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e000      	b.n	8002868 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002866:	2302      	movs	r3, #2
  }
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	80002400 	.word	0x80002400
 8002874:	fe00e800 	.word	0xfe00e800

08002878 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	4608      	mov	r0, r1
 8002882:	4611      	mov	r1, r2
 8002884:	461a      	mov	r2, r3
 8002886:	4603      	mov	r3, r0
 8002888:	817b      	strh	r3, [r7, #10]
 800288a:	460b      	mov	r3, r1
 800288c:	813b      	strh	r3, [r7, #8]
 800288e:	4613      	mov	r3, r2
 8002890:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	8979      	ldrh	r1, [r7, #10]
 8002898:	4b20      	ldr	r3, [pc, #128]	; (800291c <I2C_RequestMemoryWrite+0xa4>)
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f9d7 	bl	8002c54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	69b9      	ldr	r1, [r7, #24]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f8f0 	bl	8002a90 <I2C_WaitOnTXISFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e02c      	b.n	8002914 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d105      	bne.n	80028cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028c0:	893b      	ldrh	r3, [r7, #8]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	629a      	str	r2, [r3, #40]	; 0x28
 80028ca:	e015      	b.n	80028f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028cc:	893b      	ldrh	r3, [r7, #8]
 80028ce:	0a1b      	lsrs	r3, r3, #8
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028da:	69fa      	ldr	r2, [r7, #28]
 80028dc:	69b9      	ldr	r1, [r7, #24]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f8d6 	bl	8002a90 <I2C_WaitOnTXISFlagUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e012      	b.n	8002914 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028ee:	893b      	ldrh	r3, [r7, #8]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2200      	movs	r2, #0
 8002900:	2180      	movs	r1, #128	; 0x80
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f884 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	80002000 	.word	0x80002000

08002920 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	4608      	mov	r0, r1
 800292a:	4611      	mov	r1, r2
 800292c:	461a      	mov	r2, r3
 800292e:	4603      	mov	r3, r0
 8002930:	817b      	strh	r3, [r7, #10]
 8002932:	460b      	mov	r3, r1
 8002934:	813b      	strh	r3, [r7, #8]
 8002936:	4613      	mov	r3, r2
 8002938:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	8979      	ldrh	r1, [r7, #10]
 8002940:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <I2C_RequestMemoryRead+0xa4>)
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	2300      	movs	r3, #0
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f984 	bl	8002c54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800294c:	69fa      	ldr	r2, [r7, #28]
 800294e:	69b9      	ldr	r1, [r7, #24]
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f89d 	bl	8002a90 <I2C_WaitOnTXISFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e02c      	b.n	80029ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002960:	88fb      	ldrh	r3, [r7, #6]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d105      	bne.n	8002972 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002966:	893b      	ldrh	r3, [r7, #8]
 8002968:	b2da      	uxtb	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	629a      	str	r2, [r3, #40]	; 0x28
 8002970:	e015      	b.n	800299e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002972:	893b      	ldrh	r3, [r7, #8]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	b29b      	uxth	r3, r3
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	69b9      	ldr	r1, [r7, #24]
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f883 	bl	8002a90 <I2C_WaitOnTXISFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e012      	b.n	80029ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002994:	893b      	ldrh	r3, [r7, #8]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	2200      	movs	r2, #0
 80029a6:	2140      	movs	r1, #64	; 0x40
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f831 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	80002000 	.word	0x80002000

080029c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d103      	bne.n	80029e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2200      	movs	r2, #0
 80029e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d007      	beq.n	8002a04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	619a      	str	r2, [r3, #24]
  }
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a20:	e022      	b.n	8002a68 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a28:	d01e      	beq.n	8002a68 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2a:	f7fd fded 	bl	8000608 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d302      	bcc.n	8002a40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d113      	bne.n	8002a68 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a44:	f043 0220 	orr.w	r2, r3, #32
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e00f      	b.n	8002a88 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	4013      	ands	r3, r2
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d0cd      	beq.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a9c:	e02c      	b.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f870 	bl	8002b88 <I2C_IsAcknowledgeFailed>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e02a      	b.n	8002b08 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d01e      	beq.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aba:	f7fd fda5 	bl	8000608 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d302      	bcc.n	8002ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d113      	bne.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	f043 0220 	orr.w	r2, r3, #32
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e007      	b.n	8002b08 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d1cb      	bne.n	8002a9e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b1c:	e028      	b.n	8002b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f830 	bl	8002b88 <I2C_IsAcknowledgeFailed>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e026      	b.n	8002b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b32:	f7fd fd69 	bl	8000608 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d302      	bcc.n	8002b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d113      	bne.n	8002b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4c:	f043 0220 	orr.w	r2, r3, #32
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e007      	b.n	8002b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b20      	cmp	r3, #32
 8002b7c:	d1cf      	bne.n	8002b1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b10      	cmp	r3, #16
 8002ba0:	d151      	bne.n	8002c46 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba2:	e022      	b.n	8002bea <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002baa:	d01e      	beq.n	8002bea <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bac:	f7fd fd2c 	bl	8000608 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d302      	bcc.n	8002bc2 <I2C_IsAcknowledgeFailed+0x3a>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d113      	bne.n	8002bea <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	f043 0220 	orr.w	r2, r3, #32
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e02e      	b.n	8002c48 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d1d5      	bne.n	8002ba4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2220      	movs	r2, #32
 8002c06:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f7ff fedd 	bl	80029c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <I2C_IsAcknowledgeFailed+0xc8>)
 8002c1a:	400b      	ands	r3, r1
 8002c1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f043 0204 	orr.w	r2, r3, #4
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	fe00e800 	.word	0xfe00e800

08002c54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	817b      	strh	r3, [r7, #10]
 8002c62:	4613      	mov	r3, r2
 8002c64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	0d5b      	lsrs	r3, r3, #21
 8002c70:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c74:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <I2C_TransferConfig+0x58>)
 8002c76:	430b      	orrs	r3, r1
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	ea02 0103 	and.w	r1, r2, r3
 8002c7e:	897b      	ldrh	r3, [r7, #10]
 8002c80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c84:	7a7b      	ldrb	r3, [r7, #9]
 8002c86:	041b      	lsls	r3, r3, #16
 8002c88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002c9e:	bf00      	nop
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	03ff63ff 	.word	0x03ff63ff

08002cb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d138      	bne.n	8002d38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e032      	b.n	8002d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2224      	movs	r2, #36	; 0x24
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6819      	ldr	r1, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e000      	b.n	8002d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d38:	2302      	movs	r3, #2
  }
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b085      	sub	sp, #20
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d139      	bne.n	8002dd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e033      	b.n	8002dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2224      	movs	r2, #36	; 0x24
 8002d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	e000      	b.n	8002dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dd0:	2302      	movs	r3, #2
  }
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002de4:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df0:	d102      	bne.n	8002df8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002df6:	e00b      	b.n	8002e10 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002df8:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e06:	d102      	bne.n	8002e0e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e0c:	e000      	b.n	8002e10 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002e0e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40007000 	.word	0x40007000

08002e20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d141      	bne.n	8002eb2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e2e:	4b4b      	ldr	r3, [pc, #300]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3a:	d131      	bne.n	8002ea0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e3c:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e42:	4a46      	ldr	r2, [pc, #280]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e4c:	4b43      	ldr	r3, [pc, #268]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e54:	4a41      	ldr	r2, [pc, #260]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002e5c:	4b40      	ldr	r3, [pc, #256]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2232      	movs	r2, #50	; 0x32
 8002e62:	fb02 f303 	mul.w	r3, r2, r3
 8002e66:	4a3f      	ldr	r2, [pc, #252]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e68:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6c:	0c9b      	lsrs	r3, r3, #18
 8002e6e:	3301      	adds	r3, #1
 8002e70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e72:	e002      	b.n	8002e7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e7a:	4b38      	ldr	r3, [pc, #224]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e86:	d102      	bne.n	8002e8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f2      	bne.n	8002e74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e8e:	4b33      	ldr	r3, [pc, #204]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9a:	d158      	bne.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e057      	b.n	8002f50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ea0:	4b2e      	ldr	r3, [pc, #184]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea6:	4a2d      	ldr	r2, [pc, #180]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002eb0:	e04d      	b.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb8:	d141      	bne.n	8002f3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eba:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec6:	d131      	bne.n	8002f2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ec8:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ece:	4a23      	ldr	r2, [pc, #140]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ed8:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ee0:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ee6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ee8:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2232      	movs	r2, #50	; 0x32
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	4a1c      	ldr	r2, [pc, #112]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	0c9b      	lsrs	r3, r3, #18
 8002efa:	3301      	adds	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002efe:	e002      	b.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f06:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f12:	d102      	bne.n	8002f1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f2      	bne.n	8002f00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f26:	d112      	bne.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e011      	b.n	8002f50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f3c:	e007      	b.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f3e:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f46:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f4c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	40007000 	.word	0x40007000
 8002f60:	200000d0 	.word	0x200000d0
 8002f64:	431bde83 	.word	0x431bde83

08002f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d102      	bne.n	8002f7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f000 bc16 	b.w	80037a8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7c:	4ba0      	ldr	r3, [pc, #640]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f86:	4b9e      	ldr	r3, [pc, #632]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80e4 	beq.w	8003166 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d007      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x4c>
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	f040 808b 	bne.w	80030c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	f040 8087 	bne.w	80030c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fb4:	4b92      	ldr	r3, [pc, #584]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_OscConfig+0x64>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e3ed      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1a      	ldr	r2, [r3, #32]
 8002fd0:	4b8b      	ldr	r3, [pc, #556]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x7e>
 8002fdc:	4b88      	ldr	r3, [pc, #544]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe4:	e005      	b.n	8002ff2 <HAL_RCC_OscConfig+0x8a>
 8002fe6:	4b86      	ldr	r3, [pc, #536]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8002fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d223      	bcs.n	800303e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fdfa 	bl	8003bf4 <RCC_SetFlashLatencyFromMSIRange>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e3ce      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800300a:	4b7d      	ldr	r3, [pc, #500]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a7c      	ldr	r2, [pc, #496]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003010:	f043 0308 	orr.w	r3, r3, #8
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b7a      	ldr	r3, [pc, #488]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	4977      	ldr	r1, [pc, #476]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003024:	4313      	orrs	r3, r2
 8003026:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003028:	4b75      	ldr	r3, [pc, #468]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	021b      	lsls	r3, r3, #8
 8003036:	4972      	ldr	r1, [pc, #456]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003038:	4313      	orrs	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
 800303c:	e025      	b.n	800308a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800303e:	4b70      	ldr	r3, [pc, #448]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a6f      	ldr	r2, [pc, #444]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003044:	f043 0308 	orr.w	r3, r3, #8
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	4b6d      	ldr	r3, [pc, #436]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	496a      	ldr	r1, [pc, #424]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800305c:	4b68      	ldr	r3, [pc, #416]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	4965      	ldr	r1, [pc, #404]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fdba 	bl	8003bf4 <RCC_SetFlashLatencyFromMSIRange>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e38e      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800308a:	f000 fcbf 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 800308e:	4601      	mov	r1, r0
 8003090:	4b5b      	ldr	r3, [pc, #364]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	4a5a      	ldr	r2, [pc, #360]	; (8003204 <HAL_RCC_OscConfig+0x29c>)
 800309c:	5cd3      	ldrb	r3, [r2, r3]
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	fa21 f303 	lsr.w	r3, r1, r3
 80030a6:	4a58      	ldr	r2, [pc, #352]	; (8003208 <HAL_RCC_OscConfig+0x2a0>)
 80030a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030aa:	4b58      	ldr	r3, [pc, #352]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f007 ffd2 	bl	800b058 <HAL_InitTick>
 80030b4:	4603      	mov	r3, r0
 80030b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d052      	beq.n	8003164 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	e372      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d032      	beq.n	8003130 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030ca:	4b4d      	ldr	r3, [pc, #308]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a4c      	ldr	r2, [pc, #304]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030d6:	f7fd fa97 	bl	8000608 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030de:	f7fd fa93 	bl	8000608 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e35b      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030f0:	4b43      	ldr	r3, [pc, #268]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030fc:	4b40      	ldr	r3, [pc, #256]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a3f      	ldr	r2, [pc, #252]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003102:	f043 0308 	orr.w	r3, r3, #8
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	493a      	ldr	r1, [pc, #232]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800311a:	4b39      	ldr	r3, [pc, #228]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	4935      	ldr	r1, [pc, #212]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]
 800312e:	e01a      	b.n	8003166 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003130:	4b33      	ldr	r3, [pc, #204]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a32      	ldr	r2, [pc, #200]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800313c:	f7fd fa64 	bl	8000608 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003144:	f7fd fa60 	bl	8000608 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e328      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003156:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x1dc>
 8003162:	e000      	b.n	8003166 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003164:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d073      	beq.n	800325a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b08      	cmp	r3, #8
 8003176:	d005      	beq.n	8003184 <HAL_RCC_OscConfig+0x21c>
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2b0c      	cmp	r3, #12
 800317c:	d10e      	bne.n	800319c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b03      	cmp	r3, #3
 8003182:	d10b      	bne.n	800319c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003184:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d063      	beq.n	8003258 <HAL_RCC_OscConfig+0x2f0>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d15f      	bne.n	8003258 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e305      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a4:	d106      	bne.n	80031b4 <HAL_RCC_OscConfig+0x24c>
 80031a6:	4b16      	ldr	r3, [pc, #88]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a15      	ldr	r2, [pc, #84]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e01d      	b.n	80031f0 <HAL_RCC_OscConfig+0x288>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x270>
 80031be:	4b10      	ldr	r3, [pc, #64]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e00b      	b.n	80031f0 <HAL_RCC_OscConfig+0x288>
 80031d8:	4b09      	ldr	r3, [pc, #36]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a08      	ldr	r2, [pc, #32]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a05      	ldr	r2, [pc, #20]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d01b      	beq.n	8003230 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fd fa06 	bl	8000608 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031fe:	e010      	b.n	8003222 <HAL_RCC_OscConfig+0x2ba>
 8003200:	40021000 	.word	0x40021000
 8003204:	0800bc1c 	.word	0x0800bc1c
 8003208:	200000d0 	.word	0x200000d0
 800320c:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003210:	f7fd f9fa 	bl	8000608 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e2c2      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003222:	4baf      	ldr	r3, [pc, #700]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0x2a8>
 800322e:	e014      	b.n	800325a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fd f9ea 	bl	8000608 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003238:	f7fd f9e6 	bl	8000608 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	; 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e2ae      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800324a:	4ba5      	ldr	r3, [pc, #660]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x2d0>
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d060      	beq.n	8003328 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b04      	cmp	r3, #4
 800326a:	d005      	beq.n	8003278 <HAL_RCC_OscConfig+0x310>
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d119      	bne.n	80032a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d116      	bne.n	80032a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003278:	4b99      	ldr	r3, [pc, #612]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_RCC_OscConfig+0x328>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e28b      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003290:	4b93      	ldr	r3, [pc, #588]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	4990      	ldr	r1, [pc, #576]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a4:	e040      	b.n	8003328 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d023      	beq.n	80032f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ae:	4b8c      	ldr	r3, [pc, #560]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a8b      	ldr	r2, [pc, #556]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fd f9a5 	bl	8000608 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fd f9a1 	bl	8000608 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e269      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d4:	4b82      	ldr	r3, [pc, #520]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e0:	4b7f      	ldr	r3, [pc, #508]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	061b      	lsls	r3, r3, #24
 80032ee:	497c      	ldr	r1, [pc, #496]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
 80032f4:	e018      	b.n	8003328 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f6:	4b7a      	ldr	r3, [pc, #488]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a79      	ldr	r2, [pc, #484]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7fd f981 	bl	8000608 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330a:	f7fd f97d 	bl	8000608 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e245      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800331c:	4b70      	ldr	r3, [pc, #448]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f0      	bne.n	800330a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d03c      	beq.n	80033ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01c      	beq.n	8003376 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800333c:	4b68      	ldr	r3, [pc, #416]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800333e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003342:	4a67      	ldr	r2, [pc, #412]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fd f95c 	bl	8000608 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003354:	f7fd f958 	bl	8000608 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e220      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003366:	4b5e      	ldr	r3, [pc, #376]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0ef      	beq.n	8003354 <HAL_RCC_OscConfig+0x3ec>
 8003374:	e01b      	b.n	80033ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003376:	4b5a      	ldr	r3, [pc, #360]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337c:	4a58      	ldr	r2, [pc, #352]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003386:	f7fd f93f 	bl	8000608 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338e:	f7fd f93b 	bl	8000608 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e203      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033a0:	4b4f      	ldr	r3, [pc, #316]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80033a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1ef      	bne.n	800338e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80a6 	beq.w	8003508 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033bc:	2300      	movs	r3, #0
 80033be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033c0:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80033c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10d      	bne.n	80033e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033cc:	4b44      	ldr	r3, [pc, #272]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80033ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d0:	4a43      	ldr	r2, [pc, #268]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d6:	6593      	str	r3, [r2, #88]	; 0x58
 80033d8:	4b41      	ldr	r3, [pc, #260]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e4:	2301      	movs	r3, #1
 80033e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e8:	4b3e      	ldr	r3, [pc, #248]	; (80034e4 <HAL_RCC_OscConfig+0x57c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d118      	bne.n	8003426 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033f4:	4b3b      	ldr	r3, [pc, #236]	; (80034e4 <HAL_RCC_OscConfig+0x57c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a3a      	ldr	r2, [pc, #232]	; (80034e4 <HAL_RCC_OscConfig+0x57c>)
 80033fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003400:	f7fd f902 	bl	8000608 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003408:	f7fd f8fe 	bl	8000608 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e1c6      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800341a:	4b32      	ldr	r3, [pc, #200]	; (80034e4 <HAL_RCC_OscConfig+0x57c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d108      	bne.n	8003440 <HAL_RCC_OscConfig+0x4d8>
 800342e:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003434:	4a2a      	ldr	r2, [pc, #168]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800343e:	e024      	b.n	800348a <HAL_RCC_OscConfig+0x522>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b05      	cmp	r3, #5
 8003446:	d110      	bne.n	800346a <HAL_RCC_OscConfig+0x502>
 8003448:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344e:	4a24      	ldr	r2, [pc, #144]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003450:	f043 0304 	orr.w	r3, r3, #4
 8003454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003458:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	4a20      	ldr	r2, [pc, #128]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003468:	e00f      	b.n	800348a <HAL_RCC_OscConfig+0x522>
 800346a:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003470:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800347a:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003480:	4a17      	ldr	r2, [pc, #92]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003482:	f023 0304 	bic.w	r3, r3, #4
 8003486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d016      	beq.n	80034c0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003492:	f7fd f8b9 	bl	8000608 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349a:	f7fd f8b5 	bl	8000608 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e17b      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0ed      	beq.n	800349a <HAL_RCC_OscConfig+0x532>
 80034be:	e01a      	b.n	80034f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c0:	f7fd f8a2 	bl	8000608 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034c6:	e00f      	b.n	80034e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c8:	f7fd f89e 	bl	8000608 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d906      	bls.n	80034e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e164      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
 80034de:	bf00      	nop
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034e8:	4ba8      	ldr	r3, [pc, #672]	; (800378c <HAL_RCC_OscConfig+0x824>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e8      	bne.n	80034c8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f6:	7ffb      	ldrb	r3, [r7, #31]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d105      	bne.n	8003508 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fc:	4ba3      	ldr	r3, [pc, #652]	; (800378c <HAL_RCC_OscConfig+0x824>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003500:	4aa2      	ldr	r2, [pc, #648]	; (800378c <HAL_RCC_OscConfig+0x824>)
 8003502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003506:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d03c      	beq.n	800358e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01c      	beq.n	8003556 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800351c:	4b9b      	ldr	r3, [pc, #620]	; (800378c <HAL_RCC_OscConfig+0x824>)
 800351e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003522:	4a9a      	ldr	r2, [pc, #616]	; (800378c <HAL_RCC_OscConfig+0x824>)
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352c:	f7fd f86c 	bl	8000608 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003534:	f7fd f868 	bl	8000608 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e130      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003546:	4b91      	ldr	r3, [pc, #580]	; (800378c <HAL_RCC_OscConfig+0x824>)
 8003548:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0ef      	beq.n	8003534 <HAL_RCC_OscConfig+0x5cc>
 8003554:	e01b      	b.n	800358e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003556:	4b8d      	ldr	r3, [pc, #564]	; (800378c <HAL_RCC_OscConfig+0x824>)
 8003558:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800355c:	4a8b      	ldr	r2, [pc, #556]	; (800378c <HAL_RCC_OscConfig+0x824>)
 800355e:	f023 0301 	bic.w	r3, r3, #1
 8003562:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fd f84f 	bl	8000608 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800356e:	f7fd f84b 	bl	8000608 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e113      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003580:	4b82      	ldr	r3, [pc, #520]	; (800378c <HAL_RCC_OscConfig+0x824>)
 8003582:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1ef      	bne.n	800356e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 8107 	beq.w	80037a6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	2b02      	cmp	r3, #2
 800359e:	f040 80cb 	bne.w	8003738 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035a2:	4b7a      	ldr	r3, [pc, #488]	; (800378c <HAL_RCC_OscConfig+0x824>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f003 0203 	and.w	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d12c      	bne.n	8003610 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	3b01      	subs	r3, #1
 80035c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d123      	bne.n	8003610 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d11b      	bne.n	8003610 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d113      	bne.n	8003610 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f2:	085b      	lsrs	r3, r3, #1
 80035f4:	3b01      	subs	r3, #1
 80035f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d109      	bne.n	8003610 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	3b01      	subs	r3, #1
 800360a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d06d      	beq.n	80036ec <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2b0c      	cmp	r3, #12
 8003614:	d068      	beq.n	80036e8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003616:	4b5d      	ldr	r3, [pc, #372]	; (800378c <HAL_RCC_OscConfig+0x824>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d105      	bne.n	800362e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003622:	4b5a      	ldr	r3, [pc, #360]	; (800378c <HAL_RCC_OscConfig+0x824>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e0ba      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003632:	4b56      	ldr	r3, [pc, #344]	; (800378c <HAL_RCC_OscConfig+0x824>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a55      	ldr	r2, [pc, #340]	; (800378c <HAL_RCC_OscConfig+0x824>)
 8003638:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800363c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800363e:	f7fc ffe3 	bl	8000608 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003646:	f7fc ffdf 	bl	8000608 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e0a7      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003658:	4b4c      	ldr	r3, [pc, #304]	; (800378c <HAL_RCC_OscConfig+0x824>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1f0      	bne.n	8003646 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003664:	4b49      	ldr	r3, [pc, #292]	; (800378c <HAL_RCC_OscConfig+0x824>)
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	4b49      	ldr	r3, [pc, #292]	; (8003790 <HAL_RCC_OscConfig+0x828>)
 800366a:	4013      	ands	r3, r2
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003674:	3a01      	subs	r2, #1
 8003676:	0112      	lsls	r2, r2, #4
 8003678:	4311      	orrs	r1, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800367e:	0212      	lsls	r2, r2, #8
 8003680:	4311      	orrs	r1, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003686:	0852      	lsrs	r2, r2, #1
 8003688:	3a01      	subs	r2, #1
 800368a:	0552      	lsls	r2, r2, #21
 800368c:	4311      	orrs	r1, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003692:	0852      	lsrs	r2, r2, #1
 8003694:	3a01      	subs	r2, #1
 8003696:	0652      	lsls	r2, r2, #25
 8003698:	4311      	orrs	r1, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800369e:	06d2      	lsls	r2, r2, #27
 80036a0:	430a      	orrs	r2, r1
 80036a2:	493a      	ldr	r1, [pc, #232]	; (800378c <HAL_RCC_OscConfig+0x824>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036a8:	4b38      	ldr	r3, [pc, #224]	; (800378c <HAL_RCC_OscConfig+0x824>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a37      	ldr	r2, [pc, #220]	; (800378c <HAL_RCC_OscConfig+0x824>)
 80036ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036b4:	4b35      	ldr	r3, [pc, #212]	; (800378c <HAL_RCC_OscConfig+0x824>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4a34      	ldr	r2, [pc, #208]	; (800378c <HAL_RCC_OscConfig+0x824>)
 80036ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036c0:	f7fc ffa2 	bl	8000608 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fc ff9e 	bl	8000608 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e066      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036da:	4b2c      	ldr	r3, [pc, #176]	; (800378c <HAL_RCC_OscConfig+0x824>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036e6:	e05e      	b.n	80037a6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e05d      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ec:	4b27      	ldr	r3, [pc, #156]	; (800378c <HAL_RCC_OscConfig+0x824>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d156      	bne.n	80037a6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036f8:	4b24      	ldr	r3, [pc, #144]	; (800378c <HAL_RCC_OscConfig+0x824>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a23      	ldr	r2, [pc, #140]	; (800378c <HAL_RCC_OscConfig+0x824>)
 80036fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003702:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003704:	4b21      	ldr	r3, [pc, #132]	; (800378c <HAL_RCC_OscConfig+0x824>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a20      	ldr	r2, [pc, #128]	; (800378c <HAL_RCC_OscConfig+0x824>)
 800370a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800370e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003710:	f7fc ff7a 	bl	8000608 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003718:	f7fc ff76 	bl	8000608 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e03e      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372a:	4b18      	ldr	r3, [pc, #96]	; (800378c <HAL_RCC_OscConfig+0x824>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x7b0>
 8003736:	e036      	b.n	80037a6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b0c      	cmp	r3, #12
 800373c:	d031      	beq.n	80037a2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b13      	ldr	r3, [pc, #76]	; (800378c <HAL_RCC_OscConfig+0x824>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a12      	ldr	r2, [pc, #72]	; (800378c <HAL_RCC_OscConfig+0x824>)
 8003744:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003748:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800374a:	4b10      	ldr	r3, [pc, #64]	; (800378c <HAL_RCC_OscConfig+0x824>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d105      	bne.n	8003762 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003756:	4b0d      	ldr	r3, [pc, #52]	; (800378c <HAL_RCC_OscConfig+0x824>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	4a0c      	ldr	r2, [pc, #48]	; (800378c <HAL_RCC_OscConfig+0x824>)
 800375c:	f023 0303 	bic.w	r3, r3, #3
 8003760:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003762:	4b0a      	ldr	r3, [pc, #40]	; (800378c <HAL_RCC_OscConfig+0x824>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	4a09      	ldr	r2, [pc, #36]	; (800378c <HAL_RCC_OscConfig+0x824>)
 8003768:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800376c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003770:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003772:	f7fc ff49 	bl	8000608 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003778:	e00c      	b.n	8003794 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377a:	f7fc ff45 	bl	8000608 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d905      	bls.n	8003794 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e00d      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
 800378c:	40021000 	.word	0x40021000
 8003790:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003794:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_RCC_OscConfig+0x848>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1ec      	bne.n	800377a <HAL_RCC_OscConfig+0x812>
 80037a0:	e001      	b.n	80037a6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3720      	adds	r7, #32
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000

080037b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e10f      	b.n	80039ec <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037cc:	4b89      	ldr	r3, [pc, #548]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d910      	bls.n	80037fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037da:	4b86      	ldr	r3, [pc, #536]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f023 020f 	bic.w	r2, r3, #15
 80037e2:	4984      	ldr	r1, [pc, #528]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	4b82      	ldr	r3, [pc, #520]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d001      	beq.n	80037fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0f7      	b.n	80039ec <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8089 	beq.w	800391c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b03      	cmp	r3, #3
 8003810:	d133      	bne.n	800387a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003812:	4b79      	ldr	r3, [pc, #484]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0e4      	b.n	80039ec <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003822:	f000 fa41 	bl	8003ca8 <RCC_GetSysClockFreqFromPLLSource>
 8003826:	4602      	mov	r2, r0
 8003828:	4b74      	ldr	r3, [pc, #464]	; (80039fc <HAL_RCC_ClockConfig+0x248>)
 800382a:	429a      	cmp	r2, r3
 800382c:	d955      	bls.n	80038da <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800382e:	4b72      	ldr	r3, [pc, #456]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800383a:	4b6f      	ldr	r3, [pc, #444]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003842:	4a6d      	ldr	r2, [pc, #436]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003848:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	e044      	b.n	80038da <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d03e      	beq.n	80038da <HAL_RCC_ClockConfig+0x126>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d13a      	bne.n	80038da <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003864:	4b64      	ldr	r3, [pc, #400]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800386c:	4a62      	ldr	r2, [pc, #392]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 800386e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003872:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003874:	2380      	movs	r3, #128	; 0x80
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	e02f      	b.n	80038da <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d107      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003882:	4b5d      	ldr	r3, [pc, #372]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d115      	bne.n	80038ba <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e0ac      	b.n	80039ec <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d107      	bne.n	80038aa <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800389a:	4b57      	ldr	r3, [pc, #348]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e0a0      	b.n	80039ec <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038aa:	4b53      	ldr	r3, [pc, #332]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e098      	b.n	80039ec <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80038ba:	f000 f8a7 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80038be:	4602      	mov	r2, r0
 80038c0:	4b4e      	ldr	r3, [pc, #312]	; (80039fc <HAL_RCC_ClockConfig+0x248>)
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d909      	bls.n	80038da <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038c6:	4b4c      	ldr	r3, [pc, #304]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ce:	4a4a      	ldr	r2, [pc, #296]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038da:	4b47      	ldr	r3, [pc, #284]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f023 0203 	bic.w	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	4944      	ldr	r1, [pc, #272]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ec:	f7fc fe8c 	bl	8000608 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f2:	e00a      	b.n	800390a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f4:	f7fc fe88 	bl	8000608 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003902:	4293      	cmp	r3, r2
 8003904:	d901      	bls.n	800390a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e070      	b.n	80039ec <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	4b3b      	ldr	r3, [pc, #236]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 020c 	and.w	r2, r3, #12
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	429a      	cmp	r2, r3
 800391a:	d1eb      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d009      	beq.n	800393c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003928:	4b33      	ldr	r3, [pc, #204]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4930      	ldr	r1, [pc, #192]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
 800393a:	e008      	b.n	800394e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2b80      	cmp	r3, #128	; 0x80
 8003940:	d105      	bne.n	800394e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003942:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	4a2c      	ldr	r2, [pc, #176]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003948:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800394c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800394e:	4b29      	ldr	r3, [pc, #164]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d210      	bcs.n	800397e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 020f 	bic.w	r2, r3, #15
 8003964:	4923      	ldr	r1, [pc, #140]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	4313      	orrs	r3, r2
 800396a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396c:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d001      	beq.n	800397e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e036      	b.n	80039ec <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800398a:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	4918      	ldr	r1, [pc, #96]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003998:	4313      	orrs	r3, r2
 800399a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d009      	beq.n	80039bc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039a8:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4910      	ldr	r1, [pc, #64]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039bc:	f000 f826 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80039c0:	4601      	mov	r1, r0
 80039c2:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	4a0c      	ldr	r2, [pc, #48]	; (8003a00 <HAL_RCC_ClockConfig+0x24c>)
 80039ce:	5cd3      	ldrb	r3, [r2, r3]
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	fa21 f303 	lsr.w	r3, r1, r3
 80039d8:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <HAL_RCC_ClockConfig+0x250>)
 80039da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <HAL_RCC_ClockConfig+0x254>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f007 fb39 	bl	800b058 <HAL_InitTick>
 80039e6:	4603      	mov	r3, r0
 80039e8:	73fb      	strb	r3, [r7, #15]

  return status;
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40022000 	.word	0x40022000
 80039f8:	40021000 	.word	0x40021000
 80039fc:	04c4b400 	.word	0x04c4b400
 8003a00:	0800bc1c 	.word	0x0800bc1c
 8003a04:	200000d0 	.word	0x200000d0
 8003a08:	20000000 	.word	0x20000000

08003a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b089      	sub	sp, #36	; 0x24
 8003a10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a1a:	4b3d      	ldr	r3, [pc, #244]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a24:	4b3a      	ldr	r3, [pc, #232]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0x34>
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	2b0c      	cmp	r3, #12
 8003a38:	d121      	bne.n	8003a7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d11e      	bne.n	8003a7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a40:	4b33      	ldr	r3, [pc, #204]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d107      	bne.n	8003a5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a4c:	4b30      	ldr	r3, [pc, #192]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	61fb      	str	r3, [r7, #28]
 8003a5a:	e005      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a5c:	4b2c      	ldr	r3, [pc, #176]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a68:	4a2a      	ldr	r2, [pc, #168]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10d      	bne.n	8003a94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d102      	bne.n	8003a8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a84:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	e004      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d101      	bne.n	8003a94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a90:	4b22      	ldr	r3, [pc, #136]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x110>)
 8003a92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b0c      	cmp	r3, #12
 8003a98:	d133      	bne.n	8003b02 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a9a:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d002      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0xa4>
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d003      	beq.n	8003ab6 <HAL_RCC_GetSysClockFreq+0xaa>
 8003aae:	e005      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ab0:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ab2:	617b      	str	r3, [r7, #20]
      break;
 8003ab4:	e005      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ab6:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ab8:	617b      	str	r3, [r7, #20]
      break;
 8003aba:	e002      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	617b      	str	r3, [r7, #20]
      break;
 8003ac0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ac2:	4b13      	ldr	r3, [pc, #76]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	3301      	adds	r3, #1
 8003ace:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	0a1b      	lsrs	r3, r3, #8
 8003ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	fb02 f203 	mul.w	r2, r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x104>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	0e5b      	lsrs	r3, r3, #25
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	3301      	adds	r3, #1
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b02:	69bb      	ldr	r3, [r7, #24]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3724      	adds	r7, #36	; 0x24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	40021000 	.word	0x40021000
 8003b14:	0800bc34 	.word	0x0800bc34
 8003b18:	00f42400 	.word	0x00f42400
 8003b1c:	007a1200 	.word	0x007a1200

08003b20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	200000d0 	.word	0x200000d0

08003b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b3c:	f7ff fff0 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b40:	4601      	mov	r1, r0
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4a04      	ldr	r2, [pc, #16]	; (8003b60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b4e:	5cd3      	ldrb	r3, [r2, r3]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	0800bc2c 	.word	0x0800bc2c

08003b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b68:	f7ff ffda 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b6c:	4601      	mov	r1, r0
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	0adb      	lsrs	r3, r3, #11
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b7a:	5cd3      	ldrb	r3, [r2, r3]
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	0800bc2c 	.word	0x0800bc2c

08003b90 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	220f      	movs	r2, #15
 8003b9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003ba0:	4b12      	ldr	r3, [pc, #72]	; (8003bec <HAL_RCC_GetClockConfig+0x5c>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 0203 	and.w	r2, r3, #3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003bac:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <HAL_RCC_GetClockConfig+0x5c>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <HAL_RCC_GetClockConfig+0x5c>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003bc4:	4b09      	ldr	r3, [pc, #36]	; (8003bec <HAL_RCC_GetClockConfig+0x5c>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	08db      	lsrs	r3, r3, #3
 8003bca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003bd2:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <HAL_RCC_GetClockConfig+0x60>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 020f 	and.w	r2, r3, #15
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	601a      	str	r2, [r3, #0]
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40022000 	.word	0x40022000

08003bf4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c00:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c0c:	f7ff f8e8 	bl	8002de0 <HAL_PWREx_GetVoltageRange>
 8003c10:	6178      	str	r0, [r7, #20]
 8003c12:	e014      	b.n	8003c3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c14:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	4a21      	ldr	r2, [pc, #132]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c20:	4b1f      	ldr	r3, [pc, #124]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c2c:	f7ff f8d8 	bl	8002de0 <HAL_PWREx_GetVoltageRange>
 8003c30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c32:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	4a1a      	ldr	r2, [pc, #104]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c44:	d10b      	bne.n	8003c5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b80      	cmp	r3, #128	; 0x80
 8003c4a:	d913      	bls.n	8003c74 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2ba0      	cmp	r3, #160	; 0xa0
 8003c50:	d902      	bls.n	8003c58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c52:	2302      	movs	r3, #2
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	e00d      	b.n	8003c74 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c58:	2301      	movs	r3, #1
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	e00a      	b.n	8003c74 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b7f      	cmp	r3, #127	; 0x7f
 8003c62:	d902      	bls.n	8003c6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003c64:	2302      	movs	r3, #2
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	e004      	b.n	8003c74 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b70      	cmp	r3, #112	; 0x70
 8003c6e:	d101      	bne.n	8003c74 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c70:	2301      	movs	r3, #1
 8003c72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f023 020f 	bic.w	r2, r3, #15
 8003c7c:	4909      	ldr	r1, [pc, #36]	; (8003ca4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c84:	4b07      	ldr	r3, [pc, #28]	; (8003ca4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d001      	beq.n	8003c96 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40022000 	.word	0x40022000

08003ca8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003cb2:	4b2d      	ldr	r3, [pc, #180]	; (8003d68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d118      	bne.n	8003cf0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cbe:	4b2a      	ldr	r3, [pc, #168]	; (8003d68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d107      	bne.n	8003cda <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cca:	4b27      	ldr	r3, [pc, #156]	; (8003d68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd0:	0a1b      	lsrs	r3, r3, #8
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	e005      	b.n	8003ce6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cda:	4b23      	ldr	r3, [pc, #140]	; (8003d68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	091b      	lsrs	r3, r3, #4
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ce6:	4a21      	ldr	r2, [pc, #132]	; (8003d6c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cee:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d002      	beq.n	8003d06 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d003      	beq.n	8003d0c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003d04:	e005      	b.n	8003d12 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003d06:	4b1a      	ldr	r3, [pc, #104]	; (8003d70 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003d08:	613b      	str	r3, [r7, #16]
    break;
 8003d0a:	e005      	b.n	8003d18 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003d0c:	4b19      	ldr	r3, [pc, #100]	; (8003d74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003d0e:	613b      	str	r3, [r7, #16]
    break;
 8003d10:	e002      	b.n	8003d18 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	613b      	str	r3, [r7, #16]
    break;
 8003d16:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d18:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	3301      	adds	r3, #1
 8003d24:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	0a1b      	lsrs	r3, r3, #8
 8003d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	fb02 f203 	mul.w	r2, r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	0e5b      	lsrs	r3, r3, #25
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	3301      	adds	r3, #1
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d56:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003d58:	683b      	ldr	r3, [r7, #0]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	371c      	adds	r7, #28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	0800bc34 	.word	0x0800bc34
 8003d70:	00f42400 	.word	0x00f42400
 8003d74:	007a1200 	.word	0x007a1200

08003d78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d80:	2300      	movs	r3, #0
 8003d82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d84:	2300      	movs	r3, #0
 8003d86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d03d      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d98:	2b40      	cmp	r3, #64	; 0x40
 8003d9a:	d00b      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d804      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00e      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d015      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003da8:	e01d      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003daa:	2b60      	cmp	r3, #96	; 0x60
 8003dac:	d01e      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003dae:	2b80      	cmp	r3, #128	; 0x80
 8003db0:	d01c      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003db2:	e018      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003db4:	4b86      	ldr	r3, [pc, #536]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a85      	ldr	r2, [pc, #532]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dc0:	e015      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fafd 	bl	80043c8 <RCCEx_PLLSAI1_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dd2:	e00c      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3320      	adds	r3, #32
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fbe4 	bl	80045a8 <RCCEx_PLLSAI2_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003de4:	e003      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	74fb      	strb	r3, [r7, #19]
      break;
 8003dea:	e000      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dee:	7cfb      	ldrb	r3, [r7, #19]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10b      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003df4:	4b76      	ldr	r3, [pc, #472]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dfa:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e02:	4973      	ldr	r1, [pc, #460]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e0a:	e001      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d042      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e24:	d00f      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e2a:	d805      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d011      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e34:	d017      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003e36:	e01f      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003e38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e3c:	d01f      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e42:	d01c      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e44:	e018      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e46:	4b62      	ldr	r3, [pc, #392]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	4a61      	ldr	r2, [pc, #388]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e50:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e52:	e015      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3304      	adds	r3, #4
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fab4 	bl	80043c8 <RCCEx_PLLSAI1_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e64:	e00c      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3320      	adds	r3, #32
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fb9b 	bl	80045a8 <RCCEx_PLLSAI2_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e76:	e003      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	74fb      	strb	r3, [r7, #19]
      break;
 8003e7c:	e000      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e80:	7cfb      	ldrb	r3, [r7, #19]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10b      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e86:	4b52      	ldr	r3, [pc, #328]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	494e      	ldr	r1, [pc, #312]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e9c:	e001      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ea0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 809f 	beq.w	8003fee <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003eb4:	4b46      	ldr	r3, [pc, #280]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eca:	4b41      	ldr	r3, [pc, #260]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ece:	4a40      	ldr	r2, [pc, #256]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ed6:	4b3e      	ldr	r3, [pc, #248]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ede:	60bb      	str	r3, [r7, #8]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ee6:	4b3b      	ldr	r3, [pc, #236]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a3a      	ldr	r2, [pc, #232]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ef2:	f7fc fb89 	bl	8000608 <HAL_GetTick>
 8003ef6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ef8:	e009      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efa:	f7fc fb85 	bl	8000608 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d902      	bls.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	74fb      	strb	r3, [r7, #19]
        break;
 8003f0c:	e005      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f0e:	4b31      	ldr	r3, [pc, #196]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0ef      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003f1a:	7cfb      	ldrb	r3, [r7, #19]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d15b      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f20:	4b2b      	ldr	r3, [pc, #172]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01f      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d019      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f3e:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f48:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f4a:	4b21      	ldr	r3, [pc, #132]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f50:	4a1f      	ldr	r2, [pc, #124]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f5a:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f60:	4a1b      	ldr	r2, [pc, #108]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f6a:	4a19      	ldr	r2, [pc, #100]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d016      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fc fb44 	bl	8000608 <HAL_GetTick>
 8003f80:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f82:	e00b      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f84:	f7fc fb40 	bl	8000608 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d902      	bls.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	74fb      	strb	r3, [r7, #19]
            break;
 8003f9a:	e006      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0ec      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003faa:	7cfb      	ldrb	r3, [r7, #19]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10c      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fb0:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc0:	4903      	ldr	r1, [pc, #12]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fc8:	e008      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	74bb      	strb	r3, [r7, #18]
 8003fce:	e005      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd8:	7cfb      	ldrb	r3, [r7, #19]
 8003fda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fdc:	7c7b      	ldrb	r3, [r7, #17]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d105      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe2:	4ba0      	ldr	r3, [pc, #640]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe6:	4a9f      	ldr	r2, [pc, #636]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ffa:	4b9a      	ldr	r3, [pc, #616]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004000:	f023 0203 	bic.w	r2, r3, #3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004008:	4996      	ldr	r1, [pc, #600]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800401c:	4b91      	ldr	r3, [pc, #580]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f023 020c 	bic.w	r2, r3, #12
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	498e      	ldr	r1, [pc, #568]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800403e:	4b89      	ldr	r3, [pc, #548]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404c:	4985      	ldr	r1, [pc, #532]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004060:	4b80      	ldr	r3, [pc, #512]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406e:	497d      	ldr	r1, [pc, #500]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004082:	4b78      	ldr	r3, [pc, #480]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004088:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004090:	4974      	ldr	r1, [pc, #464]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040a4:	4b6f      	ldr	r3, [pc, #444]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b2:	496c      	ldr	r1, [pc, #432]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040c6:	4b67      	ldr	r3, [pc, #412]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d4:	4963      	ldr	r1, [pc, #396]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040e8:	4b5e      	ldr	r3, [pc, #376]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040f6:	495b      	ldr	r1, [pc, #364]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800410a:	4b56      	ldr	r3, [pc, #344]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004110:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004118:	4952      	ldr	r1, [pc, #328]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800412c:	4b4d      	ldr	r3, [pc, #308]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004132:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413a:	494a      	ldr	r1, [pc, #296]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800414e:	4b45      	ldr	r3, [pc, #276]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004154:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415c:	4941      	ldr	r1, [pc, #260]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004170:	4b3c      	ldr	r3, [pc, #240]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004172:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004176:	f023 0203 	bic.w	r2, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800417e:	4939      	ldr	r1, [pc, #228]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d028      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004192:	4b34      	ldr	r3, [pc, #208]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004198:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a0:	4930      	ldr	r1, [pc, #192]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041b0:	d106      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041b2:	4b2c      	ldr	r3, [pc, #176]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	4a2b      	ldr	r2, [pc, #172]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041bc:	60d3      	str	r3, [r2, #12]
 80041be:	e011      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041c8:	d10c      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3304      	adds	r3, #4
 80041ce:	2101      	movs	r1, #1
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 f8f9 	bl	80043c8 <RCCEx_PLLSAI1_Config>
 80041d6:	4603      	mov	r3, r0
 80041d8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041da:	7cfb      	ldrb	r3, [r7, #19]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80041e0:	7cfb      	ldrb	r3, [r7, #19]
 80041e2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d04d      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041f8:	d108      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x494>
 80041fa:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004200:	4a18      	ldr	r2, [pc, #96]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004202:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004206:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800420a:	e012      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800420c:	4b15      	ldr	r3, [pc, #84]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004212:	4a14      	ldr	r2, [pc, #80]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004218:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800421c:	4b11      	ldr	r3, [pc, #68]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800422a:	490e      	ldr	r1, [pc, #56]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800423a:	d106      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800423c:	4b09      	ldr	r3, [pc, #36]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4a08      	ldr	r2, [pc, #32]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004246:	60d3      	str	r3, [r2, #12]
 8004248:	e020      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800424e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004252:	d109      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004254:	4b03      	ldr	r3, [pc, #12]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4a02      	ldr	r2, [pc, #8]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425e:	60d3      	str	r3, [r2, #12]
 8004260:	e014      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004262:	bf00      	nop
 8004264:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800426c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004270:	d10c      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3304      	adds	r3, #4
 8004276:	2101      	movs	r1, #1
 8004278:	4618      	mov	r0, r3
 800427a:	f000 f8a5 	bl	80043c8 <RCCEx_PLLSAI1_Config>
 800427e:	4603      	mov	r3, r0
 8004280:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004282:	7cfb      	ldrb	r3, [r7, #19]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004288:	7cfb      	ldrb	r3, [r7, #19]
 800428a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d028      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004298:	4b4a      	ldr	r3, [pc, #296]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a6:	4947      	ldr	r1, [pc, #284]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b6:	d106      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b8:	4b42      	ldr	r3, [pc, #264]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4a41      	ldr	r2, [pc, #260]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042c2:	60d3      	str	r3, [r2, #12]
 80042c4:	e011      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042ce:	d10c      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3304      	adds	r3, #4
 80042d4:	2101      	movs	r1, #1
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f876 	bl	80043c8 <RCCEx_PLLSAI1_Config>
 80042dc:	4603      	mov	r3, r0
 80042de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80042e6:	7cfb      	ldrb	r3, [r7, #19]
 80042e8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01e      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042f6:	4b33      	ldr	r3, [pc, #204]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004306:	492f      	ldr	r1, [pc, #188]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004314:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004318:	d10c      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3304      	adds	r3, #4
 800431e:	2102      	movs	r1, #2
 8004320:	4618      	mov	r0, r3
 8004322:	f000 f851 	bl	80043c8 <RCCEx_PLLSAI1_Config>
 8004326:	4603      	mov	r3, r0
 8004328:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800432a:	7cfb      	ldrb	r3, [r7, #19]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004330:	7cfb      	ldrb	r3, [r7, #19]
 8004332:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00b      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004340:	4b20      	ldr	r3, [pc, #128]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004346:	f023 0204 	bic.w	r2, r3, #4
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004350:	491c      	ldr	r1, [pc, #112]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00b      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004364:	4b17      	ldr	r3, [pc, #92]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004366:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800436a:	f023 0218 	bic.w	r2, r3, #24
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	4913      	ldr	r1, [pc, #76]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d017      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004388:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800438a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800438e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004398:	490a      	ldr	r1, [pc, #40]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043aa:	d105      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000

080043c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043d6:	4b70      	ldr	r3, [pc, #448]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00e      	beq.n	8004400 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043e2:	4b6d      	ldr	r3, [pc, #436]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f003 0203 	and.w	r2, r3, #3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d103      	bne.n	80043fa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
       ||
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d13f      	bne.n	800447a <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	73fb      	strb	r3, [r7, #15]
 80043fe:	e03c      	b.n	800447a <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b02      	cmp	r3, #2
 8004406:	d00c      	beq.n	8004422 <RCCEx_PLLSAI1_Config+0x5a>
 8004408:	2b03      	cmp	r3, #3
 800440a:	d013      	beq.n	8004434 <RCCEx_PLLSAI1_Config+0x6c>
 800440c:	2b01      	cmp	r3, #1
 800440e:	d120      	bne.n	8004452 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004410:	4b61      	ldr	r3, [pc, #388]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d11d      	bne.n	8004458 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004420:	e01a      	b.n	8004458 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004422:	4b5d      	ldr	r3, [pc, #372]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442a:	2b00      	cmp	r3, #0
 800442c:	d116      	bne.n	800445c <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004432:	e013      	b.n	800445c <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004434:	4b58      	ldr	r3, [pc, #352]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10f      	bne.n	8004460 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004440:	4b55      	ldr	r3, [pc, #340]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d109      	bne.n	8004460 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004450:	e006      	b.n	8004460 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	73fb      	strb	r3, [r7, #15]
      break;
 8004456:	e004      	b.n	8004462 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004458:	bf00      	nop
 800445a:	e002      	b.n	8004462 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800445c:	bf00      	nop
 800445e:	e000      	b.n	8004462 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004460:	bf00      	nop
    }

    if(status == HAL_OK)
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d108      	bne.n	800447a <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004468:	4b4b      	ldr	r3, [pc, #300]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f023 0203 	bic.w	r2, r3, #3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4948      	ldr	r1, [pc, #288]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004476:	4313      	orrs	r3, r2
 8004478:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f040 8086 	bne.w	800458e <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004482:	4b45      	ldr	r3, [pc, #276]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a44      	ldr	r2, [pc, #272]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004488:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800448c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448e:	f7fc f8bb 	bl	8000608 <HAL_GetTick>
 8004492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004494:	e009      	b.n	80044aa <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004496:	f7fc f8b7 	bl	8000608 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d902      	bls.n	80044aa <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	73fb      	strb	r3, [r7, #15]
        break;
 80044a8:	e005      	b.n	80044b6 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044aa:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1ef      	bne.n	8004496 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d168      	bne.n	800458e <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d113      	bne.n	80044ea <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044c2:	4b35      	ldr	r3, [pc, #212]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	4b35      	ldr	r3, [pc, #212]	; (800459c <RCCEx_PLLSAI1_Config+0x1d4>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6892      	ldr	r2, [r2, #8]
 80044ce:	0211      	lsls	r1, r2, #8
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	68d2      	ldr	r2, [r2, #12]
 80044d4:	06d2      	lsls	r2, r2, #27
 80044d6:	4311      	orrs	r1, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6852      	ldr	r2, [r2, #4]
 80044dc:	3a01      	subs	r2, #1
 80044de:	0112      	lsls	r2, r2, #4
 80044e0:	430a      	orrs	r2, r1
 80044e2:	492d      	ldr	r1, [pc, #180]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	610b      	str	r3, [r1, #16]
 80044e8:	e02d      	b.n	8004546 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d115      	bne.n	800451c <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044f0:	4b29      	ldr	r3, [pc, #164]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	4b2a      	ldr	r3, [pc, #168]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6892      	ldr	r2, [r2, #8]
 80044fc:	0211      	lsls	r1, r2, #8
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6912      	ldr	r2, [r2, #16]
 8004502:	0852      	lsrs	r2, r2, #1
 8004504:	3a01      	subs	r2, #1
 8004506:	0552      	lsls	r2, r2, #21
 8004508:	4311      	orrs	r1, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6852      	ldr	r2, [r2, #4]
 800450e:	3a01      	subs	r2, #1
 8004510:	0112      	lsls	r2, r2, #4
 8004512:	430a      	orrs	r2, r1
 8004514:	4920      	ldr	r1, [pc, #128]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004516:	4313      	orrs	r3, r2
 8004518:	610b      	str	r3, [r1, #16]
 800451a:	e014      	b.n	8004546 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800451c:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	4b20      	ldr	r3, [pc, #128]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004522:	4013      	ands	r3, r2
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6892      	ldr	r2, [r2, #8]
 8004528:	0211      	lsls	r1, r2, #8
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6952      	ldr	r2, [r2, #20]
 800452e:	0852      	lsrs	r2, r2, #1
 8004530:	3a01      	subs	r2, #1
 8004532:	0652      	lsls	r2, r2, #25
 8004534:	4311      	orrs	r1, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6852      	ldr	r2, [r2, #4]
 800453a:	3a01      	subs	r2, #1
 800453c:	0112      	lsls	r2, r2, #4
 800453e:	430a      	orrs	r2, r1
 8004540:	4915      	ldr	r1, [pc, #84]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004542:	4313      	orrs	r3, r2
 8004544:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004546:	4b14      	ldr	r3, [pc, #80]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a13      	ldr	r2, [pc, #76]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 800454c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004550:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004552:	f7fc f859 	bl	8000608 <HAL_GetTick>
 8004556:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004558:	e009      	b.n	800456e <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800455a:	f7fc f855 	bl	8000608 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d902      	bls.n	800456e <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	73fb      	strb	r3, [r7, #15]
          break;
 800456c:	e005      	b.n	800457a <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800456e:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0ef      	beq.n	800455a <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004580:	4b05      	ldr	r3, [pc, #20]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	4903      	ldr	r1, [pc, #12]	; (8004598 <RCCEx_PLLSAI1_Config+0x1d0>)
 800458a:	4313      	orrs	r3, r2
 800458c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800458e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40021000 	.word	0x40021000
 800459c:	07ff800f 	.word	0x07ff800f
 80045a0:	ff9f800f 	.word	0xff9f800f
 80045a4:	f9ff800f 	.word	0xf9ff800f

080045a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045b6:	4b70      	ldr	r3, [pc, #448]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00e      	beq.n	80045e0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045c2:	4b6d      	ldr	r3, [pc, #436]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f003 0203 	and.w	r2, r3, #3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d103      	bne.n	80045da <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
       ||
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d13f      	bne.n	800465a <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	73fb      	strb	r3, [r7, #15]
 80045de:	e03c      	b.n	800465a <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d00c      	beq.n	8004602 <RCCEx_PLLSAI2_Config+0x5a>
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d013      	beq.n	8004614 <RCCEx_PLLSAI2_Config+0x6c>
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d120      	bne.n	8004632 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045f0:	4b61      	ldr	r3, [pc, #388]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d11d      	bne.n	8004638 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004600:	e01a      	b.n	8004638 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004602:	4b5d      	ldr	r3, [pc, #372]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800460a:	2b00      	cmp	r3, #0
 800460c:	d116      	bne.n	800463c <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004612:	e013      	b.n	800463c <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004614:	4b58      	ldr	r3, [pc, #352]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10f      	bne.n	8004640 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004620:	4b55      	ldr	r3, [pc, #340]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d109      	bne.n	8004640 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004630:	e006      	b.n	8004640 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
      break;
 8004636:	e004      	b.n	8004642 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004638:	bf00      	nop
 800463a:	e002      	b.n	8004642 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800463c:	bf00      	nop
 800463e:	e000      	b.n	8004642 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004640:	bf00      	nop
    }

    if(status == HAL_OK)
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d108      	bne.n	800465a <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004648:	4b4b      	ldr	r3, [pc, #300]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f023 0203 	bic.w	r2, r3, #3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4948      	ldr	r1, [pc, #288]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004656:	4313      	orrs	r3, r2
 8004658:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f040 8086 	bne.w	800476e <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004662:	4b45      	ldr	r3, [pc, #276]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a44      	ldr	r2, [pc, #272]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800466c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800466e:	f7fb ffcb 	bl	8000608 <HAL_GetTick>
 8004672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004674:	e009      	b.n	800468a <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004676:	f7fb ffc7 	bl	8000608 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d902      	bls.n	800468a <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	73fb      	strb	r3, [r7, #15]
        break;
 8004688:	e005      	b.n	8004696 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800468a:	4b3b      	ldr	r3, [pc, #236]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1ef      	bne.n	8004676 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d168      	bne.n	800476e <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d113      	bne.n	80046ca <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046a2:	4b35      	ldr	r3, [pc, #212]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046a4:	695a      	ldr	r2, [r3, #20]
 80046a6:	4b35      	ldr	r3, [pc, #212]	; (800477c <RCCEx_PLLSAI2_Config+0x1d4>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6892      	ldr	r2, [r2, #8]
 80046ae:	0211      	lsls	r1, r2, #8
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	68d2      	ldr	r2, [r2, #12]
 80046b4:	06d2      	lsls	r2, r2, #27
 80046b6:	4311      	orrs	r1, r2
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6852      	ldr	r2, [r2, #4]
 80046bc:	3a01      	subs	r2, #1
 80046be:	0112      	lsls	r2, r2, #4
 80046c0:	430a      	orrs	r2, r1
 80046c2:	492d      	ldr	r1, [pc, #180]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	614b      	str	r3, [r1, #20]
 80046c8:	e02d      	b.n	8004726 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d115      	bne.n	80046fc <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046d0:	4b29      	ldr	r3, [pc, #164]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046d2:	695a      	ldr	r2, [r3, #20]
 80046d4:	4b2a      	ldr	r3, [pc, #168]	; (8004780 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6892      	ldr	r2, [r2, #8]
 80046dc:	0211      	lsls	r1, r2, #8
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6912      	ldr	r2, [r2, #16]
 80046e2:	0852      	lsrs	r2, r2, #1
 80046e4:	3a01      	subs	r2, #1
 80046e6:	0552      	lsls	r2, r2, #21
 80046e8:	4311      	orrs	r1, r2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6852      	ldr	r2, [r2, #4]
 80046ee:	3a01      	subs	r2, #1
 80046f0:	0112      	lsls	r2, r2, #4
 80046f2:	430a      	orrs	r2, r1
 80046f4:	4920      	ldr	r1, [pc, #128]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	614b      	str	r3, [r1, #20]
 80046fa:	e014      	b.n	8004726 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046fc:	4b1e      	ldr	r3, [pc, #120]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	4b20      	ldr	r3, [pc, #128]	; (8004784 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004702:	4013      	ands	r3, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6892      	ldr	r2, [r2, #8]
 8004708:	0211      	lsls	r1, r2, #8
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6952      	ldr	r2, [r2, #20]
 800470e:	0852      	lsrs	r2, r2, #1
 8004710:	3a01      	subs	r2, #1
 8004712:	0652      	lsls	r2, r2, #25
 8004714:	4311      	orrs	r1, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6852      	ldr	r2, [r2, #4]
 800471a:	3a01      	subs	r2, #1
 800471c:	0112      	lsls	r2, r2, #4
 800471e:	430a      	orrs	r2, r1
 8004720:	4915      	ldr	r1, [pc, #84]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004722:	4313      	orrs	r3, r2
 8004724:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004726:	4b14      	ldr	r3, [pc, #80]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a13      	ldr	r2, [pc, #76]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 800472c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004730:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004732:	f7fb ff69 	bl	8000608 <HAL_GetTick>
 8004736:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004738:	e009      	b.n	800474e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800473a:	f7fb ff65 	bl	8000608 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d902      	bls.n	800474e <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	73fb      	strb	r3, [r7, #15]
          break;
 800474c:	e005      	b.n	800475a <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800474e:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0ef      	beq.n	800473a <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d106      	bne.n	800476e <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004762:	695a      	ldr	r2, [r3, #20]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	4903      	ldr	r1, [pc, #12]	; (8004778 <RCCEx_PLLSAI2_Config+0x1d0>)
 800476a:	4313      	orrs	r3, r2
 800476c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800476e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40021000 	.word	0x40021000
 800477c:	07ff800f 	.word	0x07ff800f
 8004780:	ff9f800f 	.word	0xff9f800f
 8004784:	f9ff800f 	.word	0xf9ff800f

08004788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e049      	b.n	800482e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f006 fbea 	bl	800af88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3304      	adds	r3, #4
 80047c4:	4619      	mov	r1, r3
 80047c6:	4610      	mov	r0, r2
 80047c8:	f000 faa6 	bl	8004d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	d001      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e04f      	b.n	80048f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a23      	ldr	r2, [pc, #140]	; (80048fc <HAL_TIM_Base_Start_IT+0xc4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01d      	beq.n	80048ae <HAL_TIM_Base_Start_IT+0x76>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487a:	d018      	beq.n	80048ae <HAL_TIM_Base_Start_IT+0x76>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a1f      	ldr	r2, [pc, #124]	; (8004900 <HAL_TIM_Base_Start_IT+0xc8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d013      	beq.n	80048ae <HAL_TIM_Base_Start_IT+0x76>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1e      	ldr	r2, [pc, #120]	; (8004904 <HAL_TIM_Base_Start_IT+0xcc>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00e      	beq.n	80048ae <HAL_TIM_Base_Start_IT+0x76>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <HAL_TIM_Base_Start_IT+0xd0>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d009      	beq.n	80048ae <HAL_TIM_Base_Start_IT+0x76>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a1b      	ldr	r2, [pc, #108]	; (800490c <HAL_TIM_Base_Start_IT+0xd4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d004      	beq.n	80048ae <HAL_TIM_Base_Start_IT+0x76>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a19      	ldr	r2, [pc, #100]	; (8004910 <HAL_TIM_Base_Start_IT+0xd8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d115      	bne.n	80048da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	4b17      	ldr	r3, [pc, #92]	; (8004914 <HAL_TIM_Base_Start_IT+0xdc>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b06      	cmp	r3, #6
 80048be:	d015      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0xb4>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c6:	d011      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d8:	e008      	b.n	80048ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0201 	orr.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e000      	b.n	80048ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40012c00 	.word	0x40012c00
 8004900:	40000400 	.word	0x40000400
 8004904:	40000800 	.word	0x40000800
 8004908:	40000c00 	.word	0x40000c00
 800490c:	40013400 	.word	0x40013400
 8004910:	40014000 	.word	0x40014000
 8004914:	00010007 	.word	0x00010007

08004918 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b02      	cmp	r3, #2
 800492c:	d122      	bne.n	8004974 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b02      	cmp	r3, #2
 800493a:	d11b      	bne.n	8004974 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0202 	mvn.w	r2, #2
 8004944:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f9be 	bl	8004cdc <HAL_TIM_IC_CaptureCallback>
 8004960:	e005      	b.n	800496e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f9b0 	bl	8004cc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f9c1 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b04      	cmp	r3, #4
 8004980:	d122      	bne.n	80049c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b04      	cmp	r3, #4
 800498e:	d11b      	bne.n	80049c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0204 	mvn.w	r2, #4
 8004998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2202      	movs	r2, #2
 800499e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f994 	bl	8004cdc <HAL_TIM_IC_CaptureCallback>
 80049b4:	e005      	b.n	80049c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f986 	bl	8004cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f997 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d122      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d11b      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0208 	mvn.w	r2, #8
 80049ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2204      	movs	r2, #4
 80049f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f96a 	bl	8004cdc <HAL_TIM_IC_CaptureCallback>
 8004a08:	e005      	b.n	8004a16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f95c 	bl	8004cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f96d 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b10      	cmp	r3, #16
 8004a28:	d122      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d11b      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0210 	mvn.w	r2, #16
 8004a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2208      	movs	r2, #8
 8004a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f940 	bl	8004cdc <HAL_TIM_IC_CaptureCallback>
 8004a5c:	e005      	b.n	8004a6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f932 	bl	8004cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f943 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d10e      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d107      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0201 	mvn.w	r2, #1
 8004a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f005 fe6a 	bl	800a770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa6:	2b80      	cmp	r3, #128	; 0x80
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab4:	2b80      	cmp	r3, #128	; 0x80
 8004ab6:	d107      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 faee 	bl	80050a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ad6:	d10e      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae2:	2b80      	cmp	r3, #128	; 0x80
 8004ae4:	d107      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fae1 	bl	80050b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b40      	cmp	r3, #64	; 0x40
 8004b02:	d10e      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0e:	2b40      	cmp	r3, #64	; 0x40
 8004b10:	d107      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f8f1 	bl	8004d04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d10e      	bne.n	8004b4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	d107      	bne.n	8004b4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f06f 0220 	mvn.w	r2, #32
 8004b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 faa1 	bl	8005090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b084      	sub	sp, #16
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <HAL_TIM_ConfigClockSource+0x18>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e0a8      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b8c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b90:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b98:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b40      	cmp	r3, #64	; 0x40
 8004ba8:	d067      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0x124>
 8004baa:	2b40      	cmp	r3, #64	; 0x40
 8004bac:	d80b      	bhi.n	8004bc6 <HAL_TIM_ConfigClockSource+0x70>
 8004bae:	2b10      	cmp	r3, #16
 8004bb0:	d073      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0x144>
 8004bb2:	2b10      	cmp	r3, #16
 8004bb4:	d802      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x66>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d06f      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004bba:	e078      	b.n	8004cae <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d06c      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0x144>
 8004bc0:	2b30      	cmp	r3, #48	; 0x30
 8004bc2:	d06a      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004bc4:	e073      	b.n	8004cae <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004bc6:	2b70      	cmp	r3, #112	; 0x70
 8004bc8:	d00d      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x90>
 8004bca:	2b70      	cmp	r3, #112	; 0x70
 8004bcc:	d804      	bhi.n	8004bd8 <HAL_TIM_ConfigClockSource+0x82>
 8004bce:	2b50      	cmp	r3, #80	; 0x50
 8004bd0:	d033      	beq.n	8004c3a <HAL_TIM_ConfigClockSource+0xe4>
 8004bd2:	2b60      	cmp	r3, #96	; 0x60
 8004bd4:	d041      	beq.n	8004c5a <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004bd6:	e06a      	b.n	8004cae <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bdc:	d066      	beq.n	8004cac <HAL_TIM_ConfigClockSource+0x156>
 8004bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be2:	d017      	beq.n	8004c14 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004be4:	e063      	b.n	8004cae <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6899      	ldr	r1, [r3, #8]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f000 f9a3 	bl	8004f40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	609a      	str	r2, [r3, #8]
      break;
 8004c12:	e04c      	b.n	8004cae <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	6899      	ldr	r1, [r3, #8]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f000 f98c 	bl	8004f40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c36:	609a      	str	r2, [r3, #8]
      break;
 8004c38:	e039      	b.n	8004cae <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6859      	ldr	r1, [r3, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f000 f900 	bl	8004e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2150      	movs	r1, #80	; 0x50
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 f959 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 8004c58:	e029      	b.n	8004cae <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6818      	ldr	r0, [r3, #0]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	6859      	ldr	r1, [r3, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f000 f91f 	bl	8004eaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2160      	movs	r1, #96	; 0x60
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 f949 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 8004c78:	e019      	b.n	8004cae <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	6859      	ldr	r1, [r3, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	461a      	mov	r2, r3
 8004c88:	f000 f8e0 	bl	8004e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2140      	movs	r1, #64	; 0x40
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 f939 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 8004c98:	e009      	b.n	8004cae <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	f000 f930 	bl	8004f0a <TIM_ITRx_SetConfig>
        break;
 8004caa:	e000      	b.n	8004cae <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004cac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a40      	ldr	r2, [pc, #256]	; (8004e2c <TIM_Base_SetConfig+0x114>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d013      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d36:	d00f      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a3d      	ldr	r2, [pc, #244]	; (8004e30 <TIM_Base_SetConfig+0x118>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00b      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a3c      	ldr	r2, [pc, #240]	; (8004e34 <TIM_Base_SetConfig+0x11c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d007      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a3b      	ldr	r2, [pc, #236]	; (8004e38 <TIM_Base_SetConfig+0x120>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a3a      	ldr	r2, [pc, #232]	; (8004e3c <TIM_Base_SetConfig+0x124>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d108      	bne.n	8004d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a2f      	ldr	r2, [pc, #188]	; (8004e2c <TIM_Base_SetConfig+0x114>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d01f      	beq.n	8004db2 <TIM_Base_SetConfig+0x9a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d78:	d01b      	beq.n	8004db2 <TIM_Base_SetConfig+0x9a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a2c      	ldr	r2, [pc, #176]	; (8004e30 <TIM_Base_SetConfig+0x118>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d017      	beq.n	8004db2 <TIM_Base_SetConfig+0x9a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a2b      	ldr	r2, [pc, #172]	; (8004e34 <TIM_Base_SetConfig+0x11c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <TIM_Base_SetConfig+0x9a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a2a      	ldr	r2, [pc, #168]	; (8004e38 <TIM_Base_SetConfig+0x120>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00f      	beq.n	8004db2 <TIM_Base_SetConfig+0x9a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a29      	ldr	r2, [pc, #164]	; (8004e3c <TIM_Base_SetConfig+0x124>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00b      	beq.n	8004db2 <TIM_Base_SetConfig+0x9a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a28      	ldr	r2, [pc, #160]	; (8004e40 <TIM_Base_SetConfig+0x128>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d007      	beq.n	8004db2 <TIM_Base_SetConfig+0x9a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a27      	ldr	r2, [pc, #156]	; (8004e44 <TIM_Base_SetConfig+0x12c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d003      	beq.n	8004db2 <TIM_Base_SetConfig+0x9a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a26      	ldr	r2, [pc, #152]	; (8004e48 <TIM_Base_SetConfig+0x130>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d108      	bne.n	8004dc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a10      	ldr	r2, [pc, #64]	; (8004e2c <TIM_Base_SetConfig+0x114>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00f      	beq.n	8004e10 <TIM_Base_SetConfig+0xf8>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a12      	ldr	r2, [pc, #72]	; (8004e3c <TIM_Base_SetConfig+0x124>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00b      	beq.n	8004e10 <TIM_Base_SetConfig+0xf8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a11      	ldr	r2, [pc, #68]	; (8004e40 <TIM_Base_SetConfig+0x128>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d007      	beq.n	8004e10 <TIM_Base_SetConfig+0xf8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a10      	ldr	r2, [pc, #64]	; (8004e44 <TIM_Base_SetConfig+0x12c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_Base_SetConfig+0xf8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a0f      	ldr	r2, [pc, #60]	; (8004e48 <TIM_Base_SetConfig+0x130>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d103      	bne.n	8004e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	615a      	str	r2, [r3, #20]
}
 8004e1e:	bf00      	nop
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40012c00 	.word	0x40012c00
 8004e30:	40000400 	.word	0x40000400
 8004e34:	40000800 	.word	0x40000800
 8004e38:	40000c00 	.word	0x40000c00
 8004e3c:	40013400 	.word	0x40013400
 8004e40:	40014000 	.word	0x40014000
 8004e44:	40014400 	.word	0x40014400
 8004e48:	40014800 	.word	0x40014800

08004e4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f023 0201 	bic.w	r2, r3, #1
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f023 030a 	bic.w	r3, r3, #10
 8004e88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	621a      	str	r2, [r3, #32]
}
 8004e9e:	bf00      	nop
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b087      	sub	sp, #28
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	f023 0210 	bic.w	r2, r3, #16
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ed4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	031b      	lsls	r3, r3, #12
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ee6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f043 0307 	orr.w	r3, r3, #7
 8004f2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	609a      	str	r2, [r3, #8]
}
 8004f34:	bf00      	nop
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	021a      	lsls	r2, r3, #8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	609a      	str	r2, [r3, #8]
}
 8004f74:	bf00      	nop
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e068      	b.n	800506a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a2e      	ldr	r2, [pc, #184]	; (8005078 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d004      	beq.n	8004fcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a2d      	ldr	r2, [pc, #180]	; (800507c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d108      	bne.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004fd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a1e      	ldr	r2, [pc, #120]	; (8005078 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d01d      	beq.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500a:	d018      	beq.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a1b      	ldr	r2, [pc, #108]	; (8005080 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d013      	beq.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1a      	ldr	r2, [pc, #104]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00e      	beq.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a18      	ldr	r2, [pc, #96]	; (8005088 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d009      	beq.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a13      	ldr	r2, [pc, #76]	; (800507c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d004      	beq.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a14      	ldr	r2, [pc, #80]	; (800508c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d10c      	bne.n	8005058 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	4313      	orrs	r3, r2
 800504e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40012c00 	.word	0x40012c00
 800507c:	40013400 	.word	0x40013400
 8005080:	40000400 	.word	0x40000400
 8005084:	40000800 	.word	0x40000800
 8005088:	40000c00 	.word	0x40000c00
 800508c:	40014000 	.word	0x40014000

08005090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e042      	b.n	8005164 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d106      	bne.n	80050f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f005 ff6d 	bl	800afd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2224      	movs	r2, #36	; 0x24
 80050fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0201 	bic.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f8c4 	bl	800529c <UART_SetConfig>
 8005114:	4603      	mov	r3, r0
 8005116:	2b01      	cmp	r3, #1
 8005118:	d101      	bne.n	800511e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e022      	b.n	8005164 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fb8a 	bl	8005840 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800513a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800514a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0201 	orr.w	r2, r2, #1
 800515a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fc11 	bl	8005984 <UART_CheckIdleState>
 8005162:	4603      	mov	r3, r0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	; 0x28
 8005170:	af02      	add	r7, sp, #8
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	4613      	mov	r3, r2
 800517a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005182:	2b20      	cmp	r3, #32
 8005184:	f040 8084 	bne.w	8005290 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_UART_Transmit+0x28>
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e07c      	b.n	8005292 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_UART_Transmit+0x3a>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e075      	b.n	8005292 <HAL_UART_Transmit+0x126>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2221      	movs	r2, #33	; 0x21
 80051ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80051be:	f7fb fa23 	bl	8000608 <HAL_GetTick>
 80051c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	88fa      	ldrh	r2, [r7, #6]
 80051c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	88fa      	ldrh	r2, [r7, #6]
 80051d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051dc:	d108      	bne.n	80051f0 <HAL_UART_Transmit+0x84>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d104      	bne.n	80051f0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	e003      	b.n	80051f8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051f4:	2300      	movs	r3, #0
 80051f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005200:	e02d      	b.n	800525e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2200      	movs	r2, #0
 800520a:	2180      	movs	r1, #128	; 0x80
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 fc01 	bl	8005a14 <UART_WaitOnFlagUntilTimeout>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e03a      	b.n	8005292 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10b      	bne.n	800523a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	881a      	ldrh	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800522e:	b292      	uxth	r2, r2
 8005230:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	3302      	adds	r3, #2
 8005236:	61bb      	str	r3, [r7, #24]
 8005238:	e008      	b.n	800524c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	781a      	ldrb	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	b292      	uxth	r2, r2
 8005244:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	3301      	adds	r3, #1
 800524a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1cb      	bne.n	8005202 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2200      	movs	r2, #0
 8005272:	2140      	movs	r1, #64	; 0x40
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 fbcd 	bl	8005a14 <UART_WaitOnFlagUntilTimeout>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e006      	b.n	8005292 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	e000      	b.n	8005292 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005290:	2302      	movs	r3, #2
  }
}
 8005292:	4618      	mov	r0, r3
 8005294:	3720      	adds	r7, #32
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800529c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80052a0:	b088      	sub	sp, #32
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	4313      	orrs	r3, r2
 80052c0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052c6:	69fa      	ldr	r2, [r7, #28]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	4bb1      	ldr	r3, [pc, #708]	; (8005598 <UART_SetConfig+0x2fc>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6812      	ldr	r2, [r2, #0]
 80052da:	69f9      	ldr	r1, [r7, #28]
 80052dc:	430b      	orrs	r3, r1
 80052de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4aa6      	ldr	r2, [pc, #664]	; (800559c <UART_SetConfig+0x300>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d004      	beq.n	8005310 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	4313      	orrs	r3, r2
 800530e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800531a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	69f9      	ldr	r1, [r7, #28]
 8005324:	430b      	orrs	r3, r1
 8005326:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	f023 010f 	bic.w	r1, r3, #15
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a97      	ldr	r2, [pc, #604]	; (80055a0 <UART_SetConfig+0x304>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d121      	bne.n	800538c <UART_SetConfig+0xf0>
 8005348:	4b96      	ldr	r3, [pc, #600]	; (80055a4 <UART_SetConfig+0x308>)
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	2b03      	cmp	r3, #3
 8005354:	d816      	bhi.n	8005384 <UART_SetConfig+0xe8>
 8005356:	a201      	add	r2, pc, #4	; (adr r2, 800535c <UART_SetConfig+0xc0>)
 8005358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535c:	0800536d 	.word	0x0800536d
 8005360:	08005379 	.word	0x08005379
 8005364:	08005373 	.word	0x08005373
 8005368:	0800537f 	.word	0x0800537f
 800536c:	2301      	movs	r3, #1
 800536e:	76fb      	strb	r3, [r7, #27]
 8005370:	e0e8      	b.n	8005544 <UART_SetConfig+0x2a8>
 8005372:	2302      	movs	r3, #2
 8005374:	76fb      	strb	r3, [r7, #27]
 8005376:	e0e5      	b.n	8005544 <UART_SetConfig+0x2a8>
 8005378:	2304      	movs	r3, #4
 800537a:	76fb      	strb	r3, [r7, #27]
 800537c:	e0e2      	b.n	8005544 <UART_SetConfig+0x2a8>
 800537e:	2308      	movs	r3, #8
 8005380:	76fb      	strb	r3, [r7, #27]
 8005382:	e0df      	b.n	8005544 <UART_SetConfig+0x2a8>
 8005384:	2310      	movs	r3, #16
 8005386:	76fb      	strb	r3, [r7, #27]
 8005388:	bf00      	nop
 800538a:	e0db      	b.n	8005544 <UART_SetConfig+0x2a8>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a85      	ldr	r2, [pc, #532]	; (80055a8 <UART_SetConfig+0x30c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d134      	bne.n	8005400 <UART_SetConfig+0x164>
 8005396:	4b83      	ldr	r3, [pc, #524]	; (80055a4 <UART_SetConfig+0x308>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539c:	f003 030c 	and.w	r3, r3, #12
 80053a0:	2b0c      	cmp	r3, #12
 80053a2:	d829      	bhi.n	80053f8 <UART_SetConfig+0x15c>
 80053a4:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <UART_SetConfig+0x110>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	080053e1 	.word	0x080053e1
 80053b0:	080053f9 	.word	0x080053f9
 80053b4:	080053f9 	.word	0x080053f9
 80053b8:	080053f9 	.word	0x080053f9
 80053bc:	080053ed 	.word	0x080053ed
 80053c0:	080053f9 	.word	0x080053f9
 80053c4:	080053f9 	.word	0x080053f9
 80053c8:	080053f9 	.word	0x080053f9
 80053cc:	080053e7 	.word	0x080053e7
 80053d0:	080053f9 	.word	0x080053f9
 80053d4:	080053f9 	.word	0x080053f9
 80053d8:	080053f9 	.word	0x080053f9
 80053dc:	080053f3 	.word	0x080053f3
 80053e0:	2300      	movs	r3, #0
 80053e2:	76fb      	strb	r3, [r7, #27]
 80053e4:	e0ae      	b.n	8005544 <UART_SetConfig+0x2a8>
 80053e6:	2302      	movs	r3, #2
 80053e8:	76fb      	strb	r3, [r7, #27]
 80053ea:	e0ab      	b.n	8005544 <UART_SetConfig+0x2a8>
 80053ec:	2304      	movs	r3, #4
 80053ee:	76fb      	strb	r3, [r7, #27]
 80053f0:	e0a8      	b.n	8005544 <UART_SetConfig+0x2a8>
 80053f2:	2308      	movs	r3, #8
 80053f4:	76fb      	strb	r3, [r7, #27]
 80053f6:	e0a5      	b.n	8005544 <UART_SetConfig+0x2a8>
 80053f8:	2310      	movs	r3, #16
 80053fa:	76fb      	strb	r3, [r7, #27]
 80053fc:	bf00      	nop
 80053fe:	e0a1      	b.n	8005544 <UART_SetConfig+0x2a8>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a69      	ldr	r2, [pc, #420]	; (80055ac <UART_SetConfig+0x310>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d120      	bne.n	800544c <UART_SetConfig+0x1b0>
 800540a:	4b66      	ldr	r3, [pc, #408]	; (80055a4 <UART_SetConfig+0x308>)
 800540c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005410:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005414:	2b10      	cmp	r3, #16
 8005416:	d00f      	beq.n	8005438 <UART_SetConfig+0x19c>
 8005418:	2b10      	cmp	r3, #16
 800541a:	d802      	bhi.n	8005422 <UART_SetConfig+0x186>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d005      	beq.n	800542c <UART_SetConfig+0x190>
 8005420:	e010      	b.n	8005444 <UART_SetConfig+0x1a8>
 8005422:	2b20      	cmp	r3, #32
 8005424:	d005      	beq.n	8005432 <UART_SetConfig+0x196>
 8005426:	2b30      	cmp	r3, #48	; 0x30
 8005428:	d009      	beq.n	800543e <UART_SetConfig+0x1a2>
 800542a:	e00b      	b.n	8005444 <UART_SetConfig+0x1a8>
 800542c:	2300      	movs	r3, #0
 800542e:	76fb      	strb	r3, [r7, #27]
 8005430:	e088      	b.n	8005544 <UART_SetConfig+0x2a8>
 8005432:	2302      	movs	r3, #2
 8005434:	76fb      	strb	r3, [r7, #27]
 8005436:	e085      	b.n	8005544 <UART_SetConfig+0x2a8>
 8005438:	2304      	movs	r3, #4
 800543a:	76fb      	strb	r3, [r7, #27]
 800543c:	e082      	b.n	8005544 <UART_SetConfig+0x2a8>
 800543e:	2308      	movs	r3, #8
 8005440:	76fb      	strb	r3, [r7, #27]
 8005442:	e07f      	b.n	8005544 <UART_SetConfig+0x2a8>
 8005444:	2310      	movs	r3, #16
 8005446:	76fb      	strb	r3, [r7, #27]
 8005448:	bf00      	nop
 800544a:	e07b      	b.n	8005544 <UART_SetConfig+0x2a8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a57      	ldr	r2, [pc, #348]	; (80055b0 <UART_SetConfig+0x314>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d120      	bne.n	8005498 <UART_SetConfig+0x1fc>
 8005456:	4b53      	ldr	r3, [pc, #332]	; (80055a4 <UART_SetConfig+0x308>)
 8005458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005460:	2b40      	cmp	r3, #64	; 0x40
 8005462:	d00f      	beq.n	8005484 <UART_SetConfig+0x1e8>
 8005464:	2b40      	cmp	r3, #64	; 0x40
 8005466:	d802      	bhi.n	800546e <UART_SetConfig+0x1d2>
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <UART_SetConfig+0x1dc>
 800546c:	e010      	b.n	8005490 <UART_SetConfig+0x1f4>
 800546e:	2b80      	cmp	r3, #128	; 0x80
 8005470:	d005      	beq.n	800547e <UART_SetConfig+0x1e2>
 8005472:	2bc0      	cmp	r3, #192	; 0xc0
 8005474:	d009      	beq.n	800548a <UART_SetConfig+0x1ee>
 8005476:	e00b      	b.n	8005490 <UART_SetConfig+0x1f4>
 8005478:	2300      	movs	r3, #0
 800547a:	76fb      	strb	r3, [r7, #27]
 800547c:	e062      	b.n	8005544 <UART_SetConfig+0x2a8>
 800547e:	2302      	movs	r3, #2
 8005480:	76fb      	strb	r3, [r7, #27]
 8005482:	e05f      	b.n	8005544 <UART_SetConfig+0x2a8>
 8005484:	2304      	movs	r3, #4
 8005486:	76fb      	strb	r3, [r7, #27]
 8005488:	e05c      	b.n	8005544 <UART_SetConfig+0x2a8>
 800548a:	2308      	movs	r3, #8
 800548c:	76fb      	strb	r3, [r7, #27]
 800548e:	e059      	b.n	8005544 <UART_SetConfig+0x2a8>
 8005490:	2310      	movs	r3, #16
 8005492:	76fb      	strb	r3, [r7, #27]
 8005494:	bf00      	nop
 8005496:	e055      	b.n	8005544 <UART_SetConfig+0x2a8>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a45      	ldr	r2, [pc, #276]	; (80055b4 <UART_SetConfig+0x318>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d124      	bne.n	80054ec <UART_SetConfig+0x250>
 80054a2:	4b40      	ldr	r3, [pc, #256]	; (80055a4 <UART_SetConfig+0x308>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b0:	d012      	beq.n	80054d8 <UART_SetConfig+0x23c>
 80054b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b6:	d802      	bhi.n	80054be <UART_SetConfig+0x222>
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <UART_SetConfig+0x230>
 80054bc:	e012      	b.n	80054e4 <UART_SetConfig+0x248>
 80054be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c2:	d006      	beq.n	80054d2 <UART_SetConfig+0x236>
 80054c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c8:	d009      	beq.n	80054de <UART_SetConfig+0x242>
 80054ca:	e00b      	b.n	80054e4 <UART_SetConfig+0x248>
 80054cc:	2300      	movs	r3, #0
 80054ce:	76fb      	strb	r3, [r7, #27]
 80054d0:	e038      	b.n	8005544 <UART_SetConfig+0x2a8>
 80054d2:	2302      	movs	r3, #2
 80054d4:	76fb      	strb	r3, [r7, #27]
 80054d6:	e035      	b.n	8005544 <UART_SetConfig+0x2a8>
 80054d8:	2304      	movs	r3, #4
 80054da:	76fb      	strb	r3, [r7, #27]
 80054dc:	e032      	b.n	8005544 <UART_SetConfig+0x2a8>
 80054de:	2308      	movs	r3, #8
 80054e0:	76fb      	strb	r3, [r7, #27]
 80054e2:	e02f      	b.n	8005544 <UART_SetConfig+0x2a8>
 80054e4:	2310      	movs	r3, #16
 80054e6:	76fb      	strb	r3, [r7, #27]
 80054e8:	bf00      	nop
 80054ea:	e02b      	b.n	8005544 <UART_SetConfig+0x2a8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a2a      	ldr	r2, [pc, #168]	; (800559c <UART_SetConfig+0x300>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d124      	bne.n	8005540 <UART_SetConfig+0x2a4>
 80054f6:	4b2b      	ldr	r3, [pc, #172]	; (80055a4 <UART_SetConfig+0x308>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005504:	d012      	beq.n	800552c <UART_SetConfig+0x290>
 8005506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550a:	d802      	bhi.n	8005512 <UART_SetConfig+0x276>
 800550c:	2b00      	cmp	r3, #0
 800550e:	d007      	beq.n	8005520 <UART_SetConfig+0x284>
 8005510:	e012      	b.n	8005538 <UART_SetConfig+0x29c>
 8005512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005516:	d006      	beq.n	8005526 <UART_SetConfig+0x28a>
 8005518:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800551c:	d009      	beq.n	8005532 <UART_SetConfig+0x296>
 800551e:	e00b      	b.n	8005538 <UART_SetConfig+0x29c>
 8005520:	2300      	movs	r3, #0
 8005522:	76fb      	strb	r3, [r7, #27]
 8005524:	e00e      	b.n	8005544 <UART_SetConfig+0x2a8>
 8005526:	2302      	movs	r3, #2
 8005528:	76fb      	strb	r3, [r7, #27]
 800552a:	e00b      	b.n	8005544 <UART_SetConfig+0x2a8>
 800552c:	2304      	movs	r3, #4
 800552e:	76fb      	strb	r3, [r7, #27]
 8005530:	e008      	b.n	8005544 <UART_SetConfig+0x2a8>
 8005532:	2308      	movs	r3, #8
 8005534:	76fb      	strb	r3, [r7, #27]
 8005536:	e005      	b.n	8005544 <UART_SetConfig+0x2a8>
 8005538:	2310      	movs	r3, #16
 800553a:	76fb      	strb	r3, [r7, #27]
 800553c:	bf00      	nop
 800553e:	e001      	b.n	8005544 <UART_SetConfig+0x2a8>
 8005540:	2310      	movs	r3, #16
 8005542:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a14      	ldr	r2, [pc, #80]	; (800559c <UART_SetConfig+0x300>)
 800554a:	4293      	cmp	r3, r2
 800554c:	f040 80a1 	bne.w	8005692 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005550:	7efb      	ldrb	r3, [r7, #27]
 8005552:	2b08      	cmp	r3, #8
 8005554:	d836      	bhi.n	80055c4 <UART_SetConfig+0x328>
 8005556:	a201      	add	r2, pc, #4	; (adr r2, 800555c <UART_SetConfig+0x2c0>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	08005581 	.word	0x08005581
 8005560:	080055c5 	.word	0x080055c5
 8005564:	08005589 	.word	0x08005589
 8005568:	080055c5 	.word	0x080055c5
 800556c:	0800558f 	.word	0x0800558f
 8005570:	080055c5 	.word	0x080055c5
 8005574:	080055c5 	.word	0x080055c5
 8005578:	080055c5 	.word	0x080055c5
 800557c:	080055bd 	.word	0x080055bd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005580:	f7fe fada 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8005584:	6178      	str	r0, [r7, #20]
        break;
 8005586:	e022      	b.n	80055ce <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005588:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <UART_SetConfig+0x31c>)
 800558a:	617b      	str	r3, [r7, #20]
        break;
 800558c:	e01f      	b.n	80055ce <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800558e:	f7fe fa3d 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 8005592:	6178      	str	r0, [r7, #20]
        break;
 8005594:	e01b      	b.n	80055ce <UART_SetConfig+0x332>
 8005596:	bf00      	nop
 8005598:	cfff69f3 	.word	0xcfff69f3
 800559c:	40008000 	.word	0x40008000
 80055a0:	40013800 	.word	0x40013800
 80055a4:	40021000 	.word	0x40021000
 80055a8:	40004400 	.word	0x40004400
 80055ac:	40004800 	.word	0x40004800
 80055b0:	40004c00 	.word	0x40004c00
 80055b4:	40005000 	.word	0x40005000
 80055b8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055c0:	617b      	str	r3, [r7, #20]
        break;
 80055c2:	e004      	b.n	80055ce <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	76bb      	strb	r3, [r7, #26]
        break;
 80055cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 811d 	beq.w	8005810 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	4a97      	ldr	r2, [pc, #604]	; (8005838 <UART_SetConfig+0x59c>)
 80055dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055e0:	461a      	mov	r2, r3
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80055e8:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	4613      	mov	r3, r2
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	4413      	add	r3, r2
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d305      	bcc.n	8005606 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	429a      	cmp	r2, r3
 8005604:	d902      	bls.n	800560c <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	76bb      	strb	r3, [r7, #26]
 800560a:	e101      	b.n	8005810 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	4618      	mov	r0, r3
 8005610:	f04f 0100 	mov.w	r1, #0
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	4a87      	ldr	r2, [pc, #540]	; (8005838 <UART_SetConfig+0x59c>)
 800561a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800561e:	b29b      	uxth	r3, r3
 8005620:	f04f 0400 	mov.w	r4, #0
 8005624:	461a      	mov	r2, r3
 8005626:	4623      	mov	r3, r4
 8005628:	f7fa fe42 	bl	80002b0 <__aeabi_uldivmod>
 800562c:	4603      	mov	r3, r0
 800562e:	460c      	mov	r4, r1
 8005630:	4619      	mov	r1, r3
 8005632:	4622      	mov	r2, r4
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	f04f 0400 	mov.w	r4, #0
 800563c:	0214      	lsls	r4, r2, #8
 800563e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005642:	020b      	lsls	r3, r1, #8
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6852      	ldr	r2, [r2, #4]
 8005648:	0852      	lsrs	r2, r2, #1
 800564a:	4611      	mov	r1, r2
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	eb13 0b01 	adds.w	fp, r3, r1
 8005654:	eb44 0c02 	adc.w	ip, r4, r2
 8005658:	4658      	mov	r0, fp
 800565a:	4661      	mov	r1, ip
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f04f 0400 	mov.w	r4, #0
 8005664:	461a      	mov	r2, r3
 8005666:	4623      	mov	r3, r4
 8005668:	f7fa fe22 	bl	80002b0 <__aeabi_uldivmod>
 800566c:	4603      	mov	r3, r0
 800566e:	460c      	mov	r4, r1
 8005670:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005678:	d308      	bcc.n	800568c <UART_SetConfig+0x3f0>
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005680:	d204      	bcs.n	800568c <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	60da      	str	r2, [r3, #12]
 800568a:	e0c1      	b.n	8005810 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	76bb      	strb	r3, [r7, #26]
 8005690:	e0be      	b.n	8005810 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569a:	d164      	bne.n	8005766 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 800569c:	7efb      	ldrb	r3, [r7, #27]
 800569e:	2b08      	cmp	r3, #8
 80056a0:	d827      	bhi.n	80056f2 <UART_SetConfig+0x456>
 80056a2:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <UART_SetConfig+0x40c>)
 80056a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a8:	080056cd 	.word	0x080056cd
 80056ac:	080056d5 	.word	0x080056d5
 80056b0:	080056dd 	.word	0x080056dd
 80056b4:	080056f3 	.word	0x080056f3
 80056b8:	080056e3 	.word	0x080056e3
 80056bc:	080056f3 	.word	0x080056f3
 80056c0:	080056f3 	.word	0x080056f3
 80056c4:	080056f3 	.word	0x080056f3
 80056c8:	080056eb 	.word	0x080056eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056cc:	f7fe fa34 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 80056d0:	6178      	str	r0, [r7, #20]
        break;
 80056d2:	e013      	b.n	80056fc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056d4:	f7fe fa46 	bl	8003b64 <HAL_RCC_GetPCLK2Freq>
 80056d8:	6178      	str	r0, [r7, #20]
        break;
 80056da:	e00f      	b.n	80056fc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056dc:	4b57      	ldr	r3, [pc, #348]	; (800583c <UART_SetConfig+0x5a0>)
 80056de:	617b      	str	r3, [r7, #20]
        break;
 80056e0:	e00c      	b.n	80056fc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056e2:	f7fe f993 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80056e6:	6178      	str	r0, [r7, #20]
        break;
 80056e8:	e008      	b.n	80056fc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ee:	617b      	str	r3, [r7, #20]
        break;
 80056f0:	e004      	b.n	80056fc <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	76bb      	strb	r3, [r7, #26]
        break;
 80056fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 8086 	beq.w	8005810 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	4a4b      	ldr	r2, [pc, #300]	; (8005838 <UART_SetConfig+0x59c>)
 800570a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800570e:	461a      	mov	r2, r3
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	fbb3 f3f2 	udiv	r3, r3, r2
 8005716:	005a      	lsls	r2, r3, #1
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	085b      	lsrs	r3, r3, #1
 800571e:	441a      	add	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	b29b      	uxth	r3, r3
 800572a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b0f      	cmp	r3, #15
 8005730:	d916      	bls.n	8005760 <UART_SetConfig+0x4c4>
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005738:	d212      	bcs.n	8005760 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f023 030f 	bic.w	r3, r3, #15
 8005742:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	085b      	lsrs	r3, r3, #1
 8005748:	b29b      	uxth	r3, r3
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	b29a      	uxth	r2, r3
 8005750:	89fb      	ldrh	r3, [r7, #14]
 8005752:	4313      	orrs	r3, r2
 8005754:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	89fa      	ldrh	r2, [r7, #14]
 800575c:	60da      	str	r2, [r3, #12]
 800575e:	e057      	b.n	8005810 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	76bb      	strb	r3, [r7, #26]
 8005764:	e054      	b.n	8005810 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005766:	7efb      	ldrb	r3, [r7, #27]
 8005768:	2b08      	cmp	r3, #8
 800576a:	d828      	bhi.n	80057be <UART_SetConfig+0x522>
 800576c:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <UART_SetConfig+0x4d8>)
 800576e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005772:	bf00      	nop
 8005774:	08005799 	.word	0x08005799
 8005778:	080057a1 	.word	0x080057a1
 800577c:	080057a9 	.word	0x080057a9
 8005780:	080057bf 	.word	0x080057bf
 8005784:	080057af 	.word	0x080057af
 8005788:	080057bf 	.word	0x080057bf
 800578c:	080057bf 	.word	0x080057bf
 8005790:	080057bf 	.word	0x080057bf
 8005794:	080057b7 	.word	0x080057b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005798:	f7fe f9ce 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 800579c:	6178      	str	r0, [r7, #20]
        break;
 800579e:	e013      	b.n	80057c8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057a0:	f7fe f9e0 	bl	8003b64 <HAL_RCC_GetPCLK2Freq>
 80057a4:	6178      	str	r0, [r7, #20]
        break;
 80057a6:	e00f      	b.n	80057c8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057a8:	4b24      	ldr	r3, [pc, #144]	; (800583c <UART_SetConfig+0x5a0>)
 80057aa:	617b      	str	r3, [r7, #20]
        break;
 80057ac:	e00c      	b.n	80057c8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ae:	f7fe f92d 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80057b2:	6178      	str	r0, [r7, #20]
        break;
 80057b4:	e008      	b.n	80057c8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ba:	617b      	str	r3, [r7, #20]
        break;
 80057bc:	e004      	b.n	80057c8 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	76bb      	strb	r3, [r7, #26]
        break;
 80057c6:	bf00      	nop
    }

    if (pclk != 0U)
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d020      	beq.n	8005810 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	4a19      	ldr	r2, [pc, #100]	; (8005838 <UART_SetConfig+0x59c>)
 80057d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057d8:	461a      	mov	r2, r3
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	085b      	lsrs	r3, r3, #1
 80057e6:	441a      	add	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	2b0f      	cmp	r3, #15
 80057f8:	d908      	bls.n	800580c <UART_SetConfig+0x570>
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005800:	d204      	bcs.n	800580c <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	60da      	str	r2, [r3, #12]
 800580a:	e001      	b.n	8005810 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800582c:	7ebb      	ldrb	r3, [r7, #26]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3720      	adds	r7, #32
 8005832:	46bd      	mov	sp, r7
 8005834:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005838:	0800bc04 	.word	0x0800bc04
 800583c:	00f42400 	.word	0x00f42400

08005840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00a      	beq.n	800586a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00a      	beq.n	80058ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01a      	beq.n	8005956 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800593e:	d10a      	bne.n	8005956 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	605a      	str	r2, [r3, #4]
  }
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af02      	add	r7, sp, #8
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005994:	f7fa fe38 	bl	8000608 <HAL_GetTick>
 8005998:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0308 	and.w	r3, r3, #8
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d10e      	bne.n	80059c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f82c 	bl	8005a14 <UART_WaitOnFlagUntilTimeout>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e022      	b.n	8005a0c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d10e      	bne.n	80059f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f816 	bl	8005a14 <UART_WaitOnFlagUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e00c      	b.n	8005a0c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	603b      	str	r3, [r7, #0]
 8005a20:	4613      	mov	r3, r2
 8005a22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a24:	e062      	b.n	8005aec <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2c:	d05e      	beq.n	8005aec <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a2e:	f7fa fdeb 	bl	8000608 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d302      	bcc.n	8005a44 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d11d      	bne.n	8005a80 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a52:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0201 	bic.w	r2, r2, #1
 8005a62:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e045      	b.n	8005b0c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d02e      	beq.n	8005aec <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a9c:	d126      	bne.n	8005aec <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005aa6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ab6:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 0201 	bic.w	r2, r2, #1
 8005ac6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e00f      	b.n	8005b0c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	69da      	ldr	r2, [r3, #28]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	4013      	ands	r3, r2
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	bf0c      	ite	eq
 8005afc:	2301      	moveq	r3, #1
 8005afe:	2300      	movne	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	79fb      	ldrb	r3, [r7, #7]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d08d      	beq.n	8005a26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <HAL_UARTEx_DisableFifoMode+0x16>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e027      	b.n	8005b7a <HAL_UARTEx_DisableFifoMode+0x66>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2224      	movs	r2, #36	; 0x24
 8005b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0201 	bic.w	r2, r2, #1
 8005b50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b084      	sub	sp, #16
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d101      	bne.n	8005b9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e02d      	b.n	8005bfa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2224      	movs	r2, #36	; 0x24
 8005baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0201 	bic.w	r2, r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f850 	bl	8005c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d101      	bne.n	8005c1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c16:	2302      	movs	r3, #2
 8005c18:	e02d      	b.n	8005c76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2224      	movs	r2, #36	; 0x24
 8005c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0201 	bic.w	r2, r2, #1
 8005c40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f812 	bl	8005c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b089      	sub	sp, #36	; 0x24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005c88:	4a2f      	ldr	r2, [pc, #188]	; (8005d48 <UARTEx_SetNbDataToProcess+0xc8>)
 8005c8a:	f107 0314 	add.w	r3, r7, #20
 8005c8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c92:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005c96:	4a2d      	ldr	r2, [pc, #180]	; (8005d4c <UARTEx_SetNbDataToProcess+0xcc>)
 8005c98:	f107 030c 	add.w	r3, r7, #12
 8005c9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ca0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d108      	bne.n	8005cbe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005cbc:	e03d      	b.n	8005d3a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cbe:	2308      	movs	r3, #8
 8005cc0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cc2:	2308      	movs	r3, #8
 8005cc4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	0e5b      	lsrs	r3, r3, #25
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	0f5b      	lsrs	r3, r3, #29
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005ce6:	7fbb      	ldrb	r3, [r7, #30]
 8005ce8:	7f3a      	ldrb	r2, [r7, #28]
 8005cea:	f107 0120 	add.w	r1, r7, #32
 8005cee:	440a      	add	r2, r1
 8005cf0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005cf4:	fb02 f303 	mul.w	r3, r2, r3
 8005cf8:	7f3a      	ldrb	r2, [r7, #28]
 8005cfa:	f107 0120 	add.w	r1, r7, #32
 8005cfe:	440a      	add	r2, r1
 8005d00:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005d04:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005d10:	7ffb      	ldrb	r3, [r7, #31]
 8005d12:	7f7a      	ldrb	r2, [r7, #29]
 8005d14:	f107 0120 	add.w	r1, r7, #32
 8005d18:	440a      	add	r2, r1
 8005d1a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005d1e:	fb02 f303 	mul.w	r3, r2, r3
 8005d22:	7f7a      	ldrb	r2, [r7, #29]
 8005d24:	f107 0120 	add.w	r1, r7, #32
 8005d28:	440a      	add	r2, r1
 8005d2a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005d2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d3a:	bf00      	nop
 8005d3c:	3724      	adds	r7, #36	; 0x24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	0800bb3c 	.word	0x0800bb3c
 8005d4c:	0800bb44 	.word	0x0800bb44

08005d50 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	4603      	mov	r3, r0
 8005d58:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d62:	2b84      	cmp	r3, #132	; 0x84
 8005d64:	d005      	beq.n	8005d72 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d66:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	3303      	adds	r3, #3
 8005d70:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005d72:	68fb      	ldr	r3, [r7, #12]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d86:	f3ef 8305 	mrs	r3, IPSR
 8005d8a:	607b      	str	r3, [r7, #4]
  return(result);
 8005d8c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	bf14      	ite	ne
 8005d92:	2301      	movne	r3, #1
 8005d94:	2300      	moveq	r3, #0
 8005d96:	b2db      	uxtb	r3, r3
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005da8:	f001 fb88 	bl	80074bc <vTaskStartScheduler>
  
  return osOK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005db2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005db4:	b089      	sub	sp, #36	; 0x24
 8005db6:	af04      	add	r7, sp, #16
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d020      	beq.n	8005e06 <osThreadCreate+0x54>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01c      	beq.n	8005e06 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685c      	ldr	r4, [r3, #4]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681d      	ldr	r5, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691e      	ldr	r6, [r3, #16]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7ff ffb6 	bl	8005d50 <makeFreeRtosPriority>
 8005de4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dee:	9202      	str	r2, [sp, #8]
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	9100      	str	r1, [sp, #0]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	4632      	mov	r2, r6
 8005df8:	4629      	mov	r1, r5
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f001 f99a 	bl	8007134 <xTaskCreateStatic>
 8005e00:	4603      	mov	r3, r0
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	e01c      	b.n	8005e40 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685c      	ldr	r4, [r3, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e12:	b29e      	uxth	r6, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff ff98 	bl	8005d50 <makeFreeRtosPriority>
 8005e20:	4602      	mov	r2, r0
 8005e22:	f107 030c 	add.w	r3, r7, #12
 8005e26:	9301      	str	r3, [sp, #4]
 8005e28:	9200      	str	r2, [sp, #0]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	4632      	mov	r2, r6
 8005e2e:	4629      	mov	r1, r5
 8005e30:	4620      	mov	r0, r4
 8005e32:	f001 f9d9 	bl	80071e8 <xTaskCreate>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d001      	beq.n	8005e40 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	e000      	b.n	8005e42 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005e40:	68fb      	ldr	r3, [r7, #12]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <osDelay+0x16>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	e000      	b.n	8005e62 <osDelay+0x18>
 8005e60:	2301      	movs	r3, #1
 8005e62:	4618      	mov	r0, r3
 8005e64:	f001 faf6 	bl	8007454 <vTaskDelay>
  
  return osOK;
 8005e68:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8005e86:	f7ff ff7b 	bl	8005d80 <inHandlerMode>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01c      	beq.n	8005eca <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	f107 0208 	add.w	r2, r7, #8
 8005e96:	f107 030c 	add.w	r3, r7, #12
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f002 fa19 	bl	80082d8 <xTaskGenericNotifyFromISR>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d002      	beq.n	8005eb2 <osSignalSet+0x3e>
      return 0x80000000;
 8005eac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005eb0:	e019      	b.n	8005ee6 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d015      	beq.n	8005ee4 <osSignalSet+0x70>
 8005eb8:	4b0d      	ldr	r3, [pc, #52]	; (8005ef0 <osSignalSet+0x7c>)
 8005eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	e00c      	b.n	8005ee4 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	f107 0308 	add.w	r3, r7, #8
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f002 f94e 	bl	8008174 <xTaskGenericNotify>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d002      	beq.n	8005ee4 <osSignalSet+0x70>
    return 0x80000000;
 8005ede:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ee2:	e000      	b.n	8005ee6 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	e000ed04 	.word	0xe000ed04

08005ef4 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8005ef4:	b590      	push	{r4, r7, lr}
 8005ef6:	b089      	sub	sp, #36	; 0x24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8005f00:	2300      	movs	r3, #0
 8005f02:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0e:	d103      	bne.n	8005f18 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8005f10:	f04f 33ff 	mov.w	r3, #4294967295
 8005f14:	61fb      	str	r3, [r7, #28]
 8005f16:	e009      	b.n	8005f2c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d006      	beq.n	8005f2c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <osSignalWait+0x38>
      ticks = 1;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8005f2c:	f7ff ff28 	bl	8005d80 <inHandlerMode>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8005f36:	2382      	movs	r3, #130	; 0x82
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	e01b      	b.n	8005f74 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8005f3c:	68b9      	ldr	r1, [r7, #8]
 8005f3e:	f107 0310 	add.w	r3, r7, #16
 8005f42:	1d1a      	adds	r2, r3, #4
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	2000      	movs	r0, #0
 8005f48:	f002 f8ba 	bl	80080c0 <xTaskNotifyWait>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d008      	beq.n	8005f64 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d102      	bne.n	8005f5e <osSignalWait+0x6a>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	613b      	str	r3, [r7, #16]
 8005f5c:	e00a      	b.n	8005f74 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8005f5e:	2340      	movs	r3, #64	; 0x40
 8005f60:	613b      	str	r3, [r7, #16]
 8005f62:	e007      	b.n	8005f74 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	da02      	bge.n	8005f70 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8005f6a:	2386      	movs	r3, #134	; 0x86
 8005f6c:	613b      	str	r3, [r7, #16]
 8005f6e:	e001      	b.n	8005f74 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8005f70:	2308      	movs	r3, #8
 8005f72:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	461c      	mov	r4, r3
 8005f78:	f107 0310 	add.w	r3, r7, #16
 8005f7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	3724      	adds	r7, #36	; 0x24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd90      	pop	{r4, r7, pc}

08005f8c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d007      	beq.n	8005fac <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	2001      	movs	r0, #1
 8005fa4:	f000 faad 	bl	8006502 <xQueueCreateMutexStatic>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	e003      	b.n	8005fb4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005fac:	2001      	movs	r0, #1
 8005fae:	f000 fa90 	bl	80064d2 <xQueueCreateMutex>
 8005fb2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <osMutexWait+0x18>
    return osErrorParameter;
 8005fd0:	2380      	movs	r3, #128	; 0x80
 8005fd2:	e03a      	b.n	800604a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fde:	d103      	bne.n	8005fe8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	e009      	b.n	8005ffc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d006      	beq.n	8005ffc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <osMutexWait+0x40>
      ticks = 1;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005ffc:	f7ff fec0 	bl	8005d80 <inHandlerMode>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d017      	beq.n	8006036 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006006:	f107 0308 	add.w	r3, r7, #8
 800600a:	461a      	mov	r2, r3
 800600c:	2100      	movs	r1, #0
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fe8e 	bl	8006d30 <xQueueReceiveFromISR>
 8006014:	4603      	mov	r3, r0
 8006016:	2b01      	cmp	r3, #1
 8006018:	d001      	beq.n	800601e <osMutexWait+0x62>
      return osErrorOS;
 800601a:	23ff      	movs	r3, #255	; 0xff
 800601c:	e015      	b.n	800604a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d011      	beq.n	8006048 <osMutexWait+0x8c>
 8006024:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <osMutexWait+0x98>)
 8006026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	e008      	b.n	8006048 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006036:	68f9      	ldr	r1, [r7, #12]
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fd71 	bl	8006b20 <xQueueSemaphoreTake>
 800603e:	4603      	mov	r3, r0
 8006040:	2b01      	cmp	r3, #1
 8006042:	d001      	beq.n	8006048 <osMutexWait+0x8c>
    return osErrorOS;
 8006044:	23ff      	movs	r3, #255	; 0xff
 8006046:	e000      	b.n	800604a <osMutexWait+0x8e>
  }
  
  return osOK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	e000ed04 	.word	0xe000ed04

08006058 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006060:	2300      	movs	r3, #0
 8006062:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006064:	2300      	movs	r3, #0
 8006066:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006068:	f7ff fe8a 	bl	8005d80 <inHandlerMode>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d016      	beq.n	80060a0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006072:	f107 0308 	add.w	r3, r7, #8
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fbeb 	bl	8006854 <xQueueGiveFromISR>
 800607e:	4603      	mov	r3, r0
 8006080:	2b01      	cmp	r3, #1
 8006082:	d001      	beq.n	8006088 <osMutexRelease+0x30>
      return osErrorOS;
 8006084:	23ff      	movs	r3, #255	; 0xff
 8006086:	e017      	b.n	80060b8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d013      	beq.n	80060b6 <osMutexRelease+0x5e>
 800608e:	4b0c      	ldr	r3, [pc, #48]	; (80060c0 <osMutexRelease+0x68>)
 8006090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	e00a      	b.n	80060b6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80060a0:	2300      	movs	r3, #0
 80060a2:	2200      	movs	r2, #0
 80060a4:	2100      	movs	r1, #0
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fa46 	bl	8006538 <xQueueGenericSend>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d001      	beq.n	80060b6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80060b2:	23ff      	movs	r3, #255	; 0xff
 80060b4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80060b6:	68fb      	ldr	r3, [r7, #12]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	e000ed04 	.word	0xe000ed04

080060c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f103 0208 	add.w	r2, r3, #8
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f04f 32ff 	mov.w	r2, #4294967295
 80060dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f103 0208 	add.w	r2, r3, #8
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f103 0208 	add.w	r2, r3, #8
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800611e:	b480      	push	{r7}
 8006120:	b085      	sub	sp, #20
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	601a      	str	r2, [r3, #0]
}
 800615a:	bf00      	nop
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006166:	b480      	push	{r7}
 8006168:	b085      	sub	sp, #20
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617c:	d103      	bne.n	8006186 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	e00c      	b.n	80061a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	3308      	adds	r3, #8
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	e002      	b.n	8006194 <vListInsert+0x2e>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	429a      	cmp	r2, r3
 800619e:	d2f6      	bcs.n	800618e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	601a      	str	r2, [r3, #0]
}
 80061cc:	bf00      	nop
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6892      	ldr	r2, [r2, #8]
 80061ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6852      	ldr	r2, [r2, #4]
 80061f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	429a      	cmp	r2, r3
 8006202:	d103      	bne.n	800620c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	1e5a      	subs	r2, r3, #1
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d109      	bne.n	8006254 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	60bb      	str	r3, [r7, #8]
 8006252:	e7fe      	b.n	8006252 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006254:	f002 fdd2 	bl	8008dfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006260:	68f9      	ldr	r1, [r7, #12]
 8006262:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006264:	fb01 f303 	mul.w	r3, r1, r3
 8006268:	441a      	add	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006284:	3b01      	subs	r3, #1
 8006286:	68f9      	ldr	r1, [r7, #12]
 8006288:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800628a:	fb01 f303 	mul.w	r3, r1, r3
 800628e:	441a      	add	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	22ff      	movs	r2, #255	; 0xff
 8006298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	22ff      	movs	r2, #255	; 0xff
 80062a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d114      	bne.n	80062d4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d01a      	beq.n	80062e8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3310      	adds	r3, #16
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 fb7e 	bl	80079b8 <xTaskRemoveFromEventList>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d012      	beq.n	80062e8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80062c2:	4b0d      	ldr	r3, [pc, #52]	; (80062f8 <xQueueGenericReset+0xcc>)
 80062c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	e009      	b.n	80062e8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3310      	adds	r3, #16
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff fef3 	bl	80060c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3324      	adds	r3, #36	; 0x24
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7ff feee 	bl	80060c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80062e8:	f002 fdb6 	bl	8008e58 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80062ec:	2301      	movs	r3, #1
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	e000ed04 	.word	0xe000ed04

080062fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08e      	sub	sp, #56	; 0x38
 8006300:	af02      	add	r7, sp, #8
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d109      	bne.n	8006324 <xQueueGenericCreateStatic+0x28>
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	62bb      	str	r3, [r7, #40]	; 0x28
 8006322:	e7fe      	b.n	8006322 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d109      	bne.n	800633e <xQueueGenericCreateStatic+0x42>
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	627b      	str	r3, [r7, #36]	; 0x24
 800633c:	e7fe      	b.n	800633c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <xQueueGenericCreateStatic+0x4e>
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <xQueueGenericCreateStatic+0x52>
 800634a:	2301      	movs	r3, #1
 800634c:	e000      	b.n	8006350 <xQueueGenericCreateStatic+0x54>
 800634e:	2300      	movs	r3, #0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d109      	bne.n	8006368 <xQueueGenericCreateStatic+0x6c>
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	623b      	str	r3, [r7, #32]
 8006366:	e7fe      	b.n	8006366 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d102      	bne.n	8006374 <xQueueGenericCreateStatic+0x78>
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <xQueueGenericCreateStatic+0x7c>
 8006374:	2301      	movs	r3, #1
 8006376:	e000      	b.n	800637a <xQueueGenericCreateStatic+0x7e>
 8006378:	2300      	movs	r3, #0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <xQueueGenericCreateStatic+0x96>
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	61fb      	str	r3, [r7, #28]
 8006390:	e7fe      	b.n	8006390 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006392:	2348      	movs	r3, #72	; 0x48
 8006394:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b48      	cmp	r3, #72	; 0x48
 800639a:	d009      	beq.n	80063b0 <xQueueGenericCreateStatic+0xb4>
 800639c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	e7fe      	b.n	80063ae <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80063b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00d      	beq.n	80063d8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063c4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	4613      	mov	r3, r2
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 f844 	bl	8006460 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80063da:	4618      	mov	r0, r3
 80063dc:	3730      	adds	r7, #48	; 0x30
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b08a      	sub	sp, #40	; 0x28
 80063e6:	af02      	add	r7, sp, #8
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	4613      	mov	r3, r2
 80063ee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d109      	bne.n	800640a <xQueueGenericCreate+0x28>
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	e7fe      	b.n	8006408 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d102      	bne.n	8006416 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006410:	2300      	movs	r3, #0
 8006412:	61fb      	str	r3, [r7, #28]
 8006414:	e004      	b.n	8006420 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	fb02 f303 	mul.w	r3, r2, r3
 800641e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	3348      	adds	r3, #72	; 0x48
 8006424:	4618      	mov	r0, r3
 8006426:	f002 fe03 	bl	8009030 <pvPortMalloc>
 800642a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d011      	beq.n	8006456 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	3348      	adds	r3, #72	; 0x48
 800643a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006444:	79fa      	ldrb	r2, [r7, #7]
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	4613      	mov	r3, r2
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	68b9      	ldr	r1, [r7, #8]
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 f805 	bl	8006460 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006456:	69bb      	ldr	r3, [r7, #24]
	}
 8006458:	4618      	mov	r0, r3
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d103      	bne.n	800647c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	601a      	str	r2, [r3, #0]
 800647a:	e002      	b.n	8006482 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800648e:	2101      	movs	r1, #1
 8006490:	69b8      	ldr	r0, [r7, #24]
 8006492:	f7ff fecb 	bl	800622c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006496:	bf00      	nop
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b082      	sub	sp, #8
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00e      	beq.n	80064ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80064be:	2300      	movs	r3, #0
 80064c0:	2200      	movs	r2, #0
 80064c2:	2100      	movs	r1, #0
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f837 	bl	8006538 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80064ca:	bf00      	nop
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b086      	sub	sp, #24
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	4603      	mov	r3, r0
 80064da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80064dc:	2301      	movs	r3, #1
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	2300      	movs	r3, #0
 80064e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80064e4:	79fb      	ldrb	r3, [r7, #7]
 80064e6:	461a      	mov	r2, r3
 80064e8:	6939      	ldr	r1, [r7, #16]
 80064ea:	6978      	ldr	r0, [r7, #20]
 80064ec:	f7ff ff79 	bl	80063e2 <xQueueGenericCreate>
 80064f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f7ff ffd3 	bl	800649e <prvInitialiseMutex>

		return xNewQueue;
 80064f8:	68fb      	ldr	r3, [r7, #12]
	}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006502:	b580      	push	{r7, lr}
 8006504:	b088      	sub	sp, #32
 8006506:	af02      	add	r7, sp, #8
 8006508:	4603      	mov	r3, r0
 800650a:	6039      	str	r1, [r7, #0]
 800650c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800650e:	2301      	movs	r3, #1
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	2300      	movs	r3, #0
 8006514:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006516:	79fb      	ldrb	r3, [r7, #7]
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2200      	movs	r2, #0
 800651e:	6939      	ldr	r1, [r7, #16]
 8006520:	6978      	ldr	r0, [r7, #20]
 8006522:	f7ff feeb 	bl	80062fc <xQueueGenericCreateStatic>
 8006526:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f7ff ffb8 	bl	800649e <prvInitialiseMutex>

		return xNewQueue;
 800652e:	68fb      	ldr	r3, [r7, #12]
	}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08e      	sub	sp, #56	; 0x38
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006546:	2300      	movs	r3, #0
 8006548:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	2b00      	cmp	r3, #0
 8006552:	d109      	bne.n	8006568 <xQueueGenericSend+0x30>
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	62bb      	str	r3, [r7, #40]	; 0x28
 8006566:	e7fe      	b.n	8006566 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d103      	bne.n	8006576 <xQueueGenericSend+0x3e>
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <xQueueGenericSend+0x42>
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <xQueueGenericSend+0x44>
 800657a:	2300      	movs	r3, #0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d109      	bne.n	8006594 <xQueueGenericSend+0x5c>
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
 8006592:	e7fe      	b.n	8006592 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b02      	cmp	r3, #2
 8006598:	d103      	bne.n	80065a2 <xQueueGenericSend+0x6a>
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <xQueueGenericSend+0x6e>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <xQueueGenericSend+0x70>
 80065a6:	2300      	movs	r3, #0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d109      	bne.n	80065c0 <xQueueGenericSend+0x88>
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	623b      	str	r3, [r7, #32]
 80065be:	e7fe      	b.n	80065be <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065c0:	f001 fbb0 	bl	8007d24 <xTaskGetSchedulerState>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d102      	bne.n	80065d0 <xQueueGenericSend+0x98>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <xQueueGenericSend+0x9c>
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <xQueueGenericSend+0x9e>
 80065d4:	2300      	movs	r3, #0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d109      	bne.n	80065ee <xQueueGenericSend+0xb6>
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	61fb      	str	r3, [r7, #28]
 80065ec:	e7fe      	b.n	80065ec <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065ee:	f002 fc05 	bl	8008dfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d302      	bcc.n	8006604 <xQueueGenericSend+0xcc>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b02      	cmp	r3, #2
 8006602:	d129      	bne.n	8006658 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	68b9      	ldr	r1, [r7, #8]
 8006608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800660a:	f000 fc26 	bl	8006e5a <prvCopyDataToQueue>
 800660e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	2b00      	cmp	r3, #0
 8006616:	d010      	beq.n	800663a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	3324      	adds	r3, #36	; 0x24
 800661c:	4618      	mov	r0, r3
 800661e:	f001 f9cb 	bl	80079b8 <xTaskRemoveFromEventList>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d013      	beq.n	8006650 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006628:	4b3f      	ldr	r3, [pc, #252]	; (8006728 <xQueueGenericSend+0x1f0>)
 800662a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	e00a      	b.n	8006650 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	2b00      	cmp	r3, #0
 800663e:	d007      	beq.n	8006650 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006640:	4b39      	ldr	r3, [pc, #228]	; (8006728 <xQueueGenericSend+0x1f0>)
 8006642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006650:	f002 fc02 	bl	8008e58 <vPortExitCritical>
				return pdPASS;
 8006654:	2301      	movs	r3, #1
 8006656:	e063      	b.n	8006720 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d103      	bne.n	8006666 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800665e:	f002 fbfb 	bl	8008e58 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006662:	2300      	movs	r3, #0
 8006664:	e05c      	b.n	8006720 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006668:	2b00      	cmp	r3, #0
 800666a:	d106      	bne.n	800667a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800666c:	f107 0314 	add.w	r3, r7, #20
 8006670:	4618      	mov	r0, r3
 8006672:	f001 fa03 	bl	8007a7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006676:	2301      	movs	r3, #1
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800667a:	f002 fbed 	bl	8008e58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800667e:	f000 ff81 	bl	8007584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006682:	f002 fbbb 	bl	8008dfc <vPortEnterCritical>
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800668c:	b25b      	sxtb	r3, r3
 800668e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006692:	d103      	bne.n	800669c <xQueueGenericSend+0x164>
 8006694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066a2:	b25b      	sxtb	r3, r3
 80066a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a8:	d103      	bne.n	80066b2 <xQueueGenericSend+0x17a>
 80066aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066b2:	f002 fbd1 	bl	8008e58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066b6:	1d3a      	adds	r2, r7, #4
 80066b8:	f107 0314 	add.w	r3, r7, #20
 80066bc:	4611      	mov	r1, r2
 80066be:	4618      	mov	r0, r3
 80066c0:	f001 f9f2 	bl	8007aa8 <xTaskCheckForTimeOut>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d124      	bne.n	8006714 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066cc:	f000 fcbd 	bl	800704a <prvIsQueueFull>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d018      	beq.n	8006708 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	3310      	adds	r3, #16
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	4611      	mov	r1, r2
 80066de:	4618      	mov	r0, r3
 80066e0:	f001 f91c 	bl	800791c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066e6:	f000 fc48 	bl	8006f7a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066ea:	f000 ff59 	bl	80075a0 <xTaskResumeAll>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f47f af7c 	bne.w	80065ee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80066f6:	4b0c      	ldr	r3, [pc, #48]	; (8006728 <xQueueGenericSend+0x1f0>)
 80066f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	e772      	b.n	80065ee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800670a:	f000 fc36 	bl	8006f7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800670e:	f000 ff47 	bl	80075a0 <xTaskResumeAll>
 8006712:	e76c      	b.n	80065ee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006716:	f000 fc30 	bl	8006f7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800671a:	f000 ff41 	bl	80075a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800671e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006720:	4618      	mov	r0, r3
 8006722:	3738      	adds	r7, #56	; 0x38
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	e000ed04 	.word	0xe000ed04

0800672c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08e      	sub	sp, #56	; 0x38
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	2b00      	cmp	r3, #0
 8006742:	d109      	bne.n	8006758 <xQueueGenericSendFromISR+0x2c>
 8006744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	627b      	str	r3, [r7, #36]	; 0x24
 8006756:	e7fe      	b.n	8006756 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d103      	bne.n	8006766 <xQueueGenericSendFromISR+0x3a>
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <xQueueGenericSendFromISR+0x3e>
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <xQueueGenericSendFromISR+0x40>
 800676a:	2300      	movs	r3, #0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d109      	bne.n	8006784 <xQueueGenericSendFromISR+0x58>
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	623b      	str	r3, [r7, #32]
 8006782:	e7fe      	b.n	8006782 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b02      	cmp	r3, #2
 8006788:	d103      	bne.n	8006792 <xQueueGenericSendFromISR+0x66>
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678e:	2b01      	cmp	r3, #1
 8006790:	d101      	bne.n	8006796 <xQueueGenericSendFromISR+0x6a>
 8006792:	2301      	movs	r3, #1
 8006794:	e000      	b.n	8006798 <xQueueGenericSendFromISR+0x6c>
 8006796:	2300      	movs	r3, #0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d109      	bne.n	80067b0 <xQueueGenericSendFromISR+0x84>
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	61fb      	str	r3, [r7, #28]
 80067ae:	e7fe      	b.n	80067ae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067b0:	f002 fc00 	bl	8008fb4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80067b4:	f3ef 8211 	mrs	r2, BASEPRI
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	61ba      	str	r2, [r7, #24]
 80067ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d8:	429a      	cmp	r2, r3
 80067da:	d302      	bcc.n	80067e2 <xQueueGenericSendFromISR+0xb6>
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d12c      	bne.n	800683c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067f2:	f000 fb32 	bl	8006e5a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80067fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fe:	d112      	bne.n	8006826 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	2b00      	cmp	r3, #0
 8006806:	d016      	beq.n	8006836 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	3324      	adds	r3, #36	; 0x24
 800680c:	4618      	mov	r0, r3
 800680e:	f001 f8d3 	bl	80079b8 <xTaskRemoveFromEventList>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00e      	beq.n	8006836 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00b      	beq.n	8006836 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	e007      	b.n	8006836 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800682a:	3301      	adds	r3, #1
 800682c:	b2db      	uxtb	r3, r3
 800682e:	b25a      	sxtb	r2, r3
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006836:	2301      	movs	r3, #1
 8006838:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800683a:	e001      	b.n	8006840 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800683c:	2300      	movs	r3, #0
 800683e:	637b      	str	r3, [r7, #52]	; 0x34
 8006840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006842:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800684a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800684c:	4618      	mov	r0, r3
 800684e:	3738      	adds	r7, #56	; 0x38
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b08e      	sub	sp, #56	; 0x38
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	2b00      	cmp	r3, #0
 8006866:	d109      	bne.n	800687c <xQueueGiveFromISR+0x28>
	__asm volatile
 8006868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	623b      	str	r3, [r7, #32]
 800687a:	e7fe      	b.n	800687a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800687c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	2b00      	cmp	r3, #0
 8006882:	d009      	beq.n	8006898 <xQueueGiveFromISR+0x44>
 8006884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	61fb      	str	r3, [r7, #28]
 8006896:	e7fe      	b.n	8006896 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d103      	bne.n	80068a8 <xQueueGiveFromISR+0x54>
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <xQueueGiveFromISR+0x58>
 80068a8:	2301      	movs	r3, #1
 80068aa:	e000      	b.n	80068ae <xQueueGiveFromISR+0x5a>
 80068ac:	2300      	movs	r3, #0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d109      	bne.n	80068c6 <xQueueGiveFromISR+0x72>
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	61bb      	str	r3, [r7, #24]
 80068c4:	e7fe      	b.n	80068c4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068c6:	f002 fb75 	bl	8008fb4 <vPortValidateInterruptPriority>
	__asm volatile
 80068ca:	f3ef 8211 	mrs	r2, BASEPRI
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	617a      	str	r2, [r7, #20]
 80068e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80068e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d22b      	bcs.n	800694e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006908:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800690c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006910:	d112      	bne.n	8006938 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	2b00      	cmp	r3, #0
 8006918:	d016      	beq.n	8006948 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	3324      	adds	r3, #36	; 0x24
 800691e:	4618      	mov	r0, r3
 8006920:	f001 f84a 	bl	80079b8 <xTaskRemoveFromEventList>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00e      	beq.n	8006948 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00b      	beq.n	8006948 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2201      	movs	r2, #1
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	e007      	b.n	8006948 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800693c:	3301      	adds	r3, #1
 800693e:	b2db      	uxtb	r3, r3
 8006940:	b25a      	sxtb	r2, r3
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006948:	2301      	movs	r3, #1
 800694a:	637b      	str	r3, [r7, #52]	; 0x34
 800694c:	e001      	b.n	8006952 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800694e:	2300      	movs	r3, #0
 8006950:	637b      	str	r3, [r7, #52]	; 0x34
 8006952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006954:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800695c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800695e:	4618      	mov	r0, r3
 8006960:	3738      	adds	r7, #56	; 0x38
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08c      	sub	sp, #48	; 0x30
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006974:	2300      	movs	r3, #0
 8006976:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800697c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697e:	2b00      	cmp	r3, #0
 8006980:	d109      	bne.n	8006996 <xQueueReceive+0x2e>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	623b      	str	r3, [r7, #32]
 8006994:	e7fe      	b.n	8006994 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d103      	bne.n	80069a4 <xQueueReceive+0x3c>
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <xQueueReceive+0x40>
 80069a4:	2301      	movs	r3, #1
 80069a6:	e000      	b.n	80069aa <xQueueReceive+0x42>
 80069a8:	2300      	movs	r3, #0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d109      	bne.n	80069c2 <xQueueReceive+0x5a>
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	61fb      	str	r3, [r7, #28]
 80069c0:	e7fe      	b.n	80069c0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069c2:	f001 f9af 	bl	8007d24 <xTaskGetSchedulerState>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d102      	bne.n	80069d2 <xQueueReceive+0x6a>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <xQueueReceive+0x6e>
 80069d2:	2301      	movs	r3, #1
 80069d4:	e000      	b.n	80069d8 <xQueueReceive+0x70>
 80069d6:	2300      	movs	r3, #0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d109      	bne.n	80069f0 <xQueueReceive+0x88>
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	61bb      	str	r3, [r7, #24]
 80069ee:	e7fe      	b.n	80069ee <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069f0:	f002 fa04 	bl	8008dfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01f      	beq.n	8006a40 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a00:	68b9      	ldr	r1, [r7, #8]
 8006a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a04:	f000 fa93 	bl	8006f2e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	1e5a      	subs	r2, r3, #1
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00f      	beq.n	8006a38 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	3310      	adds	r3, #16
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 ffcb 	bl	80079b8 <xTaskRemoveFromEventList>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a28:	4b3c      	ldr	r3, [pc, #240]	; (8006b1c <xQueueReceive+0x1b4>)
 8006a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a38:	f002 fa0e 	bl	8008e58 <vPortExitCritical>
				return pdPASS;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e069      	b.n	8006b14 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d103      	bne.n	8006a4e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a46:	f002 fa07 	bl	8008e58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e062      	b.n	8006b14 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d106      	bne.n	8006a62 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a54:	f107 0310 	add.w	r3, r7, #16
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f001 f80f 	bl	8007a7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a62:	f002 f9f9 	bl	8008e58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a66:	f000 fd8d 	bl	8007584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a6a:	f002 f9c7 	bl	8008dfc <vPortEnterCritical>
 8006a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a74:	b25b      	sxtb	r3, r3
 8006a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7a:	d103      	bne.n	8006a84 <xQueueReceive+0x11c>
 8006a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a8a:	b25b      	sxtb	r3, r3
 8006a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a90:	d103      	bne.n	8006a9a <xQueueReceive+0x132>
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a9a:	f002 f9dd 	bl	8008e58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a9e:	1d3a      	adds	r2, r7, #4
 8006aa0:	f107 0310 	add.w	r3, r7, #16
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 fffe 	bl	8007aa8 <xTaskCheckForTimeOut>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d123      	bne.n	8006afa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ab4:	f000 fab3 	bl	800701e <prvIsQueueEmpty>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d017      	beq.n	8006aee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	3324      	adds	r3, #36	; 0x24
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 ff28 	bl	800791c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ace:	f000 fa54 	bl	8006f7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ad2:	f000 fd65 	bl	80075a0 <xTaskResumeAll>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d189      	bne.n	80069f0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006adc:	4b0f      	ldr	r3, [pc, #60]	; (8006b1c <xQueueReceive+0x1b4>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	e780      	b.n	80069f0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af0:	f000 fa43 	bl	8006f7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006af4:	f000 fd54 	bl	80075a0 <xTaskResumeAll>
 8006af8:	e77a      	b.n	80069f0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006afc:	f000 fa3d 	bl	8006f7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b00:	f000 fd4e 	bl	80075a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b06:	f000 fa8a 	bl	800701e <prvIsQueueEmpty>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f43f af6f 	beq.w	80069f0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3730      	adds	r7, #48	; 0x30
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	e000ed04 	.word	0xe000ed04

08006b20 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08e      	sub	sp, #56	; 0x38
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b32:	2300      	movs	r3, #0
 8006b34:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d109      	bne.n	8006b50 <xQueueSemaphoreTake+0x30>
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	623b      	str	r3, [r7, #32]
 8006b4e:	e7fe      	b.n	8006b4e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d009      	beq.n	8006b6c <xQueueSemaphoreTake+0x4c>
 8006b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	61fb      	str	r3, [r7, #28]
 8006b6a:	e7fe      	b.n	8006b6a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b6c:	f001 f8da 	bl	8007d24 <xTaskGetSchedulerState>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d102      	bne.n	8006b7c <xQueueSemaphoreTake+0x5c>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <xQueueSemaphoreTake+0x60>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e000      	b.n	8006b82 <xQueueSemaphoreTake+0x62>
 8006b80:	2300      	movs	r3, #0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d109      	bne.n	8006b9a <xQueueSemaphoreTake+0x7a>
 8006b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	61bb      	str	r3, [r7, #24]
 8006b98:	e7fe      	b.n	8006b98 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b9a:	f002 f92f 	bl	8008dfc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d024      	beq.n	8006bf4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	1e5a      	subs	r2, r3, #1
 8006bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d104      	bne.n	8006bc4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006bba:	f001 fa6d 	bl	8008098 <pvTaskIncrementMutexHeldCount>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00f      	beq.n	8006bec <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bce:	3310      	adds	r3, #16
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fef1 	bl	80079b8 <xTaskRemoveFromEventList>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d007      	beq.n	8006bec <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bdc:	4b53      	ldr	r3, [pc, #332]	; (8006d2c <xQueueSemaphoreTake+0x20c>)
 8006bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bec:	f002 f934 	bl	8008e58 <vPortExitCritical>
				return pdPASS;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e096      	b.n	8006d22 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d110      	bne.n	8006c1c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d009      	beq.n	8006c14 <xQueueSemaphoreTake+0xf4>
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	617b      	str	r3, [r7, #20]
 8006c12:	e7fe      	b.n	8006c12 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c14:	f002 f920 	bl	8008e58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	e082      	b.n	8006d22 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d106      	bne.n	8006c30 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c22:	f107 030c 	add.w	r3, r7, #12
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 ff28 	bl	8007a7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c30:	f002 f912 	bl	8008e58 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c34:	f000 fca6 	bl	8007584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c38:	f002 f8e0 	bl	8008dfc <vPortEnterCritical>
 8006c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c42:	b25b      	sxtb	r3, r3
 8006c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c48:	d103      	bne.n	8006c52 <xQueueSemaphoreTake+0x132>
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c58:	b25b      	sxtb	r3, r3
 8006c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5e:	d103      	bne.n	8006c68 <xQueueSemaphoreTake+0x148>
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c68:	f002 f8f6 	bl	8008e58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c6c:	463a      	mov	r2, r7
 8006c6e:	f107 030c 	add.w	r3, r7, #12
 8006c72:	4611      	mov	r1, r2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 ff17 	bl	8007aa8 <xTaskCheckForTimeOut>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d132      	bne.n	8006ce6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c82:	f000 f9cc 	bl	800701e <prvIsQueueEmpty>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d026      	beq.n	8006cda <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d109      	bne.n	8006ca8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006c94:	f002 f8b2 	bl	8008dfc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f001 f85f 	bl	8007d60 <xTaskPriorityInherit>
 8006ca2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006ca4:	f002 f8d8 	bl	8008e58 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006caa:	3324      	adds	r3, #36	; 0x24
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	4611      	mov	r1, r2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fe33 	bl	800791c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cb8:	f000 f95f 	bl	8006f7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cbc:	f000 fc70 	bl	80075a0 <xTaskResumeAll>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f47f af69 	bne.w	8006b9a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006cc8:	4b18      	ldr	r3, [pc, #96]	; (8006d2c <xQueueSemaphoreTake+0x20c>)
 8006cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	e75f      	b.n	8006b9a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006cda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cdc:	f000 f94d 	bl	8006f7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ce0:	f000 fc5e 	bl	80075a0 <xTaskResumeAll>
 8006ce4:	e759      	b.n	8006b9a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006ce6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ce8:	f000 f947 	bl	8006f7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cec:	f000 fc58 	bl	80075a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cf2:	f000 f994 	bl	800701e <prvIsQueueEmpty>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f43f af4e 	beq.w	8006b9a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00d      	beq.n	8006d20 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006d04:	f002 f87a 	bl	8008dfc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d0a:	f000 f88e 	bl	8006e2a <prvGetDisinheritPriorityAfterTimeout>
 8006d0e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d16:	4618      	mov	r0, r3
 8006d18:	f001 f926 	bl	8007f68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d1c:	f002 f89c 	bl	8008e58 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3738      	adds	r7, #56	; 0x38
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	e000ed04 	.word	0xe000ed04

08006d30 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08e      	sub	sp, #56	; 0x38
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <xQueueReceiveFromISR+0x2a>
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	623b      	str	r3, [r7, #32]
 8006d58:	e7fe      	b.n	8006d58 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d103      	bne.n	8006d68 <xQueueReceiveFromISR+0x38>
 8006d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <xQueueReceiveFromISR+0x3c>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <xQueueReceiveFromISR+0x3e>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d109      	bne.n	8006d86 <xQueueReceiveFromISR+0x56>
 8006d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	61fb      	str	r3, [r7, #28]
 8006d84:	e7fe      	b.n	8006d84 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d86:	f002 f915 	bl	8008fb4 <vPortValidateInterruptPriority>
	__asm volatile
 8006d8a:	f3ef 8211 	mrs	r2, BASEPRI
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	61ba      	str	r2, [r7, #24]
 8006da0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006da2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006da4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006daa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d02f      	beq.n	8006e12 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dbc:	68b9      	ldr	r1, [r7, #8]
 8006dbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dc0:	f000 f8b5 	bl	8006f2e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	1e5a      	subs	r2, r3, #1
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006dcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd4:	d112      	bne.n	8006dfc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d016      	beq.n	8006e0c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	3310      	adds	r3, #16
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fde8 	bl	80079b8 <xTaskRemoveFromEventList>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00e      	beq.n	8006e0c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00b      	beq.n	8006e0c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	e007      	b.n	8006e0c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e00:	3301      	adds	r3, #1
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	b25a      	sxtb	r2, r3
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e10:	e001      	b.n	8006e16 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006e12:	2300      	movs	r3, #0
 8006e14:	637b      	str	r3, [r7, #52]	; 0x34
 8006e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e18:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3738      	adds	r7, #56	; 0x38
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b085      	sub	sp, #20
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d006      	beq.n	8006e48 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f1c3 0307 	rsb	r3, r3, #7
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	e001      	b.n	8006e4c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
	}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b086      	sub	sp, #24
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	60f8      	str	r0, [r7, #12]
 8006e62:	60b9      	str	r1, [r7, #8]
 8006e64:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e66:	2300      	movs	r3, #0
 8006e68:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10d      	bne.n	8006e94 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d14d      	bne.n	8006f1c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 ffeb 	bl	8007e60 <xTaskPriorityDisinherit>
 8006e8a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	609a      	str	r2, [r3, #8]
 8006e92:	e043      	b.n	8006f1c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d119      	bne.n	8006ece <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6858      	ldr	r0, [r3, #4]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	68b9      	ldr	r1, [r7, #8]
 8006ea6:	f004 fa2d 	bl	800b304 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	441a      	add	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d32b      	bcc.n	8006f1c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	605a      	str	r2, [r3, #4]
 8006ecc:	e026      	b.n	8006f1c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	68d8      	ldr	r0, [r3, #12]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	68b9      	ldr	r1, [r7, #8]
 8006eda:	f004 fa13 	bl	800b304 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee6:	425b      	negs	r3, r3
 8006ee8:	441a      	add	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d207      	bcs.n	8006f0a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	689a      	ldr	r2, [r3, #8]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	425b      	negs	r3, r3
 8006f04:	441a      	add	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d105      	bne.n	8006f1c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f24:	697b      	ldr	r3, [r7, #20]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b082      	sub	sp, #8
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d018      	beq.n	8006f72 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f48:	441a      	add	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d303      	bcc.n	8006f62 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68d9      	ldr	r1, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6838      	ldr	r0, [r7, #0]
 8006f6e:	f004 f9c9 	bl	800b304 <memcpy>
	}
}
 8006f72:	bf00      	nop
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f82:	f001 ff3b 	bl	8008dfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f8c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f8e:	e011      	b.n	8006fb4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d012      	beq.n	8006fbe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	3324      	adds	r3, #36	; 0x24
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 fd0b 	bl	80079b8 <xTaskRemoveFromEventList>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006fa8:	f000 fdde 	bl	8007b68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	dce9      	bgt.n	8006f90 <prvUnlockQueue+0x16>
 8006fbc:	e000      	b.n	8006fc0 <prvUnlockQueue+0x46>
					break;
 8006fbe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	22ff      	movs	r2, #255	; 0xff
 8006fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006fc8:	f001 ff46 	bl	8008e58 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006fcc:	f001 ff16 	bl	8008dfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fd6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fd8:	e011      	b.n	8006ffe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d012      	beq.n	8007008 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	3310      	adds	r3, #16
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 fce6 	bl	80079b8 <xTaskRemoveFromEventList>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ff2:	f000 fdb9 	bl	8007b68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ff6:	7bbb      	ldrb	r3, [r7, #14]
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ffe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007002:	2b00      	cmp	r3, #0
 8007004:	dce9      	bgt.n	8006fda <prvUnlockQueue+0x60>
 8007006:	e000      	b.n	800700a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007008:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	22ff      	movs	r2, #255	; 0xff
 800700e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007012:	f001 ff21 	bl	8008e58 <vPortExitCritical>
}
 8007016:	bf00      	nop
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b084      	sub	sp, #16
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007026:	f001 fee9 	bl	8008dfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702e:	2b00      	cmp	r3, #0
 8007030:	d102      	bne.n	8007038 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007032:	2301      	movs	r3, #1
 8007034:	60fb      	str	r3, [r7, #12]
 8007036:	e001      	b.n	800703c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007038:	2300      	movs	r3, #0
 800703a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800703c:	f001 ff0c 	bl	8008e58 <vPortExitCritical>

	return xReturn;
 8007040:	68fb      	ldr	r3, [r7, #12]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b084      	sub	sp, #16
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007052:	f001 fed3 	bl	8008dfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705e:	429a      	cmp	r2, r3
 8007060:	d102      	bne.n	8007068 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007062:	2301      	movs	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
 8007066:	e001      	b.n	800706c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800706c:	f001 fef4 	bl	8008e58 <vPortExitCritical>

	return xReturn;
 8007070:	68fb      	ldr	r3, [r7, #12]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007086:	2300      	movs	r3, #0
 8007088:	60fb      	str	r3, [r7, #12]
 800708a:	e014      	b.n	80070b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800708c:	4a0e      	ldr	r2, [pc, #56]	; (80070c8 <vQueueAddToRegistry+0x4c>)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10b      	bne.n	80070b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007098:	490b      	ldr	r1, [pc, #44]	; (80070c8 <vQueueAddToRegistry+0x4c>)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070a2:	4a09      	ldr	r2, [pc, #36]	; (80070c8 <vQueueAddToRegistry+0x4c>)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	4413      	add	r3, r2
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070ae:	e005      	b.n	80070bc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	3301      	adds	r3, #1
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b07      	cmp	r3, #7
 80070ba:	d9e7      	bls.n	800708c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80070bc:	bf00      	nop
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	20001628 	.word	0x20001628

080070cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80070dc:	f001 fe8e 	bl	8008dfc <vPortEnterCritical>
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070e6:	b25b      	sxtb	r3, r3
 80070e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ec:	d103      	bne.n	80070f6 <vQueueWaitForMessageRestricted+0x2a>
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070fc:	b25b      	sxtb	r3, r3
 80070fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007102:	d103      	bne.n	800710c <vQueueWaitForMessageRestricted+0x40>
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800710c:	f001 fea4 	bl	8008e58 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007114:	2b00      	cmp	r3, #0
 8007116:	d106      	bne.n	8007126 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	3324      	adds	r3, #36	; 0x24
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fc1f 	bl	8007964 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007126:	6978      	ldr	r0, [r7, #20]
 8007128:	f7ff ff27 	bl	8006f7a <prvUnlockQueue>
	}
 800712c:	bf00      	nop
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007134:	b580      	push	{r7, lr}
 8007136:	b08e      	sub	sp, #56	; 0x38
 8007138:	af04      	add	r7, sp, #16
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007144:	2b00      	cmp	r3, #0
 8007146:	d109      	bne.n	800715c <xTaskCreateStatic+0x28>
	__asm volatile
 8007148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	623b      	str	r3, [r7, #32]
 800715a:	e7fe      	b.n	800715a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	2b00      	cmp	r3, #0
 8007160:	d109      	bne.n	8007176 <xTaskCreateStatic+0x42>
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	61fb      	str	r3, [r7, #28]
 8007174:	e7fe      	b.n	8007174 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007176:	2354      	movs	r3, #84	; 0x54
 8007178:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2b54      	cmp	r3, #84	; 0x54
 800717e:	d009      	beq.n	8007194 <xTaskCreateStatic+0x60>
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	61bb      	str	r3, [r7, #24]
 8007192:	e7fe      	b.n	8007192 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007194:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01e      	beq.n	80071da <xTaskCreateStatic+0xa6>
 800719c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d01b      	beq.n	80071da <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071b4:	2300      	movs	r3, #0
 80071b6:	9303      	str	r3, [sp, #12]
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	9302      	str	r3, [sp, #8]
 80071bc:	f107 0314 	add.w	r3, r7, #20
 80071c0:	9301      	str	r3, [sp, #4]
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	68b9      	ldr	r1, [r7, #8]
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 f850 	bl	8007272 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071d4:	f000 f8d4 	bl	8007380 <prvAddNewTaskToReadyList>
 80071d8:	e001      	b.n	80071de <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80071de:	697b      	ldr	r3, [r7, #20]
	}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3728      	adds	r7, #40	; 0x28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08c      	sub	sp, #48	; 0x30
 80071ec:	af04      	add	r7, sp, #16
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	603b      	str	r3, [r7, #0]
 80071f4:	4613      	mov	r3, r2
 80071f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071f8:	88fb      	ldrh	r3, [r7, #6]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4618      	mov	r0, r3
 80071fe:	f001 ff17 	bl	8009030 <pvPortMalloc>
 8007202:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00e      	beq.n	8007228 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800720a:	2054      	movs	r0, #84	; 0x54
 800720c:	f001 ff10 	bl	8009030 <pvPortMalloc>
 8007210:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	631a      	str	r2, [r3, #48]	; 0x30
 800721e:	e005      	b.n	800722c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007220:	6978      	ldr	r0, [r7, #20]
 8007222:	f001 ffc7 	bl	80091b4 <vPortFree>
 8007226:	e001      	b.n	800722c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007228:	2300      	movs	r3, #0
 800722a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d017      	beq.n	8007262 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800723a:	88fa      	ldrh	r2, [r7, #6]
 800723c:	2300      	movs	r3, #0
 800723e:	9303      	str	r3, [sp, #12]
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	9302      	str	r3, [sp, #8]
 8007244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007246:	9301      	str	r3, [sp, #4]
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	68b9      	ldr	r1, [r7, #8]
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 f80e 	bl	8007272 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007256:	69f8      	ldr	r0, [r7, #28]
 8007258:	f000 f892 	bl	8007380 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800725c:	2301      	movs	r3, #1
 800725e:	61bb      	str	r3, [r7, #24]
 8007260:	e002      	b.n	8007268 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007262:	f04f 33ff 	mov.w	r3, #4294967295
 8007266:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007268:	69bb      	ldr	r3, [r7, #24]
	}
 800726a:	4618      	mov	r0, r3
 800726c:	3720      	adds	r7, #32
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b088      	sub	sp, #32
 8007276:	af00      	add	r7, sp, #0
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	607a      	str	r2, [r7, #4]
 800727e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800728a:	3b01      	subs	r3, #1
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	f023 0307 	bic.w	r3, r3, #7
 8007298:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	f003 0307 	and.w	r3, r3, #7
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d009      	beq.n	80072b8 <prvInitialiseNewTask+0x46>
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	617b      	str	r3, [r7, #20]
 80072b6:	e7fe      	b.n	80072b6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d01f      	beq.n	80072fe <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072be:	2300      	movs	r3, #0
 80072c0:	61fb      	str	r3, [r7, #28]
 80072c2:	e012      	b.n	80072ea <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	4413      	add	r3, r2
 80072ca:	7819      	ldrb	r1, [r3, #0]
 80072cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	4413      	add	r3, r2
 80072d2:	3334      	adds	r3, #52	; 0x34
 80072d4:	460a      	mov	r2, r1
 80072d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	4413      	add	r3, r2
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d006      	beq.n	80072f2 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	3301      	adds	r3, #1
 80072e8:	61fb      	str	r3, [r7, #28]
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	2b0f      	cmp	r3, #15
 80072ee:	d9e9      	bls.n	80072c4 <prvInitialiseNewTask+0x52>
 80072f0:	e000      	b.n	80072f4 <prvInitialiseNewTask+0x82>
			{
				break;
 80072f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072fc:	e003      	b.n	8007306 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	2b06      	cmp	r3, #6
 800730a:	d901      	bls.n	8007310 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800730c:	2306      	movs	r3, #6
 800730e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007314:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800731a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800731c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731e:	2200      	movs	r2, #0
 8007320:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	3304      	adds	r3, #4
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe feec 	bl	8006104 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	3318      	adds	r3, #24
 8007330:	4618      	mov	r0, r3
 8007332:	f7fe fee7 	bl	8006104 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800733a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	f1c3 0207 	rsb	r2, r3, #7
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800734a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	2200      	movs	r2, #0
 8007350:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	68f9      	ldr	r1, [r7, #12]
 800735e:	69b8      	ldr	r0, [r7, #24]
 8007360:	f001 fc26 	bl	8008bb0 <pxPortInitialiseStack>
 8007364:	4602      	mov	r2, r0
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007376:	bf00      	nop
 8007378:	3720      	adds	r7, #32
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007388:	f001 fd38 	bl	8008dfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800738c:	4b2a      	ldr	r3, [pc, #168]	; (8007438 <prvAddNewTaskToReadyList+0xb8>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3301      	adds	r3, #1
 8007392:	4a29      	ldr	r2, [pc, #164]	; (8007438 <prvAddNewTaskToReadyList+0xb8>)
 8007394:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007396:	4b29      	ldr	r3, [pc, #164]	; (800743c <prvAddNewTaskToReadyList+0xbc>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d109      	bne.n	80073b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800739e:	4a27      	ldr	r2, [pc, #156]	; (800743c <prvAddNewTaskToReadyList+0xbc>)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073a4:	4b24      	ldr	r3, [pc, #144]	; (8007438 <prvAddNewTaskToReadyList+0xb8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d110      	bne.n	80073ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073ac:	f000 fc00 	bl	8007bb0 <prvInitialiseTaskLists>
 80073b0:	e00d      	b.n	80073ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073b2:	4b23      	ldr	r3, [pc, #140]	; (8007440 <prvAddNewTaskToReadyList+0xc0>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d109      	bne.n	80073ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073ba:	4b20      	ldr	r3, [pc, #128]	; (800743c <prvAddNewTaskToReadyList+0xbc>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d802      	bhi.n	80073ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073c8:	4a1c      	ldr	r2, [pc, #112]	; (800743c <prvAddNewTaskToReadyList+0xbc>)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073ce:	4b1d      	ldr	r3, [pc, #116]	; (8007444 <prvAddNewTaskToReadyList+0xc4>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3301      	adds	r3, #1
 80073d4:	4a1b      	ldr	r2, [pc, #108]	; (8007444 <prvAddNewTaskToReadyList+0xc4>)
 80073d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073dc:	2201      	movs	r2, #1
 80073de:	409a      	lsls	r2, r3
 80073e0:	4b19      	ldr	r3, [pc, #100]	; (8007448 <prvAddNewTaskToReadyList+0xc8>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	4a18      	ldr	r2, [pc, #96]	; (8007448 <prvAddNewTaskToReadyList+0xc8>)
 80073e8:	6013      	str	r3, [r2, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ee:	4613      	mov	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4a15      	ldr	r2, [pc, #84]	; (800744c <prvAddNewTaskToReadyList+0xcc>)
 80073f8:	441a      	add	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3304      	adds	r3, #4
 80073fe:	4619      	mov	r1, r3
 8007400:	4610      	mov	r0, r2
 8007402:	f7fe fe8c 	bl	800611e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007406:	f001 fd27 	bl	8008e58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800740a:	4b0d      	ldr	r3, [pc, #52]	; (8007440 <prvAddNewTaskToReadyList+0xc0>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00e      	beq.n	8007430 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007412:	4b0a      	ldr	r3, [pc, #40]	; (800743c <prvAddNewTaskToReadyList+0xbc>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741c:	429a      	cmp	r2, r3
 800741e:	d207      	bcs.n	8007430 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007420:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <prvAddNewTaskToReadyList+0xd0>)
 8007422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	20000254 	.word	0x20000254
 800743c:	20000154 	.word	0x20000154
 8007440:	20000260 	.word	0x20000260
 8007444:	20000270 	.word	0x20000270
 8007448:	2000025c 	.word	0x2000025c
 800744c:	20000158 	.word	0x20000158
 8007450:	e000ed04 	.word	0xe000ed04

08007454 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800745c:	2300      	movs	r3, #0
 800745e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d016      	beq.n	8007494 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007466:	4b13      	ldr	r3, [pc, #76]	; (80074b4 <vTaskDelay+0x60>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d009      	beq.n	8007482 <vTaskDelay+0x2e>
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	60bb      	str	r3, [r7, #8]
 8007480:	e7fe      	b.n	8007480 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007482:	f000 f87f 	bl	8007584 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007486:	2100      	movs	r1, #0
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fffd 	bl	8008488 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800748e:	f000 f887 	bl	80075a0 <xTaskResumeAll>
 8007492:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d107      	bne.n	80074aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800749a:	4b07      	ldr	r3, [pc, #28]	; (80074b8 <vTaskDelay+0x64>)
 800749c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074aa:	bf00      	nop
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	2000027c 	.word	0x2000027c
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	; 0x28
 80074c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80074ca:	463a      	mov	r2, r7
 80074cc:	1d39      	adds	r1, r7, #4
 80074ce:	f107 0308 	add.w	r3, r7, #8
 80074d2:	4618      	mov	r0, r3
 80074d4:	f001 ff82 	bl	80093dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	9202      	str	r2, [sp, #8]
 80074e0:	9301      	str	r3, [sp, #4]
 80074e2:	2300      	movs	r3, #0
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	2300      	movs	r3, #0
 80074e8:	460a      	mov	r2, r1
 80074ea:	4920      	ldr	r1, [pc, #128]	; (800756c <vTaskStartScheduler+0xb0>)
 80074ec:	4820      	ldr	r0, [pc, #128]	; (8007570 <vTaskStartScheduler+0xb4>)
 80074ee:	f7ff fe21 	bl	8007134 <xTaskCreateStatic>
 80074f2:	4602      	mov	r2, r0
 80074f4:	4b1f      	ldr	r3, [pc, #124]	; (8007574 <vTaskStartScheduler+0xb8>)
 80074f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074f8:	4b1e      	ldr	r3, [pc, #120]	; (8007574 <vTaskStartScheduler+0xb8>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007500:	2301      	movs	r3, #1
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	e001      	b.n	800750a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007506:	2300      	movs	r3, #0
 8007508:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d102      	bne.n	8007516 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007510:	f001 f820 	bl	8008554 <xTimerCreateTimerTask>
 8007514:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d115      	bne.n	8007548 <vTaskStartScheduler+0x8c>
 800751c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800752e:	4b12      	ldr	r3, [pc, #72]	; (8007578 <vTaskStartScheduler+0xbc>)
 8007530:	f04f 32ff 	mov.w	r2, #4294967295
 8007534:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007536:	4b11      	ldr	r3, [pc, #68]	; (800757c <vTaskStartScheduler+0xc0>)
 8007538:	2201      	movs	r2, #1
 800753a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800753c:	4b10      	ldr	r3, [pc, #64]	; (8007580 <vTaskStartScheduler+0xc4>)
 800753e:	2200      	movs	r2, #0
 8007540:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007542:	f001 fbbd 	bl	8008cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007546:	e00d      	b.n	8007564 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754e:	d109      	bne.n	8007564 <vTaskStartScheduler+0xa8>
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	60fb      	str	r3, [r7, #12]
 8007562:	e7fe      	b.n	8007562 <vTaskStartScheduler+0xa6>
}
 8007564:	bf00      	nop
 8007566:	3718      	adds	r7, #24
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	0800bb4c 	.word	0x0800bb4c
 8007570:	08007b81 	.word	0x08007b81
 8007574:	20000278 	.word	0x20000278
 8007578:	20000274 	.word	0x20000274
 800757c:	20000260 	.word	0x20000260
 8007580:	20000258 	.word	0x20000258

08007584 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007584:	b480      	push	{r7}
 8007586:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007588:	4b04      	ldr	r3, [pc, #16]	; (800759c <vTaskSuspendAll+0x18>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	3301      	adds	r3, #1
 800758e:	4a03      	ldr	r2, [pc, #12]	; (800759c <vTaskSuspendAll+0x18>)
 8007590:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007592:	bf00      	nop
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	2000027c 	.word	0x2000027c

080075a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075aa:	2300      	movs	r3, #0
 80075ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075ae:	4b41      	ldr	r3, [pc, #260]	; (80076b4 <xTaskResumeAll+0x114>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d109      	bne.n	80075ca <xTaskResumeAll+0x2a>
 80075b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	603b      	str	r3, [r7, #0]
 80075c8:	e7fe      	b.n	80075c8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075ca:	f001 fc17 	bl	8008dfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075ce:	4b39      	ldr	r3, [pc, #228]	; (80076b4 <xTaskResumeAll+0x114>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	4a37      	ldr	r2, [pc, #220]	; (80076b4 <xTaskResumeAll+0x114>)
 80075d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075d8:	4b36      	ldr	r3, [pc, #216]	; (80076b4 <xTaskResumeAll+0x114>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d161      	bne.n	80076a4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075e0:	4b35      	ldr	r3, [pc, #212]	; (80076b8 <xTaskResumeAll+0x118>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d05d      	beq.n	80076a4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075e8:	e02e      	b.n	8007648 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ea:	4b34      	ldr	r3, [pc, #208]	; (80076bc <xTaskResumeAll+0x11c>)
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3318      	adds	r3, #24
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fe fdee 	bl	80061d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	3304      	adds	r3, #4
 8007600:	4618      	mov	r0, r3
 8007602:	f7fe fde9 	bl	80061d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760a:	2201      	movs	r2, #1
 800760c:	409a      	lsls	r2, r3
 800760e:	4b2c      	ldr	r3, [pc, #176]	; (80076c0 <xTaskResumeAll+0x120>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4313      	orrs	r3, r2
 8007614:	4a2a      	ldr	r2, [pc, #168]	; (80076c0 <xTaskResumeAll+0x120>)
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761c:	4613      	mov	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4a27      	ldr	r2, [pc, #156]	; (80076c4 <xTaskResumeAll+0x124>)
 8007626:	441a      	add	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3304      	adds	r3, #4
 800762c:	4619      	mov	r1, r3
 800762e:	4610      	mov	r0, r2
 8007630:	f7fe fd75 	bl	800611e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007638:	4b23      	ldr	r3, [pc, #140]	; (80076c8 <xTaskResumeAll+0x128>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763e:	429a      	cmp	r2, r3
 8007640:	d302      	bcc.n	8007648 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007642:	4b22      	ldr	r3, [pc, #136]	; (80076cc <xTaskResumeAll+0x12c>)
 8007644:	2201      	movs	r2, #1
 8007646:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007648:	4b1c      	ldr	r3, [pc, #112]	; (80076bc <xTaskResumeAll+0x11c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1cc      	bne.n	80075ea <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007656:	f000 fb45 	bl	8007ce4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800765a:	4b1d      	ldr	r3, [pc, #116]	; (80076d0 <xTaskResumeAll+0x130>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d010      	beq.n	8007688 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007666:	f000 f847 	bl	80076f8 <xTaskIncrementTick>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d002      	beq.n	8007676 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007670:	4b16      	ldr	r3, [pc, #88]	; (80076cc <xTaskResumeAll+0x12c>)
 8007672:	2201      	movs	r2, #1
 8007674:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	3b01      	subs	r3, #1
 800767a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1f1      	bne.n	8007666 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007682:	4b13      	ldr	r3, [pc, #76]	; (80076d0 <xTaskResumeAll+0x130>)
 8007684:	2200      	movs	r2, #0
 8007686:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007688:	4b10      	ldr	r3, [pc, #64]	; (80076cc <xTaskResumeAll+0x12c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d009      	beq.n	80076a4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007690:	2301      	movs	r3, #1
 8007692:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007694:	4b0f      	ldr	r3, [pc, #60]	; (80076d4 <xTaskResumeAll+0x134>)
 8007696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076a4:	f001 fbd8 	bl	8008e58 <vPortExitCritical>

	return xAlreadyYielded;
 80076a8:	68bb      	ldr	r3, [r7, #8]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	2000027c 	.word	0x2000027c
 80076b8:	20000254 	.word	0x20000254
 80076bc:	20000214 	.word	0x20000214
 80076c0:	2000025c 	.word	0x2000025c
 80076c4:	20000158 	.word	0x20000158
 80076c8:	20000154 	.word	0x20000154
 80076cc:	20000268 	.word	0x20000268
 80076d0:	20000264 	.word	0x20000264
 80076d4:	e000ed04 	.word	0xe000ed04

080076d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80076de:	4b05      	ldr	r3, [pc, #20]	; (80076f4 <xTaskGetTickCount+0x1c>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076e4:	687b      	ldr	r3, [r7, #4]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	20000258 	.word	0x20000258

080076f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076fe:	2300      	movs	r3, #0
 8007700:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007702:	4b4e      	ldr	r3, [pc, #312]	; (800783c <xTaskIncrementTick+0x144>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	f040 8087 	bne.w	800781a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800770c:	4b4c      	ldr	r3, [pc, #304]	; (8007840 <xTaskIncrementTick+0x148>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3301      	adds	r3, #1
 8007712:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007714:	4a4a      	ldr	r2, [pc, #296]	; (8007840 <xTaskIncrementTick+0x148>)
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d11f      	bne.n	8007760 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007720:	4b48      	ldr	r3, [pc, #288]	; (8007844 <xTaskIncrementTick+0x14c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d009      	beq.n	800773e <xTaskIncrementTick+0x46>
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	603b      	str	r3, [r7, #0]
 800773c:	e7fe      	b.n	800773c <xTaskIncrementTick+0x44>
 800773e:	4b41      	ldr	r3, [pc, #260]	; (8007844 <xTaskIncrementTick+0x14c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60fb      	str	r3, [r7, #12]
 8007744:	4b40      	ldr	r3, [pc, #256]	; (8007848 <xTaskIncrementTick+0x150>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a3e      	ldr	r2, [pc, #248]	; (8007844 <xTaskIncrementTick+0x14c>)
 800774a:	6013      	str	r3, [r2, #0]
 800774c:	4a3e      	ldr	r2, [pc, #248]	; (8007848 <xTaskIncrementTick+0x150>)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6013      	str	r3, [r2, #0]
 8007752:	4b3e      	ldr	r3, [pc, #248]	; (800784c <xTaskIncrementTick+0x154>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3301      	adds	r3, #1
 8007758:	4a3c      	ldr	r2, [pc, #240]	; (800784c <xTaskIncrementTick+0x154>)
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	f000 fac2 	bl	8007ce4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007760:	4b3b      	ldr	r3, [pc, #236]	; (8007850 <xTaskIncrementTick+0x158>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	429a      	cmp	r2, r3
 8007768:	d348      	bcc.n	80077fc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800776a:	4b36      	ldr	r3, [pc, #216]	; (8007844 <xTaskIncrementTick+0x14c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d104      	bne.n	800777e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007774:	4b36      	ldr	r3, [pc, #216]	; (8007850 <xTaskIncrementTick+0x158>)
 8007776:	f04f 32ff 	mov.w	r2, #4294967295
 800777a:	601a      	str	r2, [r3, #0]
					break;
 800777c:	e03e      	b.n	80077fc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800777e:	4b31      	ldr	r3, [pc, #196]	; (8007844 <xTaskIncrementTick+0x14c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	429a      	cmp	r2, r3
 8007794:	d203      	bcs.n	800779e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007796:	4a2e      	ldr	r2, [pc, #184]	; (8007850 <xTaskIncrementTick+0x158>)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800779c:	e02e      	b.n	80077fc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	3304      	adds	r3, #4
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fe fd18 	bl	80061d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d004      	beq.n	80077ba <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	3318      	adds	r3, #24
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fe fd0f 	bl	80061d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077be:	2201      	movs	r2, #1
 80077c0:	409a      	lsls	r2, r3
 80077c2:	4b24      	ldr	r3, [pc, #144]	; (8007854 <xTaskIncrementTick+0x15c>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	4a22      	ldr	r2, [pc, #136]	; (8007854 <xTaskIncrementTick+0x15c>)
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4a1f      	ldr	r2, [pc, #124]	; (8007858 <xTaskIncrementTick+0x160>)
 80077da:	441a      	add	r2, r3
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	3304      	adds	r3, #4
 80077e0:	4619      	mov	r1, r3
 80077e2:	4610      	mov	r0, r2
 80077e4:	f7fe fc9b 	bl	800611e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ec:	4b1b      	ldr	r3, [pc, #108]	; (800785c <xTaskIncrementTick+0x164>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d3b9      	bcc.n	800776a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80077f6:	2301      	movs	r3, #1
 80077f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077fa:	e7b6      	b.n	800776a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077fc:	4b17      	ldr	r3, [pc, #92]	; (800785c <xTaskIncrementTick+0x164>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007802:	4915      	ldr	r1, [pc, #84]	; (8007858 <xTaskIncrementTick+0x160>)
 8007804:	4613      	mov	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	440b      	add	r3, r1
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d907      	bls.n	8007824 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007814:	2301      	movs	r3, #1
 8007816:	617b      	str	r3, [r7, #20]
 8007818:	e004      	b.n	8007824 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800781a:	4b11      	ldr	r3, [pc, #68]	; (8007860 <xTaskIncrementTick+0x168>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3301      	adds	r3, #1
 8007820:	4a0f      	ldr	r2, [pc, #60]	; (8007860 <xTaskIncrementTick+0x168>)
 8007822:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007824:	4b0f      	ldr	r3, [pc, #60]	; (8007864 <xTaskIncrementTick+0x16c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d001      	beq.n	8007830 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800782c:	2301      	movs	r3, #1
 800782e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007830:	697b      	ldr	r3, [r7, #20]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3718      	adds	r7, #24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	2000027c 	.word	0x2000027c
 8007840:	20000258 	.word	0x20000258
 8007844:	2000020c 	.word	0x2000020c
 8007848:	20000210 	.word	0x20000210
 800784c:	2000026c 	.word	0x2000026c
 8007850:	20000274 	.word	0x20000274
 8007854:	2000025c 	.word	0x2000025c
 8007858:	20000158 	.word	0x20000158
 800785c:	20000154 	.word	0x20000154
 8007860:	20000264 	.word	0x20000264
 8007864:	20000268 	.word	0x20000268

08007868 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007868:	b480      	push	{r7}
 800786a:	b087      	sub	sp, #28
 800786c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800786e:	4b26      	ldr	r3, [pc, #152]	; (8007908 <vTaskSwitchContext+0xa0>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007876:	4b25      	ldr	r3, [pc, #148]	; (800790c <vTaskSwitchContext+0xa4>)
 8007878:	2201      	movs	r2, #1
 800787a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800787c:	e03e      	b.n	80078fc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800787e:	4b23      	ldr	r3, [pc, #140]	; (800790c <vTaskSwitchContext+0xa4>)
 8007880:	2200      	movs	r2, #0
 8007882:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007884:	4b22      	ldr	r3, [pc, #136]	; (8007910 <vTaskSwitchContext+0xa8>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	fab3 f383 	clz	r3, r3
 8007890:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007892:	7afb      	ldrb	r3, [r7, #11]
 8007894:	f1c3 031f 	rsb	r3, r3, #31
 8007898:	617b      	str	r3, [r7, #20]
 800789a:	491e      	ldr	r1, [pc, #120]	; (8007914 <vTaskSwitchContext+0xac>)
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	440b      	add	r3, r1
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d109      	bne.n	80078c2 <vTaskSwitchContext+0x5a>
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	607b      	str	r3, [r7, #4]
 80078c0:	e7fe      	b.n	80078c0 <vTaskSwitchContext+0x58>
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	4613      	mov	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4413      	add	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4a11      	ldr	r2, [pc, #68]	; (8007914 <vTaskSwitchContext+0xac>)
 80078ce:	4413      	add	r3, r2
 80078d0:	613b      	str	r3, [r7, #16]
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	605a      	str	r2, [r3, #4]
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	3308      	adds	r3, #8
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d104      	bne.n	80078f2 <vTaskSwitchContext+0x8a>
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	605a      	str	r2, [r3, #4]
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	4a07      	ldr	r2, [pc, #28]	; (8007918 <vTaskSwitchContext+0xb0>)
 80078fa:	6013      	str	r3, [r2, #0]
}
 80078fc:	bf00      	nop
 80078fe:	371c      	adds	r7, #28
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	2000027c 	.word	0x2000027c
 800790c:	20000268 	.word	0x20000268
 8007910:	2000025c 	.word	0x2000025c
 8007914:	20000158 	.word	0x20000158
 8007918:	20000154 	.word	0x20000154

0800791c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d109      	bne.n	8007940 <vTaskPlaceOnEventList+0x24>
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	60fb      	str	r3, [r7, #12]
 800793e:	e7fe      	b.n	800793e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007940:	4b07      	ldr	r3, [pc, #28]	; (8007960 <vTaskPlaceOnEventList+0x44>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3318      	adds	r3, #24
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7fe fc0c 	bl	8006166 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800794e:	2101      	movs	r1, #1
 8007950:	6838      	ldr	r0, [r7, #0]
 8007952:	f000 fd99 	bl	8008488 <prvAddCurrentTaskToDelayedList>
}
 8007956:	bf00      	nop
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20000154 	.word	0x20000154

08007964 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d109      	bne.n	800798a <vTaskPlaceOnEventListRestricted+0x26>
 8007976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	617b      	str	r3, [r7, #20]
 8007988:	e7fe      	b.n	8007988 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800798a:	4b0a      	ldr	r3, [pc, #40]	; (80079b4 <vTaskPlaceOnEventListRestricted+0x50>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3318      	adds	r3, #24
 8007990:	4619      	mov	r1, r3
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f7fe fbc3 	bl	800611e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800799e:	f04f 33ff 	mov.w	r3, #4294967295
 80079a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	68b8      	ldr	r0, [r7, #8]
 80079a8:	f000 fd6e 	bl	8008488 <prvAddCurrentTaskToDelayedList>
	}
 80079ac:	bf00      	nop
 80079ae:	3718      	adds	r7, #24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	20000154 	.word	0x20000154

080079b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d109      	bne.n	80079e2 <xTaskRemoveFromEventList+0x2a>
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	e7fe      	b.n	80079e0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	3318      	adds	r3, #24
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe fbf6 	bl	80061d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079ec:	4b1d      	ldr	r3, [pc, #116]	; (8007a64 <xTaskRemoveFromEventList+0xac>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d11c      	bne.n	8007a2e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	3304      	adds	r3, #4
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7fe fbed 	bl	80061d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a02:	2201      	movs	r2, #1
 8007a04:	409a      	lsls	r2, r3
 8007a06:	4b18      	ldr	r3, [pc, #96]	; (8007a68 <xTaskRemoveFromEventList+0xb0>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	4a16      	ldr	r2, [pc, #88]	; (8007a68 <xTaskRemoveFromEventList+0xb0>)
 8007a0e:	6013      	str	r3, [r2, #0]
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a14:	4613      	mov	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4a13      	ldr	r2, [pc, #76]	; (8007a6c <xTaskRemoveFromEventList+0xb4>)
 8007a1e:	441a      	add	r2, r3
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	3304      	adds	r3, #4
 8007a24:	4619      	mov	r1, r3
 8007a26:	4610      	mov	r0, r2
 8007a28:	f7fe fb79 	bl	800611e <vListInsertEnd>
 8007a2c:	e005      	b.n	8007a3a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	3318      	adds	r3, #24
 8007a32:	4619      	mov	r1, r3
 8007a34:	480e      	ldr	r0, [pc, #56]	; (8007a70 <xTaskRemoveFromEventList+0xb8>)
 8007a36:	f7fe fb72 	bl	800611e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3e:	4b0d      	ldr	r3, [pc, #52]	; (8007a74 <xTaskRemoveFromEventList+0xbc>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d905      	bls.n	8007a54 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a4c:	4b0a      	ldr	r3, [pc, #40]	; (8007a78 <xTaskRemoveFromEventList+0xc0>)
 8007a4e:	2201      	movs	r2, #1
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	e001      	b.n	8007a58 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007a54:	2300      	movs	r3, #0
 8007a56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a58:	697b      	ldr	r3, [r7, #20]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3718      	adds	r7, #24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	2000027c 	.word	0x2000027c
 8007a68:	2000025c 	.word	0x2000025c
 8007a6c:	20000158 	.word	0x20000158
 8007a70:	20000214 	.word	0x20000214
 8007a74:	20000154 	.word	0x20000154
 8007a78:	20000268 	.word	0x20000268

08007a7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a84:	4b06      	ldr	r3, [pc, #24]	; (8007aa0 <vTaskInternalSetTimeOutState+0x24>)
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a8c:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <vTaskInternalSetTimeOutState+0x28>)
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	605a      	str	r2, [r3, #4]
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	2000026c 	.word	0x2000026c
 8007aa4:	20000258 	.word	0x20000258

08007aa8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b088      	sub	sp, #32
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d109      	bne.n	8007acc <xTaskCheckForTimeOut+0x24>
 8007ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	613b      	str	r3, [r7, #16]
 8007aca:	e7fe      	b.n	8007aca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d109      	bne.n	8007ae6 <xTaskCheckForTimeOut+0x3e>
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	60fb      	str	r3, [r7, #12]
 8007ae4:	e7fe      	b.n	8007ae4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007ae6:	f001 f989 	bl	8008dfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007aea:	4b1d      	ldr	r3, [pc, #116]	; (8007b60 <xTaskCheckForTimeOut+0xb8>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b02:	d102      	bne.n	8007b0a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b04:	2300      	movs	r3, #0
 8007b06:	61fb      	str	r3, [r7, #28]
 8007b08:	e023      	b.n	8007b52 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	4b15      	ldr	r3, [pc, #84]	; (8007b64 <xTaskCheckForTimeOut+0xbc>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d007      	beq.n	8007b26 <xTaskCheckForTimeOut+0x7e>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d302      	bcc.n	8007b26 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b20:	2301      	movs	r3, #1
 8007b22:	61fb      	str	r3, [r7, #28]
 8007b24:	e015      	b.n	8007b52 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d20b      	bcs.n	8007b48 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	1ad2      	subs	r2, r2, r3
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff ff9d 	bl	8007a7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b42:	2300      	movs	r3, #0
 8007b44:	61fb      	str	r3, [r7, #28]
 8007b46:	e004      	b.n	8007b52 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b52:	f001 f981 	bl	8008e58 <vPortExitCritical>

	return xReturn;
 8007b56:	69fb      	ldr	r3, [r7, #28]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3720      	adds	r7, #32
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	20000258 	.word	0x20000258
 8007b64:	2000026c 	.word	0x2000026c

08007b68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b6c:	4b03      	ldr	r3, [pc, #12]	; (8007b7c <vTaskMissedYield+0x14>)
 8007b6e:	2201      	movs	r2, #1
 8007b70:	601a      	str	r2, [r3, #0]
}
 8007b72:	bf00      	nop
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	20000268 	.word	0x20000268

08007b80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b88:	f000 f852 	bl	8007c30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b8c:	4b06      	ldr	r3, [pc, #24]	; (8007ba8 <prvIdleTask+0x28>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d9f9      	bls.n	8007b88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b94:	4b05      	ldr	r3, [pc, #20]	; (8007bac <prvIdleTask+0x2c>)
 8007b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ba4:	e7f0      	b.n	8007b88 <prvIdleTask+0x8>
 8007ba6:	bf00      	nop
 8007ba8:	20000158 	.word	0x20000158
 8007bac:	e000ed04 	.word	0xe000ed04

08007bb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	607b      	str	r3, [r7, #4]
 8007bba:	e00c      	b.n	8007bd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4a12      	ldr	r2, [pc, #72]	; (8007c10 <prvInitialiseTaskLists+0x60>)
 8007bc8:	4413      	add	r3, r2
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fe fa7a 	bl	80060c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	607b      	str	r3, [r7, #4]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b06      	cmp	r3, #6
 8007bda:	d9ef      	bls.n	8007bbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007bdc:	480d      	ldr	r0, [pc, #52]	; (8007c14 <prvInitialiseTaskLists+0x64>)
 8007bde:	f7fe fa71 	bl	80060c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007be2:	480d      	ldr	r0, [pc, #52]	; (8007c18 <prvInitialiseTaskLists+0x68>)
 8007be4:	f7fe fa6e 	bl	80060c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007be8:	480c      	ldr	r0, [pc, #48]	; (8007c1c <prvInitialiseTaskLists+0x6c>)
 8007bea:	f7fe fa6b 	bl	80060c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007bee:	480c      	ldr	r0, [pc, #48]	; (8007c20 <prvInitialiseTaskLists+0x70>)
 8007bf0:	f7fe fa68 	bl	80060c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007bf4:	480b      	ldr	r0, [pc, #44]	; (8007c24 <prvInitialiseTaskLists+0x74>)
 8007bf6:	f7fe fa65 	bl	80060c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007bfa:	4b0b      	ldr	r3, [pc, #44]	; (8007c28 <prvInitialiseTaskLists+0x78>)
 8007bfc:	4a05      	ldr	r2, [pc, #20]	; (8007c14 <prvInitialiseTaskLists+0x64>)
 8007bfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c00:	4b0a      	ldr	r3, [pc, #40]	; (8007c2c <prvInitialiseTaskLists+0x7c>)
 8007c02:	4a05      	ldr	r2, [pc, #20]	; (8007c18 <prvInitialiseTaskLists+0x68>)
 8007c04:	601a      	str	r2, [r3, #0]
}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	20000158 	.word	0x20000158
 8007c14:	200001e4 	.word	0x200001e4
 8007c18:	200001f8 	.word	0x200001f8
 8007c1c:	20000214 	.word	0x20000214
 8007c20:	20000228 	.word	0x20000228
 8007c24:	20000240 	.word	0x20000240
 8007c28:	2000020c 	.word	0x2000020c
 8007c2c:	20000210 	.word	0x20000210

08007c30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c36:	e019      	b.n	8007c6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c38:	f001 f8e0 	bl	8008dfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c3c:	4b0f      	ldr	r3, [pc, #60]	; (8007c7c <prvCheckTasksWaitingTermination+0x4c>)
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3304      	adds	r3, #4
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fe fac5 	bl	80061d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c4e:	4b0c      	ldr	r3, [pc, #48]	; (8007c80 <prvCheckTasksWaitingTermination+0x50>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	4a0a      	ldr	r2, [pc, #40]	; (8007c80 <prvCheckTasksWaitingTermination+0x50>)
 8007c56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c58:	4b0a      	ldr	r3, [pc, #40]	; (8007c84 <prvCheckTasksWaitingTermination+0x54>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	4a09      	ldr	r2, [pc, #36]	; (8007c84 <prvCheckTasksWaitingTermination+0x54>)
 8007c60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c62:	f001 f8f9 	bl	8008e58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f80e 	bl	8007c88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c6c:	4b05      	ldr	r3, [pc, #20]	; (8007c84 <prvCheckTasksWaitingTermination+0x54>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e1      	bne.n	8007c38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c74:	bf00      	nop
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	20000228 	.word	0x20000228
 8007c80:	20000254 	.word	0x20000254
 8007c84:	2000023c 	.word	0x2000023c

08007c88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d108      	bne.n	8007cac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f001 fa88 	bl	80091b4 <vPortFree>
				vPortFree( pxTCB );
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f001 fa85 	bl	80091b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007caa:	e017      	b.n	8007cdc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d103      	bne.n	8007cbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f001 fa7c 	bl	80091b4 <vPortFree>
	}
 8007cbc:	e00e      	b.n	8007cdc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d009      	beq.n	8007cdc <prvDeleteTCB+0x54>
 8007cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	e7fe      	b.n	8007cda <prvDeleteTCB+0x52>
	}
 8007cdc:	bf00      	nop
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cea:	4b0c      	ldr	r3, [pc, #48]	; (8007d1c <prvResetNextTaskUnblockTime+0x38>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d104      	bne.n	8007cfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007cf4:	4b0a      	ldr	r3, [pc, #40]	; (8007d20 <prvResetNextTaskUnblockTime+0x3c>)
 8007cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007cfc:	e008      	b.n	8007d10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cfe:	4b07      	ldr	r3, [pc, #28]	; (8007d1c <prvResetNextTaskUnblockTime+0x38>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	4a04      	ldr	r2, [pc, #16]	; (8007d20 <prvResetNextTaskUnblockTime+0x3c>)
 8007d0e:	6013      	str	r3, [r2, #0]
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr
 8007d1c:	2000020c 	.word	0x2000020c
 8007d20:	20000274 	.word	0x20000274

08007d24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d2a:	4b0b      	ldr	r3, [pc, #44]	; (8007d58 <xTaskGetSchedulerState+0x34>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d102      	bne.n	8007d38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d32:	2301      	movs	r3, #1
 8007d34:	607b      	str	r3, [r7, #4]
 8007d36:	e008      	b.n	8007d4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d38:	4b08      	ldr	r3, [pc, #32]	; (8007d5c <xTaskGetSchedulerState+0x38>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d102      	bne.n	8007d46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d40:	2302      	movs	r3, #2
 8007d42:	607b      	str	r3, [r7, #4]
 8007d44:	e001      	b.n	8007d4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d46:	2300      	movs	r3, #0
 8007d48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d4a:	687b      	ldr	r3, [r7, #4]
	}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	20000260 	.word	0x20000260
 8007d5c:	2000027c 	.word	0x2000027c

08007d60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d069      	beq.n	8007e4a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7a:	4b36      	ldr	r3, [pc, #216]	; (8007e54 <xTaskPriorityInherit+0xf4>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d259      	bcs.n	8007e38 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	db06      	blt.n	8007d9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d8c:	4b31      	ldr	r3, [pc, #196]	; (8007e54 <xTaskPriorityInherit+0xf4>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d92:	f1c3 0207 	rsb	r2, r3, #7
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	6959      	ldr	r1, [r3, #20]
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da2:	4613      	mov	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4a2b      	ldr	r2, [pc, #172]	; (8007e58 <xTaskPriorityInherit+0xf8>)
 8007dac:	4413      	add	r3, r2
 8007dae:	4299      	cmp	r1, r3
 8007db0:	d13a      	bne.n	8007e28 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	3304      	adds	r3, #4
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fe fa0e 	bl	80061d8 <uxListRemove>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d115      	bne.n	8007dee <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc6:	4924      	ldr	r1, [pc, #144]	; (8007e58 <xTaskPriorityInherit+0xf8>)
 8007dc8:	4613      	mov	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	440b      	add	r3, r1
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10a      	bne.n	8007dee <xTaskPriorityInherit+0x8e>
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ddc:	2201      	movs	r2, #1
 8007dde:	fa02 f303 	lsl.w	r3, r2, r3
 8007de2:	43da      	mvns	r2, r3
 8007de4:	4b1d      	ldr	r3, [pc, #116]	; (8007e5c <xTaskPriorityInherit+0xfc>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4013      	ands	r3, r2
 8007dea:	4a1c      	ldr	r2, [pc, #112]	; (8007e5c <xTaskPriorityInherit+0xfc>)
 8007dec:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007dee:	4b19      	ldr	r3, [pc, #100]	; (8007e54 <xTaskPriorityInherit+0xf4>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	409a      	lsls	r2, r3
 8007e00:	4b16      	ldr	r3, [pc, #88]	; (8007e5c <xTaskPriorityInherit+0xfc>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	4a15      	ldr	r2, [pc, #84]	; (8007e5c <xTaskPriorityInherit+0xfc>)
 8007e08:	6013      	str	r3, [r2, #0]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e0e:	4613      	mov	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4a10      	ldr	r2, [pc, #64]	; (8007e58 <xTaskPriorityInherit+0xf8>)
 8007e18:	441a      	add	r2, r3
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	4619      	mov	r1, r3
 8007e20:	4610      	mov	r0, r2
 8007e22:	f7fe f97c 	bl	800611e <vListInsertEnd>
 8007e26:	e004      	b.n	8007e32 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e28:	4b0a      	ldr	r3, [pc, #40]	; (8007e54 <xTaskPriorityInherit+0xf4>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007e32:	2301      	movs	r3, #1
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	e008      	b.n	8007e4a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e3c:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <xTaskPriorityInherit+0xf4>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d201      	bcs.n	8007e4a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007e46:	2301      	movs	r3, #1
 8007e48:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
	}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	20000154 	.word	0x20000154
 8007e58:	20000158 	.word	0x20000158
 8007e5c:	2000025c 	.word	0x2000025c

08007e60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d06c      	beq.n	8007f50 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e76:	4b39      	ldr	r3, [pc, #228]	; (8007f5c <xTaskPriorityDisinherit+0xfc>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d009      	beq.n	8007e94 <xTaskPriorityDisinherit+0x34>
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	60fb      	str	r3, [r7, #12]
 8007e92:	e7fe      	b.n	8007e92 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d109      	bne.n	8007eb0 <xTaskPriorityDisinherit+0x50>
 8007e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	60bb      	str	r3, [r7, #8]
 8007eae:	e7fe      	b.n	8007eae <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eb4:	1e5a      	subs	r2, r3, #1
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d044      	beq.n	8007f50 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d140      	bne.n	8007f50 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fe f980 	bl	80061d8 <uxListRemove>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d115      	bne.n	8007f0a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee2:	491f      	ldr	r1, [pc, #124]	; (8007f60 <xTaskPriorityDisinherit+0x100>)
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	440b      	add	r3, r1
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10a      	bne.n	8007f0a <xTaskPriorityDisinherit+0xaa>
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef8:	2201      	movs	r2, #1
 8007efa:	fa02 f303 	lsl.w	r3, r2, r3
 8007efe:	43da      	mvns	r2, r3
 8007f00:	4b18      	ldr	r3, [pc, #96]	; (8007f64 <xTaskPriorityDisinherit+0x104>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4013      	ands	r3, r2
 8007f06:	4a17      	ldr	r2, [pc, #92]	; (8007f64 <xTaskPriorityDisinherit+0x104>)
 8007f08:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f16:	f1c3 0207 	rsb	r2, r3, #7
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f22:	2201      	movs	r2, #1
 8007f24:	409a      	lsls	r2, r3
 8007f26:	4b0f      	ldr	r3, [pc, #60]	; (8007f64 <xTaskPriorityDisinherit+0x104>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	4a0d      	ldr	r2, [pc, #52]	; (8007f64 <xTaskPriorityDisinherit+0x104>)
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f34:	4613      	mov	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4a08      	ldr	r2, [pc, #32]	; (8007f60 <xTaskPriorityDisinherit+0x100>)
 8007f3e:	441a      	add	r2, r3
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	3304      	adds	r3, #4
 8007f44:	4619      	mov	r1, r3
 8007f46:	4610      	mov	r0, r2
 8007f48:	f7fe f8e9 	bl	800611e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f50:	697b      	ldr	r3, [r7, #20]
	}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	20000154 	.word	0x20000154
 8007f60:	20000158 	.word	0x20000158
 8007f64:	2000025c 	.word	0x2000025c

08007f68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007f76:	2301      	movs	r3, #1
 8007f78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 8081 	beq.w	8008084 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d109      	bne.n	8007f9e <vTaskPriorityDisinheritAfterTimeout+0x36>
 8007f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	e7fe      	b.n	8007f9c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d902      	bls.n	8007fae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	61fb      	str	r3, [r7, #28]
 8007fac:	e002      	b.n	8007fb4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb8:	69fa      	ldr	r2, [r7, #28]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d062      	beq.n	8008084 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d15d      	bne.n	8008084 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007fc8:	4b30      	ldr	r3, [pc, #192]	; (800808c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d109      	bne.n	8007fe6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	60bb      	str	r3, [r7, #8]
 8007fe4:	e7fe      	b.n	8007fe4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fea:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	69fa      	ldr	r2, [r7, #28]
 8007ff0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	db04      	blt.n	8008004 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	f1c3 0207 	rsb	r2, r3, #7
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	6959      	ldr	r1, [r3, #20]
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	4613      	mov	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4a1f      	ldr	r2, [pc, #124]	; (8008090 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008014:	4413      	add	r3, r2
 8008016:	4299      	cmp	r1, r3
 8008018:	d134      	bne.n	8008084 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	3304      	adds	r3, #4
 800801e:	4618      	mov	r0, r3
 8008020:	f7fe f8da 	bl	80061d8 <uxListRemove>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d115      	bne.n	8008056 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802e:	4918      	ldr	r1, [pc, #96]	; (8008090 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008030:	4613      	mov	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	440b      	add	r3, r1
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10a      	bne.n	8008056 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	2201      	movs	r2, #1
 8008046:	fa02 f303 	lsl.w	r3, r2, r3
 800804a:	43da      	mvns	r2, r3
 800804c:	4b11      	ldr	r3, [pc, #68]	; (8008094 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4013      	ands	r3, r2
 8008052:	4a10      	ldr	r2, [pc, #64]	; (8008094 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008054:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805a:	2201      	movs	r2, #1
 800805c:	409a      	lsls	r2, r3
 800805e:	4b0d      	ldr	r3, [pc, #52]	; (8008094 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4313      	orrs	r3, r2
 8008064:	4a0b      	ldr	r2, [pc, #44]	; (8008094 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008066:	6013      	str	r3, [r2, #0]
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806c:	4613      	mov	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4413      	add	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4a06      	ldr	r2, [pc, #24]	; (8008090 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008076:	441a      	add	r2, r3
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	3304      	adds	r3, #4
 800807c:	4619      	mov	r1, r3
 800807e:	4610      	mov	r0, r2
 8008080:	f7fe f84d 	bl	800611e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008084:	bf00      	nop
 8008086:	3720      	adds	r7, #32
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	20000154 	.word	0x20000154
 8008090:	20000158 	.word	0x20000158
 8008094:	2000025c 	.word	0x2000025c

08008098 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008098:	b480      	push	{r7}
 800809a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800809c:	4b07      	ldr	r3, [pc, #28]	; (80080bc <pvTaskIncrementMutexHeldCount+0x24>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d004      	beq.n	80080ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80080a4:	4b05      	ldr	r3, [pc, #20]	; (80080bc <pvTaskIncrementMutexHeldCount+0x24>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080aa:	3201      	adds	r2, #1
 80080ac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80080ae:	4b03      	ldr	r3, [pc, #12]	; (80080bc <pvTaskIncrementMutexHeldCount+0x24>)
 80080b0:	681b      	ldr	r3, [r3, #0]
	}
 80080b2:	4618      	mov	r0, r3
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	20000154 	.word	0x20000154

080080c0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
 80080cc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80080ce:	f000 fe95 	bl	8008dfc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80080d2:	4b26      	ldr	r3, [pc, #152]	; (800816c <xTaskNotifyWait+0xac>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d01a      	beq.n	8008116 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80080e0:	4b22      	ldr	r3, [pc, #136]	; (800816c <xTaskNotifyWait+0xac>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	43d2      	mvns	r2, r2
 80080ea:	400a      	ands	r2, r1
 80080ec:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80080ee:	4b1f      	ldr	r3, [pc, #124]	; (800816c <xTaskNotifyWait+0xac>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00b      	beq.n	8008116 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80080fe:	2101      	movs	r1, #1
 8008100:	6838      	ldr	r0, [r7, #0]
 8008102:	f000 f9c1 	bl	8008488 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008106:	4b1a      	ldr	r3, [pc, #104]	; (8008170 <xTaskNotifyWait+0xb0>)
 8008108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008116:	f000 fe9f 	bl	8008e58 <vPortExitCritical>

		taskENTER_CRITICAL();
 800811a:	f000 fe6f 	bl	8008dfc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d004      	beq.n	800812e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008124:	4b11      	ldr	r3, [pc, #68]	; (800816c <xTaskNotifyWait+0xac>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800812e:	4b0f      	ldr	r3, [pc, #60]	; (800816c <xTaskNotifyWait+0xac>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b02      	cmp	r3, #2
 800813a:	d002      	beq.n	8008142 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800813c:	2300      	movs	r3, #0
 800813e:	617b      	str	r3, [r7, #20]
 8008140:	e008      	b.n	8008154 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008142:	4b0a      	ldr	r3, [pc, #40]	; (800816c <xTaskNotifyWait+0xac>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	43d2      	mvns	r2, r2
 800814c:	400a      	ands	r2, r1
 800814e:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8008150:	2301      	movs	r3, #1
 8008152:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008154:	4b05      	ldr	r3, [pc, #20]	; (800816c <xTaskNotifyWait+0xac>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800815e:	f000 fe7b 	bl	8008e58 <vPortExitCritical>

		return xReturn;
 8008162:	697b      	ldr	r3, [r7, #20]
	}
 8008164:	4618      	mov	r0, r3
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	20000154 	.word	0x20000154
 8008170:	e000ed04 	.word	0xe000ed04

08008174 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008174:	b580      	push	{r7, lr}
 8008176:	b08a      	sub	sp, #40	; 0x28
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	603b      	str	r3, [r7, #0]
 8008180:	4613      	mov	r3, r2
 8008182:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008184:	2301      	movs	r3, #1
 8008186:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d109      	bne.n	80081a2 <xTaskGenericNotify+0x2e>
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	61bb      	str	r3, [r7, #24]
 80081a0:	e7fe      	b.n	80081a0 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80081a6:	f000 fe29 	bl	8008dfc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d003      	beq.n	80081b8 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081be:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80081c8:	79fb      	ldrb	r3, [r7, #7]
 80081ca:	2b04      	cmp	r3, #4
 80081cc:	d827      	bhi.n	800821e <xTaskGenericNotify+0xaa>
 80081ce:	a201      	add	r2, pc, #4	; (adr r2, 80081d4 <xTaskGenericNotify+0x60>)
 80081d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d4:	0800823d 	.word	0x0800823d
 80081d8:	080081e9 	.word	0x080081e9
 80081dc:	080081f7 	.word	0x080081f7
 80081e0:	08008203 	.word	0x08008203
 80081e4:	0800820b 	.word	0x0800820b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80081e8:	6a3b      	ldr	r3, [r7, #32]
 80081ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	431a      	orrs	r2, r3
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80081f4:	e025      	b.n	8008242 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8008200:	e01f      	b.n	8008242 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008202:	6a3b      	ldr	r3, [r7, #32]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8008208:	e01b      	b.n	8008242 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800820a:	7ffb      	ldrb	r3, [r7, #31]
 800820c:	2b02      	cmp	r3, #2
 800820e:	d003      	beq.n	8008218 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008210:	6a3b      	ldr	r3, [r7, #32]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008216:	e014      	b.n	8008242 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8008218:	2300      	movs	r3, #0
 800821a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800821c:	e011      	b.n	8008242 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008226:	d00b      	beq.n	8008240 <xTaskGenericNotify+0xcc>
 8008228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822c:	f383 8811 	msr	BASEPRI, r3
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	f3bf 8f4f 	dsb	sy
 8008238:	617b      	str	r3, [r7, #20]
 800823a:	e7fe      	b.n	800823a <xTaskGenericNotify+0xc6>
					break;
 800823c:	bf00      	nop
 800823e:	e000      	b.n	8008242 <xTaskGenericNotify+0xce>

					break;
 8008240:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008242:	7ffb      	ldrb	r3, [r7, #31]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d138      	bne.n	80082ba <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	3304      	adds	r3, #4
 800824c:	4618      	mov	r0, r3
 800824e:	f7fd ffc3 	bl	80061d8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008256:	2201      	movs	r2, #1
 8008258:	409a      	lsls	r2, r3
 800825a:	4b1b      	ldr	r3, [pc, #108]	; (80082c8 <xTaskGenericNotify+0x154>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4313      	orrs	r3, r2
 8008260:	4a19      	ldr	r2, [pc, #100]	; (80082c8 <xTaskGenericNotify+0x154>)
 8008262:	6013      	str	r3, [r2, #0]
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008268:	4613      	mov	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4a16      	ldr	r2, [pc, #88]	; (80082cc <xTaskGenericNotify+0x158>)
 8008272:	441a      	add	r2, r3
 8008274:	6a3b      	ldr	r3, [r7, #32]
 8008276:	3304      	adds	r3, #4
 8008278:	4619      	mov	r1, r3
 800827a:	4610      	mov	r0, r2
 800827c:	f7fd ff4f 	bl	800611e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008284:	2b00      	cmp	r3, #0
 8008286:	d009      	beq.n	800829c <xTaskGenericNotify+0x128>
 8008288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	613b      	str	r3, [r7, #16]
 800829a:	e7fe      	b.n	800829a <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a0:	4b0b      	ldr	r3, [pc, #44]	; (80082d0 <xTaskGenericNotify+0x15c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d907      	bls.n	80082ba <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80082aa:	4b0a      	ldr	r3, [pc, #40]	; (80082d4 <xTaskGenericNotify+0x160>)
 80082ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80082ba:	f000 fdcd 	bl	8008e58 <vPortExitCritical>

		return xReturn;
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3728      	adds	r7, #40	; 0x28
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	2000025c 	.word	0x2000025c
 80082cc:	20000158 	.word	0x20000158
 80082d0:	20000154 	.word	0x20000154
 80082d4:	e000ed04 	.word	0xe000ed04

080082d8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08e      	sub	sp, #56	; 0x38
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	603b      	str	r3, [r7, #0]
 80082e4:	4613      	mov	r3, r2
 80082e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80082e8:	2301      	movs	r3, #1
 80082ea:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d109      	bne.n	8008306 <xTaskGenericNotifyFromISR+0x2e>
 80082f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	627b      	str	r3, [r7, #36]	; 0x24
 8008304:	e7fe      	b.n	8008304 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008306:	f000 fe55 	bl	8008fb4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800830e:	f3ef 8211 	mrs	r2, BASEPRI
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	623a      	str	r2, [r7, #32]
 8008324:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8008326:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008328:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d003      	beq.n	8008338 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800833e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	2202      	movs	r2, #2
 8008346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	2b04      	cmp	r3, #4
 800834e:	d829      	bhi.n	80083a4 <xTaskGenericNotifyFromISR+0xcc>
 8008350:	a201      	add	r2, pc, #4	; (adr r2, 8008358 <xTaskGenericNotifyFromISR+0x80>)
 8008352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008356:	bf00      	nop
 8008358:	080083c3 	.word	0x080083c3
 800835c:	0800836d 	.word	0x0800836d
 8008360:	0800837b 	.word	0x0800837b
 8008364:	08008387 	.word	0x08008387
 8008368:	0800838f 	.word	0x0800838f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	431a      	orrs	r2, r3
 8008374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008376:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8008378:	e026      	b.n	80083c8 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008382:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8008384:	e020      	b.n	80083c8 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800838c:	e01c      	b.n	80083c8 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800838e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008392:	2b02      	cmp	r3, #2
 8008394:	d003      	beq.n	800839e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800839c:	e014      	b.n	80083c8 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800839e:	2300      	movs	r3, #0
 80083a0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80083a2:	e011      	b.n	80083c8 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80083a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ac:	d00b      	beq.n	80083c6 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	61bb      	str	r3, [r7, #24]
 80083c0:	e7fe      	b.n	80083c0 <xTaskGenericNotifyFromISR+0xe8>
					break;
 80083c2:	bf00      	nop
 80083c4:	e000      	b.n	80083c8 <xTaskGenericNotifyFromISR+0xf0>
					break;
 80083c6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80083c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d144      	bne.n	800845a <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d009      	beq.n	80083ec <xTaskGenericNotifyFromISR+0x114>
 80083d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	617b      	str	r3, [r7, #20]
 80083ea:	e7fe      	b.n	80083ea <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ec:	4b20      	ldr	r3, [pc, #128]	; (8008470 <xTaskGenericNotifyFromISR+0x198>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d11c      	bne.n	800842e <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f6:	3304      	adds	r3, #4
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7fd feed 	bl	80061d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008402:	2201      	movs	r2, #1
 8008404:	409a      	lsls	r2, r3
 8008406:	4b1b      	ldr	r3, [pc, #108]	; (8008474 <xTaskGenericNotifyFromISR+0x19c>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4313      	orrs	r3, r2
 800840c:	4a19      	ldr	r2, [pc, #100]	; (8008474 <xTaskGenericNotifyFromISR+0x19c>)
 800840e:	6013      	str	r3, [r2, #0]
 8008410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008414:	4613      	mov	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4413      	add	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4a16      	ldr	r2, [pc, #88]	; (8008478 <xTaskGenericNotifyFromISR+0x1a0>)
 800841e:	441a      	add	r2, r3
 8008420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008422:	3304      	adds	r3, #4
 8008424:	4619      	mov	r1, r3
 8008426:	4610      	mov	r0, r2
 8008428:	f7fd fe79 	bl	800611e <vListInsertEnd>
 800842c:	e005      	b.n	800843a <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800842e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008430:	3318      	adds	r3, #24
 8008432:	4619      	mov	r1, r3
 8008434:	4811      	ldr	r0, [pc, #68]	; (800847c <xTaskGenericNotifyFromISR+0x1a4>)
 8008436:	f7fd fe72 	bl	800611e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843e:	4b10      	ldr	r3, [pc, #64]	; (8008480 <xTaskGenericNotifyFromISR+0x1a8>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	429a      	cmp	r2, r3
 8008446:	d908      	bls.n	800845a <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800844e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008450:	2201      	movs	r2, #1
 8008452:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008454:	4b0b      	ldr	r3, [pc, #44]	; (8008484 <xTaskGenericNotifyFromISR+0x1ac>)
 8008456:	2201      	movs	r2, #1
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8008466:	4618      	mov	r0, r3
 8008468:	3738      	adds	r7, #56	; 0x38
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	2000027c 	.word	0x2000027c
 8008474:	2000025c 	.word	0x2000025c
 8008478:	20000158 	.word	0x20000158
 800847c:	20000214 	.word	0x20000214
 8008480:	20000154 	.word	0x20000154
 8008484:	20000268 	.word	0x20000268

08008488 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008492:	4b29      	ldr	r3, [pc, #164]	; (8008538 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008498:	4b28      	ldr	r3, [pc, #160]	; (800853c <prvAddCurrentTaskToDelayedList+0xb4>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3304      	adds	r3, #4
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fd fe9a 	bl	80061d8 <uxListRemove>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10b      	bne.n	80084c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80084aa:	4b24      	ldr	r3, [pc, #144]	; (800853c <prvAddCurrentTaskToDelayedList+0xb4>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b0:	2201      	movs	r2, #1
 80084b2:	fa02 f303 	lsl.w	r3, r2, r3
 80084b6:	43da      	mvns	r2, r3
 80084b8:	4b21      	ldr	r3, [pc, #132]	; (8008540 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4013      	ands	r3, r2
 80084be:	4a20      	ldr	r2, [pc, #128]	; (8008540 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c8:	d10a      	bne.n	80084e0 <prvAddCurrentTaskToDelayedList+0x58>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084d0:	4b1a      	ldr	r3, [pc, #104]	; (800853c <prvAddCurrentTaskToDelayedList+0xb4>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	3304      	adds	r3, #4
 80084d6:	4619      	mov	r1, r3
 80084d8:	481a      	ldr	r0, [pc, #104]	; (8008544 <prvAddCurrentTaskToDelayedList+0xbc>)
 80084da:	f7fd fe20 	bl	800611e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084de:	e026      	b.n	800852e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4413      	add	r3, r2
 80084e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084e8:	4b14      	ldr	r3, [pc, #80]	; (800853c <prvAddCurrentTaskToDelayedList+0xb4>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d209      	bcs.n	800850c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084f8:	4b13      	ldr	r3, [pc, #76]	; (8008548 <prvAddCurrentTaskToDelayedList+0xc0>)
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	4b0f      	ldr	r3, [pc, #60]	; (800853c <prvAddCurrentTaskToDelayedList+0xb4>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	3304      	adds	r3, #4
 8008502:	4619      	mov	r1, r3
 8008504:	4610      	mov	r0, r2
 8008506:	f7fd fe2e 	bl	8006166 <vListInsert>
}
 800850a:	e010      	b.n	800852e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800850c:	4b0f      	ldr	r3, [pc, #60]	; (800854c <prvAddCurrentTaskToDelayedList+0xc4>)
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	4b0a      	ldr	r3, [pc, #40]	; (800853c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3304      	adds	r3, #4
 8008516:	4619      	mov	r1, r3
 8008518:	4610      	mov	r0, r2
 800851a:	f7fd fe24 	bl	8006166 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800851e:	4b0c      	ldr	r3, [pc, #48]	; (8008550 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	429a      	cmp	r2, r3
 8008526:	d202      	bcs.n	800852e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008528:	4a09      	ldr	r2, [pc, #36]	; (8008550 <prvAddCurrentTaskToDelayedList+0xc8>)
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	6013      	str	r3, [r2, #0]
}
 800852e:	bf00      	nop
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	20000258 	.word	0x20000258
 800853c:	20000154 	.word	0x20000154
 8008540:	2000025c 	.word	0x2000025c
 8008544:	20000240 	.word	0x20000240
 8008548:	20000210 	.word	0x20000210
 800854c:	2000020c 	.word	0x2000020c
 8008550:	20000274 	.word	0x20000274

08008554 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b08a      	sub	sp, #40	; 0x28
 8008558:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800855a:	2300      	movs	r3, #0
 800855c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800855e:	f000 fae7 	bl	8008b30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008562:	4b1c      	ldr	r3, [pc, #112]	; (80085d4 <xTimerCreateTimerTask+0x80>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d021      	beq.n	80085ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800856a:	2300      	movs	r3, #0
 800856c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800856e:	2300      	movs	r3, #0
 8008570:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008572:	1d3a      	adds	r2, r7, #4
 8008574:	f107 0108 	add.w	r1, r7, #8
 8008578:	f107 030c 	add.w	r3, r7, #12
 800857c:	4618      	mov	r0, r3
 800857e:	f000 ff47 	bl	8009410 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008582:	6879      	ldr	r1, [r7, #4]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	9202      	str	r2, [sp, #8]
 800858a:	9301      	str	r3, [sp, #4]
 800858c:	2302      	movs	r3, #2
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	2300      	movs	r3, #0
 8008592:	460a      	mov	r2, r1
 8008594:	4910      	ldr	r1, [pc, #64]	; (80085d8 <xTimerCreateTimerTask+0x84>)
 8008596:	4811      	ldr	r0, [pc, #68]	; (80085dc <xTimerCreateTimerTask+0x88>)
 8008598:	f7fe fdcc 	bl	8007134 <xTaskCreateStatic>
 800859c:	4602      	mov	r2, r0
 800859e:	4b10      	ldr	r3, [pc, #64]	; (80085e0 <xTimerCreateTimerTask+0x8c>)
 80085a0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80085a2:	4b0f      	ldr	r3, [pc, #60]	; (80085e0 <xTimerCreateTimerTask+0x8c>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80085aa:	2301      	movs	r3, #1
 80085ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d109      	bne.n	80085c8 <xTimerCreateTimerTask+0x74>
	__asm volatile
 80085b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	613b      	str	r3, [r7, #16]
 80085c6:	e7fe      	b.n	80085c6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80085c8:	697b      	ldr	r3, [r7, #20]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3718      	adds	r7, #24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	200002b0 	.word	0x200002b0
 80085d8:	0800bb54 	.word	0x0800bb54
 80085dc:	08008715 	.word	0x08008715
 80085e0:	200002b4 	.word	0x200002b4

080085e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b08a      	sub	sp, #40	; 0x28
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
 80085f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80085f2:	2300      	movs	r3, #0
 80085f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d109      	bne.n	8008610 <xTimerGenericCommand+0x2c>
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	623b      	str	r3, [r7, #32]
 800860e:	e7fe      	b.n	800860e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008610:	4b19      	ldr	r3, [pc, #100]	; (8008678 <xTimerGenericCommand+0x94>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d02a      	beq.n	800866e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2b05      	cmp	r3, #5
 8008628:	dc18      	bgt.n	800865c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800862a:	f7ff fb7b 	bl	8007d24 <xTaskGetSchedulerState>
 800862e:	4603      	mov	r3, r0
 8008630:	2b02      	cmp	r3, #2
 8008632:	d109      	bne.n	8008648 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008634:	4b10      	ldr	r3, [pc, #64]	; (8008678 <xTimerGenericCommand+0x94>)
 8008636:	6818      	ldr	r0, [r3, #0]
 8008638:	f107 0114 	add.w	r1, r7, #20
 800863c:	2300      	movs	r3, #0
 800863e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008640:	f7fd ff7a 	bl	8006538 <xQueueGenericSend>
 8008644:	6278      	str	r0, [r7, #36]	; 0x24
 8008646:	e012      	b.n	800866e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008648:	4b0b      	ldr	r3, [pc, #44]	; (8008678 <xTimerGenericCommand+0x94>)
 800864a:	6818      	ldr	r0, [r3, #0]
 800864c:	f107 0114 	add.w	r1, r7, #20
 8008650:	2300      	movs	r3, #0
 8008652:	2200      	movs	r2, #0
 8008654:	f7fd ff70 	bl	8006538 <xQueueGenericSend>
 8008658:	6278      	str	r0, [r7, #36]	; 0x24
 800865a:	e008      	b.n	800866e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800865c:	4b06      	ldr	r3, [pc, #24]	; (8008678 <xTimerGenericCommand+0x94>)
 800865e:	6818      	ldr	r0, [r3, #0]
 8008660:	f107 0114 	add.w	r1, r7, #20
 8008664:	2300      	movs	r3, #0
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	f7fe f860 	bl	800672c <xQueueGenericSendFromISR>
 800866c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008670:	4618      	mov	r0, r3
 8008672:	3728      	adds	r7, #40	; 0x28
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	200002b0 	.word	0x200002b0

0800867c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b088      	sub	sp, #32
 8008680:	af02      	add	r7, sp, #8
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008686:	4b22      	ldr	r3, [pc, #136]	; (8008710 <prvProcessExpiredTimer+0x94>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	3304      	adds	r3, #4
 8008694:	4618      	mov	r0, r3
 8008696:	f7fd fd9f 	bl	80061d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086a0:	f003 0304 	and.w	r3, r3, #4
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d021      	beq.n	80086ec <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	699a      	ldr	r2, [r3, #24]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	18d1      	adds	r1, r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	6978      	ldr	r0, [r7, #20]
 80086b6:	f000 f8d1 	bl	800885c <prvInsertTimerInActiveList>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d01e      	beq.n	80086fe <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086c0:	2300      	movs	r3, #0
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	2300      	movs	r3, #0
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	2100      	movs	r1, #0
 80086ca:	6978      	ldr	r0, [r7, #20]
 80086cc:	f7ff ff8a 	bl	80085e4 <xTimerGenericCommand>
 80086d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d112      	bne.n	80086fe <prvProcessExpiredTimer+0x82>
 80086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	60fb      	str	r3, [r7, #12]
 80086ea:	e7fe      	b.n	80086ea <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086f2:	f023 0301 	bic.w	r3, r3, #1
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	6978      	ldr	r0, [r7, #20]
 8008704:	4798      	blx	r3
}
 8008706:	bf00      	nop
 8008708:	3718      	adds	r7, #24
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	200002a8 	.word	0x200002a8

08008714 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800871c:	f107 0308 	add.w	r3, r7, #8
 8008720:	4618      	mov	r0, r3
 8008722:	f000 f857 	bl	80087d4 <prvGetNextExpireTime>
 8008726:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	4619      	mov	r1, r3
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 f803 	bl	8008738 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008732:	f000 f8d5 	bl	80088e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008736:	e7f1      	b.n	800871c <prvTimerTask+0x8>

08008738 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008742:	f7fe ff1f 	bl	8007584 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008746:	f107 0308 	add.w	r3, r7, #8
 800874a:	4618      	mov	r0, r3
 800874c:	f000 f866 	bl	800881c <prvSampleTimeNow>
 8008750:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d130      	bne.n	80087ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10a      	bne.n	8008774 <prvProcessTimerOrBlockTask+0x3c>
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	429a      	cmp	r2, r3
 8008764:	d806      	bhi.n	8008774 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008766:	f7fe ff1b 	bl	80075a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800876a:	68f9      	ldr	r1, [r7, #12]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7ff ff85 	bl	800867c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008772:	e024      	b.n	80087be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d008      	beq.n	800878c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800877a:	4b13      	ldr	r3, [pc, #76]	; (80087c8 <prvProcessTimerOrBlockTask+0x90>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <prvProcessTimerOrBlockTask+0x50>
 8008784:	2301      	movs	r3, #1
 8008786:	e000      	b.n	800878a <prvProcessTimerOrBlockTask+0x52>
 8008788:	2300      	movs	r3, #0
 800878a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800878c:	4b0f      	ldr	r3, [pc, #60]	; (80087cc <prvProcessTimerOrBlockTask+0x94>)
 800878e:	6818      	ldr	r0, [r3, #0]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	4619      	mov	r1, r3
 800879a:	f7fe fc97 	bl	80070cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800879e:	f7fe feff 	bl	80075a0 <xTaskResumeAll>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10a      	bne.n	80087be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80087a8:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <prvProcessTimerOrBlockTask+0x98>)
 80087aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ae:	601a      	str	r2, [r3, #0]
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	f3bf 8f6f 	isb	sy
}
 80087b8:	e001      	b.n	80087be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80087ba:	f7fe fef1 	bl	80075a0 <xTaskResumeAll>
}
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	200002ac 	.word	0x200002ac
 80087cc:	200002b0 	.word	0x200002b0
 80087d0:	e000ed04 	.word	0xe000ed04

080087d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80087dc:	4b0e      	ldr	r3, [pc, #56]	; (8008818 <prvGetNextExpireTime+0x44>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <prvGetNextExpireTime+0x16>
 80087e6:	2201      	movs	r2, #1
 80087e8:	e000      	b.n	80087ec <prvGetNextExpireTime+0x18>
 80087ea:	2200      	movs	r2, #0
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d105      	bne.n	8008804 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087f8:	4b07      	ldr	r3, [pc, #28]	; (8008818 <prvGetNextExpireTime+0x44>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	60fb      	str	r3, [r7, #12]
 8008802:	e001      	b.n	8008808 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008808:	68fb      	ldr	r3, [r7, #12]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	200002a8 	.word	0x200002a8

0800881c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008824:	f7fe ff58 	bl	80076d8 <xTaskGetTickCount>
 8008828:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800882a:	4b0b      	ldr	r3, [pc, #44]	; (8008858 <prvSampleTimeNow+0x3c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	429a      	cmp	r2, r3
 8008832:	d205      	bcs.n	8008840 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008834:	f000 f918 	bl	8008a68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	e002      	b.n	8008846 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008846:	4a04      	ldr	r2, [pc, #16]	; (8008858 <prvSampleTimeNow+0x3c>)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800884c:	68fb      	ldr	r3, [r7, #12]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	200002b8 	.word	0x200002b8

0800885c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800886a:	2300      	movs	r3, #0
 800886c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	429a      	cmp	r2, r3
 8008880:	d812      	bhi.n	80088a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	1ad2      	subs	r2, r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	429a      	cmp	r2, r3
 800888e:	d302      	bcc.n	8008896 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008890:	2301      	movs	r3, #1
 8008892:	617b      	str	r3, [r7, #20]
 8008894:	e01b      	b.n	80088ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008896:	4b10      	ldr	r3, [pc, #64]	; (80088d8 <prvInsertTimerInActiveList+0x7c>)
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	3304      	adds	r3, #4
 800889e:	4619      	mov	r1, r3
 80088a0:	4610      	mov	r0, r2
 80088a2:	f7fd fc60 	bl	8006166 <vListInsert>
 80088a6:	e012      	b.n	80088ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d206      	bcs.n	80088be <prvInsertTimerInActiveList+0x62>
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d302      	bcc.n	80088be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80088b8:	2301      	movs	r3, #1
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	e007      	b.n	80088ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088be:	4b07      	ldr	r3, [pc, #28]	; (80088dc <prvInsertTimerInActiveList+0x80>)
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	3304      	adds	r3, #4
 80088c6:	4619      	mov	r1, r3
 80088c8:	4610      	mov	r0, r2
 80088ca:	f7fd fc4c 	bl	8006166 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80088ce:	697b      	ldr	r3, [r7, #20]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3718      	adds	r7, #24
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	200002ac 	.word	0x200002ac
 80088dc:	200002a8 	.word	0x200002a8

080088e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b08c      	sub	sp, #48	; 0x30
 80088e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088e6:	e0ac      	b.n	8008a42 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f2c0 80a8 	blt.w	8008a40 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d004      	beq.n	8008906 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fe:	3304      	adds	r3, #4
 8008900:	4618      	mov	r0, r3
 8008902:	f7fd fc69 	bl	80061d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008906:	1d3b      	adds	r3, r7, #4
 8008908:	4618      	mov	r0, r3
 800890a:	f7ff ff87 	bl	800881c <prvSampleTimeNow>
 800890e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2b09      	cmp	r3, #9
 8008914:	f200 8095 	bhi.w	8008a42 <prvProcessReceivedCommands+0x162>
 8008918:	a201      	add	r2, pc, #4	; (adr r2, 8008920 <prvProcessReceivedCommands+0x40>)
 800891a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891e:	bf00      	nop
 8008920:	08008949 	.word	0x08008949
 8008924:	08008949 	.word	0x08008949
 8008928:	08008949 	.word	0x08008949
 800892c:	080089bb 	.word	0x080089bb
 8008930:	080089cf 	.word	0x080089cf
 8008934:	08008a17 	.word	0x08008a17
 8008938:	08008949 	.word	0x08008949
 800893c:	08008949 	.word	0x08008949
 8008940:	080089bb 	.word	0x080089bb
 8008944:	080089cf 	.word	0x080089cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800894e:	f043 0301 	orr.w	r3, r3, #1
 8008952:	b2da      	uxtb	r2, r3
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	18d1      	adds	r1, r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6a3a      	ldr	r2, [r7, #32]
 8008966:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008968:	f7ff ff78 	bl	800885c <prvInsertTimerInActiveList>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d067      	beq.n	8008a42 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008978:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008980:	f003 0304 	and.w	r3, r3, #4
 8008984:	2b00      	cmp	r3, #0
 8008986:	d05c      	beq.n	8008a42 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	441a      	add	r2, r3
 8008990:	2300      	movs	r3, #0
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	2300      	movs	r3, #0
 8008996:	2100      	movs	r1, #0
 8008998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800899a:	f7ff fe23 	bl	80085e4 <xTimerGenericCommand>
 800899e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d14d      	bne.n	8008a42 <prvProcessReceivedCommands+0x162>
 80089a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	61bb      	str	r3, [r7, #24]
 80089b8:	e7fe      	b.n	80089b8 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089c0:	f023 0301 	bic.w	r3, r3, #1
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80089cc:	e039      	b.n	8008a42 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089d4:	f043 0301 	orr.w	r3, r3, #1
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d109      	bne.n	8008a02 <prvProcessReceivedCommands+0x122>
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	617b      	str	r3, [r7, #20]
 8008a00:	e7fe      	b.n	8008a00 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	699a      	ldr	r2, [r3, #24]
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	18d1      	adds	r1, r2, r3
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	6a3a      	ldr	r2, [r7, #32]
 8008a0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a10:	f7ff ff24 	bl	800885c <prvInsertTimerInActiveList>
					break;
 8008a14:	e015      	b.n	8008a42 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a1c:	f003 0302 	and.w	r3, r3, #2
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d103      	bne.n	8008a2c <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8008a24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a26:	f000 fbc5 	bl	80091b4 <vPortFree>
 8008a2a:	e00a      	b.n	8008a42 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a32:	f023 0301 	bic.w	r3, r3, #1
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a3e:	e000      	b.n	8008a42 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008a40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a42:	4b08      	ldr	r3, [pc, #32]	; (8008a64 <prvProcessReceivedCommands+0x184>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f107 0108 	add.w	r1, r7, #8
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7fd ff8b 	bl	8006968 <xQueueReceive>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f47f af47 	bne.w	80088e8 <prvProcessReceivedCommands+0x8>
	}
}
 8008a5a:	bf00      	nop
 8008a5c:	3728      	adds	r7, #40	; 0x28
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	200002b0 	.word	0x200002b0

08008a68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b088      	sub	sp, #32
 8008a6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a6e:	e047      	b.n	8008b00 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a70:	4b2d      	ldr	r3, [pc, #180]	; (8008b28 <prvSwitchTimerLists+0xc0>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a7a:	4b2b      	ldr	r3, [pc, #172]	; (8008b28 <prvSwitchTimerLists+0xc0>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	3304      	adds	r3, #4
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fd fba5 	bl	80061d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a9c:	f003 0304 	and.w	r3, r3, #4
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d02d      	beq.n	8008b00 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	4413      	add	r3, r2
 8008aac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d90e      	bls.n	8008ad4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ac2:	4b19      	ldr	r3, [pc, #100]	; (8008b28 <prvSwitchTimerLists+0xc0>)
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	3304      	adds	r3, #4
 8008aca:	4619      	mov	r1, r3
 8008acc:	4610      	mov	r0, r2
 8008ace:	f7fd fb4a 	bl	8006166 <vListInsert>
 8008ad2:	e015      	b.n	8008b00 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	2300      	movs	r3, #0
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	2100      	movs	r1, #0
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f7ff fd80 	bl	80085e4 <xTimerGenericCommand>
 8008ae4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d109      	bne.n	8008b00 <prvSwitchTimerLists+0x98>
 8008aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af0:	f383 8811 	msr	BASEPRI, r3
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	603b      	str	r3, [r7, #0]
 8008afe:	e7fe      	b.n	8008afe <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b00:	4b09      	ldr	r3, [pc, #36]	; (8008b28 <prvSwitchTimerLists+0xc0>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1b2      	bne.n	8008a70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008b0a:	4b07      	ldr	r3, [pc, #28]	; (8008b28 <prvSwitchTimerLists+0xc0>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008b10:	4b06      	ldr	r3, [pc, #24]	; (8008b2c <prvSwitchTimerLists+0xc4>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a04      	ldr	r2, [pc, #16]	; (8008b28 <prvSwitchTimerLists+0xc0>)
 8008b16:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008b18:	4a04      	ldr	r2, [pc, #16]	; (8008b2c <prvSwitchTimerLists+0xc4>)
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	6013      	str	r3, [r2, #0]
}
 8008b1e:	bf00      	nop
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	200002a8 	.word	0x200002a8
 8008b2c:	200002ac 	.word	0x200002ac

08008b30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b36:	f000 f961 	bl	8008dfc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b3a:	4b15      	ldr	r3, [pc, #84]	; (8008b90 <prvCheckForValidListAndQueue+0x60>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d120      	bne.n	8008b84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b42:	4814      	ldr	r0, [pc, #80]	; (8008b94 <prvCheckForValidListAndQueue+0x64>)
 8008b44:	f7fd fabe 	bl	80060c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b48:	4813      	ldr	r0, [pc, #76]	; (8008b98 <prvCheckForValidListAndQueue+0x68>)
 8008b4a:	f7fd fabb 	bl	80060c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b4e:	4b13      	ldr	r3, [pc, #76]	; (8008b9c <prvCheckForValidListAndQueue+0x6c>)
 8008b50:	4a10      	ldr	r2, [pc, #64]	; (8008b94 <prvCheckForValidListAndQueue+0x64>)
 8008b52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b54:	4b12      	ldr	r3, [pc, #72]	; (8008ba0 <prvCheckForValidListAndQueue+0x70>)
 8008b56:	4a10      	ldr	r2, [pc, #64]	; (8008b98 <prvCheckForValidListAndQueue+0x68>)
 8008b58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	4b11      	ldr	r3, [pc, #68]	; (8008ba4 <prvCheckForValidListAndQueue+0x74>)
 8008b60:	4a11      	ldr	r2, [pc, #68]	; (8008ba8 <prvCheckForValidListAndQueue+0x78>)
 8008b62:	210c      	movs	r1, #12
 8008b64:	200a      	movs	r0, #10
 8008b66:	f7fd fbc9 	bl	80062fc <xQueueGenericCreateStatic>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	4b08      	ldr	r3, [pc, #32]	; (8008b90 <prvCheckForValidListAndQueue+0x60>)
 8008b6e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b70:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <prvCheckForValidListAndQueue+0x60>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d005      	beq.n	8008b84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b78:	4b05      	ldr	r3, [pc, #20]	; (8008b90 <prvCheckForValidListAndQueue+0x60>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	490b      	ldr	r1, [pc, #44]	; (8008bac <prvCheckForValidListAndQueue+0x7c>)
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fe fa7c 	bl	800707c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b84:	f000 f968 	bl	8008e58 <vPortExitCritical>
}
 8008b88:	bf00      	nop
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	200002b0 	.word	0x200002b0
 8008b94:	20000280 	.word	0x20000280
 8008b98:	20000294 	.word	0x20000294
 8008b9c:	200002a8 	.word	0x200002a8
 8008ba0:	200002ac 	.word	0x200002ac
 8008ba4:	20000334 	.word	0x20000334
 8008ba8:	200002bc 	.word	0x200002bc
 8008bac:	0800bb5c 	.word	0x0800bb5c

08008bb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	3b04      	subs	r3, #4
 8008bc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008bc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3b04      	subs	r3, #4
 8008bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	f023 0201 	bic.w	r2, r3, #1
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	3b04      	subs	r3, #4
 8008bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008be0:	4a0c      	ldr	r2, [pc, #48]	; (8008c14 <pxPortInitialiseStack+0x64>)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	3b14      	subs	r3, #20
 8008bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3b04      	subs	r3, #4
 8008bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f06f 0202 	mvn.w	r2, #2
 8008bfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	3b20      	subs	r3, #32
 8008c04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c06:	68fb      	ldr	r3, [r7, #12]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr
 8008c14:	08008c19 	.word	0x08008c19

08008c18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c22:	4b11      	ldr	r3, [pc, #68]	; (8008c68 <prvTaskExitError+0x50>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2a:	d009      	beq.n	8008c40 <prvTaskExitError+0x28>
 8008c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	e7fe      	b.n	8008c3e <prvTaskExitError+0x26>
 8008c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c52:	bf00      	nop
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d0fc      	beq.n	8008c54 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c5a:	bf00      	nop
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	20000008 	.word	0x20000008
 8008c6c:	00000000 	.word	0x00000000

08008c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c70:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <pxCurrentTCBConst2>)
 8008c72:	6819      	ldr	r1, [r3, #0]
 8008c74:	6808      	ldr	r0, [r1, #0]
 8008c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7a:	f380 8809 	msr	PSP, r0
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f04f 0000 	mov.w	r0, #0
 8008c86:	f380 8811 	msr	BASEPRI, r0
 8008c8a:	4770      	bx	lr
 8008c8c:	f3af 8000 	nop.w

08008c90 <pxCurrentTCBConst2>:
 8008c90:	20000154 	.word	0x20000154
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop

08008c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c98:	4808      	ldr	r0, [pc, #32]	; (8008cbc <prvPortStartFirstTask+0x24>)
 8008c9a:	6800      	ldr	r0, [r0, #0]
 8008c9c:	6800      	ldr	r0, [r0, #0]
 8008c9e:	f380 8808 	msr	MSP, r0
 8008ca2:	f04f 0000 	mov.w	r0, #0
 8008ca6:	f380 8814 	msr	CONTROL, r0
 8008caa:	b662      	cpsie	i
 8008cac:	b661      	cpsie	f
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	df00      	svc	0
 8008cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cba:	bf00      	nop
 8008cbc:	e000ed08 	.word	0xe000ed08

08008cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008cc6:	4b44      	ldr	r3, [pc, #272]	; (8008dd8 <xPortStartScheduler+0x118>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a44      	ldr	r2, [pc, #272]	; (8008ddc <xPortStartScheduler+0x11c>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d109      	bne.n	8008ce4 <xPortStartScheduler+0x24>
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	613b      	str	r3, [r7, #16]
 8008ce2:	e7fe      	b.n	8008ce2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ce4:	4b3c      	ldr	r3, [pc, #240]	; (8008dd8 <xPortStartScheduler+0x118>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a3d      	ldr	r2, [pc, #244]	; (8008de0 <xPortStartScheduler+0x120>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d109      	bne.n	8008d02 <xPortStartScheduler+0x42>
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	60fb      	str	r3, [r7, #12]
 8008d00:	e7fe      	b.n	8008d00 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d02:	4b38      	ldr	r3, [pc, #224]	; (8008de4 <xPortStartScheduler+0x124>)
 8008d04:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	22ff      	movs	r2, #255	; 0xff
 8008d12:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d1c:	78fb      	ldrb	r3, [r7, #3]
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	4b30      	ldr	r3, [pc, #192]	; (8008de8 <xPortStartScheduler+0x128>)
 8008d28:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d2a:	4b30      	ldr	r3, [pc, #192]	; (8008dec <xPortStartScheduler+0x12c>)
 8008d2c:	2207      	movs	r2, #7
 8008d2e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d30:	e009      	b.n	8008d46 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008d32:	4b2e      	ldr	r3, [pc, #184]	; (8008dec <xPortStartScheduler+0x12c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3b01      	subs	r3, #1
 8008d38:	4a2c      	ldr	r2, [pc, #176]	; (8008dec <xPortStartScheduler+0x12c>)
 8008d3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d3c:	78fb      	ldrb	r3, [r7, #3]
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	005b      	lsls	r3, r3, #1
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d46:	78fb      	ldrb	r3, [r7, #3]
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d4e:	2b80      	cmp	r3, #128	; 0x80
 8008d50:	d0ef      	beq.n	8008d32 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d52:	4b26      	ldr	r3, [pc, #152]	; (8008dec <xPortStartScheduler+0x12c>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f1c3 0307 	rsb	r3, r3, #7
 8008d5a:	2b04      	cmp	r3, #4
 8008d5c:	d009      	beq.n	8008d72 <xPortStartScheduler+0xb2>
 8008d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	60bb      	str	r3, [r7, #8]
 8008d70:	e7fe      	b.n	8008d70 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d72:	4b1e      	ldr	r3, [pc, #120]	; (8008dec <xPortStartScheduler+0x12c>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	021b      	lsls	r3, r3, #8
 8008d78:	4a1c      	ldr	r2, [pc, #112]	; (8008dec <xPortStartScheduler+0x12c>)
 8008d7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d7c:	4b1b      	ldr	r3, [pc, #108]	; (8008dec <xPortStartScheduler+0x12c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d84:	4a19      	ldr	r2, [pc, #100]	; (8008dec <xPortStartScheduler+0x12c>)
 8008d86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	b2da      	uxtb	r2, r3
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d90:	4b17      	ldr	r3, [pc, #92]	; (8008df0 <xPortStartScheduler+0x130>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a16      	ldr	r2, [pc, #88]	; (8008df0 <xPortStartScheduler+0x130>)
 8008d96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d9c:	4b14      	ldr	r3, [pc, #80]	; (8008df0 <xPortStartScheduler+0x130>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a13      	ldr	r2, [pc, #76]	; (8008df0 <xPortStartScheduler+0x130>)
 8008da2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008da6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008da8:	f000 f8d6 	bl	8008f58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008dac:	4b11      	ldr	r3, [pc, #68]	; (8008df4 <xPortStartScheduler+0x134>)
 8008dae:	2200      	movs	r2, #0
 8008db0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008db2:	f000 f8f5 	bl	8008fa0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008db6:	4b10      	ldr	r3, [pc, #64]	; (8008df8 <xPortStartScheduler+0x138>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a0f      	ldr	r2, [pc, #60]	; (8008df8 <xPortStartScheduler+0x138>)
 8008dbc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008dc0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008dc2:	f7ff ff69 	bl	8008c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008dc6:	f7fe fd4f 	bl	8007868 <vTaskSwitchContext>
	prvTaskExitError();
 8008dca:	f7ff ff25 	bl	8008c18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3718      	adds	r7, #24
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	e000ed00 	.word	0xe000ed00
 8008ddc:	410fc271 	.word	0x410fc271
 8008de0:	410fc270 	.word	0x410fc270
 8008de4:	e000e400 	.word	0xe000e400
 8008de8:	2000037c 	.word	0x2000037c
 8008dec:	20000380 	.word	0x20000380
 8008df0:	e000ed20 	.word	0xe000ed20
 8008df4:	20000008 	.word	0x20000008
 8008df8:	e000ef34 	.word	0xe000ef34

08008dfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e06:	f383 8811 	msr	BASEPRI, r3
 8008e0a:	f3bf 8f6f 	isb	sy
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e14:	4b0e      	ldr	r3, [pc, #56]	; (8008e50 <vPortEnterCritical+0x54>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	4a0d      	ldr	r2, [pc, #52]	; (8008e50 <vPortEnterCritical+0x54>)
 8008e1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e1e:	4b0c      	ldr	r3, [pc, #48]	; (8008e50 <vPortEnterCritical+0x54>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d10e      	bne.n	8008e44 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e26:	4b0b      	ldr	r3, [pc, #44]	; (8008e54 <vPortEnterCritical+0x58>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d009      	beq.n	8008e44 <vPortEnterCritical+0x48>
 8008e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	603b      	str	r3, [r7, #0]
 8008e42:	e7fe      	b.n	8008e42 <vPortEnterCritical+0x46>
	}
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	20000008 	.word	0x20000008
 8008e54:	e000ed04 	.word	0xe000ed04

08008e58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e5e:	4b11      	ldr	r3, [pc, #68]	; (8008ea4 <vPortExitCritical+0x4c>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d109      	bne.n	8008e7a <vPortExitCritical+0x22>
 8008e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	607b      	str	r3, [r7, #4]
 8008e78:	e7fe      	b.n	8008e78 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008e7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ea4 <vPortExitCritical+0x4c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	4a08      	ldr	r2, [pc, #32]	; (8008ea4 <vPortExitCritical+0x4c>)
 8008e82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e84:	4b07      	ldr	r3, [pc, #28]	; (8008ea4 <vPortExitCritical+0x4c>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d104      	bne.n	8008e96 <vPortExitCritical+0x3e>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e96:	bf00      	nop
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	20000008 	.word	0x20000008
	...

08008eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008eb0:	f3ef 8009 	mrs	r0, PSP
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	4b15      	ldr	r3, [pc, #84]	; (8008f10 <pxCurrentTCBConst>)
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	f01e 0f10 	tst.w	lr, #16
 8008ec0:	bf08      	it	eq
 8008ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eca:	6010      	str	r0, [r2, #0]
 8008ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ed4:	f380 8811 	msr	BASEPRI, r0
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f7fe fcc2 	bl	8007868 <vTaskSwitchContext>
 8008ee4:	f04f 0000 	mov.w	r0, #0
 8008ee8:	f380 8811 	msr	BASEPRI, r0
 8008eec:	bc09      	pop	{r0, r3}
 8008eee:	6819      	ldr	r1, [r3, #0]
 8008ef0:	6808      	ldr	r0, [r1, #0]
 8008ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef6:	f01e 0f10 	tst.w	lr, #16
 8008efa:	bf08      	it	eq
 8008efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f00:	f380 8809 	msr	PSP, r0
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	f3af 8000 	nop.w

08008f10 <pxCurrentTCBConst>:
 8008f10:	20000154 	.word	0x20000154
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f14:	bf00      	nop
 8008f16:	bf00      	nop

08008f18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f30:	f7fe fbe2 	bl	80076f8 <xTaskIncrementTick>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d003      	beq.n	8008f42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f3a:	4b06      	ldr	r3, [pc, #24]	; (8008f54 <SysTick_Handler+0x3c>)
 8008f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f40:	601a      	str	r2, [r3, #0]
 8008f42:	2300      	movs	r3, #0
 8008f44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f4c:	bf00      	nop
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	e000ed04 	.word	0xe000ed04

08008f58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f58:	b480      	push	{r7}
 8008f5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f5c:	4b0b      	ldr	r3, [pc, #44]	; (8008f8c <vPortSetupTimerInterrupt+0x34>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f62:	4b0b      	ldr	r3, [pc, #44]	; (8008f90 <vPortSetupTimerInterrupt+0x38>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f68:	4b0a      	ldr	r3, [pc, #40]	; (8008f94 <vPortSetupTimerInterrupt+0x3c>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a0a      	ldr	r2, [pc, #40]	; (8008f98 <vPortSetupTimerInterrupt+0x40>)
 8008f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f72:	099b      	lsrs	r3, r3, #6
 8008f74:	4a09      	ldr	r2, [pc, #36]	; (8008f9c <vPortSetupTimerInterrupt+0x44>)
 8008f76:	3b01      	subs	r3, #1
 8008f78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f7a:	4b04      	ldr	r3, [pc, #16]	; (8008f8c <vPortSetupTimerInterrupt+0x34>)
 8008f7c:	2207      	movs	r2, #7
 8008f7e:	601a      	str	r2, [r3, #0]
}
 8008f80:	bf00      	nop
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	e000e010 	.word	0xe000e010
 8008f90:	e000e018 	.word	0xe000e018
 8008f94:	200000d0 	.word	0x200000d0
 8008f98:	10624dd3 	.word	0x10624dd3
 8008f9c:	e000e014 	.word	0xe000e014

08008fa0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008fa0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008fb0 <vPortEnableVFP+0x10>
 8008fa4:	6801      	ldr	r1, [r0, #0]
 8008fa6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008faa:	6001      	str	r1, [r0, #0]
 8008fac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008fae:	bf00      	nop
 8008fb0:	e000ed88 	.word	0xe000ed88

08008fb4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008fba:	f3ef 8305 	mrs	r3, IPSR
 8008fbe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2b0f      	cmp	r3, #15
 8008fc4:	d913      	bls.n	8008fee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008fc6:	4a16      	ldr	r2, [pc, #88]	; (8009020 <vPortValidateInterruptPriority+0x6c>)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	4413      	add	r3, r2
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008fd0:	4b14      	ldr	r3, [pc, #80]	; (8009024 <vPortValidateInterruptPriority+0x70>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	7afa      	ldrb	r2, [r7, #11]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d209      	bcs.n	8008fee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	607b      	str	r3, [r7, #4]
 8008fec:	e7fe      	b.n	8008fec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008fee:	4b0e      	ldr	r3, [pc, #56]	; (8009028 <vPortValidateInterruptPriority+0x74>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008ff6:	4b0d      	ldr	r3, [pc, #52]	; (800902c <vPortValidateInterruptPriority+0x78>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d909      	bls.n	8009012 <vPortValidateInterruptPriority+0x5e>
 8008ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	603b      	str	r3, [r7, #0]
 8009010:	e7fe      	b.n	8009010 <vPortValidateInterruptPriority+0x5c>
	}
 8009012:	bf00      	nop
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	e000e3f0 	.word	0xe000e3f0
 8009024:	2000037c 	.word	0x2000037c
 8009028:	e000ed0c 	.word	0xe000ed0c
 800902c:	20000380 	.word	0x20000380

08009030 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b08a      	sub	sp, #40	; 0x28
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009038:	2300      	movs	r3, #0
 800903a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800903c:	f7fe faa2 	bl	8007584 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009040:	4b57      	ldr	r3, [pc, #348]	; (80091a0 <pvPortMalloc+0x170>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d101      	bne.n	800904c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009048:	f000 f90c 	bl	8009264 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800904c:	4b55      	ldr	r3, [pc, #340]	; (80091a4 <pvPortMalloc+0x174>)
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4013      	ands	r3, r2
 8009054:	2b00      	cmp	r3, #0
 8009056:	f040 808c 	bne.w	8009172 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d01c      	beq.n	800909a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009060:	2208      	movs	r2, #8
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4413      	add	r3, r2
 8009066:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f003 0307 	and.w	r3, r3, #7
 800906e:	2b00      	cmp	r3, #0
 8009070:	d013      	beq.n	800909a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f023 0307 	bic.w	r3, r3, #7
 8009078:	3308      	adds	r3, #8
 800907a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f003 0307 	and.w	r3, r3, #7
 8009082:	2b00      	cmp	r3, #0
 8009084:	d009      	beq.n	800909a <pvPortMalloc+0x6a>
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	e7fe      	b.n	8009098 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d068      	beq.n	8009172 <pvPortMalloc+0x142>
 80090a0:	4b41      	ldr	r3, [pc, #260]	; (80091a8 <pvPortMalloc+0x178>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d863      	bhi.n	8009172 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80090aa:	4b40      	ldr	r3, [pc, #256]	; (80091ac <pvPortMalloc+0x17c>)
 80090ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80090ae:	4b3f      	ldr	r3, [pc, #252]	; (80091ac <pvPortMalloc+0x17c>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090b4:	e004      	b.n	80090c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80090b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d903      	bls.n	80090d2 <pvPortMalloc+0xa2>
 80090ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1f1      	bne.n	80090b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090d2:	4b33      	ldr	r3, [pc, #204]	; (80091a0 <pvPortMalloc+0x170>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090d8:	429a      	cmp	r2, r3
 80090da:	d04a      	beq.n	8009172 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090dc:	6a3b      	ldr	r3, [r7, #32]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2208      	movs	r2, #8
 80090e2:	4413      	add	r3, r2
 80090e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	685a      	ldr	r2, [r3, #4]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	1ad2      	subs	r2, r2, r3
 80090f6:	2308      	movs	r3, #8
 80090f8:	005b      	lsls	r3, r3, #1
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d91e      	bls.n	800913c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4413      	add	r3, r2
 8009104:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	f003 0307 	and.w	r3, r3, #7
 800910c:	2b00      	cmp	r3, #0
 800910e:	d009      	beq.n	8009124 <pvPortMalloc+0xf4>
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	613b      	str	r3, [r7, #16]
 8009122:	e7fe      	b.n	8009122 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	1ad2      	subs	r2, r2, r3
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009136:	69b8      	ldr	r0, [r7, #24]
 8009138:	f000 f8f6 	bl	8009328 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800913c:	4b1a      	ldr	r3, [pc, #104]	; (80091a8 <pvPortMalloc+0x178>)
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	4a18      	ldr	r2, [pc, #96]	; (80091a8 <pvPortMalloc+0x178>)
 8009148:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800914a:	4b17      	ldr	r3, [pc, #92]	; (80091a8 <pvPortMalloc+0x178>)
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	4b18      	ldr	r3, [pc, #96]	; (80091b0 <pvPortMalloc+0x180>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	429a      	cmp	r2, r3
 8009154:	d203      	bcs.n	800915e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009156:	4b14      	ldr	r3, [pc, #80]	; (80091a8 <pvPortMalloc+0x178>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a15      	ldr	r2, [pc, #84]	; (80091b0 <pvPortMalloc+0x180>)
 800915c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	4b10      	ldr	r3, [pc, #64]	; (80091a4 <pvPortMalloc+0x174>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	431a      	orrs	r2, r3
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800916c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916e:	2200      	movs	r2, #0
 8009170:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009172:	f7fe fa15 	bl	80075a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	f003 0307 	and.w	r3, r3, #7
 800917c:	2b00      	cmp	r3, #0
 800917e:	d009      	beq.n	8009194 <pvPortMalloc+0x164>
 8009180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	60fb      	str	r3, [r7, #12]
 8009192:	e7fe      	b.n	8009192 <pvPortMalloc+0x162>
	return pvReturn;
 8009194:	69fb      	ldr	r3, [r7, #28]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3728      	adds	r7, #40	; 0x28
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	20000f44 	.word	0x20000f44
 80091a4:	20000f50 	.word	0x20000f50
 80091a8:	20000f48 	.word	0x20000f48
 80091ac:	20000f3c 	.word	0x20000f3c
 80091b0:	20000f4c 	.word	0x20000f4c

080091b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d046      	beq.n	8009254 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091c6:	2308      	movs	r3, #8
 80091c8:	425b      	negs	r3, r3
 80091ca:	697a      	ldr	r2, [r7, #20]
 80091cc:	4413      	add	r3, r2
 80091ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	685a      	ldr	r2, [r3, #4]
 80091d8:	4b20      	ldr	r3, [pc, #128]	; (800925c <vPortFree+0xa8>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4013      	ands	r3, r2
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d109      	bne.n	80091f6 <vPortFree+0x42>
 80091e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	60fb      	str	r3, [r7, #12]
 80091f4:	e7fe      	b.n	80091f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d009      	beq.n	8009212 <vPortFree+0x5e>
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	60bb      	str	r3, [r7, #8]
 8009210:	e7fe      	b.n	8009210 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	685a      	ldr	r2, [r3, #4]
 8009216:	4b11      	ldr	r3, [pc, #68]	; (800925c <vPortFree+0xa8>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4013      	ands	r3, r2
 800921c:	2b00      	cmp	r3, #0
 800921e:	d019      	beq.n	8009254 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d115      	bne.n	8009254 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	4b0b      	ldr	r3, [pc, #44]	; (800925c <vPortFree+0xa8>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	43db      	mvns	r3, r3
 8009232:	401a      	ands	r2, r3
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009238:	f7fe f9a4 	bl	8007584 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	4b07      	ldr	r3, [pc, #28]	; (8009260 <vPortFree+0xac>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4413      	add	r3, r2
 8009246:	4a06      	ldr	r2, [pc, #24]	; (8009260 <vPortFree+0xac>)
 8009248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800924a:	6938      	ldr	r0, [r7, #16]
 800924c:	f000 f86c 	bl	8009328 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009250:	f7fe f9a6 	bl	80075a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009254:	bf00      	nop
 8009256:	3718      	adds	r7, #24
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	20000f50 	.word	0x20000f50
 8009260:	20000f48 	.word	0x20000f48

08009264 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800926a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800926e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009270:	4b27      	ldr	r3, [pc, #156]	; (8009310 <prvHeapInit+0xac>)
 8009272:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f003 0307 	and.w	r3, r3, #7
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00c      	beq.n	8009298 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	3307      	adds	r3, #7
 8009282:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f023 0307 	bic.w	r3, r3, #7
 800928a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	4a1f      	ldr	r2, [pc, #124]	; (8009310 <prvHeapInit+0xac>)
 8009294:	4413      	add	r3, r2
 8009296:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800929c:	4a1d      	ldr	r2, [pc, #116]	; (8009314 <prvHeapInit+0xb0>)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80092a2:	4b1c      	ldr	r3, [pc, #112]	; (8009314 <prvHeapInit+0xb0>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	4413      	add	r3, r2
 80092ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092b0:	2208      	movs	r2, #8
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	1a9b      	subs	r3, r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f023 0307 	bic.w	r3, r3, #7
 80092be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	4a15      	ldr	r2, [pc, #84]	; (8009318 <prvHeapInit+0xb4>)
 80092c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092c6:	4b14      	ldr	r3, [pc, #80]	; (8009318 <prvHeapInit+0xb4>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2200      	movs	r2, #0
 80092cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092ce:	4b12      	ldr	r3, [pc, #72]	; (8009318 <prvHeapInit+0xb4>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2200      	movs	r2, #0
 80092d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	1ad2      	subs	r2, r2, r3
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092e4:	4b0c      	ldr	r3, [pc, #48]	; (8009318 <prvHeapInit+0xb4>)
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	4a0a      	ldr	r2, [pc, #40]	; (800931c <prvHeapInit+0xb8>)
 80092f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	4a09      	ldr	r2, [pc, #36]	; (8009320 <prvHeapInit+0xbc>)
 80092fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092fc:	4b09      	ldr	r3, [pc, #36]	; (8009324 <prvHeapInit+0xc0>)
 80092fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009302:	601a      	str	r2, [r3, #0]
}
 8009304:	bf00      	nop
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr
 8009310:	20000384 	.word	0x20000384
 8009314:	20000f3c 	.word	0x20000f3c
 8009318:	20000f44 	.word	0x20000f44
 800931c:	20000f4c 	.word	0x20000f4c
 8009320:	20000f48 	.word	0x20000f48
 8009324:	20000f50 	.word	0x20000f50

08009328 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009330:	4b28      	ldr	r3, [pc, #160]	; (80093d4 <prvInsertBlockIntoFreeList+0xac>)
 8009332:	60fb      	str	r3, [r7, #12]
 8009334:	e002      	b.n	800933c <prvInsertBlockIntoFreeList+0x14>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	60fb      	str	r3, [r7, #12]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	429a      	cmp	r2, r3
 8009344:	d8f7      	bhi.n	8009336 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	4413      	add	r3, r2
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	429a      	cmp	r2, r3
 8009356:	d108      	bne.n	800936a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	441a      	add	r2, r3
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	441a      	add	r2, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	429a      	cmp	r2, r3
 800937c:	d118      	bne.n	80093b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	4b15      	ldr	r3, [pc, #84]	; (80093d8 <prvInsertBlockIntoFreeList+0xb0>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	429a      	cmp	r2, r3
 8009388:	d00d      	beq.n	80093a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	441a      	add	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	e008      	b.n	80093b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80093a6:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <prvInsertBlockIntoFreeList+0xb0>)
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	e003      	b.n	80093b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d002      	beq.n	80093c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093c6:	bf00      	nop
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	20000f3c 	.word	0x20000f3c
 80093d8:	20000f44 	.word	0x20000f44

080093dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	4a07      	ldr	r2, [pc, #28]	; (8009408 <vApplicationGetIdleTaskMemory+0x2c>)
 80093ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	4a06      	ldr	r2, [pc, #24]	; (800940c <vApplicationGetIdleTaskMemory+0x30>)
 80093f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2280      	movs	r2, #128	; 0x80
 80093f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80093fa:	bf00      	nop
 80093fc:	3714      	adds	r7, #20
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	20000f54 	.word	0x20000f54
 800940c:	20000fa8 	.word	0x20000fa8

08009410 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4a07      	ldr	r2, [pc, #28]	; (800943c <vApplicationGetTimerTaskMemory+0x2c>)
 8009420:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	4a06      	ldr	r2, [pc, #24]	; (8009440 <vApplicationGetTimerTaskMemory+0x30>)
 8009426:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800942e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8009430:	bf00      	nop
 8009432:	3714      	adds	r7, #20
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr
 800943c:	200011a8 	.word	0x200011a8
 8009440:	200011fc 	.word	0x200011fc

08009444 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	4603      	mov	r3, r0
 800944c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800944e:	88fb      	ldrh	r3, [r7, #6]
 8009450:	b2db      	uxtb	r3, r3
 8009452:	2120      	movs	r1, #32
 8009454:	4618      	mov	r0, r3
 8009456:	f001 fac1 	bl	800a9dc <SENSOR_IO_Read>
 800945a:	4603      	mov	r3, r0
 800945c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800945e:	7bfb      	ldrb	r3, [r7, #15]
 8009460:	f023 0304 	bic.w	r3, r3, #4
 8009464:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8009466:	7bfb      	ldrb	r3, [r7, #15]
 8009468:	f043 0304 	orr.w	r3, r3, #4
 800946c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800946e:	7bfb      	ldrb	r3, [r7, #15]
 8009470:	f023 0303 	bic.w	r3, r3, #3
 8009474:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8009476:	7bfb      	ldrb	r3, [r7, #15]
 8009478:	f043 0301 	orr.w	r3, r3, #1
 800947c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009484:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8009486:	88fb      	ldrh	r3, [r7, #6]
 8009488:	b2db      	uxtb	r3, r3
 800948a:	7bfa      	ldrb	r2, [r7, #15]
 800948c:	2120      	movs	r1, #32
 800948e:	4618      	mov	r0, r3
 8009490:	f001 fa8a 	bl	800a9a8 <SENSOR_IO_Write>
}
 8009494:	bf00      	nop
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	4603      	mov	r3, r0
 80094a4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80094a6:	2300      	movs	r3, #0
 80094a8:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80094aa:	f001 fa73 	bl	800a994 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80094ae:	88fb      	ldrh	r3, [r7, #6]
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	210f      	movs	r1, #15
 80094b4:	4618      	mov	r0, r3
 80094b6:	f001 fa91 	bl	800a9dc <SENSOR_IO_Read>
 80094ba:	4603      	mov	r3, r0
 80094bc:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80094be:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b088      	sub	sp, #32
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	4603      	mov	r3, r0
 80094d0:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80094d2:	88fb      	ldrh	r3, [r7, #6]
 80094d4:	b2d8      	uxtb	r0, r3
 80094d6:	f107 020c 	add.w	r2, r7, #12
 80094da:	2302      	movs	r3, #2
 80094dc:	21b0      	movs	r1, #176	; 0xb0
 80094de:	f001 fa9b 	bl	800aa18 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80094e2:	7b3b      	ldrb	r3, [r7, #12]
 80094e4:	085b      	lsrs	r3, r3, #1
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80094ea:	7b7b      	ldrb	r3, [r7, #13]
 80094ec:	085b      	lsrs	r3, r3, #1
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80094f2:	88fb      	ldrh	r3, [r7, #6]
 80094f4:	b2d8      	uxtb	r0, r3
 80094f6:	f107 020c 	add.w	r2, r7, #12
 80094fa:	2302      	movs	r3, #2
 80094fc:	21b6      	movs	r1, #182	; 0xb6
 80094fe:	f001 fa8b 	bl	800aa18 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009502:	7b7b      	ldrb	r3, [r7, #13]
 8009504:	021b      	lsls	r3, r3, #8
 8009506:	b21a      	sxth	r2, r3
 8009508:	7b3b      	ldrb	r3, [r7, #12]
 800950a:	b21b      	sxth	r3, r3
 800950c:	4313      	orrs	r3, r2
 800950e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8009510:	88fb      	ldrh	r3, [r7, #6]
 8009512:	b2d8      	uxtb	r0, r3
 8009514:	f107 020c 	add.w	r2, r7, #12
 8009518:	2302      	movs	r3, #2
 800951a:	21ba      	movs	r1, #186	; 0xba
 800951c:	f001 fa7c 	bl	800aa18 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009520:	7b7b      	ldrb	r3, [r7, #13]
 8009522:	021b      	lsls	r3, r3, #8
 8009524:	b21a      	sxth	r2, r3
 8009526:	7b3b      	ldrb	r3, [r7, #12]
 8009528:	b21b      	sxth	r3, r3
 800952a:	4313      	orrs	r3, r2
 800952c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800952e:	88fb      	ldrh	r3, [r7, #6]
 8009530:	b2d8      	uxtb	r0, r3
 8009532:	f107 020c 	add.w	r2, r7, #12
 8009536:	2302      	movs	r3, #2
 8009538:	21a8      	movs	r1, #168	; 0xa8
 800953a:	f001 fa6d 	bl	800aa18 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800953e:	7b7b      	ldrb	r3, [r7, #13]
 8009540:	021b      	lsls	r3, r3, #8
 8009542:	b21a      	sxth	r2, r3
 8009544:	7b3b      	ldrb	r3, [r7, #12]
 8009546:	b21b      	sxth	r3, r3
 8009548:	4313      	orrs	r3, r2
 800954a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800954c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009550:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800955e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009562:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	ee07 3a90 	vmov	s15, r3
 800956c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009570:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009574:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009578:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	ee07 3a90 	vmov	s15, r3
 8009582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800958a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800959a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800959e:	edd7 7a04 	vldr	s15, [r7, #16]
 80095a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80095a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095aa:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80095ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80095b2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80095f8 <HTS221_H_ReadHumidity+0x130>
 80095b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095be:	dd01      	ble.n	80095c4 <HTS221_H_ReadHumidity+0xfc>
 80095c0:	4b0e      	ldr	r3, [pc, #56]	; (80095fc <HTS221_H_ReadHumidity+0x134>)
 80095c2:	e00a      	b.n	80095da <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80095c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80095c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d0:	d502      	bpl.n	80095d8 <HTS221_H_ReadHumidity+0x110>
 80095d2:	f04f 0300 	mov.w	r3, #0
 80095d6:	e000      	b.n	80095da <HTS221_H_ReadHumidity+0x112>
 80095d8:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80095da:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80095dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80095e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80095e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80095e8:	eef0 7a66 	vmov.f32	s15, s13
}
 80095ec:	eeb0 0a67 	vmov.f32	s0, s15
 80095f0:	3720      	adds	r7, #32
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	447a0000 	.word	0x447a0000
 80095fc:	447a0000 	.word	0x447a0000

08009600 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	4603      	mov	r3, r0
 8009608:	6039      	str	r1, [r7, #0]
 800960a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800960c:	88fb      	ldrh	r3, [r7, #6]
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2120      	movs	r1, #32
 8009612:	4618      	mov	r0, r3
 8009614:	f001 f9e2 	bl	800a9dc <SENSOR_IO_Read>
 8009618:	4603      	mov	r3, r0
 800961a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	f023 0304 	bic.w	r3, r3, #4
 8009622:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	f043 0304 	orr.w	r3, r3, #4
 800962a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	f023 0303 	bic.w	r3, r3, #3
 8009632:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8009634:	7bfb      	ldrb	r3, [r7, #15]
 8009636:	f043 0301 	orr.w	r3, r3, #1
 800963a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800963c:	7bfb      	ldrb	r3, [r7, #15]
 800963e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009642:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8009644:	88fb      	ldrh	r3, [r7, #6]
 8009646:	b2db      	uxtb	r3, r3
 8009648:	7bfa      	ldrb	r2, [r7, #15]
 800964a:	2120      	movs	r1, #32
 800964c:	4618      	mov	r0, r3
 800964e:	f001 f9ab 	bl	800a9a8 <SENSOR_IO_Write>
}
 8009652:	bf00      	nop
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b088      	sub	sp, #32
 800965e:	af00      	add	r7, sp, #0
 8009660:	4603      	mov	r3, r0
 8009662:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8009664:	88fb      	ldrh	r3, [r7, #6]
 8009666:	b2d8      	uxtb	r0, r3
 8009668:	f107 0208 	add.w	r2, r7, #8
 800966c:	2302      	movs	r3, #2
 800966e:	21b2      	movs	r1, #178	; 0xb2
 8009670:	f001 f9d2 	bl	800aa18 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8009674:	88fb      	ldrh	r3, [r7, #6]
 8009676:	b2db      	uxtb	r3, r3
 8009678:	2135      	movs	r1, #53	; 0x35
 800967a:	4618      	mov	r0, r3
 800967c:	f001 f9ae 	bl	800a9dc <SENSOR_IO_Read>
 8009680:	4603      	mov	r3, r0
 8009682:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8009684:	7ffb      	ldrb	r3, [r7, #31]
 8009686:	021b      	lsls	r3, r3, #8
 8009688:	b21b      	sxth	r3, r3
 800968a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800968e:	b21a      	sxth	r2, r3
 8009690:	7a3b      	ldrb	r3, [r7, #8]
 8009692:	b21b      	sxth	r3, r3
 8009694:	4313      	orrs	r3, r2
 8009696:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8009698:	7ffb      	ldrb	r3, [r7, #31]
 800969a:	019b      	lsls	r3, r3, #6
 800969c:	b21b      	sxth	r3, r3
 800969e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096a2:	b21a      	sxth	r2, r3
 80096a4:	7a7b      	ldrb	r3, [r7, #9]
 80096a6:	b21b      	sxth	r3, r3
 80096a8:	4313      	orrs	r3, r2
 80096aa:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80096ac:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80096b0:	10db      	asrs	r3, r3, #3
 80096b2:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80096b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80096b8:	10db      	asrs	r3, r3, #3
 80096ba:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80096bc:	88fb      	ldrh	r3, [r7, #6]
 80096be:	b2d8      	uxtb	r0, r3
 80096c0:	f107 0208 	add.w	r2, r7, #8
 80096c4:	2304      	movs	r3, #4
 80096c6:	21bc      	movs	r1, #188	; 0xbc
 80096c8:	f001 f9a6 	bl	800aa18 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80096cc:	7a7b      	ldrb	r3, [r7, #9]
 80096ce:	021b      	lsls	r3, r3, #8
 80096d0:	b21a      	sxth	r2, r3
 80096d2:	7a3b      	ldrb	r3, [r7, #8]
 80096d4:	b21b      	sxth	r3, r3
 80096d6:	4313      	orrs	r3, r2
 80096d8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80096da:	7afb      	ldrb	r3, [r7, #11]
 80096dc:	021b      	lsls	r3, r3, #8
 80096de:	b21a      	sxth	r2, r3
 80096e0:	7abb      	ldrb	r3, [r7, #10]
 80096e2:	b21b      	sxth	r3, r3
 80096e4:	4313      	orrs	r3, r2
 80096e6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80096e8:	88fb      	ldrh	r3, [r7, #6]
 80096ea:	b2d8      	uxtb	r0, r3
 80096ec:	f107 0208 	add.w	r2, r7, #8
 80096f0:	2302      	movs	r3, #2
 80096f2:	21aa      	movs	r1, #170	; 0xaa
 80096f4:	f001 f990 	bl	800aa18 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80096f8:	7a7b      	ldrb	r3, [r7, #9]
 80096fa:	021b      	lsls	r3, r3, #8
 80096fc:	b21a      	sxth	r2, r3
 80096fe:	7a3b      	ldrb	r3, [r7, #8]
 8009700:	b21b      	sxth	r3, r3
 8009702:	4313      	orrs	r3, r2
 8009704:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8009706:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800970a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	ee07 3a90 	vmov	s15, r3
 8009714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009718:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800971c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009720:	1ad3      	subs	r3, r2, r3
 8009722:	ee07 3a90 	vmov	s15, r3
 8009726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800972a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800972e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009732:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	ee07 3a90 	vmov	s15, r3
 800973c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009744:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009748:	ee07 3a90 	vmov	s15, r3
 800974c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009754:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	ee07 3a90 	vmov	s15, r3
}
 800975e:	eeb0 0a67 	vmov.f32	s0, s15
 8009762:	3720      	adds	r7, #32
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	463b      	mov	r3, r7
 8009770:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8009774:	783b      	ldrb	r3, [r7, #0]
 8009776:	461a      	mov	r2, r3
 8009778:	2120      	movs	r1, #32
 800977a:	203c      	movs	r0, #60	; 0x3c
 800977c:	f001 f914 	bl	800a9a8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8009780:	787b      	ldrb	r3, [r7, #1]
 8009782:	461a      	mov	r2, r3
 8009784:	2121      	movs	r1, #33	; 0x21
 8009786:	203c      	movs	r0, #60	; 0x3c
 8009788:	f001 f90e 	bl	800a9a8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 800978c:	78bb      	ldrb	r3, [r7, #2]
 800978e:	461a      	mov	r2, r3
 8009790:	2122      	movs	r1, #34	; 0x22
 8009792:	203c      	movs	r0, #60	; 0x3c
 8009794:	f001 f908 	bl	800a9a8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	461a      	mov	r2, r3
 800979c:	2123      	movs	r1, #35	; 0x23
 800979e:	203c      	movs	r0, #60	; 0x3c
 80097a0:	f001 f902 	bl	800a9a8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80097a4:	793b      	ldrb	r3, [r7, #4]
 80097a6:	461a      	mov	r2, r3
 80097a8:	2124      	movs	r1, #36	; 0x24
 80097aa:	203c      	movs	r0, #60	; 0x3c
 80097ac:	f001 f8fc 	bl	800a9a8 <SENSOR_IO_Write>
}
 80097b0:	bf00      	nop
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80097be:	2300      	movs	r3, #0
 80097c0:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80097c2:	2122      	movs	r1, #34	; 0x22
 80097c4:	203c      	movs	r0, #60	; 0x3c
 80097c6:	f001 f909 	bl	800a9dc <SENSOR_IO_Read>
 80097ca:	4603      	mov	r3, r0
 80097cc:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80097ce:	79fb      	ldrb	r3, [r7, #7]
 80097d0:	f023 0303 	bic.w	r3, r3, #3
 80097d4:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80097d6:	79fb      	ldrb	r3, [r7, #7]
 80097d8:	f043 0303 	orr.w	r3, r3, #3
 80097dc:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80097de:	79fb      	ldrb	r3, [r7, #7]
 80097e0:	461a      	mov	r2, r3
 80097e2:	2122      	movs	r1, #34	; 0x22
 80097e4:	203c      	movs	r0, #60	; 0x3c
 80097e6:	f001 f8df 	bl	800a9a8 <SENSOR_IO_Write>
}
 80097ea:	bf00      	nop
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80097f6:	f001 f8cd 	bl	800a994 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80097fa:	210f      	movs	r1, #15
 80097fc:	203c      	movs	r0, #60	; 0x3c
 80097fe:	f001 f8ed 	bl	800a9dc <SENSOR_IO_Read>
 8009802:	4603      	mov	r3, r0
}
 8009804:	4618      	mov	r0, r3
 8009806:	bd80      	pop	{r7, pc}

08009808 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	4603      	mov	r3, r0
 8009810:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8009812:	2300      	movs	r3, #0
 8009814:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8009816:	2122      	movs	r1, #34	; 0x22
 8009818:	203c      	movs	r0, #60	; 0x3c
 800981a:	f001 f8df 	bl	800a9dc <SENSOR_IO_Read>
 800981e:	4603      	mov	r3, r0
 8009820:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8009822:	7bfb      	ldrb	r3, [r7, #15]
 8009824:	f023 0320 	bic.w	r3, r3, #32
 8009828:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800982a:	88fb      	ldrh	r3, [r7, #6]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d003      	beq.n	8009838 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8009830:	7bfb      	ldrb	r3, [r7, #15]
 8009832:	f043 0320 	orr.w	r3, r3, #32
 8009836:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	461a      	mov	r2, r3
 800983c:	2122      	movs	r1, #34	; 0x22
 800983e:	203c      	movs	r0, #60	; 0x3c
 8009840:	f001 f8b2 	bl	800a9a8 <SENSOR_IO_Write>
}
 8009844:	bf00      	nop
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b088      	sub	sp, #32
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8009854:	2300      	movs	r3, #0
 8009856:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8009858:	2300      	movs	r3, #0
 800985a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800985c:	f04f 0300 	mov.w	r3, #0
 8009860:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8009862:	2121      	movs	r1, #33	; 0x21
 8009864:	203c      	movs	r0, #60	; 0x3c
 8009866:	f001 f8b9 	bl	800a9dc <SENSOR_IO_Read>
 800986a:	4603      	mov	r3, r0
 800986c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800986e:	f107 0208 	add.w	r2, r7, #8
 8009872:	2306      	movs	r3, #6
 8009874:	21a8      	movs	r1, #168	; 0xa8
 8009876:	203c      	movs	r0, #60	; 0x3c
 8009878:	f001 f8ce 	bl	800aa18 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800987c:	2300      	movs	r3, #0
 800987e:	77fb      	strb	r3, [r7, #31]
 8009880:	e01f      	b.n	80098c2 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8009882:	7ffb      	ldrb	r3, [r7, #31]
 8009884:	005b      	lsls	r3, r3, #1
 8009886:	3301      	adds	r3, #1
 8009888:	f107 0220 	add.w	r2, r7, #32
 800988c:	4413      	add	r3, r2
 800988e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009892:	b29b      	uxth	r3, r3
 8009894:	021b      	lsls	r3, r3, #8
 8009896:	b29a      	uxth	r2, r3
 8009898:	7ffb      	ldrb	r3, [r7, #31]
 800989a:	005b      	lsls	r3, r3, #1
 800989c:	f107 0120 	add.w	r1, r7, #32
 80098a0:	440b      	add	r3, r1
 80098a2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	4413      	add	r3, r2
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	7ffb      	ldrb	r3, [r7, #31]
 80098ae:	b212      	sxth	r2, r2
 80098b0:	005b      	lsls	r3, r3, #1
 80098b2:	f107 0120 	add.w	r1, r7, #32
 80098b6:	440b      	add	r3, r1
 80098b8:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80098bc:	7ffb      	ldrb	r3, [r7, #31]
 80098be:	3301      	adds	r3, #1
 80098c0:	77fb      	strb	r3, [r7, #31]
 80098c2:	7ffb      	ldrb	r3, [r7, #31]
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d9dc      	bls.n	8009882 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80098c8:	7dfb      	ldrb	r3, [r7, #23]
 80098ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098ce:	2b20      	cmp	r3, #32
 80098d0:	d00c      	beq.n	80098ec <LIS3MDL_MagReadXYZ+0xa0>
 80098d2:	2b20      	cmp	r3, #32
 80098d4:	dc02      	bgt.n	80098dc <LIS3MDL_MagReadXYZ+0x90>
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d005      	beq.n	80098e6 <LIS3MDL_MagReadXYZ+0x9a>
 80098da:	e010      	b.n	80098fe <LIS3MDL_MagReadXYZ+0xb2>
 80098dc:	2b40      	cmp	r3, #64	; 0x40
 80098de:	d008      	beq.n	80098f2 <LIS3MDL_MagReadXYZ+0xa6>
 80098e0:	2b60      	cmp	r3, #96	; 0x60
 80098e2:	d009      	beq.n	80098f8 <LIS3MDL_MagReadXYZ+0xac>
 80098e4:	e00b      	b.n	80098fe <LIS3MDL_MagReadXYZ+0xb2>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80098e6:	4b19      	ldr	r3, [pc, #100]	; (800994c <LIS3MDL_MagReadXYZ+0x100>)
 80098e8:	61bb      	str	r3, [r7, #24]
    break;
 80098ea:	e008      	b.n	80098fe <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80098ec:	4b18      	ldr	r3, [pc, #96]	; (8009950 <LIS3MDL_MagReadXYZ+0x104>)
 80098ee:	61bb      	str	r3, [r7, #24]
    break;
 80098f0:	e005      	b.n	80098fe <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80098f2:	4b18      	ldr	r3, [pc, #96]	; (8009954 <LIS3MDL_MagReadXYZ+0x108>)
 80098f4:	61bb      	str	r3, [r7, #24]
    break;
 80098f6:	e002      	b.n	80098fe <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80098f8:	4b17      	ldr	r3, [pc, #92]	; (8009958 <LIS3MDL_MagReadXYZ+0x10c>)
 80098fa:	61bb      	str	r3, [r7, #24]
    break;    
 80098fc:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80098fe:	2300      	movs	r3, #0
 8009900:	77fb      	strb	r3, [r7, #31]
 8009902:	e01b      	b.n	800993c <LIS3MDL_MagReadXYZ+0xf0>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8009904:	7ffb      	ldrb	r3, [r7, #31]
 8009906:	005b      	lsls	r3, r3, #1
 8009908:	f107 0220 	add.w	r2, r7, #32
 800990c:	4413      	add	r3, r2
 800990e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800991a:	edd7 7a06 	vldr	s15, [r7, #24]
 800991e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009922:	7ffb      	ldrb	r3, [r7, #31]
 8009924:	005b      	lsls	r3, r3, #1
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	4413      	add	r3, r2
 800992a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800992e:	ee17 2a90 	vmov	r2, s15
 8009932:	b212      	sxth	r2, r2
 8009934:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8009936:	7ffb      	ldrb	r3, [r7, #31]
 8009938:	3301      	adds	r3, #1
 800993a:	77fb      	strb	r3, [r7, #31]
 800993c:	7ffb      	ldrb	r3, [r7, #31]
 800993e:	2b02      	cmp	r3, #2
 8009940:	d9e0      	bls.n	8009904 <LIS3MDL_MagReadXYZ+0xb8>
  }
}
 8009942:	bf00      	nop
 8009944:	3720      	adds	r7, #32
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	3e0f5c29 	.word	0x3e0f5c29
 8009950:	3e947ae1 	.word	0x3e947ae1
 8009954:	3edc28f6 	.word	0x3edc28f6
 8009958:	3f147ae1 	.word	0x3f147ae1

0800995c <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	4603      	mov	r3, r0
 8009964:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8009966:	88fb      	ldrh	r3, [r7, #6]
 8009968:	4618      	mov	r0, r3
 800996a:	f000 f87b 	bl	8009a64 <LPS22HB_Init>
}
 800996e:	bf00      	nop
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8009976:	b580      	push	{r7, lr}
 8009978:	b084      	sub	sp, #16
 800997a:	af00      	add	r7, sp, #0
 800997c:	4603      	mov	r3, r0
 800997e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009980:	2300      	movs	r3, #0
 8009982:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8009984:	f001 f806 	bl	800a994 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8009988:	88fb      	ldrh	r3, [r7, #6]
 800998a:	b2db      	uxtb	r3, r3
 800998c:	210f      	movs	r1, #15
 800998e:	4618      	mov	r0, r3
 8009990:	f001 f824 	bl	800a9dc <SENSOR_IO_Read>
 8009994:	4603      	mov	r3, r0
 8009996:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8009998:	7bfb      	ldrb	r3, [r7, #15]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80099a4:	b590      	push	{r4, r7, lr}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80099ae:	2300      	movs	r3, #0
 80099b0:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80099b2:	2300      	movs	r3, #0
 80099b4:	74fb      	strb	r3, [r7, #19]
 80099b6:	e013      	b.n	80099e0 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80099b8:	88fb      	ldrh	r3, [r7, #6]
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	7cfb      	ldrb	r3, [r7, #19]
 80099be:	3328      	adds	r3, #40	; 0x28
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	7cfc      	ldrb	r4, [r7, #19]
 80099c4:	4619      	mov	r1, r3
 80099c6:	4610      	mov	r0, r2
 80099c8:	f001 f808 	bl	800a9dc <SENSOR_IO_Read>
 80099cc:	4603      	mov	r3, r0
 80099ce:	461a      	mov	r2, r3
 80099d0:	f107 0318 	add.w	r3, r7, #24
 80099d4:	4423      	add	r3, r4
 80099d6:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80099da:	7cfb      	ldrb	r3, [r7, #19]
 80099dc:	3301      	adds	r3, #1
 80099de:	74fb      	strb	r3, [r7, #19]
 80099e0:	7cfb      	ldrb	r3, [r7, #19]
 80099e2:	2b02      	cmp	r3, #2
 80099e4:	d9e8      	bls.n	80099b8 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80099e6:	2300      	movs	r3, #0
 80099e8:	74fb      	strb	r3, [r7, #19]
 80099ea:	e010      	b.n	8009a0e <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80099ec:	7cfb      	ldrb	r3, [r7, #19]
 80099ee:	f107 0218 	add.w	r2, r7, #24
 80099f2:	4413      	add	r3, r2
 80099f4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80099f8:	461a      	mov	r2, r3
 80099fa:	7cfb      	ldrb	r3, [r7, #19]
 80099fc:	00db      	lsls	r3, r3, #3
 80099fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009a02:	697a      	ldr	r2, [r7, #20]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8009a08:	7cfb      	ldrb	r3, [r7, #19]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	74fb      	strb	r3, [r7, #19]
 8009a0e:	7cfb      	ldrb	r3, [r7, #19]
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d9eb      	bls.n	80099ec <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a24:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2264      	movs	r2, #100	; 0x64
 8009a2e:	fb02 f303 	mul.w	r3, r2, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	da01      	bge.n	8009a3a <LPS22HB_P_ReadPressure+0x96>
 8009a36:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8009a3a:	131b      	asrs	r3, r3, #12
 8009a3c:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	ee07 3a90 	vmov	s15, r3
 8009a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a48:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8009a60 <LPS22HB_P_ReadPressure+0xbc>
 8009a4c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009a50:	eef0 7a66 	vmov.f32	s15, s13
}
 8009a54:	eeb0 0a67 	vmov.f32	s0, s15
 8009a58:	371c      	adds	r7, #28
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd90      	pop	{r4, r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	42c80000 	.word	0x42c80000

08009a64 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8009a6e:	88fb      	ldrh	r3, [r7, #6]
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	211a      	movs	r1, #26
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 ffb1 	bl	800a9dc <SENSOR_IO_Read>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8009a7e:	7bfb      	ldrb	r3, [r7, #15]
 8009a80:	f023 0301 	bic.w	r3, r3, #1
 8009a84:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
 8009a88:	f043 0301 	orr.w	r3, r3, #1
 8009a8c:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8009a8e:	88fb      	ldrh	r3, [r7, #6]
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	7bfa      	ldrb	r2, [r7, #15]
 8009a94:	211a      	movs	r1, #26
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 ff86 	bl	800a9a8 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8009a9c:	88fb      	ldrh	r3, [r7, #6]
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2110      	movs	r1, #16
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f000 ff9a 	bl	800a9dc <SENSOR_IO_Read>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ab2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009aba:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8009abc:	7bfb      	ldrb	r3, [r7, #15]
 8009abe:	f023 0302 	bic.w	r3, r3, #2
 8009ac2:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
 8009ac6:	f043 0302 	orr.w	r3, r3, #2
 8009aca:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8009acc:	88fb      	ldrh	r3, [r7, #6]
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	7bfa      	ldrb	r2, [r7, #15]
 8009ad2:	2110      	movs	r1, #16
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 ff67 	bl	800a9a8 <SENSOR_IO_Write>
}  
 8009ada:	bf00      	nop
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	4603      	mov	r3, r0
 8009aea:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009aec:	2300      	movs	r3, #0
 8009aee:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009af0:	2110      	movs	r1, #16
 8009af2:	20d4      	movs	r0, #212	; 0xd4
 8009af4:	f000 ff72 	bl	800a9dc <SENSOR_IO_Read>
 8009af8:	4603      	mov	r3, r0
 8009afa:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8009afc:	88fb      	ldrh	r3, [r7, #6]
 8009afe:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8009b00:	7bbb      	ldrb	r3, [r7, #14]
 8009b02:	f003 0303 	and.w	r3, r3, #3
 8009b06:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8009b08:	7bba      	ldrb	r2, [r7, #14]
 8009b0a:	7bfb      	ldrb	r3, [r7, #15]
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8009b10:	7bbb      	ldrb	r3, [r7, #14]
 8009b12:	461a      	mov	r2, r3
 8009b14:	2110      	movs	r1, #16
 8009b16:	20d4      	movs	r0, #212	; 0xd4
 8009b18:	f000 ff46 	bl	800a9a8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8009b1c:	2112      	movs	r1, #18
 8009b1e:	20d4      	movs	r0, #212	; 0xd4
 8009b20:	f000 ff5c 	bl	800a9dc <SENSOR_IO_Read>
 8009b24:	4603      	mov	r3, r0
 8009b26:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8009b28:	88fb      	ldrh	r3, [r7, #6]
 8009b2a:	0a1b      	lsrs	r3, r3, #8
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8009b36:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8009b38:	7bba      	ldrb	r2, [r7, #14]
 8009b3a:	7bfb      	ldrb	r3, [r7, #15]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8009b40:	7bbb      	ldrb	r3, [r7, #14]
 8009b42:	461a      	mov	r2, r3
 8009b44:	2112      	movs	r1, #18
 8009b46:	20d4      	movs	r0, #212	; 0xd4
 8009b48:	f000 ff2e 	bl	800a9a8 <SENSOR_IO_Write>
}
 8009b4c:	bf00      	nop
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009b5e:	2110      	movs	r1, #16
 8009b60:	20d4      	movs	r0, #212	; 0xd4
 8009b62:	f000 ff3b 	bl	800a9dc <SENSOR_IO_Read>
 8009b66:	4603      	mov	r3, r0
 8009b68:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8009b6a:	79fb      	ldrb	r3, [r7, #7]
 8009b6c:	f003 030f 	and.w	r3, r3, #15
 8009b70:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8009b72:	79fb      	ldrb	r3, [r7, #7]
 8009b74:	461a      	mov	r2, r3
 8009b76:	2110      	movs	r1, #16
 8009b78:	20d4      	movs	r0, #212	; 0xd4
 8009b7a:	f000 ff15 	bl	800a9a8 <SENSOR_IO_Write>
}
 8009b7e:	bf00      	nop
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8009b86:	b580      	push	{r7, lr}
 8009b88:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8009b8a:	f000 ff03 	bl	800a994 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8009b8e:	210f      	movs	r1, #15
 8009b90:	20d4      	movs	r0, #212	; 0xd4
 8009b92:	f000 ff23 	bl	800a9dc <SENSOR_IO_Read>
 8009b96:	4603      	mov	r3, r0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8009baa:	2115      	movs	r1, #21
 8009bac:	20d4      	movs	r0, #212	; 0xd4
 8009bae:	f000 ff15 	bl	800a9dc <SENSOR_IO_Read>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
 8009bb8:	f023 0310 	bic.w	r3, r3, #16
 8009bbc:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8009bbe:	88fb      	ldrh	r3, [r7, #6]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d003      	beq.n	8009bcc <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8009bc4:	7bfb      	ldrb	r3, [r7, #15]
 8009bc6:	f043 0310 	orr.w	r3, r3, #16
 8009bca:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	2115      	movs	r1, #21
 8009bd2:	20d4      	movs	r0, #212	; 0xd4
 8009bd4:	f000 fee8 	bl	800a9a8 <SENSOR_IO_Write>
}
 8009bd8:	bf00      	nop
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8009be8:	2300      	movs	r3, #0
 8009bea:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8009bf0:	f04f 0300 	mov.w	r3, #0
 8009bf4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009bf6:	2110      	movs	r1, #16
 8009bf8:	20d4      	movs	r0, #212	; 0xd4
 8009bfa:	f000 feef 	bl	800a9dc <SENSOR_IO_Read>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8009c02:	f107 0208 	add.w	r2, r7, #8
 8009c06:	2306      	movs	r3, #6
 8009c08:	2128      	movs	r1, #40	; 0x28
 8009c0a:	20d4      	movs	r0, #212	; 0xd4
 8009c0c:	f000 ff04 	bl	800aa18 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8009c10:	2300      	movs	r3, #0
 8009c12:	77fb      	strb	r3, [r7, #31]
 8009c14:	e01f      	b.n	8009c56 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8009c16:	7ffb      	ldrb	r3, [r7, #31]
 8009c18:	005b      	lsls	r3, r3, #1
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	f107 0220 	add.w	r2, r7, #32
 8009c20:	4413      	add	r3, r2
 8009c22:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	021b      	lsls	r3, r3, #8
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	7ffb      	ldrb	r3, [r7, #31]
 8009c2e:	005b      	lsls	r3, r3, #1
 8009c30:	f107 0120 	add.w	r1, r7, #32
 8009c34:	440b      	add	r3, r1
 8009c36:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	4413      	add	r3, r2
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	7ffb      	ldrb	r3, [r7, #31]
 8009c42:	b212      	sxth	r2, r2
 8009c44:	005b      	lsls	r3, r3, #1
 8009c46:	f107 0120 	add.w	r1, r7, #32
 8009c4a:	440b      	add	r3, r1
 8009c4c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8009c50:	7ffb      	ldrb	r3, [r7, #31]
 8009c52:	3301      	adds	r3, #1
 8009c54:	77fb      	strb	r3, [r7, #31]
 8009c56:	7ffb      	ldrb	r3, [r7, #31]
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d9dc      	bls.n	8009c16 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8009c5c:	7dfb      	ldrb	r3, [r7, #23]
 8009c5e:	f003 030c 	and.w	r3, r3, #12
 8009c62:	2b0c      	cmp	r3, #12
 8009c64:	d828      	bhi.n	8009cb8 <LSM6DSL_AccReadXYZ+0xd8>
 8009c66:	a201      	add	r2, pc, #4	; (adr r2, 8009c6c <LSM6DSL_AccReadXYZ+0x8c>)
 8009c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6c:	08009ca1 	.word	0x08009ca1
 8009c70:	08009cb9 	.word	0x08009cb9
 8009c74:	08009cb9 	.word	0x08009cb9
 8009c78:	08009cb9 	.word	0x08009cb9
 8009c7c:	08009cb3 	.word	0x08009cb3
 8009c80:	08009cb9 	.word	0x08009cb9
 8009c84:	08009cb9 	.word	0x08009cb9
 8009c88:	08009cb9 	.word	0x08009cb9
 8009c8c:	08009ca7 	.word	0x08009ca7
 8009c90:	08009cb9 	.word	0x08009cb9
 8009c94:	08009cb9 	.word	0x08009cb9
 8009c98:	08009cb9 	.word	0x08009cb9
 8009c9c:	08009cad 	.word	0x08009cad
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8009ca0:	4b18      	ldr	r3, [pc, #96]	; (8009d04 <LSM6DSL_AccReadXYZ+0x124>)
 8009ca2:	61bb      	str	r3, [r7, #24]
    break;
 8009ca4:	e008      	b.n	8009cb8 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8009ca6:	4b18      	ldr	r3, [pc, #96]	; (8009d08 <LSM6DSL_AccReadXYZ+0x128>)
 8009ca8:	61bb      	str	r3, [r7, #24]
    break;
 8009caa:	e005      	b.n	8009cb8 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8009cac:	4b17      	ldr	r3, [pc, #92]	; (8009d0c <LSM6DSL_AccReadXYZ+0x12c>)
 8009cae:	61bb      	str	r3, [r7, #24]
    break;
 8009cb0:	e002      	b.n	8009cb8 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8009cb2:	4b17      	ldr	r3, [pc, #92]	; (8009d10 <LSM6DSL_AccReadXYZ+0x130>)
 8009cb4:	61bb      	str	r3, [r7, #24]
    break;    
 8009cb6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8009cb8:	2300      	movs	r3, #0
 8009cba:	77fb      	strb	r3, [r7, #31]
 8009cbc:	e01b      	b.n	8009cf6 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8009cbe:	7ffb      	ldrb	r3, [r7, #31]
 8009cc0:	005b      	lsls	r3, r3, #1
 8009cc2:	f107 0220 	add.w	r2, r7, #32
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8009ccc:	ee07 3a90 	vmov	s15, r3
 8009cd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009cd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8009cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cdc:	7ffb      	ldrb	r3, [r7, #31]
 8009cde:	005b      	lsls	r3, r3, #1
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ce8:	ee17 2a90 	vmov	r2, s15
 8009cec:	b212      	sxth	r2, r2
 8009cee:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8009cf0:	7ffb      	ldrb	r3, [r7, #31]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	77fb      	strb	r3, [r7, #31]
 8009cf6:	7ffb      	ldrb	r3, [r7, #31]
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d9e0      	bls.n	8009cbe <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8009cfc:	bf00      	nop
 8009cfe:	3720      	adds	r7, #32
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	3d79db23 	.word	0x3d79db23
 8009d08:	3df9db23 	.word	0x3df9db23
 8009d0c:	3e79db23 	.word	0x3e79db23
 8009d10:	3ef9db23 	.word	0x3ef9db23

08009d14 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8009d22:	2111      	movs	r1, #17
 8009d24:	20d4      	movs	r0, #212	; 0xd4
 8009d26:	f000 fe59 	bl	800a9dc <SENSOR_IO_Read>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8009d2e:	88fb      	ldrh	r3, [r7, #6]
 8009d30:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8009d32:	7bbb      	ldrb	r3, [r7, #14]
 8009d34:	f003 0303 	and.w	r3, r3, #3
 8009d38:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8009d3a:	7bba      	ldrb	r2, [r7, #14]
 8009d3c:	7bfb      	ldrb	r3, [r7, #15]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8009d42:	7bbb      	ldrb	r3, [r7, #14]
 8009d44:	461a      	mov	r2, r3
 8009d46:	2111      	movs	r1, #17
 8009d48:	20d4      	movs	r0, #212	; 0xd4
 8009d4a:	f000 fe2d 	bl	800a9a8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8009d4e:	2112      	movs	r1, #18
 8009d50:	20d4      	movs	r0, #212	; 0xd4
 8009d52:	f000 fe43 	bl	800a9dc <SENSOR_IO_Read>
 8009d56:	4603      	mov	r3, r0
 8009d58:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8009d5a:	88fb      	ldrh	r3, [r7, #6]
 8009d5c:	0a1b      	lsrs	r3, r3, #8
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8009d62:	7bbb      	ldrb	r3, [r7, #14]
 8009d64:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8009d68:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8009d6a:	7bba      	ldrb	r2, [r7, #14]
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8009d72:	7bbb      	ldrb	r3, [r7, #14]
 8009d74:	461a      	mov	r2, r3
 8009d76:	2112      	movs	r1, #18
 8009d78:	20d4      	movs	r0, #212	; 0xd4
 8009d7a:	f000 fe15 	bl	800a9a8 <SENSOR_IO_Write>
}
 8009d7e:	bf00      	nop
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b082      	sub	sp, #8
 8009d8a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8009d90:	2111      	movs	r1, #17
 8009d92:	20d4      	movs	r0, #212	; 0xd4
 8009d94:	f000 fe22 	bl	800a9dc <SENSOR_IO_Read>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8009d9c:	79fb      	ldrb	r3, [r7, #7]
 8009d9e:	f003 030f 	and.w	r3, r3, #15
 8009da2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8009da4:	79fb      	ldrb	r3, [r7, #7]
 8009da6:	461a      	mov	r2, r3
 8009da8:	2111      	movs	r1, #17
 8009daa:	20d4      	movs	r0, #212	; 0xd4
 8009dac:	f000 fdfc 	bl	800a9a8 <SENSOR_IO_Write>
}
 8009db0:	bf00      	nop
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8009dbc:	f000 fdea 	bl	800a994 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8009dc0:	210f      	movs	r1, #15
 8009dc2:	20d4      	movs	r0, #212	; 0xd4
 8009dc4:	f000 fe0a 	bl	800a9dc <SENSOR_IO_Read>
 8009dc8:	4603      	mov	r3, r0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b084      	sub	sp, #16
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8009ddc:	2116      	movs	r1, #22
 8009dde:	20d4      	movs	r0, #212	; 0xd4
 8009de0:	f000 fdfc 	bl	800a9dc <SENSOR_IO_Read>
 8009de4:	4603      	mov	r3, r0
 8009de6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dee:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8009df0:	88fb      	ldrh	r3, [r7, #6]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d003      	beq.n	8009dfe <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
 8009df8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009dfc:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
 8009e00:	461a      	mov	r2, r3
 8009e02:	2116      	movs	r1, #22
 8009e04:	20d4      	movs	r0, #212	; 0xd4
 8009e06:	f000 fdcf 	bl	800a9a8 <SENSOR_IO_Write>
}
 8009e0a:	bf00      	nop
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
	...

08009e14 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b088      	sub	sp, #32
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8009e24:	f04f 0300 	mov.w	r3, #0
 8009e28:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8009e2a:	2111      	movs	r1, #17
 8009e2c:	20d4      	movs	r0, #212	; 0xd4
 8009e2e:	f000 fdd5 	bl	800a9dc <SENSOR_IO_Read>
 8009e32:	4603      	mov	r3, r0
 8009e34:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8009e36:	f107 0208 	add.w	r2, r7, #8
 8009e3a:	2306      	movs	r3, #6
 8009e3c:	2122      	movs	r1, #34	; 0x22
 8009e3e:	20d4      	movs	r0, #212	; 0xd4
 8009e40:	f000 fdea 	bl	800aa18 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8009e44:	2300      	movs	r3, #0
 8009e46:	77fb      	strb	r3, [r7, #31]
 8009e48:	e01f      	b.n	8009e8a <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8009e4a:	7ffb      	ldrb	r3, [r7, #31]
 8009e4c:	005b      	lsls	r3, r3, #1
 8009e4e:	3301      	adds	r3, #1
 8009e50:	f107 0220 	add.w	r2, r7, #32
 8009e54:	4413      	add	r3, r2
 8009e56:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	021b      	lsls	r3, r3, #8
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	7ffb      	ldrb	r3, [r7, #31]
 8009e62:	005b      	lsls	r3, r3, #1
 8009e64:	f107 0120 	add.w	r1, r7, #32
 8009e68:	440b      	add	r3, r1
 8009e6a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	4413      	add	r3, r2
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	7ffb      	ldrb	r3, [r7, #31]
 8009e76:	b212      	sxth	r2, r2
 8009e78:	005b      	lsls	r3, r3, #1
 8009e7a:	f107 0120 	add.w	r1, r7, #32
 8009e7e:	440b      	add	r3, r1
 8009e80:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8009e84:	7ffb      	ldrb	r3, [r7, #31]
 8009e86:	3301      	adds	r3, #1
 8009e88:	77fb      	strb	r3, [r7, #31]
 8009e8a:	7ffb      	ldrb	r3, [r7, #31]
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	d9dc      	bls.n	8009e4a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8009e90:	7dfb      	ldrb	r3, [r7, #23]
 8009e92:	f003 030c 	and.w	r3, r3, #12
 8009e96:	2b0c      	cmp	r3, #12
 8009e98:	d828      	bhi.n	8009eec <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8009e9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ea0 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 8009e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea0:	08009ed5 	.word	0x08009ed5
 8009ea4:	08009eed 	.word	0x08009eed
 8009ea8:	08009eed 	.word	0x08009eed
 8009eac:	08009eed 	.word	0x08009eed
 8009eb0:	08009edb 	.word	0x08009edb
 8009eb4:	08009eed 	.word	0x08009eed
 8009eb8:	08009eed 	.word	0x08009eed
 8009ebc:	08009eed 	.word	0x08009eed
 8009ec0:	08009ee1 	.word	0x08009ee1
 8009ec4:	08009eed 	.word	0x08009eed
 8009ec8:	08009eed 	.word	0x08009eed
 8009ecc:	08009eed 	.word	0x08009eed
 8009ed0:	08009ee7 	.word	0x08009ee7
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8009ed4:	4b16      	ldr	r3, [pc, #88]	; (8009f30 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8009ed6:	61bb      	str	r3, [r7, #24]
    break;
 8009ed8:	e008      	b.n	8009eec <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8009eda:	4b16      	ldr	r3, [pc, #88]	; (8009f34 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8009edc:	61bb      	str	r3, [r7, #24]
    break;
 8009ede:	e005      	b.n	8009eec <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8009ee0:	4b15      	ldr	r3, [pc, #84]	; (8009f38 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8009ee2:	61bb      	str	r3, [r7, #24]
    break;
 8009ee4:	e002      	b.n	8009eec <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8009ee6:	4b15      	ldr	r3, [pc, #84]	; (8009f3c <LSM6DSL_GyroReadXYZAngRate+0x128>)
 8009ee8:	61bb      	str	r3, [r7, #24]
    break;    
 8009eea:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8009eec:	2300      	movs	r3, #0
 8009eee:	77fb      	strb	r3, [r7, #31]
 8009ef0:	e017      	b.n	8009f22 <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8009ef2:	7ffb      	ldrb	r3, [r7, #31]
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	f107 0220 	add.w	r2, r7, #32
 8009efa:	4413      	add	r3, r2
 8009efc:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8009f00:	ee07 3a90 	vmov	s15, r3
 8009f04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009f08:	7ffb      	ldrb	r3, [r7, #31]
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	4413      	add	r3, r2
 8009f10:	edd7 7a06 	vldr	s15, [r7, #24]
 8009f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f18:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8009f1c:	7ffb      	ldrb	r3, [r7, #31]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	77fb      	strb	r3, [r7, #31]
 8009f22:	7ffb      	ldrb	r3, [r7, #31]
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	d9e4      	bls.n	8009ef2 <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 8009f28:	bf00      	nop
 8009f2a:	3720      	adds	r7, #32
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	410c0000 	.word	0x410c0000
 8009f34:	418c0000 	.word	0x418c0000
 8009f38:	420c0000 	.word	0x420c0000
 8009f3c:	428c0000 	.word	0x428c0000

08009f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009f40:	b5b0      	push	{r4, r5, r7, lr}
 8009f42:	b098      	sub	sp, #96	; 0x60
 8009f44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009f46:	f7f6 fb33 	bl	80005b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009f4a:	f000 f873 	bl	800a034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009f4e:	f000 fa99 	bl	800a484 <MX_GPIO_Init>
  MX_DMA_Init();
 8009f52:	f000 fa6d 	bl	800a430 <MX_DMA_Init>
  MX_I2C2_Init();
 8009f56:	f000 f991 	bl	800a27c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8009f5a:	f000 fa1d 	bl	800a398 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8009f5e:	f000 f9cd 	bl	800a2fc <MX_TIM2_Init>
  MX_ADC1_Init();
 8009f62:	f000 f8f3 	bl	800a14c <MX_ADC1_Init>
  MX_DAC1_Init();
 8009f66:	f000 f955 	bl	800a214 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
	// Initialize peripherals
	BSP_ACCELERO_Init();
 8009f6a:	f000 fd73 	bl	800aa54 <BSP_ACCELERO_Init>
	BSP_MAGNETO_Init();
 8009f6e:	f000 fe41 	bl	800abf4 <BSP_MAGNETO_Init>
	BSP_GYRO_Init();
 8009f72:	f000 fdc5 	bl	800ab00 <BSP_GYRO_Init>
	BSP_HSENSOR_Init();
 8009f76:	f000 fe1d 	bl	800abb4 <BSP_HSENSOR_Init>
	BSP_PSENSOR_Init();
 8009f7a:	f000 fe67 	bl	800ac4c <BSP_PSENSOR_Init>
	BSP_TSENSOR_Init();
 8009f7e:	f000 fe93 	bl	800aca8 <BSP_TSENSOR_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8009f82:	4824      	ldr	r0, [pc, #144]	; (800a014 <main+0xd4>)
 8009f84:	f7fa fc58 	bl	8004838 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of consoleMutex */
  osMutexDef(consoleMutex);
 8009f88:	2300      	movs	r3, #0
 8009f8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  consoleMutexHandle = osMutexCreate(osMutex(consoleMutex));
 8009f90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7fb fff9 	bl	8005f8c <osMutexCreate>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	4b1e      	ldr	r3, [pc, #120]	; (800a018 <main+0xd8>)
 8009f9e:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of measure */
  osThreadDef(measure, StartMeasureTask, osPriorityNormal, 0, 256);
 8009fa0:	4b1e      	ldr	r3, [pc, #120]	; (800a01c <main+0xdc>)
 8009fa2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8009fa6:	461d      	mov	r5, r3
 8009fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009fb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  measureHandle = osThreadCreate(osThread(measure), NULL);
 8009fb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009fb8:	2100      	movs	r1, #0
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fb fef9 	bl	8005db2 <osThreadCreate>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	4b17      	ldr	r3, [pc, #92]	; (800a020 <main+0xe0>)
 8009fc4:	601a      	str	r2, [r3, #0]

  /* definition and creation of transmit */
  osThreadDef(transmit, StartTransmitTask, osPriorityIdle, 0, 128);
 8009fc6:	4b17      	ldr	r3, [pc, #92]	; (800a024 <main+0xe4>)
 8009fc8:	f107 0420 	add.w	r4, r7, #32
 8009fcc:	461d      	mov	r5, r3
 8009fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009fd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitHandle = osThreadCreate(osThread(transmit), NULL);
 8009fda:	f107 0320 	add.w	r3, r7, #32
 8009fde:	2100      	movs	r1, #0
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fb fee6 	bl	8005db2 <osThreadCreate>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	4b0f      	ldr	r3, [pc, #60]	; (800a028 <main+0xe8>)
 8009fea:	601a      	str	r2, [r3, #0]

  /* definition and creation of listen */
  osThreadDef(listen, StartListenTask, osPriorityIdle, 0, 128);
 8009fec:	4b0f      	ldr	r3, [pc, #60]	; (800a02c <main+0xec>)
 8009fee:	1d3c      	adds	r4, r7, #4
 8009ff0:	461d      	mov	r5, r3
 8009ff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ff6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009ffa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  listenHandle = osThreadCreate(osThread(listen), NULL);
 8009ffe:	1d3b      	adds	r3, r7, #4
 800a000:	2100      	movs	r1, #0
 800a002:	4618      	mov	r0, r3
 800a004:	f7fb fed5 	bl	8005db2 <osThreadCreate>
 800a008:	4602      	mov	r2, r0
 800a00a:	4b09      	ldr	r3, [pc, #36]	; (800a030 <main+0xf0>)
 800a00c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800a00e:	f7fb fec9 	bl	8005da4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800a012:	e7fe      	b.n	800a012 <main+0xd2>
 800a014:	2000189c 	.word	0x2000189c
 800a018:	200018f4 	.word	0x200018f4
 800a01c:	0800bb6c 	.word	0x0800bb6c
 800a020:	20001898 	.word	0x20001898
 800a024:	0800bb94 	.word	0x0800bb94
 800a028:	200017a4 	.word	0x200017a4
 800a02c:	0800bbb8 	.word	0x0800bbb8
 800a030:	200018e8 	.word	0x200018e8

0800a034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b0bc      	sub	sp, #240	; 0xf0
 800a038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a03a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a03e:	2244      	movs	r2, #68	; 0x44
 800a040:	2100      	movs	r1, #0
 800a042:	4618      	mov	r0, r3
 800a044:	f001 f969 	bl	800b31a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a048:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a04c:	2200      	movs	r2, #0
 800a04e:	601a      	str	r2, [r3, #0]
 800a050:	605a      	str	r2, [r3, #4]
 800a052:	609a      	str	r2, [r3, #8]
 800a054:	60da      	str	r2, [r3, #12]
 800a056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a058:	1d3b      	adds	r3, r7, #4
 800a05a:	2294      	movs	r2, #148	; 0x94
 800a05c:	2100      	movs	r1, #0
 800a05e:	4618      	mov	r0, r3
 800a060:	f001 f95b 	bl	800b31a <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800a064:	2000      	movs	r0, #0
 800a066:	f7f8 fedb 	bl	8002e20 <HAL_PWREx_ControlVoltageScaling>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d001      	beq.n	800a074 <SystemClock_Config+0x40>
  {
    Error_Handler();
 800a070:	f000 fb9c 	bl	800a7ac <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800a074:	2310      	movs	r3, #16
 800a076:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800a07a:	2301      	movs	r3, #1
 800a07c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800a080:	2300      	movs	r3, #0
 800a082:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800a086:	2360      	movs	r3, #96	; 0x60
 800a088:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a08c:	2302      	movs	r3, #2
 800a08e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800a092:	2301      	movs	r3, #1
 800a094:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800a098:	2301      	movs	r3, #1
 800a09a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 800a09e:	233c      	movs	r3, #60	; 0x3c
 800a0a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a0a4:	2302      	movs	r3, #2
 800a0a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a0aa:	2302      	movs	r3, #2
 800a0ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a0b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7f8 ff54 	bl	8002f68 <HAL_RCC_OscConfig>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 800a0c6:	f000 fb71 	bl	800a7ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a0ca:	230f      	movs	r3, #15
 800a0cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a0e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a0ec:	2105      	movs	r1, #5
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7f9 fb60 	bl	80037b4 <HAL_RCC_ClockConfig>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 800a0fa:	f000 fb57 	bl	800a7ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2
 800a0fe:	f244 0381 	movw	r3, #16513	; 0x4081
 800a102:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a104:	2300      	movs	r3, #0
 800a106:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800a108:	2300      	movs	r3, #0
 800a10a:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800a10c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800a114:	2301      	movs	r3, #1
 800a116:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800a118:	2301      	movs	r3, #1
 800a11a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800a11c:	2318      	movs	r3, #24
 800a11e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800a120:	2302      	movs	r3, #2
 800a122:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800a124:	2302      	movs	r3, #2
 800a126:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800a128:	2302      	movs	r3, #2
 800a12a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800a12c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a130:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a132:	1d3b      	adds	r3, r7, #4
 800a134:	4618      	mov	r0, r3
 800a136:	f7f9 fe1f 	bl	8003d78 <HAL_RCCEx_PeriphCLKConfig>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d001      	beq.n	800a144 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800a140:	f000 fb34 	bl	800a7ac <Error_Handler>
  }
}
 800a144:	bf00      	nop
 800a146:	37f0      	adds	r7, #240	; 0xf0
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a152:	463b      	mov	r3, r7
 800a154:	2200      	movs	r2, #0
 800a156:	601a      	str	r2, [r3, #0]
 800a158:	605a      	str	r2, [r3, #4]
 800a15a:	609a      	str	r2, [r3, #8]
 800a15c:	60da      	str	r2, [r3, #12]
 800a15e:	611a      	str	r2, [r3, #16]
 800a160:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800a162:	4b29      	ldr	r3, [pc, #164]	; (800a208 <MX_ADC1_Init+0xbc>)
 800a164:	4a29      	ldr	r2, [pc, #164]	; (800a20c <MX_ADC1_Init+0xc0>)
 800a166:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a168:	4b27      	ldr	r3, [pc, #156]	; (800a208 <MX_ADC1_Init+0xbc>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a16e:	4b26      	ldr	r3, [pc, #152]	; (800a208 <MX_ADC1_Init+0xbc>)
 800a170:	2200      	movs	r2, #0
 800a172:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a174:	4b24      	ldr	r3, [pc, #144]	; (800a208 <MX_ADC1_Init+0xbc>)
 800a176:	2200      	movs	r2, #0
 800a178:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a17a:	4b23      	ldr	r3, [pc, #140]	; (800a208 <MX_ADC1_Init+0xbc>)
 800a17c:	2200      	movs	r2, #0
 800a17e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a180:	4b21      	ldr	r3, [pc, #132]	; (800a208 <MX_ADC1_Init+0xbc>)
 800a182:	2204      	movs	r2, #4
 800a184:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800a186:	4b20      	ldr	r3, [pc, #128]	; (800a208 <MX_ADC1_Init+0xbc>)
 800a188:	2200      	movs	r2, #0
 800a18a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a18c:	4b1e      	ldr	r3, [pc, #120]	; (800a208 <MX_ADC1_Init+0xbc>)
 800a18e:	2200      	movs	r2, #0
 800a190:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800a192:	4b1d      	ldr	r3, [pc, #116]	; (800a208 <MX_ADC1_Init+0xbc>)
 800a194:	2201      	movs	r2, #1
 800a196:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a198:	4b1b      	ldr	r3, [pc, #108]	; (800a208 <MX_ADC1_Init+0xbc>)
 800a19a:	2200      	movs	r2, #0
 800a19c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a1a0:	4b19      	ldr	r3, [pc, #100]	; (800a208 <MX_ADC1_Init+0xbc>)
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a1a6:	4b18      	ldr	r3, [pc, #96]	; (800a208 <MX_ADC1_Init+0xbc>)
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800a1ac:	4b16      	ldr	r3, [pc, #88]	; (800a208 <MX_ADC1_Init+0xbc>)
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a1b4:	4b14      	ldr	r3, [pc, #80]	; (800a208 <MX_ADC1_Init+0xbc>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800a1ba:	4b13      	ldr	r3, [pc, #76]	; (800a208 <MX_ADC1_Init+0xbc>)
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a1c2:	4811      	ldr	r0, [pc, #68]	; (800a208 <MX_ADC1_Init+0xbc>)
 800a1c4:	f7f6 fbee 	bl	80009a4 <HAL_ADC_Init>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800a1ce:	f000 faed 	bl	800a7ac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800a1d2:	4b0f      	ldr	r3, [pc, #60]	; (800a210 <MX_ADC1_Init+0xc4>)
 800a1d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a1d6:	2306      	movs	r3, #6
 800a1d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a1de:	237f      	movs	r3, #127	; 0x7f
 800a1e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a1e2:	2304      	movs	r3, #4
 800a1e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a1ea:	463b      	mov	r3, r7
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	4806      	ldr	r0, [pc, #24]	; (800a208 <MX_ADC1_Init+0xbc>)
 800a1f0:	f7f6 fd22 	bl	8000c38 <HAL_ADC_ConfigChannel>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800a1fa:	f000 fad7 	bl	800a7ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a1fe:	bf00      	nop
 800a200:	3718      	adds	r7, #24
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20001730 	.word	0x20001730
 800a20c:	50040000 	.word	0x50040000
 800a210:	04300002 	.word	0x04300002

0800a214 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b08a      	sub	sp, #40	; 0x28
 800a218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800a21a:	463b      	mov	r3, r7
 800a21c:	2228      	movs	r2, #40	; 0x28
 800a21e:	2100      	movs	r1, #0
 800a220:	4618      	mov	r0, r3
 800a222:	f001 f87a 	bl	800b31a <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800a226:	4b13      	ldr	r3, [pc, #76]	; (800a274 <MX_DAC1_Init+0x60>)
 800a228:	4a13      	ldr	r2, [pc, #76]	; (800a278 <MX_DAC1_Init+0x64>)
 800a22a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800a22c:	4811      	ldr	r0, [pc, #68]	; (800a274 <MX_DAC1_Init+0x60>)
 800a22e:	f7f7 f9df 	bl	80015f0 <HAL_DAC_Init>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d001      	beq.n	800a23c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800a238:	f000 fab8 	bl	800a7ac <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800a23c:	2300      	movs	r3, #0
 800a23e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800a240:	2300      	movs	r3, #0
 800a242:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800a244:	2300      	movs	r3, #0
 800a246:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800a248:	2300      	movs	r3, #0
 800a24a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800a24c:	2300      	movs	r3, #0
 800a24e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800a250:	2300      	movs	r3, #0
 800a252:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800a254:	463b      	mov	r3, r7
 800a256:	2200      	movs	r2, #0
 800a258:	4619      	mov	r1, r3
 800a25a:	4806      	ldr	r0, [pc, #24]	; (800a274 <MX_DAC1_Init+0x60>)
 800a25c:	f7f7 fa4e 	bl	80016fc <HAL_DAC_ConfigChannel>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d001      	beq.n	800a26a <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800a266:	f000 faa1 	bl	800a7ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800a26a:	bf00      	nop
 800a26c:	3728      	adds	r7, #40	; 0x28
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	20001668 	.word	0x20001668
 800a278:	40007400 	.word	0x40007400

0800a27c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a280:	4b1b      	ldr	r3, [pc, #108]	; (800a2f0 <MX_I2C2_Init+0x74>)
 800a282:	4a1c      	ldr	r2, [pc, #112]	; (800a2f4 <MX_I2C2_Init+0x78>)
 800a284:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800a286:	4b1a      	ldr	r3, [pc, #104]	; (800a2f0 <MX_I2C2_Init+0x74>)
 800a288:	4a1b      	ldr	r2, [pc, #108]	; (800a2f8 <MX_I2C2_Init+0x7c>)
 800a28a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800a28c:	4b18      	ldr	r3, [pc, #96]	; (800a2f0 <MX_I2C2_Init+0x74>)
 800a28e:	2200      	movs	r2, #0
 800a290:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a292:	4b17      	ldr	r3, [pc, #92]	; (800a2f0 <MX_I2C2_Init+0x74>)
 800a294:	2201      	movs	r2, #1
 800a296:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a298:	4b15      	ldr	r3, [pc, #84]	; (800a2f0 <MX_I2C2_Init+0x74>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800a29e:	4b14      	ldr	r3, [pc, #80]	; (800a2f0 <MX_I2C2_Init+0x74>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a2a4:	4b12      	ldr	r3, [pc, #72]	; (800a2f0 <MX_I2C2_Init+0x74>)
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a2aa:	4b11      	ldr	r3, [pc, #68]	; (800a2f0 <MX_I2C2_Init+0x74>)
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a2b0:	4b0f      	ldr	r3, [pc, #60]	; (800a2f0 <MX_I2C2_Init+0x74>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a2b6:	480e      	ldr	r0, [pc, #56]	; (800a2f0 <MX_I2C2_Init+0x74>)
 800a2b8:	f7f7 fff2 	bl	80022a0 <HAL_I2C_Init>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d001      	beq.n	800a2c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800a2c2:	f000 fa73 	bl	800a7ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	4809      	ldr	r0, [pc, #36]	; (800a2f0 <MX_I2C2_Init+0x74>)
 800a2ca:	f7f8 fcf1 	bl	8002cb0 <HAL_I2CEx_ConfigAnalogFilter>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d001      	beq.n	800a2d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800a2d4:	f000 fa6a 	bl	800a7ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a2d8:	2100      	movs	r1, #0
 800a2da:	4805      	ldr	r0, [pc, #20]	; (800a2f0 <MX_I2C2_Init+0x74>)
 800a2dc:	f7f8 fd33 	bl	8002d46 <HAL_I2CEx_ConfigDigitalFilter>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800a2e6:	f000 fa61 	bl	800a7ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a2ea:	bf00      	nop
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	2000167c 	.word	0x2000167c
 800a2f4:	40005800 	.word	0x40005800
 800a2f8:	307075b1 	.word	0x307075b1

0800a2fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b088      	sub	sp, #32
 800a300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a302:	f107 0310 	add.w	r3, r7, #16
 800a306:	2200      	movs	r2, #0
 800a308:	601a      	str	r2, [r3, #0]
 800a30a:	605a      	str	r2, [r3, #4]
 800a30c:	609a      	str	r2, [r3, #8]
 800a30e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a310:	1d3b      	adds	r3, r7, #4
 800a312:	2200      	movs	r2, #0
 800a314:	601a      	str	r2, [r3, #0]
 800a316:	605a      	str	r2, [r3, #4]
 800a318:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a31a:	4b1e      	ldr	r3, [pc, #120]	; (800a394 <MX_TIM2_Init+0x98>)
 800a31c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a320:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12000;
 800a322:	4b1c      	ldr	r3, [pc, #112]	; (800a394 <MX_TIM2_Init+0x98>)
 800a324:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800a328:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a32a:	4b1a      	ldr	r3, [pc, #104]	; (800a394 <MX_TIM2_Init+0x98>)
 800a32c:	2200      	movs	r2, #0
 800a32e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800a330:	4b18      	ldr	r3, [pc, #96]	; (800a394 <MX_TIM2_Init+0x98>)
 800a332:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a336:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a338:	4b16      	ldr	r3, [pc, #88]	; (800a394 <MX_TIM2_Init+0x98>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a33e:	4b15      	ldr	r3, [pc, #84]	; (800a394 <MX_TIM2_Init+0x98>)
 800a340:	2200      	movs	r2, #0
 800a342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a344:	4813      	ldr	r0, [pc, #76]	; (800a394 <MX_TIM2_Init+0x98>)
 800a346:	f7fa fa1f 	bl	8004788 <HAL_TIM_Base_Init>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d001      	beq.n	800a354 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800a350:	f000 fa2c 	bl	800a7ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a358:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a35a:	f107 0310 	add.w	r3, r7, #16
 800a35e:	4619      	mov	r1, r3
 800a360:	480c      	ldr	r0, [pc, #48]	; (800a394 <MX_TIM2_Init+0x98>)
 800a362:	f7fa fbf8 	bl	8004b56 <HAL_TIM_ConfigClockSource>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d001      	beq.n	800a370 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800a36c:	f000 fa1e 	bl	800a7ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a370:	2300      	movs	r3, #0
 800a372:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a374:	2300      	movs	r3, #0
 800a376:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a378:	1d3b      	adds	r3, r7, #4
 800a37a:	4619      	mov	r1, r3
 800a37c:	4805      	ldr	r0, [pc, #20]	; (800a394 <MX_TIM2_Init+0x98>)
 800a37e:	f7fa fdff 	bl	8004f80 <HAL_TIMEx_MasterConfigSynchronization>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800a388:	f000 fa10 	bl	800a7ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a38c:	bf00      	nop
 800a38e:	3720      	adds	r7, #32
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	2000189c 	.word	0x2000189c

0800a398 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a39c:	4b22      	ldr	r3, [pc, #136]	; (800a428 <MX_USART1_UART_Init+0x90>)
 800a39e:	4a23      	ldr	r2, [pc, #140]	; (800a42c <MX_USART1_UART_Init+0x94>)
 800a3a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a3a2:	4b21      	ldr	r3, [pc, #132]	; (800a428 <MX_USART1_UART_Init+0x90>)
 800a3a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a3a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a3aa:	4b1f      	ldr	r3, [pc, #124]	; (800a428 <MX_USART1_UART_Init+0x90>)
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a3b0:	4b1d      	ldr	r3, [pc, #116]	; (800a428 <MX_USART1_UART_Init+0x90>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a3b6:	4b1c      	ldr	r3, [pc, #112]	; (800a428 <MX_USART1_UART_Init+0x90>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a3bc:	4b1a      	ldr	r3, [pc, #104]	; (800a428 <MX_USART1_UART_Init+0x90>)
 800a3be:	220c      	movs	r2, #12
 800a3c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a3c2:	4b19      	ldr	r3, [pc, #100]	; (800a428 <MX_USART1_UART_Init+0x90>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a3c8:	4b17      	ldr	r3, [pc, #92]	; (800a428 <MX_USART1_UART_Init+0x90>)
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a3ce:	4b16      	ldr	r3, [pc, #88]	; (800a428 <MX_USART1_UART_Init+0x90>)
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a3d4:	4b14      	ldr	r3, [pc, #80]	; (800a428 <MX_USART1_UART_Init+0x90>)
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a3da:	4b13      	ldr	r3, [pc, #76]	; (800a428 <MX_USART1_UART_Init+0x90>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a3e0:	4811      	ldr	r0, [pc, #68]	; (800a428 <MX_USART1_UART_Init+0x90>)
 800a3e2:	f7fa fe73 	bl	80050cc <HAL_UART_Init>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d001      	beq.n	800a3f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800a3ec:	f000 f9de 	bl	800a7ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	480d      	ldr	r0, [pc, #52]	; (800a428 <MX_USART1_UART_Init+0x90>)
 800a3f4:	f7fb fbc7 	bl	8005b86 <HAL_UARTEx_SetTxFifoThreshold>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800a3fe:	f000 f9d5 	bl	800a7ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a402:	2100      	movs	r1, #0
 800a404:	4808      	ldr	r0, [pc, #32]	; (800a428 <MX_USART1_UART_Init+0x90>)
 800a406:	f7fb fbfc 	bl	8005c02 <HAL_UARTEx_SetRxFifoThreshold>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d001      	beq.n	800a414 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800a410:	f000 f9cc 	bl	800a7ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800a414:	4804      	ldr	r0, [pc, #16]	; (800a428 <MX_USART1_UART_Init+0x90>)
 800a416:	f7fb fb7d 	bl	8005b14 <HAL_UARTEx_DisableFifoMode>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d001      	beq.n	800a424 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800a420:	f000 f9c4 	bl	800a7ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a424:	bf00      	nop
 800a426:	bd80      	pop	{r7, pc}
 800a428:	200017a8 	.word	0x200017a8
 800a42c:	40013800 	.word	0x40013800

0800a430 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800a436:	4b12      	ldr	r3, [pc, #72]	; (800a480 <MX_DMA_Init+0x50>)
 800a438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a43a:	4a11      	ldr	r2, [pc, #68]	; (800a480 <MX_DMA_Init+0x50>)
 800a43c:	f043 0304 	orr.w	r3, r3, #4
 800a440:	6493      	str	r3, [r2, #72]	; 0x48
 800a442:	4b0f      	ldr	r3, [pc, #60]	; (800a480 <MX_DMA_Init+0x50>)
 800a444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a446:	f003 0304 	and.w	r3, r3, #4
 800a44a:	607b      	str	r3, [r7, #4]
 800a44c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a44e:	4b0c      	ldr	r3, [pc, #48]	; (800a480 <MX_DMA_Init+0x50>)
 800a450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a452:	4a0b      	ldr	r2, [pc, #44]	; (800a480 <MX_DMA_Init+0x50>)
 800a454:	f043 0301 	orr.w	r3, r3, #1
 800a458:	6493      	str	r3, [r2, #72]	; 0x48
 800a45a:	4b09      	ldr	r3, [pc, #36]	; (800a480 <MX_DMA_Init+0x50>)
 800a45c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a45e:	f003 0301 	and.w	r3, r3, #1
 800a462:	603b      	str	r3, [r7, #0]
 800a464:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800a466:	2200      	movs	r2, #0
 800a468:	2105      	movs	r1, #5
 800a46a:	200b      	movs	r0, #11
 800a46c:	f7f7 f896 	bl	800159c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a470:	200b      	movs	r0, #11
 800a472:	f7f7 f8af 	bl	80015d4 <HAL_NVIC_EnableIRQ>

}
 800a476:	bf00      	nop
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	40021000 	.word	0x40021000

0800a484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b08a      	sub	sp, #40	; 0x28
 800a488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a48a:	f107 0314 	add.w	r3, r7, #20
 800a48e:	2200      	movs	r2, #0
 800a490:	601a      	str	r2, [r3, #0]
 800a492:	605a      	str	r2, [r3, #4]
 800a494:	609a      	str	r2, [r3, #8]
 800a496:	60da      	str	r2, [r3, #12]
 800a498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a49a:	4b38      	ldr	r3, [pc, #224]	; (800a57c <MX_GPIO_Init+0xf8>)
 800a49c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a49e:	4a37      	ldr	r2, [pc, #220]	; (800a57c <MX_GPIO_Init+0xf8>)
 800a4a0:	f043 0310 	orr.w	r3, r3, #16
 800a4a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4a6:	4b35      	ldr	r3, [pc, #212]	; (800a57c <MX_GPIO_Init+0xf8>)
 800a4a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4aa:	f003 0310 	and.w	r3, r3, #16
 800a4ae:	613b      	str	r3, [r7, #16]
 800a4b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4b2:	4b32      	ldr	r3, [pc, #200]	; (800a57c <MX_GPIO_Init+0xf8>)
 800a4b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4b6:	4a31      	ldr	r2, [pc, #196]	; (800a57c <MX_GPIO_Init+0xf8>)
 800a4b8:	f043 0304 	orr.w	r3, r3, #4
 800a4bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4be:	4b2f      	ldr	r3, [pc, #188]	; (800a57c <MX_GPIO_Init+0xf8>)
 800a4c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4c2:	f003 0304 	and.w	r3, r3, #4
 800a4c6:	60fb      	str	r3, [r7, #12]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4ca:	4b2c      	ldr	r3, [pc, #176]	; (800a57c <MX_GPIO_Init+0xf8>)
 800a4cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ce:	4a2b      	ldr	r2, [pc, #172]	; (800a57c <MX_GPIO_Init+0xf8>)
 800a4d0:	f043 0301 	orr.w	r3, r3, #1
 800a4d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4d6:	4b29      	ldr	r3, [pc, #164]	; (800a57c <MX_GPIO_Init+0xf8>)
 800a4d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	60bb      	str	r3, [r7, #8]
 800a4e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4e2:	4b26      	ldr	r3, [pc, #152]	; (800a57c <MX_GPIO_Init+0xf8>)
 800a4e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4e6:	4a25      	ldr	r2, [pc, #148]	; (800a57c <MX_GPIO_Init+0xf8>)
 800a4e8:	f043 0302 	orr.w	r3, r3, #2
 800a4ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4ee:	4b23      	ldr	r3, [pc, #140]	; (800a57c <MX_GPIO_Init+0xf8>)
 800a4f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4f2:	f003 0302 	and.w	r3, r3, #2
 800a4f6:	607b      	str	r3, [r7, #4]
 800a4f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	2108      	movs	r1, #8
 800a4fe:	4820      	ldr	r0, [pc, #128]	; (800a580 <MX_GPIO_Init+0xfc>)
 800a500:	f7f7 fe84 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800a504:	2200      	movs	r2, #0
 800a506:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a50a:	481e      	ldr	r0, [pc, #120]	; (800a584 <MX_GPIO_Init+0x100>)
 800a50c:	f7f7 fe7e 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 800a510:	2308      	movs	r3, #8
 800a512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a514:	2301      	movs	r3, #1
 800a516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a518:	2300      	movs	r3, #0
 800a51a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a51c:	2300      	movs	r3, #0
 800a51e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800a520:	f107 0314 	add.w	r3, r7, #20
 800a524:	4619      	mov	r1, r3
 800a526:	4816      	ldr	r0, [pc, #88]	; (800a580 <MX_GPIO_Init+0xfc>)
 800a528:	f7f7 fbec 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800a52c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a532:	4b15      	ldr	r3, [pc, #84]	; (800a588 <MX_GPIO_Init+0x104>)
 800a534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a536:	2300      	movs	r3, #0
 800a538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800a53a:	f107 0314 	add.w	r3, r7, #20
 800a53e:	4619      	mov	r1, r3
 800a540:	4812      	ldr	r0, [pc, #72]	; (800a58c <MX_GPIO_Init+0x108>)
 800a542:	f7f7 fbdf 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800a546:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a54a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a54c:	2301      	movs	r3, #1
 800a54e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a550:	2300      	movs	r3, #0
 800a552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a554:	2300      	movs	r3, #0
 800a556:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800a558:	f107 0314 	add.w	r3, r7, #20
 800a55c:	4619      	mov	r1, r3
 800a55e:	4809      	ldr	r0, [pc, #36]	; (800a584 <MX_GPIO_Init+0x100>)
 800a560:	f7f7 fbd0 	bl	8001d04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800a564:	2200      	movs	r2, #0
 800a566:	2105      	movs	r1, #5
 800a568:	2028      	movs	r0, #40	; 0x28
 800a56a:	f7f7 f817 	bl	800159c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a56e:	2028      	movs	r0, #40	; 0x28
 800a570:	f7f7 f830 	bl	80015d4 <HAL_NVIC_EnableIRQ>

}
 800a574:	bf00      	nop
 800a576:	3728      	adds	r7, #40	; 0x28
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	40021000 	.word	0x40021000
 800a580:	48001000 	.word	0x48001000
 800a584:	48000400 	.word	0x48000400
 800a588:	10110000 	.word	0x10110000
 800a58c:	48000800 	.word	0x48000800

0800a590 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {// detect when the button is pressed
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	4603      	mov	r3, r0
 800a598:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_BUTTON_Pin) {
 800a59a:	88fb      	ldrh	r3, [r7, #6]
 800a59c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5a0:	d10a      	bne.n	800a5b8 <HAL_GPIO_EXTI_Callback+0x28>
		osSignalSet (listenHandle, 0x0002);
 800a5a2:	4b07      	ldr	r3, [pc, #28]	; (800a5c0 <HAL_GPIO_EXTI_Callback+0x30>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2102      	movs	r1, #2
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7fb fc63 	bl	8005e74 <osSignalSet>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	2108      	movs	r1, #8
 800a5b2:	4804      	ldr	r0, [pc, #16]	; (800a5c4 <HAL_GPIO_EXTI_Callback+0x34>)
 800a5b4:	f7f7 fe2a 	bl	800220c <HAL_GPIO_WritePin>
	}
}
 800a5b8:	bf00      	nop
 800a5ba:	3708      	adds	r7, #8
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	200018e8 	.word	0x200018e8
 800a5c4:	48001000 	.word	0x48001000

0800a5c8 <StartMeasureTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMeasureTask */
void StartMeasureTask(void const * argument)
{
 800a5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ca:	b089      	sub	sp, #36	; 0x24
 800a5cc:	af06      	add	r7, sp, #24
 800a5ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(50);
 800a5d0:	2032      	movs	r0, #50	; 0x32
 800a5d2:	f7fb fc3a 	bl	8005e4a <osDelay>
#ifdef USE_SIGNAL
		if (osThreadSuspend(transmitHandle) != osOK){
			Error_Handler();
		}
#else
		osMutexWait (consoleMutexHandle, osWaitForever);
 800a5d6:	4b38      	ldr	r3, [pc, #224]	; (800a6b8 <StartMeasureTask+0xf0>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f04f 31ff 	mov.w	r1, #4294967295
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fb fcec 	bl	8005fbc <osMutexWait>
#endif
		memset(buffer, 0, strlen(buffer));
 800a5e4:	4835      	ldr	r0, [pc, #212]	; (800a6bc <StartMeasureTask+0xf4>)
 800a5e6:	f7f5 fe0b 	bl	8000200 <strlen>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	4832      	ldr	r0, [pc, #200]	; (800a6bc <StartMeasureTask+0xf4>)
 800a5f2:	f000 fe92 	bl	800b31a <memset>
		BSP_ACCELERO_AccGetXYZ(acceleration);
 800a5f6:	4832      	ldr	r0, [pc, #200]	; (800a6c0 <StartMeasureTask+0xf8>)
 800a5f8:	f000 fa6a 	bl	800aad0 <BSP_ACCELERO_AccGetXYZ>
		BSP_GYRO_GetXYZ(gyro);
 800a5fc:	4831      	ldr	r0, [pc, #196]	; (800a6c4 <StartMeasureTask+0xfc>)
 800a5fe:	f000 fac1 	bl	800ab84 <BSP_GYRO_GetXYZ>
		pressure = BSP_PSENSOR_ReadPressure();
 800a602:	f000 fb43 	bl	800ac8c <BSP_PSENSOR_ReadPressure>
 800a606:	eef0 7a40 	vmov.f32	s15, s0
 800a60a:	4b2f      	ldr	r3, [pc, #188]	; (800a6c8 <StartMeasureTask+0x100>)
 800a60c:	edc3 7a00 	vstr	s15, [r3]
		temperature = BSP_TSENSOR_ReadTemp();
 800a610:	f000 fb66 	bl	800ace0 <BSP_TSENSOR_ReadTemp>
 800a614:	eef0 7a40 	vmov.f32	s15, s0
 800a618:	4b2c      	ldr	r3, [pc, #176]	; (800a6cc <StartMeasureTask+0x104>)
 800a61a:	edc3 7a00 	vstr	s15, [r3]
		sprintf((char*) buffer, "Ac=[%d, %d, %d]\nAngAc=[%d, %d, %d]\nP=%d\nT=%d\n",
				(int) acceleration[0], (int) acceleration[1],
 800a61e:	4b28      	ldr	r3, [pc, #160]	; (800a6c0 <StartMeasureTask+0xf8>)
 800a620:	f9b3 3000 	ldrsh.w	r3, [r3]
		sprintf((char*) buffer, "Ac=[%d, %d, %d]\nAngAc=[%d, %d, %d]\nP=%d\nT=%d\n",
 800a624:	461e      	mov	r6, r3
				(int) acceleration[0], (int) acceleration[1],
 800a626:	4b26      	ldr	r3, [pc, #152]	; (800a6c0 <StartMeasureTask+0xf8>)
 800a628:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		sprintf((char*) buffer, "Ac=[%d, %d, %d]\nAngAc=[%d, %d, %d]\nP=%d\nT=%d\n",
 800a62c:	469c      	mov	ip, r3
				(int) acceleration[2], (int) (gyro[0]), (int) (gyro[1]), (int) (gyro[2]),
 800a62e:	4b24      	ldr	r3, [pc, #144]	; (800a6c0 <StartMeasureTask+0xf8>)
 800a630:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		sprintf((char*) buffer, "Ac=[%d, %d, %d]\nAngAc=[%d, %d, %d]\nP=%d\nT=%d\n",
 800a634:	461a      	mov	r2, r3
				(int) acceleration[2], (int) (gyro[0]), (int) (gyro[1]), (int) (gyro[2]),
 800a636:	4b23      	ldr	r3, [pc, #140]	; (800a6c4 <StartMeasureTask+0xfc>)
 800a638:	edd3 7a00 	vldr	s15, [r3]
		sprintf((char*) buffer, "Ac=[%d, %d, %d]\nAngAc=[%d, %d, %d]\nP=%d\nT=%d\n",
 800a63c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a640:	ee17 1a90 	vmov	r1, s15
				(int) acceleration[2], (int) (gyro[0]), (int) (gyro[1]), (int) (gyro[2]),
 800a644:	4b1f      	ldr	r3, [pc, #124]	; (800a6c4 <StartMeasureTask+0xfc>)
 800a646:	edd3 7a01 	vldr	s15, [r3, #4]
		sprintf((char*) buffer, "Ac=[%d, %d, %d]\nAngAc=[%d, %d, %d]\nP=%d\nT=%d\n",
 800a64a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a64e:	ee17 0a90 	vmov	r0, s15
				(int) acceleration[2], (int) (gyro[0]), (int) (gyro[1]), (int) (gyro[2]),
 800a652:	4b1c      	ldr	r3, [pc, #112]	; (800a6c4 <StartMeasureTask+0xfc>)
 800a654:	edd3 7a02 	vldr	s15, [r3, #8]
		sprintf((char*) buffer, "Ac=[%d, %d, %d]\nAngAc=[%d, %d, %d]\nP=%d\nT=%d\n",
 800a658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a65c:	ee17 4a90 	vmov	r4, s15
 800a660:	4b19      	ldr	r3, [pc, #100]	; (800a6c8 <StartMeasureTask+0x100>)
 800a662:	edd3 7a00 	vldr	s15, [r3]
 800a666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a66a:	ee17 5a90 	vmov	r5, s15
 800a66e:	4b17      	ldr	r3, [pc, #92]	; (800a6cc <StartMeasureTask+0x104>)
 800a670:	edd3 7a00 	vldr	s15, [r3]
 800a674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a678:	ee17 3a90 	vmov	r3, s15
 800a67c:	9305      	str	r3, [sp, #20]
 800a67e:	9504      	str	r5, [sp, #16]
 800a680:	9403      	str	r4, [sp, #12]
 800a682:	9002      	str	r0, [sp, #8]
 800a684:	9101      	str	r1, [sp, #4]
 800a686:	9200      	str	r2, [sp, #0]
 800a688:	4663      	mov	r3, ip
 800a68a:	4632      	mov	r2, r6
 800a68c:	4910      	ldr	r1, [pc, #64]	; (800a6d0 <StartMeasureTask+0x108>)
 800a68e:	480b      	ldr	r0, [pc, #44]	; (800a6bc <StartMeasureTask+0xf4>)
 800a690:	f000 fe4c 	bl	800b32c <siprintf>
				(int) pressure, (int) temperature);

		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800a694:	2201      	movs	r2, #1
 800a696:	2108      	movs	r1, #8
 800a698:	480e      	ldr	r0, [pc, #56]	; (800a6d4 <StartMeasureTask+0x10c>)
 800a69a:	f7f7 fdb7 	bl	800220c <HAL_GPIO_WritePin>
#ifdef USE_SIGNAL
		//		if (osThreadResume(transmitHandle) != osOK){
		//			Error_Handler();
		//		}
#else
		osSignalSet (transmitHandle, 0x0001);
 800a69e:	4b0e      	ldr	r3, [pc, #56]	; (800a6d8 <StartMeasureTask+0x110>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fb fbe5 	bl	8005e74 <osSignalSet>
		osMutexRelease (consoleMutexHandle);
 800a6aa:	4b03      	ldr	r3, [pc, #12]	; (800a6b8 <StartMeasureTask+0xf0>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fb fcd2 	bl	8006058 <osMutexRelease>
		osDelay(50);
 800a6b4:	e78c      	b.n	800a5d0 <StartMeasureTask+0x8>
 800a6b6:	bf00      	nop
 800a6b8:	200018f4 	.word	0x200018f4
 800a6bc:	20001834 	.word	0x20001834
 800a6c0:	200018ec 	.word	0x200018ec
 800a6c4:	20001798 	.word	0x20001798
 800a6c8:	2000172c 	.word	0x2000172c
 800a6cc:	20001728 	.word	0x20001728
 800a6d0:	0800bbd4 	.word	0x0800bbd4
 800a6d4:	48001000 	.word	0x48001000
 800a6d8:	200017a4 	.word	0x200017a4

0800a6dc <StartTransmitTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTransmitTask */
void StartTransmitTask(void const * argument)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTransmitTask */
	/* Infinite loop */
	for (;;) {
		osDelay(10);
 800a6e4:	200a      	movs	r0, #10
 800a6e6:	f7fb fbb0 	bl	8005e4a <osDelay>

#ifdef USE_SIGNAL
#else
		osSignalWait (0x0001, osWaitForever);
 800a6ea:	463b      	mov	r3, r7
 800a6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f0:	2101      	movs	r1, #1
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fb fbfe 	bl	8005ef4 <osSignalWait>
		osMutexWait (consoleMutexHandle, osWaitForever);
 800a6f8:	4b0b      	ldr	r3, [pc, #44]	; (800a728 <StartTransmitTask+0x4c>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f04f 31ff 	mov.w	r1, #4294967295
 800a700:	4618      	mov	r0, r3
 800a702:	f7fb fc5b 	bl	8005fbc <osMutexWait>
#endif
		HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 5);
 800a706:	4809      	ldr	r0, [pc, #36]	; (800a72c <StartTransmitTask+0x50>)
 800a708:	f7f5 fd7a 	bl	8000200 <strlen>
 800a70c:	4603      	mov	r3, r0
 800a70e:	b29a      	uxth	r2, r3
 800a710:	2305      	movs	r3, #5
 800a712:	4906      	ldr	r1, [pc, #24]	; (800a72c <StartTransmitTask+0x50>)
 800a714:	4806      	ldr	r0, [pc, #24]	; (800a730 <StartTransmitTask+0x54>)
 800a716:	f7fa fd29 	bl	800516c <HAL_UART_Transmit>
		//osSignalClear(transmitHandle, 0x0001);
		if (osThreadSuspend(transmitHandle) != osOK){
					Error_Handler();
				}
#else
		osMutexRelease (consoleMutexHandle);
 800a71a:	4b03      	ldr	r3, [pc, #12]	; (800a728 <StartTransmitTask+0x4c>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fb fc9a 	bl	8006058 <osMutexRelease>
		osDelay(10);
 800a724:	e7de      	b.n	800a6e4 <StartTransmitTask+0x8>
 800a726:	bf00      	nop
 800a728:	200018f4 	.word	0x200018f4
 800a72c:	20001834 	.word	0x20001834
 800a730:	200017a8 	.word	0x200017a8

0800a734 <StartListenTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartListenTask */
void StartListenTask(void const * argument)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartListenTask */
	/* Infinite loop */
	for (;;) {
		osDelay(500);
 800a73c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a740:	f7fb fb83 	bl	8005e4a <osDelay>
		osSignalWait (0x0002, osWaitForever);
 800a744:	463b      	mov	r3, r7
 800a746:	f04f 32ff 	mov.w	r2, #4294967295
 800a74a:	2102      	movs	r1, #2
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7fb fbd1 	bl	8005ef4 <osSignalWait>
#ifndef USE_SIGNAL
		//osMutexWait (consoleMutexHandle, osWaitForever);
#endif
		mode = (mode + 1) % 4;
 800a752:	4b06      	ldr	r3, [pc, #24]	; (800a76c <StartListenTask+0x38>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	3301      	adds	r3, #1
 800a758:	425a      	negs	r2, r3
 800a75a:	f003 0303 	and.w	r3, r3, #3
 800a75e:	f002 0203 	and.w	r2, r2, #3
 800a762:	bf58      	it	pl
 800a764:	4253      	negpl	r3, r2
 800a766:	4a01      	ldr	r2, [pc, #4]	; (800a76c <StartListenTask+0x38>)
 800a768:	6013      	str	r3, [r2, #0]
		osDelay(500);
 800a76a:	e7e7      	b.n	800a73c <StartListenTask+0x8>
 800a76c:	200015fc 	.word	0x200015fc

0800a770 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a780:	d104      	bne.n	800a78c <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 800a782:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a786:	4807      	ldr	r0, [pc, #28]	; (800a7a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800a788:	f7f7 fd58 	bl	800223c <HAL_GPIO_TogglePin>
	  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a05      	ldr	r2, [pc, #20]	; (800a7a8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d101      	bne.n	800a79a <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 800a796:	f7f5 ff23 	bl	80005e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a79a:	bf00      	nop
 800a79c:	3708      	adds	r7, #8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	48000400 	.word	0x48000400
 800a7a8:	40001000 	.word	0x40001000

0800a7ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a7b0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800a7b2:	e7fe      	b.n	800a7b2 <Error_Handler+0x6>

0800a7b4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b08a      	sub	sp, #40	; 0x28
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800a7bc:	4b27      	ldr	r3, [pc, #156]	; (800a85c <I2Cx_MspInit+0xa8>)
 800a7be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7c0:	4a26      	ldr	r2, [pc, #152]	; (800a85c <I2Cx_MspInit+0xa8>)
 800a7c2:	f043 0302 	orr.w	r3, r3, #2
 800a7c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a7c8:	4b24      	ldr	r3, [pc, #144]	; (800a85c <I2Cx_MspInit+0xa8>)
 800a7ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7cc:	f003 0302 	and.w	r3, r3, #2
 800a7d0:	613b      	str	r3, [r7, #16]
 800a7d2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800a7d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a7d8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800a7da:	2312      	movs	r3, #18
 800a7dc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7e2:	2303      	movs	r3, #3
 800a7e4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800a7e6:	2304      	movs	r3, #4
 800a7e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800a7ea:	f107 0314 	add.w	r3, r7, #20
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	481b      	ldr	r0, [pc, #108]	; (800a860 <I2Cx_MspInit+0xac>)
 800a7f2:	f7f7 fa87 	bl	8001d04 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800a7f6:	f107 0314 	add.w	r3, r7, #20
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	4818      	ldr	r0, [pc, #96]	; (800a860 <I2Cx_MspInit+0xac>)
 800a7fe:	f7f7 fa81 	bl	8001d04 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800a802:	4b16      	ldr	r3, [pc, #88]	; (800a85c <I2Cx_MspInit+0xa8>)
 800a804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a806:	4a15      	ldr	r2, [pc, #84]	; (800a85c <I2Cx_MspInit+0xa8>)
 800a808:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a80c:	6593      	str	r3, [r2, #88]	; 0x58
 800a80e:	4b13      	ldr	r3, [pc, #76]	; (800a85c <I2Cx_MspInit+0xa8>)
 800a810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a816:	60fb      	str	r3, [r7, #12]
 800a818:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800a81a:	4b10      	ldr	r3, [pc, #64]	; (800a85c <I2Cx_MspInit+0xa8>)
 800a81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a81e:	4a0f      	ldr	r2, [pc, #60]	; (800a85c <I2Cx_MspInit+0xa8>)
 800a820:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a824:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800a826:	4b0d      	ldr	r3, [pc, #52]	; (800a85c <I2Cx_MspInit+0xa8>)
 800a828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82a:	4a0c      	ldr	r2, [pc, #48]	; (800a85c <I2Cx_MspInit+0xa8>)
 800a82c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a830:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800a832:	2200      	movs	r2, #0
 800a834:	210f      	movs	r1, #15
 800a836:	2021      	movs	r0, #33	; 0x21
 800a838:	f7f6 feb0 	bl	800159c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800a83c:	2021      	movs	r0, #33	; 0x21
 800a83e:	f7f6 fec9 	bl	80015d4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800a842:	2200      	movs	r2, #0
 800a844:	210f      	movs	r1, #15
 800a846:	2022      	movs	r0, #34	; 0x22
 800a848:	f7f6 fea8 	bl	800159c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800a84c:	2022      	movs	r0, #34	; 0x22
 800a84e:	f7f6 fec1 	bl	80015d4 <HAL_NVIC_EnableIRQ>
}
 800a852:	bf00      	nop
 800a854:	3728      	adds	r7, #40	; 0x28
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	40021000 	.word	0x40021000
 800a860:	48000400 	.word	0x48000400

0800a864 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a12      	ldr	r2, [pc, #72]	; (800a8b8 <I2Cx_Init+0x54>)
 800a870:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a11      	ldr	r2, [pc, #68]	; (800a8bc <I2Cx_Init+0x58>)
 800a876:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2201      	movs	r2, #1
 800a882:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f7ff ff89 	bl	800a7b4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7f7 fcfc 	bl	80022a0 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f7f8 fa00 	bl	8002cb0 <HAL_I2CEx_ConfigAnalogFilter>
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	40005800 	.word	0x40005800
 800a8bc:	00702681 	.word	0x00702681

0800a8c0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b08a      	sub	sp, #40	; 0x28
 800a8c4:	af04      	add	r7, sp, #16
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	4608      	mov	r0, r1
 800a8ca:	4611      	mov	r1, r2
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	72fb      	strb	r3, [r7, #11]
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	813b      	strh	r3, [r7, #8]
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a8de:	7afb      	ldrb	r3, [r7, #11]
 800a8e0:	b299      	uxth	r1, r3
 800a8e2:	88f8      	ldrh	r0, [r7, #6]
 800a8e4:	893a      	ldrh	r2, [r7, #8]
 800a8e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a8ea:	9302      	str	r3, [sp, #8]
 800a8ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	6a3b      	ldr	r3, [r7, #32]
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f7f7 fea4 	bl	8002644 <HAL_I2C_Mem_Read>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800a900:	7dfb      	ldrb	r3, [r7, #23]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d004      	beq.n	800a910 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800a906:	7afb      	ldrb	r3, [r7, #11]
 800a908:	4619      	mov	r1, r3
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f000 f832 	bl	800a974 <I2Cx_Error>
  }
  return status;
 800a910:	7dfb      	ldrb	r3, [r7, #23]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3718      	adds	r7, #24
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b08a      	sub	sp, #40	; 0x28
 800a91e:	af04      	add	r7, sp, #16
 800a920:	60f8      	str	r0, [r7, #12]
 800a922:	4608      	mov	r0, r1
 800a924:	4611      	mov	r1, r2
 800a926:	461a      	mov	r2, r3
 800a928:	4603      	mov	r3, r0
 800a92a:	72fb      	strb	r3, [r7, #11]
 800a92c:	460b      	mov	r3, r1
 800a92e:	813b      	strh	r3, [r7, #8]
 800a930:	4613      	mov	r3, r2
 800a932:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a938:	7afb      	ldrb	r3, [r7, #11]
 800a93a:	b299      	uxth	r1, r3
 800a93c:	88f8      	ldrh	r0, [r7, #6]
 800a93e:	893a      	ldrh	r2, [r7, #8]
 800a940:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a944:	9302      	str	r3, [sp, #8]
 800a946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a948:	9301      	str	r3, [sp, #4]
 800a94a:	6a3b      	ldr	r3, [r7, #32]
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	4603      	mov	r3, r0
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f7f7 fd63 	bl	800241c <HAL_I2C_Mem_Write>
 800a956:	4603      	mov	r3, r0
 800a958:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800a95a:	7dfb      	ldrb	r3, [r7, #23]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d004      	beq.n	800a96a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800a960:	7afb      	ldrb	r3, [r7, #11]
 800a962:	4619      	mov	r1, r3
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f000 f805 	bl	800a974 <I2Cx_Error>
  }
  return status;
 800a96a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3718      	adds	r7, #24
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	460b      	mov	r3, r1
 800a97e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f7f7 fd1c 	bl	80023be <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7ff ff6c 	bl	800a864 <I2Cx_Init>
}
 800a98c:	bf00      	nop
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800a998:	4802      	ldr	r0, [pc, #8]	; (800a9a4 <SENSOR_IO_Init+0x10>)
 800a99a:	f7ff ff63 	bl	800a864 <I2Cx_Init>
}
 800a99e:	bf00      	nop
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	20001984 	.word	0x20001984

0800a9a8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af02      	add	r7, sp, #8
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	71fb      	strb	r3, [r7, #7]
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	71bb      	strb	r3, [r7, #6]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800a9ba:	79bb      	ldrb	r3, [r7, #6]
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	79f9      	ldrb	r1, [r7, #7]
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	9301      	str	r3, [sp, #4]
 800a9c4:	1d7b      	adds	r3, r7, #5
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	4803      	ldr	r0, [pc, #12]	; (800a9d8 <SENSOR_IO_Write+0x30>)
 800a9cc:	f7ff ffa5 	bl	800a91a <I2Cx_WriteMultiple>
}
 800a9d0:	bf00      	nop
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	20001984 	.word	0x20001984

0800a9dc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b086      	sub	sp, #24
 800a9e0:	af02      	add	r7, sp, #8
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	460a      	mov	r2, r1
 800a9e6:	71fb      	strb	r3, [r7, #7]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800a9f0:	79bb      	ldrb	r3, [r7, #6]
 800a9f2:	b29a      	uxth	r2, r3
 800a9f4:	79f9      	ldrb	r1, [r7, #7]
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	9301      	str	r3, [sp, #4]
 800a9fa:	f107 030f 	add.w	r3, r7, #15
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	2301      	movs	r3, #1
 800aa02:	4804      	ldr	r0, [pc, #16]	; (800aa14 <SENSOR_IO_Read+0x38>)
 800aa04:	f7ff ff5c 	bl	800a8c0 <I2Cx_ReadMultiple>

  return read_value;
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	20001984 	.word	0x20001984

0800aa18 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af02      	add	r7, sp, #8
 800aa1e:	603a      	str	r2, [r7, #0]
 800aa20:	461a      	mov	r2, r3
 800aa22:	4603      	mov	r3, r0
 800aa24:	71fb      	strb	r3, [r7, #7]
 800aa26:	460b      	mov	r3, r1
 800aa28:	71bb      	strb	r3, [r7, #6]
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800aa2e:	79bb      	ldrb	r3, [r7, #6]
 800aa30:	b29a      	uxth	r2, r3
 800aa32:	79f9      	ldrb	r1, [r7, #7]
 800aa34:	88bb      	ldrh	r3, [r7, #4]
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	4804      	ldr	r0, [pc, #16]	; (800aa50 <SENSOR_IO_ReadMultiple+0x38>)
 800aa40:	f7ff ff3e 	bl	800a8c0 <I2Cx_ReadMultiple>
 800aa44:	4603      	mov	r3, r0
 800aa46:	b29b      	uxth	r3, r3
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	20001984 	.word	0x20001984

0800aa54 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800aa62:	4b19      	ldr	r3, [pc, #100]	; (800aac8 <BSP_ACCELERO_Init+0x74>)
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	4798      	blx	r3
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b6a      	cmp	r3, #106	; 0x6a
 800aa6c:	d002      	beq.n	800aa74 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	73fb      	strb	r3, [r7, #15]
 800aa72:	e024      	b.n	800aabe <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800aa74:	4b15      	ldr	r3, [pc, #84]	; (800aacc <BSP_ACCELERO_Init+0x78>)
 800aa76:	4a14      	ldr	r2, [pc, #80]	; (800aac8 <BSP_ACCELERO_Init+0x74>)
 800aa78:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800aa7a:	2330      	movs	r3, #48	; 0x30
 800aa7c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800aa82:	2300      	movs	r3, #0
 800aa84:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800aa86:	2340      	movs	r3, #64	; 0x40
 800aa88:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800aa92:	797a      	ldrb	r2, [r7, #5]
 800aa94:	7abb      	ldrb	r3, [r7, #10]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800aa9c:	7a3b      	ldrb	r3, [r7, #8]
 800aa9e:	f043 0304 	orr.w	r3, r3, #4
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	021b      	lsls	r3, r3, #8
 800aaa6:	b21a      	sxth	r2, r3
 800aaa8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aaac:	4313      	orrs	r3, r2
 800aaae:	b21b      	sxth	r3, r3
 800aab0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800aab2:	4b06      	ldr	r3, [pc, #24]	; (800aacc <BSP_ACCELERO_Init+0x78>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	89ba      	ldrh	r2, [r7, #12]
 800aaba:	4610      	mov	r0, r2
 800aabc:	4798      	blx	r3
  }  

  return ret;
 800aabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	20000068 	.word	0x20000068
 800aacc:	20001600 	.word	0x20001600

0800aad0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800aad8:	4b08      	ldr	r3, [pc, #32]	; (800aafc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d009      	beq.n	800aaf4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800aae0:	4b06      	ldr	r3, [pc, #24]	; (800aafc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d004      	beq.n	800aaf4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800aaea:	4b04      	ldr	r3, [pc, #16]	; (800aafc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	4798      	blx	r3
    }
  }
}
 800aaf4:	bf00      	nop
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	20001600 	.word	0x20001600

0800ab00 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800ab0e:	4b1b      	ldr	r3, [pc, #108]	; (800ab7c <BSP_GYRO_Init+0x7c>)
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	4798      	blx	r3
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b6a      	cmp	r3, #106	; 0x6a
 800ab18:	d002      	beq.n	800ab20 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	73fb      	strb	r3, [r7, #15]
 800ab1e:	e028      	b.n	800ab72 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800ab20:	4b17      	ldr	r3, [pc, #92]	; (800ab80 <BSP_GYRO_Init+0x80>)
 800ab22:	4a16      	ldr	r2, [pc, #88]	; (800ab7c <BSP_GYRO_Init+0x7c>)
 800ab24:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800ab26:	2300      	movs	r3, #0
 800ab28:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800ab2a:	2330      	movs	r3, #48	; 0x30
 800ab2c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800ab32:	2300      	movs	r3, #0
 800ab34:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800ab36:	2340      	movs	r3, #64	; 0x40
 800ab38:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800ab3e:	230c      	movs	r3, #12
 800ab40:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800ab42:	7aba      	ldrb	r2, [r7, #10]
 800ab44:	797b      	ldrb	r3, [r7, #5]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800ab4c:	7a3b      	ldrb	r3, [r7, #8]
 800ab4e:	f043 0304 	orr.w	r3, r3, #4
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	021b      	lsls	r3, r3, #8
 800ab56:	b21a      	sxth	r2, r3
 800ab58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	b21b      	sxth	r3, r3
 800ab60:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800ab62:	4b07      	ldr	r3, [pc, #28]	; (800ab80 <BSP_GYRO_Init+0x80>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	89ba      	ldrh	r2, [r7, #12]
 800ab6a:	4610      	mov	r0, r2
 800ab6c:	4798      	blx	r3
    
    ret = GYRO_OK;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800ab72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	2000009c 	.word	0x2000009c
 800ab80:	20001604 	.word	0x20001604

0800ab84 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 800ab8c:	4b08      	ldr	r3, [pc, #32]	; (800abb0 <BSP_GYRO_GetXYZ+0x2c>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d009      	beq.n	800aba8 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 800ab94:	4b06      	ldr	r3, [pc, #24]	; (800abb0 <BSP_GYRO_GetXYZ+0x2c>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d004      	beq.n	800aba8 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800ab9e:	4b04      	ldr	r3, [pc, #16]	; (800abb0 <BSP_GYRO_GetXYZ+0x2c>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	4798      	blx	r3
    }
  }
}
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	20001604 	.word	0x20001604

0800abb4 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800abba:	4b0c      	ldr	r3, [pc, #48]	; (800abec <BSP_HSENSOR_Init+0x38>)
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	20be      	movs	r0, #190	; 0xbe
 800abc0:	4798      	blx	r3
 800abc2:	4603      	mov	r3, r0
 800abc4:	2bbc      	cmp	r3, #188	; 0xbc
 800abc6:	d002      	beq.n	800abce <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	607b      	str	r3, [r7, #4]
 800abcc:	e009      	b.n	800abe2 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800abce:	4b08      	ldr	r3, [pc, #32]	; (800abf0 <BSP_HSENSOR_Init+0x3c>)
 800abd0:	4a06      	ldr	r2, [pc, #24]	; (800abec <BSP_HSENSOR_Init+0x38>)
 800abd2:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800abd4:	4b06      	ldr	r3, [pc, #24]	; (800abf0 <BSP_HSENSOR_Init+0x3c>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	20be      	movs	r0, #190	; 0xbe
 800abdc:	4798      	blx	r3
    ret = HSENSOR_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800abe2:	687b      	ldr	r3, [r7, #4]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3708      	adds	r7, #8
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	2000000c 	.word	0x2000000c
 800abf0:	20001608 	.word	0x20001608

0800abf4 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 800abfa:	2300      	movs	r3, #0
 800abfc:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800abfe:	4b11      	ldr	r3, [pc, #68]	; (800ac44 <BSP_MAGNETO_Init+0x50>)
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	4798      	blx	r3
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b3d      	cmp	r3, #61	; 0x3d
 800ac08:	d002      	beq.n	800ac10 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	71fb      	strb	r3, [r7, #7]
 800ac0e:	e013      	b.n	800ac38 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 800ac10:	4b0d      	ldr	r3, [pc, #52]	; (800ac48 <BSP_MAGNETO_Init+0x54>)
 800ac12:	4a0c      	ldr	r2, [pc, #48]	; (800ac44 <BSP_MAGNETO_Init+0x50>)
 800ac14:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800ac16:	2358      	movs	r3, #88	; 0x58
 800ac18:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800ac22:	2308      	movs	r3, #8
 800ac24:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800ac26:	2340      	movs	r3, #64	; 0x40
 800ac28:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 800ac2a:	4b07      	ldr	r3, [pc, #28]	; (800ac48 <BSP_MAGNETO_Init+0x54>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	463a      	mov	r2, r7
 800ac32:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ac36:	4798      	blx	r3
  } 

  return ret;  
 800ac38:	79fb      	ldrb	r3, [r7, #7]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	20000028 	.word	0x20000028
 800ac48:	2000160c 	.word	0x2000160c

0800ac4c <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800ac52:	4b0c      	ldr	r3, [pc, #48]	; (800ac84 <BSP_PSENSOR_Init+0x38>)
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	20ba      	movs	r0, #186	; 0xba
 800ac58:	4798      	blx	r3
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2bb1      	cmp	r3, #177	; 0xb1
 800ac5e:	d002      	beq.n	800ac66 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 800ac60:	2301      	movs	r3, #1
 800ac62:	607b      	str	r3, [r7, #4]
 800ac64:	e009      	b.n	800ac7a <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800ac66:	4b08      	ldr	r3, [pc, #32]	; (800ac88 <BSP_PSENSOR_Init+0x3c>)
 800ac68:	4a06      	ldr	r2, [pc, #24]	; (800ac84 <BSP_PSENSOR_Init+0x38>)
 800ac6a:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 800ac6c:	4b06      	ldr	r3, [pc, #24]	; (800ac88 <BSP_PSENSOR_Init+0x3c>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	20ba      	movs	r0, #186	; 0xba
 800ac74:	4798      	blx	r3
    ret = PSENSOR_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800ac7a:	687b      	ldr	r3, [r7, #4]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3708      	adds	r7, #8
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	2000005c 	.word	0x2000005c
 800ac88:	20001610 	.word	0x20001610

0800ac8c <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 800ac90:	4b04      	ldr	r3, [pc, #16]	; (800aca4 <BSP_PSENSOR_ReadPressure+0x18>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	20ba      	movs	r0, #186	; 0xba
 800ac98:	4798      	blx	r3
 800ac9a:	eef0 7a40 	vmov.f32	s15, s0
}
 800ac9e:	eeb0 0a67 	vmov.f32	s0, s15
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	20001610 	.word	0x20001610

0800aca8 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800acb2:	4b09      	ldr	r3, [pc, #36]	; (800acd8 <BSP_TSENSOR_Init+0x30>)
 800acb4:	4a09      	ldr	r2, [pc, #36]	; (800acdc <BSP_TSENSOR_Init+0x34>)
 800acb6:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800acb8:	f7ff fe6c 	bl	800a994 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800acbc:	4b06      	ldr	r3, [pc, #24]	; (800acd8 <BSP_TSENSOR_Init+0x30>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2100      	movs	r1, #0
 800acc4:	20be      	movs	r0, #190	; 0xbe
 800acc6:	4798      	blx	r3

  ret = TSENSOR_OK;
 800acc8:	2300      	movs	r3, #0
 800acca:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800accc:	79fb      	ldrb	r3, [r7, #7]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	20001614 	.word	0x20001614
 800acdc:	20000018 	.word	0x20000018

0800ace0 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800ace0:	b580      	push	{r7, lr}
 800ace2:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800ace4:	4b04      	ldr	r3, [pc, #16]	; (800acf8 <BSP_TSENSOR_ReadTemp+0x18>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	20be      	movs	r0, #190	; 0xbe
 800acec:	4798      	blx	r3
 800acee:	eef0 7a40 	vmov.f32	s15, s0
}
 800acf2:	eeb0 0a67 	vmov.f32	s0, s15
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	20001614 	.word	0x20001614

0800acfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad02:	4b11      	ldr	r3, [pc, #68]	; (800ad48 <HAL_MspInit+0x4c>)
 800ad04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad06:	4a10      	ldr	r2, [pc, #64]	; (800ad48 <HAL_MspInit+0x4c>)
 800ad08:	f043 0301 	orr.w	r3, r3, #1
 800ad0c:	6613      	str	r3, [r2, #96]	; 0x60
 800ad0e:	4b0e      	ldr	r3, [pc, #56]	; (800ad48 <HAL_MspInit+0x4c>)
 800ad10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad12:	f003 0301 	and.w	r3, r3, #1
 800ad16:	607b      	str	r3, [r7, #4]
 800ad18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ad1a:	4b0b      	ldr	r3, [pc, #44]	; (800ad48 <HAL_MspInit+0x4c>)
 800ad1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad1e:	4a0a      	ldr	r2, [pc, #40]	; (800ad48 <HAL_MspInit+0x4c>)
 800ad20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad24:	6593      	str	r3, [r2, #88]	; 0x58
 800ad26:	4b08      	ldr	r3, [pc, #32]	; (800ad48 <HAL_MspInit+0x4c>)
 800ad28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad2e:	603b      	str	r3, [r7, #0]
 800ad30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ad32:	2200      	movs	r2, #0
 800ad34:	210f      	movs	r1, #15
 800ad36:	f06f 0001 	mvn.w	r0, #1
 800ad3a:	f7f6 fc2f 	bl	800159c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ad3e:	bf00      	nop
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	40021000 	.word	0x40021000

0800ad4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b08a      	sub	sp, #40	; 0x28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad54:	f107 0314 	add.w	r3, r7, #20
 800ad58:	2200      	movs	r2, #0
 800ad5a:	601a      	str	r2, [r3, #0]
 800ad5c:	605a      	str	r2, [r3, #4]
 800ad5e:	609a      	str	r2, [r3, #8]
 800ad60:	60da      	str	r2, [r3, #12]
 800ad62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a15      	ldr	r2, [pc, #84]	; (800adc0 <HAL_ADC_MspInit+0x74>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d123      	bne.n	800adb6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800ad6e:	4b15      	ldr	r3, [pc, #84]	; (800adc4 <HAL_ADC_MspInit+0x78>)
 800ad70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad72:	4a14      	ldr	r2, [pc, #80]	; (800adc4 <HAL_ADC_MspInit+0x78>)
 800ad74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ad78:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ad7a:	4b12      	ldr	r3, [pc, #72]	; (800adc4 <HAL_ADC_MspInit+0x78>)
 800ad7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad82:	613b      	str	r3, [r7, #16]
 800ad84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad86:	4b0f      	ldr	r3, [pc, #60]	; (800adc4 <HAL_ADC_MspInit+0x78>)
 800ad88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad8a:	4a0e      	ldr	r2, [pc, #56]	; (800adc4 <HAL_ADC_MspInit+0x78>)
 800ad8c:	f043 0304 	orr.w	r3, r3, #4
 800ad90:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ad92:	4b0c      	ldr	r3, [pc, #48]	; (800adc4 <HAL_ADC_MspInit+0x78>)
 800ad94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad96:	f003 0304 	and.w	r3, r3, #4
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800ada2:	230b      	movs	r3, #11
 800ada4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ada6:	2300      	movs	r3, #0
 800ada8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800adaa:	f107 0314 	add.w	r3, r7, #20
 800adae:	4619      	mov	r1, r3
 800adb0:	4805      	ldr	r0, [pc, #20]	; (800adc8 <HAL_ADC_MspInit+0x7c>)
 800adb2:	f7f6 ffa7 	bl	8001d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800adb6:	bf00      	nop
 800adb8:	3728      	adds	r7, #40	; 0x28
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	50040000 	.word	0x50040000
 800adc4:	40021000 	.word	0x40021000
 800adc8:	48000800 	.word	0x48000800

0800adcc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b08a      	sub	sp, #40	; 0x28
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800add4:	f107 0314 	add.w	r3, r7, #20
 800add8:	2200      	movs	r2, #0
 800adda:	601a      	str	r2, [r3, #0]
 800addc:	605a      	str	r2, [r3, #4]
 800adde:	609a      	str	r2, [r3, #8]
 800ade0:	60da      	str	r2, [r3, #12]
 800ade2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a2f      	ldr	r2, [pc, #188]	; (800aea8 <HAL_DAC_MspInit+0xdc>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d157      	bne.n	800ae9e <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800adee:	4b2f      	ldr	r3, [pc, #188]	; (800aeac <HAL_DAC_MspInit+0xe0>)
 800adf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adf2:	4a2e      	ldr	r2, [pc, #184]	; (800aeac <HAL_DAC_MspInit+0xe0>)
 800adf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800adf8:	6593      	str	r3, [r2, #88]	; 0x58
 800adfa:	4b2c      	ldr	r3, [pc, #176]	; (800aeac <HAL_DAC_MspInit+0xe0>)
 800adfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae02:	613b      	str	r3, [r7, #16]
 800ae04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae06:	4b29      	ldr	r3, [pc, #164]	; (800aeac <HAL_DAC_MspInit+0xe0>)
 800ae08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae0a:	4a28      	ldr	r2, [pc, #160]	; (800aeac <HAL_DAC_MspInit+0xe0>)
 800ae0c:	f043 0301 	orr.w	r3, r3, #1
 800ae10:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae12:	4b26      	ldr	r3, [pc, #152]	; (800aeac <HAL_DAC_MspInit+0xe0>)
 800ae14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae16:	f003 0301 	and.w	r3, r3, #1
 800ae1a:	60fb      	str	r3, [r7, #12]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800ae1e:	2310      	movs	r3, #16
 800ae20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ae22:	2303      	movs	r3, #3
 800ae24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae26:	2300      	movs	r3, #0
 800ae28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae2a:	f107 0314 	add.w	r3, r7, #20
 800ae2e:	4619      	mov	r1, r3
 800ae30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae34:	f7f6 ff66 	bl	8001d04 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800ae38:	4b1d      	ldr	r3, [pc, #116]	; (800aeb0 <HAL_DAC_MspInit+0xe4>)
 800ae3a:	4a1e      	ldr	r2, [pc, #120]	; (800aeb4 <HAL_DAC_MspInit+0xe8>)
 800ae3c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800ae3e:	4b1c      	ldr	r3, [pc, #112]	; (800aeb0 <HAL_DAC_MspInit+0xe4>)
 800ae40:	2206      	movs	r2, #6
 800ae42:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ae44:	4b1a      	ldr	r3, [pc, #104]	; (800aeb0 <HAL_DAC_MspInit+0xe4>)
 800ae46:	2210      	movs	r2, #16
 800ae48:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae4a:	4b19      	ldr	r3, [pc, #100]	; (800aeb0 <HAL_DAC_MspInit+0xe4>)
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800ae50:	4b17      	ldr	r3, [pc, #92]	; (800aeb0 <HAL_DAC_MspInit+0xe4>)
 800ae52:	2280      	movs	r2, #128	; 0x80
 800ae54:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ae56:	4b16      	ldr	r3, [pc, #88]	; (800aeb0 <HAL_DAC_MspInit+0xe4>)
 800ae58:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae5c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ae5e:	4b14      	ldr	r3, [pc, #80]	; (800aeb0 <HAL_DAC_MspInit+0xe4>)
 800ae60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae64:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 800ae66:	4b12      	ldr	r3, [pc, #72]	; (800aeb0 <HAL_DAC_MspInit+0xe4>)
 800ae68:	2200      	movs	r2, #0
 800ae6a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800ae6c:	4b10      	ldr	r3, [pc, #64]	; (800aeb0 <HAL_DAC_MspInit+0xe4>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800ae72:	480f      	ldr	r0, [pc, #60]	; (800aeb0 <HAL_DAC_MspInit+0xe4>)
 800ae74:	f7f6 fd8c 	bl	8001990 <HAL_DMA_Init>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d001      	beq.n	800ae82 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800ae7e:	f7ff fc95 	bl	800a7ac <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4a0a      	ldr	r2, [pc, #40]	; (800aeb0 <HAL_DAC_MspInit+0xe4>)
 800ae86:	609a      	str	r2, [r3, #8]
 800ae88:	4a09      	ldr	r2, [pc, #36]	; (800aeb0 <HAL_DAC_MspInit+0xe4>)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800ae8e:	2200      	movs	r2, #0
 800ae90:	2105      	movs	r1, #5
 800ae92:	2036      	movs	r0, #54	; 0x36
 800ae94:	f7f6 fb82 	bl	800159c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ae98:	2036      	movs	r0, #54	; 0x36
 800ae9a:	f7f6 fb9b 	bl	80015d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800ae9e:	bf00      	nop
 800aea0:	3728      	adds	r7, #40	; 0x28
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	40007400 	.word	0x40007400
 800aeac:	40021000 	.word	0x40021000
 800aeb0:	200016c8 	.word	0x200016c8
 800aeb4:	40020008 	.word	0x40020008

0800aeb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b08a      	sub	sp, #40	; 0x28
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aec0:	f107 0314 	add.w	r3, r7, #20
 800aec4:	2200      	movs	r2, #0
 800aec6:	601a      	str	r2, [r3, #0]
 800aec8:	605a      	str	r2, [r3, #4]
 800aeca:	609a      	str	r2, [r3, #8]
 800aecc:	60da      	str	r2, [r3, #12]
 800aece:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a17      	ldr	r2, [pc, #92]	; (800af34 <HAL_I2C_MspInit+0x7c>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d128      	bne.n	800af2c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aeda:	4b17      	ldr	r3, [pc, #92]	; (800af38 <HAL_I2C_MspInit+0x80>)
 800aedc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aede:	4a16      	ldr	r2, [pc, #88]	; (800af38 <HAL_I2C_MspInit+0x80>)
 800aee0:	f043 0302 	orr.w	r3, r3, #2
 800aee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aee6:	4b14      	ldr	r3, [pc, #80]	; (800af38 <HAL_I2C_MspInit+0x80>)
 800aee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeea:	f003 0302 	and.w	r3, r3, #2
 800aeee:	613b      	str	r3, [r7, #16]
 800aef0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800aef2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800aef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800aef8:	2312      	movs	r3, #18
 800aefa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800aefc:	2301      	movs	r3, #1
 800aefe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af00:	2303      	movs	r3, #3
 800af02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800af04:	2304      	movs	r3, #4
 800af06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af08:	f107 0314 	add.w	r3, r7, #20
 800af0c:	4619      	mov	r1, r3
 800af0e:	480b      	ldr	r0, [pc, #44]	; (800af3c <HAL_I2C_MspInit+0x84>)
 800af10:	f7f6 fef8 	bl	8001d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800af14:	4b08      	ldr	r3, [pc, #32]	; (800af38 <HAL_I2C_MspInit+0x80>)
 800af16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af18:	4a07      	ldr	r2, [pc, #28]	; (800af38 <HAL_I2C_MspInit+0x80>)
 800af1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800af1e:	6593      	str	r3, [r2, #88]	; 0x58
 800af20:	4b05      	ldr	r3, [pc, #20]	; (800af38 <HAL_I2C_MspInit+0x80>)
 800af22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af28:	60fb      	str	r3, [r7, #12]
 800af2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800af2c:	bf00      	nop
 800af2e:	3728      	adds	r7, #40	; 0x28
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	40005800 	.word	0x40005800
 800af38:	40021000 	.word	0x40021000
 800af3c:	48000400 	.word	0x48000400

0800af40 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a0b      	ldr	r2, [pc, #44]	; (800af7c <HAL_I2C_MspDeInit+0x3c>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d10f      	bne.n	800af72 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800af52:	4b0b      	ldr	r3, [pc, #44]	; (800af80 <HAL_I2C_MspDeInit+0x40>)
 800af54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af56:	4a0a      	ldr	r2, [pc, #40]	; (800af80 <HAL_I2C_MspDeInit+0x40>)
 800af58:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800af5c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800af5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800af62:	4808      	ldr	r0, [pc, #32]	; (800af84 <HAL_I2C_MspDeInit+0x44>)
 800af64:	f7f7 f860 	bl	8002028 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800af68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800af6c:	4805      	ldr	r0, [pc, #20]	; (800af84 <HAL_I2C_MspDeInit+0x44>)
 800af6e:	f7f7 f85b 	bl	8002028 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800af72:	bf00      	nop
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	40005800 	.word	0x40005800
 800af80:	40021000 	.word	0x40021000
 800af84:	48000400 	.word	0x48000400

0800af88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af98:	d113      	bne.n	800afc2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800af9a:	4b0c      	ldr	r3, [pc, #48]	; (800afcc <HAL_TIM_Base_MspInit+0x44>)
 800af9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af9e:	4a0b      	ldr	r2, [pc, #44]	; (800afcc <HAL_TIM_Base_MspInit+0x44>)
 800afa0:	f043 0301 	orr.w	r3, r3, #1
 800afa4:	6593      	str	r3, [r2, #88]	; 0x58
 800afa6:	4b09      	ldr	r3, [pc, #36]	; (800afcc <HAL_TIM_Base_MspInit+0x44>)
 800afa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afaa:	f003 0301 	and.w	r3, r3, #1
 800afae:	60fb      	str	r3, [r7, #12]
 800afb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800afb2:	2200      	movs	r2, #0
 800afb4:	2105      	movs	r1, #5
 800afb6:	201c      	movs	r0, #28
 800afb8:	f7f6 faf0 	bl	800159c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800afbc:	201c      	movs	r0, #28
 800afbe:	f7f6 fb09 	bl	80015d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800afc2:	bf00      	nop
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	40021000 	.word	0x40021000

0800afd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b08a      	sub	sp, #40	; 0x28
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afd8:	f107 0314 	add.w	r3, r7, #20
 800afdc:	2200      	movs	r2, #0
 800afde:	601a      	str	r2, [r3, #0]
 800afe0:	605a      	str	r2, [r3, #4]
 800afe2:	609a      	str	r2, [r3, #8]
 800afe4:	60da      	str	r2, [r3, #12]
 800afe6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a17      	ldr	r2, [pc, #92]	; (800b04c <HAL_UART_MspInit+0x7c>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d127      	bne.n	800b042 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800aff2:	4b17      	ldr	r3, [pc, #92]	; (800b050 <HAL_UART_MspInit+0x80>)
 800aff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aff6:	4a16      	ldr	r2, [pc, #88]	; (800b050 <HAL_UART_MspInit+0x80>)
 800aff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800affc:	6613      	str	r3, [r2, #96]	; 0x60
 800affe:	4b14      	ldr	r3, [pc, #80]	; (800b050 <HAL_UART_MspInit+0x80>)
 800b000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b006:	613b      	str	r3, [r7, #16]
 800b008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b00a:	4b11      	ldr	r3, [pc, #68]	; (800b050 <HAL_UART_MspInit+0x80>)
 800b00c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b00e:	4a10      	ldr	r2, [pc, #64]	; (800b050 <HAL_UART_MspInit+0x80>)
 800b010:	f043 0302 	orr.w	r3, r3, #2
 800b014:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b016:	4b0e      	ldr	r3, [pc, #56]	; (800b050 <HAL_UART_MspInit+0x80>)
 800b018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b01a:	f003 0302 	and.w	r3, r3, #2
 800b01e:	60fb      	str	r3, [r7, #12]
 800b020:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b022:	23c0      	movs	r3, #192	; 0xc0
 800b024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b026:	2302      	movs	r3, #2
 800b028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b02a:	2300      	movs	r3, #0
 800b02c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b02e:	2303      	movs	r3, #3
 800b030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b032:	2307      	movs	r3, #7
 800b034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b036:	f107 0314 	add.w	r3, r7, #20
 800b03a:	4619      	mov	r1, r3
 800b03c:	4805      	ldr	r0, [pc, #20]	; (800b054 <HAL_UART_MspInit+0x84>)
 800b03e:	f7f6 fe61 	bl	8001d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b042:	bf00      	nop
 800b044:	3728      	adds	r7, #40	; 0x28
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	40013800 	.word	0x40013800
 800b050:	40021000 	.word	0x40021000
 800b054:	48000400 	.word	0x48000400

0800b058 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b08c      	sub	sp, #48	; 0x30
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b060:	2300      	movs	r3, #0
 800b062:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b064:	2300      	movs	r3, #0
 800b066:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800b068:	2200      	movs	r2, #0
 800b06a:	6879      	ldr	r1, [r7, #4]
 800b06c:	2036      	movs	r0, #54	; 0x36
 800b06e:	f7f6 fa95 	bl	800159c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b072:	2036      	movs	r0, #54	; 0x36
 800b074:	f7f6 faae 	bl	80015d4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b078:	4b1e      	ldr	r3, [pc, #120]	; (800b0f4 <HAL_InitTick+0x9c>)
 800b07a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b07c:	4a1d      	ldr	r2, [pc, #116]	; (800b0f4 <HAL_InitTick+0x9c>)
 800b07e:	f043 0310 	orr.w	r3, r3, #16
 800b082:	6593      	str	r3, [r2, #88]	; 0x58
 800b084:	4b1b      	ldr	r3, [pc, #108]	; (800b0f4 <HAL_InitTick+0x9c>)
 800b086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b088:	f003 0310 	and.w	r3, r3, #16
 800b08c:	60fb      	str	r3, [r7, #12]
 800b08e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b090:	f107 0210 	add.w	r2, r7, #16
 800b094:	f107 0314 	add.w	r3, r7, #20
 800b098:	4611      	mov	r1, r2
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7f8 fd78 	bl	8003b90 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800b0a0:	f7f8 fd4a 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 800b0a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a8:	4a13      	ldr	r2, [pc, #76]	; (800b0f8 <HAL_InitTick+0xa0>)
 800b0aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ae:	0c9b      	lsrs	r3, r3, #18
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b0b4:	4b11      	ldr	r3, [pc, #68]	; (800b0fc <HAL_InitTick+0xa4>)
 800b0b6:	4a12      	ldr	r2, [pc, #72]	; (800b100 <HAL_InitTick+0xa8>)
 800b0b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b0ba:	4b10      	ldr	r3, [pc, #64]	; (800b0fc <HAL_InitTick+0xa4>)
 800b0bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b0c0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b0c2:	4a0e      	ldr	r2, [pc, #56]	; (800b0fc <HAL_InitTick+0xa4>)
 800b0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b0c8:	4b0c      	ldr	r3, [pc, #48]	; (800b0fc <HAL_InitTick+0xa4>)
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b0ce:	4b0b      	ldr	r3, [pc, #44]	; (800b0fc <HAL_InitTick+0xa4>)
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b0d4:	4809      	ldr	r0, [pc, #36]	; (800b0fc <HAL_InitTick+0xa4>)
 800b0d6:	f7f9 fb57 	bl	8004788 <HAL_TIM_Base_Init>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d104      	bne.n	800b0ea <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b0e0:	4806      	ldr	r0, [pc, #24]	; (800b0fc <HAL_InitTick+0xa4>)
 800b0e2:	f7f9 fba9 	bl	8004838 <HAL_TIM_Base_Start_IT>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	e000      	b.n	800b0ec <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3730      	adds	r7, #48	; 0x30
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	40021000 	.word	0x40021000
 800b0f8:	431bde83 	.word	0x431bde83
 800b0fc:	200019d0 	.word	0x200019d0
 800b100:	40001000 	.word	0x40001000

0800b104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b104:	b480      	push	{r7}
 800b106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b108:	e7fe      	b.n	800b108 <NMI_Handler+0x4>

0800b10a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b10a:	b480      	push	{r7}
 800b10c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b10e:	e7fe      	b.n	800b10e <HardFault_Handler+0x4>

0800b110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b110:	b480      	push	{r7}
 800b112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b114:	e7fe      	b.n	800b114 <MemManage_Handler+0x4>

0800b116 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b116:	b480      	push	{r7}
 800b118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b11a:	e7fe      	b.n	800b11a <BusFault_Handler+0x4>

0800b11c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b11c:	b480      	push	{r7}
 800b11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b120:	e7fe      	b.n	800b120 <UsageFault_Handler+0x4>

0800b122 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b122:	b480      	push	{r7}
 800b124:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b126:	bf00      	nop
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800b134:	4802      	ldr	r0, [pc, #8]	; (800b140 <DMA1_Channel1_IRQHandler+0x10>)
 800b136:	f7f6 fcd3 	bl	8001ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800b13a:	bf00      	nop
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	200016c8 	.word	0x200016c8

0800b144 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b148:	4802      	ldr	r0, [pc, #8]	; (800b154 <TIM2_IRQHandler+0x10>)
 800b14a:	f7f9 fbe5 	bl	8004918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b14e:	bf00      	nop
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	2000189c 	.word	0x2000189c

0800b158 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800b15c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b160:	f7f7 f886 	bl	8002270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b164:	bf00      	nop
 800b166:	bd80      	pop	{r7, pc}

0800b168 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b16c:	4803      	ldr	r0, [pc, #12]	; (800b17c <TIM6_DAC_IRQHandler+0x14>)
 800b16e:	f7f9 fbd3 	bl	8004918 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800b172:	4803      	ldr	r0, [pc, #12]	; (800b180 <TIM6_DAC_IRQHandler+0x18>)
 800b174:	f7f6 fa5e 	bl	8001634 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b178:	bf00      	nop
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	200019d0 	.word	0x200019d0
 800b180:	20001668 	.word	0x20001668

0800b184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b086      	sub	sp, #24
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b18c:	4a14      	ldr	r2, [pc, #80]	; (800b1e0 <_sbrk+0x5c>)
 800b18e:	4b15      	ldr	r3, [pc, #84]	; (800b1e4 <_sbrk+0x60>)
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b198:	4b13      	ldr	r3, [pc, #76]	; (800b1e8 <_sbrk+0x64>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d102      	bne.n	800b1a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b1a0:	4b11      	ldr	r3, [pc, #68]	; (800b1e8 <_sbrk+0x64>)
 800b1a2:	4a12      	ldr	r2, [pc, #72]	; (800b1ec <_sbrk+0x68>)
 800b1a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b1a6:	4b10      	ldr	r3, [pc, #64]	; (800b1e8 <_sbrk+0x64>)
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	693a      	ldr	r2, [r7, #16]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d207      	bcs.n	800b1c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b1b4:	f000 f87c 	bl	800b2b0 <__errno>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	230c      	movs	r3, #12
 800b1bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800b1be:	f04f 33ff 	mov.w	r3, #4294967295
 800b1c2:	e009      	b.n	800b1d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b1c4:	4b08      	ldr	r3, [pc, #32]	; (800b1e8 <_sbrk+0x64>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b1ca:	4b07      	ldr	r3, [pc, #28]	; (800b1e8 <_sbrk+0x64>)
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	4a05      	ldr	r2, [pc, #20]	; (800b1e8 <_sbrk+0x64>)
 800b1d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3718      	adds	r7, #24
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	200a0000 	.word	0x200a0000
 800b1e4:	00000400 	.word	0x00000400
 800b1e8:	20001618 	.word	0x20001618
 800b1ec:	20001a20 	.word	0x20001a20

0800b1f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b1f4:	4b17      	ldr	r3, [pc, #92]	; (800b254 <SystemInit+0x64>)
 800b1f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1fa:	4a16      	ldr	r2, [pc, #88]	; (800b254 <SystemInit+0x64>)
 800b1fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800b204:	4b14      	ldr	r3, [pc, #80]	; (800b258 <SystemInit+0x68>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a13      	ldr	r2, [pc, #76]	; (800b258 <SystemInit+0x68>)
 800b20a:	f043 0301 	orr.w	r3, r3, #1
 800b20e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800b210:	4b11      	ldr	r3, [pc, #68]	; (800b258 <SystemInit+0x68>)
 800b212:	2200      	movs	r2, #0
 800b214:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800b216:	4b10      	ldr	r3, [pc, #64]	; (800b258 <SystemInit+0x68>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a0f      	ldr	r2, [pc, #60]	; (800b258 <SystemInit+0x68>)
 800b21c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800b220:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800b224:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800b226:	4b0c      	ldr	r3, [pc, #48]	; (800b258 <SystemInit+0x68>)
 800b228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b22c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b22e:	4b0a      	ldr	r3, [pc, #40]	; (800b258 <SystemInit+0x68>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a09      	ldr	r2, [pc, #36]	; (800b258 <SystemInit+0x68>)
 800b234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b238:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800b23a:	4b07      	ldr	r3, [pc, #28]	; (800b258 <SystemInit+0x68>)
 800b23c:	2200      	movs	r2, #0
 800b23e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b240:	4b04      	ldr	r3, [pc, #16]	; (800b254 <SystemInit+0x64>)
 800b242:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b246:	609a      	str	r2, [r3, #8]
#endif
}
 800b248:	bf00      	nop
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	e000ed00 	.word	0xe000ed00
 800b258:	40021000 	.word	0x40021000

0800b25c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800b25c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b294 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800b260:	f7ff ffc6 	bl	800b1f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800b264:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800b266:	e003      	b.n	800b270 <LoopCopyDataInit>

0800b268 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800b268:	4b0b      	ldr	r3, [pc, #44]	; (800b298 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800b26a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800b26c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800b26e:	3104      	adds	r1, #4

0800b270 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800b270:	480a      	ldr	r0, [pc, #40]	; (800b29c <LoopForever+0xa>)
	ldr	r3, =_edata
 800b272:	4b0b      	ldr	r3, [pc, #44]	; (800b2a0 <LoopForever+0xe>)
	adds	r2, r0, r1
 800b274:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800b276:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800b278:	d3f6      	bcc.n	800b268 <CopyDataInit>
	ldr	r2, =_sbss
 800b27a:	4a0a      	ldr	r2, [pc, #40]	; (800b2a4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800b27c:	e002      	b.n	800b284 <LoopFillZerobss>

0800b27e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800b27e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800b280:	f842 3b04 	str.w	r3, [r2], #4

0800b284 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800b284:	4b08      	ldr	r3, [pc, #32]	; (800b2a8 <LoopForever+0x16>)
	cmp	r2, r3
 800b286:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800b288:	d3f9      	bcc.n	800b27e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b28a:	f000 f817 	bl	800b2bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b28e:	f7fe fe57 	bl	8009f40 <main>

0800b292 <LoopForever>:

LoopForever:
    b LoopForever
 800b292:	e7fe      	b.n	800b292 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800b294:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800b298:	0800bca8 	.word	0x0800bca8
	ldr	r0, =_sdata
 800b29c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800b2a0:	20000138 	.word	0x20000138
	ldr	r2, =_sbss
 800b2a4:	20000138 	.word	0x20000138
	ldr	r3, = _ebss
 800b2a8:	20001a20 	.word	0x20001a20

0800b2ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b2ac:	e7fe      	b.n	800b2ac <ADC1_IRQHandler>
	...

0800b2b0 <__errno>:
 800b2b0:	4b01      	ldr	r3, [pc, #4]	; (800b2b8 <__errno+0x8>)
 800b2b2:	6818      	ldr	r0, [r3, #0]
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	200000d4 	.word	0x200000d4

0800b2bc <__libc_init_array>:
 800b2bc:	b570      	push	{r4, r5, r6, lr}
 800b2be:	4e0d      	ldr	r6, [pc, #52]	; (800b2f4 <__libc_init_array+0x38>)
 800b2c0:	4c0d      	ldr	r4, [pc, #52]	; (800b2f8 <__libc_init_array+0x3c>)
 800b2c2:	1ba4      	subs	r4, r4, r6
 800b2c4:	10a4      	asrs	r4, r4, #2
 800b2c6:	2500      	movs	r5, #0
 800b2c8:	42a5      	cmp	r5, r4
 800b2ca:	d109      	bne.n	800b2e0 <__libc_init_array+0x24>
 800b2cc:	4e0b      	ldr	r6, [pc, #44]	; (800b2fc <__libc_init_array+0x40>)
 800b2ce:	4c0c      	ldr	r4, [pc, #48]	; (800b300 <__libc_init_array+0x44>)
 800b2d0:	f000 fc28 	bl	800bb24 <_init>
 800b2d4:	1ba4      	subs	r4, r4, r6
 800b2d6:	10a4      	asrs	r4, r4, #2
 800b2d8:	2500      	movs	r5, #0
 800b2da:	42a5      	cmp	r5, r4
 800b2dc:	d105      	bne.n	800b2ea <__libc_init_array+0x2e>
 800b2de:	bd70      	pop	{r4, r5, r6, pc}
 800b2e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2e4:	4798      	blx	r3
 800b2e6:	3501      	adds	r5, #1
 800b2e8:	e7ee      	b.n	800b2c8 <__libc_init_array+0xc>
 800b2ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2ee:	4798      	blx	r3
 800b2f0:	3501      	adds	r5, #1
 800b2f2:	e7f2      	b.n	800b2da <__libc_init_array+0x1e>
 800b2f4:	0800bca0 	.word	0x0800bca0
 800b2f8:	0800bca0 	.word	0x0800bca0
 800b2fc:	0800bca0 	.word	0x0800bca0
 800b300:	0800bca4 	.word	0x0800bca4

0800b304 <memcpy>:
 800b304:	b510      	push	{r4, lr}
 800b306:	1e43      	subs	r3, r0, #1
 800b308:	440a      	add	r2, r1
 800b30a:	4291      	cmp	r1, r2
 800b30c:	d100      	bne.n	800b310 <memcpy+0xc>
 800b30e:	bd10      	pop	{r4, pc}
 800b310:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b314:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b318:	e7f7      	b.n	800b30a <memcpy+0x6>

0800b31a <memset>:
 800b31a:	4402      	add	r2, r0
 800b31c:	4603      	mov	r3, r0
 800b31e:	4293      	cmp	r3, r2
 800b320:	d100      	bne.n	800b324 <memset+0xa>
 800b322:	4770      	bx	lr
 800b324:	f803 1b01 	strb.w	r1, [r3], #1
 800b328:	e7f9      	b.n	800b31e <memset+0x4>
	...

0800b32c <siprintf>:
 800b32c:	b40e      	push	{r1, r2, r3}
 800b32e:	b500      	push	{lr}
 800b330:	b09c      	sub	sp, #112	; 0x70
 800b332:	ab1d      	add	r3, sp, #116	; 0x74
 800b334:	9002      	str	r0, [sp, #8]
 800b336:	9006      	str	r0, [sp, #24]
 800b338:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b33c:	4809      	ldr	r0, [pc, #36]	; (800b364 <siprintf+0x38>)
 800b33e:	9107      	str	r1, [sp, #28]
 800b340:	9104      	str	r1, [sp, #16]
 800b342:	4909      	ldr	r1, [pc, #36]	; (800b368 <siprintf+0x3c>)
 800b344:	f853 2b04 	ldr.w	r2, [r3], #4
 800b348:	9105      	str	r1, [sp, #20]
 800b34a:	6800      	ldr	r0, [r0, #0]
 800b34c:	9301      	str	r3, [sp, #4]
 800b34e:	a902      	add	r1, sp, #8
 800b350:	f000 f866 	bl	800b420 <_svfiprintf_r>
 800b354:	9b02      	ldr	r3, [sp, #8]
 800b356:	2200      	movs	r2, #0
 800b358:	701a      	strb	r2, [r3, #0]
 800b35a:	b01c      	add	sp, #112	; 0x70
 800b35c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b360:	b003      	add	sp, #12
 800b362:	4770      	bx	lr
 800b364:	200000d4 	.word	0x200000d4
 800b368:	ffff0208 	.word	0xffff0208

0800b36c <__ssputs_r>:
 800b36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b370:	688e      	ldr	r6, [r1, #8]
 800b372:	429e      	cmp	r6, r3
 800b374:	4682      	mov	sl, r0
 800b376:	460c      	mov	r4, r1
 800b378:	4690      	mov	r8, r2
 800b37a:	4699      	mov	r9, r3
 800b37c:	d837      	bhi.n	800b3ee <__ssputs_r+0x82>
 800b37e:	898a      	ldrh	r2, [r1, #12]
 800b380:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b384:	d031      	beq.n	800b3ea <__ssputs_r+0x7e>
 800b386:	6825      	ldr	r5, [r4, #0]
 800b388:	6909      	ldr	r1, [r1, #16]
 800b38a:	1a6f      	subs	r7, r5, r1
 800b38c:	6965      	ldr	r5, [r4, #20]
 800b38e:	2302      	movs	r3, #2
 800b390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b394:	fb95 f5f3 	sdiv	r5, r5, r3
 800b398:	f109 0301 	add.w	r3, r9, #1
 800b39c:	443b      	add	r3, r7
 800b39e:	429d      	cmp	r5, r3
 800b3a0:	bf38      	it	cc
 800b3a2:	461d      	movcc	r5, r3
 800b3a4:	0553      	lsls	r3, r2, #21
 800b3a6:	d530      	bpl.n	800b40a <__ssputs_r+0x9e>
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	f000 fb21 	bl	800b9f0 <_malloc_r>
 800b3ae:	4606      	mov	r6, r0
 800b3b0:	b950      	cbnz	r0, 800b3c8 <__ssputs_r+0x5c>
 800b3b2:	230c      	movs	r3, #12
 800b3b4:	f8ca 3000 	str.w	r3, [sl]
 800b3b8:	89a3      	ldrh	r3, [r4, #12]
 800b3ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3be:	81a3      	strh	r3, [r4, #12]
 800b3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3c8:	463a      	mov	r2, r7
 800b3ca:	6921      	ldr	r1, [r4, #16]
 800b3cc:	f7ff ff9a 	bl	800b304 <memcpy>
 800b3d0:	89a3      	ldrh	r3, [r4, #12]
 800b3d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3da:	81a3      	strh	r3, [r4, #12]
 800b3dc:	6126      	str	r6, [r4, #16]
 800b3de:	6165      	str	r5, [r4, #20]
 800b3e0:	443e      	add	r6, r7
 800b3e2:	1bed      	subs	r5, r5, r7
 800b3e4:	6026      	str	r6, [r4, #0]
 800b3e6:	60a5      	str	r5, [r4, #8]
 800b3e8:	464e      	mov	r6, r9
 800b3ea:	454e      	cmp	r6, r9
 800b3ec:	d900      	bls.n	800b3f0 <__ssputs_r+0x84>
 800b3ee:	464e      	mov	r6, r9
 800b3f0:	4632      	mov	r2, r6
 800b3f2:	4641      	mov	r1, r8
 800b3f4:	6820      	ldr	r0, [r4, #0]
 800b3f6:	f000 fa93 	bl	800b920 <memmove>
 800b3fa:	68a3      	ldr	r3, [r4, #8]
 800b3fc:	1b9b      	subs	r3, r3, r6
 800b3fe:	60a3      	str	r3, [r4, #8]
 800b400:	6823      	ldr	r3, [r4, #0]
 800b402:	441e      	add	r6, r3
 800b404:	6026      	str	r6, [r4, #0]
 800b406:	2000      	movs	r0, #0
 800b408:	e7dc      	b.n	800b3c4 <__ssputs_r+0x58>
 800b40a:	462a      	mov	r2, r5
 800b40c:	f000 fb4a 	bl	800baa4 <_realloc_r>
 800b410:	4606      	mov	r6, r0
 800b412:	2800      	cmp	r0, #0
 800b414:	d1e2      	bne.n	800b3dc <__ssputs_r+0x70>
 800b416:	6921      	ldr	r1, [r4, #16]
 800b418:	4650      	mov	r0, sl
 800b41a:	f000 fa9b 	bl	800b954 <_free_r>
 800b41e:	e7c8      	b.n	800b3b2 <__ssputs_r+0x46>

0800b420 <_svfiprintf_r>:
 800b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	461d      	mov	r5, r3
 800b426:	898b      	ldrh	r3, [r1, #12]
 800b428:	061f      	lsls	r7, r3, #24
 800b42a:	b09d      	sub	sp, #116	; 0x74
 800b42c:	4680      	mov	r8, r0
 800b42e:	460c      	mov	r4, r1
 800b430:	4616      	mov	r6, r2
 800b432:	d50f      	bpl.n	800b454 <_svfiprintf_r+0x34>
 800b434:	690b      	ldr	r3, [r1, #16]
 800b436:	b96b      	cbnz	r3, 800b454 <_svfiprintf_r+0x34>
 800b438:	2140      	movs	r1, #64	; 0x40
 800b43a:	f000 fad9 	bl	800b9f0 <_malloc_r>
 800b43e:	6020      	str	r0, [r4, #0]
 800b440:	6120      	str	r0, [r4, #16]
 800b442:	b928      	cbnz	r0, 800b450 <_svfiprintf_r+0x30>
 800b444:	230c      	movs	r3, #12
 800b446:	f8c8 3000 	str.w	r3, [r8]
 800b44a:	f04f 30ff 	mov.w	r0, #4294967295
 800b44e:	e0c8      	b.n	800b5e2 <_svfiprintf_r+0x1c2>
 800b450:	2340      	movs	r3, #64	; 0x40
 800b452:	6163      	str	r3, [r4, #20]
 800b454:	2300      	movs	r3, #0
 800b456:	9309      	str	r3, [sp, #36]	; 0x24
 800b458:	2320      	movs	r3, #32
 800b45a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b45e:	2330      	movs	r3, #48	; 0x30
 800b460:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b464:	9503      	str	r5, [sp, #12]
 800b466:	f04f 0b01 	mov.w	fp, #1
 800b46a:	4637      	mov	r7, r6
 800b46c:	463d      	mov	r5, r7
 800b46e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b472:	b10b      	cbz	r3, 800b478 <_svfiprintf_r+0x58>
 800b474:	2b25      	cmp	r3, #37	; 0x25
 800b476:	d13e      	bne.n	800b4f6 <_svfiprintf_r+0xd6>
 800b478:	ebb7 0a06 	subs.w	sl, r7, r6
 800b47c:	d00b      	beq.n	800b496 <_svfiprintf_r+0x76>
 800b47e:	4653      	mov	r3, sl
 800b480:	4632      	mov	r2, r6
 800b482:	4621      	mov	r1, r4
 800b484:	4640      	mov	r0, r8
 800b486:	f7ff ff71 	bl	800b36c <__ssputs_r>
 800b48a:	3001      	adds	r0, #1
 800b48c:	f000 80a4 	beq.w	800b5d8 <_svfiprintf_r+0x1b8>
 800b490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b492:	4453      	add	r3, sl
 800b494:	9309      	str	r3, [sp, #36]	; 0x24
 800b496:	783b      	ldrb	r3, [r7, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f000 809d 	beq.w	800b5d8 <_svfiprintf_r+0x1b8>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4a8:	9304      	str	r3, [sp, #16]
 800b4aa:	9307      	str	r3, [sp, #28]
 800b4ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4b0:	931a      	str	r3, [sp, #104]	; 0x68
 800b4b2:	462f      	mov	r7, r5
 800b4b4:	2205      	movs	r2, #5
 800b4b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b4ba:	4850      	ldr	r0, [pc, #320]	; (800b5fc <_svfiprintf_r+0x1dc>)
 800b4bc:	f7f4 fea8 	bl	8000210 <memchr>
 800b4c0:	9b04      	ldr	r3, [sp, #16]
 800b4c2:	b9d0      	cbnz	r0, 800b4fa <_svfiprintf_r+0xda>
 800b4c4:	06d9      	lsls	r1, r3, #27
 800b4c6:	bf44      	itt	mi
 800b4c8:	2220      	movmi	r2, #32
 800b4ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b4ce:	071a      	lsls	r2, r3, #28
 800b4d0:	bf44      	itt	mi
 800b4d2:	222b      	movmi	r2, #43	; 0x2b
 800b4d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b4d8:	782a      	ldrb	r2, [r5, #0]
 800b4da:	2a2a      	cmp	r2, #42	; 0x2a
 800b4dc:	d015      	beq.n	800b50a <_svfiprintf_r+0xea>
 800b4de:	9a07      	ldr	r2, [sp, #28]
 800b4e0:	462f      	mov	r7, r5
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	250a      	movs	r5, #10
 800b4e6:	4639      	mov	r1, r7
 800b4e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ec:	3b30      	subs	r3, #48	; 0x30
 800b4ee:	2b09      	cmp	r3, #9
 800b4f0:	d94d      	bls.n	800b58e <_svfiprintf_r+0x16e>
 800b4f2:	b1b8      	cbz	r0, 800b524 <_svfiprintf_r+0x104>
 800b4f4:	e00f      	b.n	800b516 <_svfiprintf_r+0xf6>
 800b4f6:	462f      	mov	r7, r5
 800b4f8:	e7b8      	b.n	800b46c <_svfiprintf_r+0x4c>
 800b4fa:	4a40      	ldr	r2, [pc, #256]	; (800b5fc <_svfiprintf_r+0x1dc>)
 800b4fc:	1a80      	subs	r0, r0, r2
 800b4fe:	fa0b f000 	lsl.w	r0, fp, r0
 800b502:	4318      	orrs	r0, r3
 800b504:	9004      	str	r0, [sp, #16]
 800b506:	463d      	mov	r5, r7
 800b508:	e7d3      	b.n	800b4b2 <_svfiprintf_r+0x92>
 800b50a:	9a03      	ldr	r2, [sp, #12]
 800b50c:	1d11      	adds	r1, r2, #4
 800b50e:	6812      	ldr	r2, [r2, #0]
 800b510:	9103      	str	r1, [sp, #12]
 800b512:	2a00      	cmp	r2, #0
 800b514:	db01      	blt.n	800b51a <_svfiprintf_r+0xfa>
 800b516:	9207      	str	r2, [sp, #28]
 800b518:	e004      	b.n	800b524 <_svfiprintf_r+0x104>
 800b51a:	4252      	negs	r2, r2
 800b51c:	f043 0302 	orr.w	r3, r3, #2
 800b520:	9207      	str	r2, [sp, #28]
 800b522:	9304      	str	r3, [sp, #16]
 800b524:	783b      	ldrb	r3, [r7, #0]
 800b526:	2b2e      	cmp	r3, #46	; 0x2e
 800b528:	d10c      	bne.n	800b544 <_svfiprintf_r+0x124>
 800b52a:	787b      	ldrb	r3, [r7, #1]
 800b52c:	2b2a      	cmp	r3, #42	; 0x2a
 800b52e:	d133      	bne.n	800b598 <_svfiprintf_r+0x178>
 800b530:	9b03      	ldr	r3, [sp, #12]
 800b532:	1d1a      	adds	r2, r3, #4
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	9203      	str	r2, [sp, #12]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	bfb8      	it	lt
 800b53c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b540:	3702      	adds	r7, #2
 800b542:	9305      	str	r3, [sp, #20]
 800b544:	4d2e      	ldr	r5, [pc, #184]	; (800b600 <_svfiprintf_r+0x1e0>)
 800b546:	7839      	ldrb	r1, [r7, #0]
 800b548:	2203      	movs	r2, #3
 800b54a:	4628      	mov	r0, r5
 800b54c:	f7f4 fe60 	bl	8000210 <memchr>
 800b550:	b138      	cbz	r0, 800b562 <_svfiprintf_r+0x142>
 800b552:	2340      	movs	r3, #64	; 0x40
 800b554:	1b40      	subs	r0, r0, r5
 800b556:	fa03 f000 	lsl.w	r0, r3, r0
 800b55a:	9b04      	ldr	r3, [sp, #16]
 800b55c:	4303      	orrs	r3, r0
 800b55e:	3701      	adds	r7, #1
 800b560:	9304      	str	r3, [sp, #16]
 800b562:	7839      	ldrb	r1, [r7, #0]
 800b564:	4827      	ldr	r0, [pc, #156]	; (800b604 <_svfiprintf_r+0x1e4>)
 800b566:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b56a:	2206      	movs	r2, #6
 800b56c:	1c7e      	adds	r6, r7, #1
 800b56e:	f7f4 fe4f 	bl	8000210 <memchr>
 800b572:	2800      	cmp	r0, #0
 800b574:	d038      	beq.n	800b5e8 <_svfiprintf_r+0x1c8>
 800b576:	4b24      	ldr	r3, [pc, #144]	; (800b608 <_svfiprintf_r+0x1e8>)
 800b578:	bb13      	cbnz	r3, 800b5c0 <_svfiprintf_r+0x1a0>
 800b57a:	9b03      	ldr	r3, [sp, #12]
 800b57c:	3307      	adds	r3, #7
 800b57e:	f023 0307 	bic.w	r3, r3, #7
 800b582:	3308      	adds	r3, #8
 800b584:	9303      	str	r3, [sp, #12]
 800b586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b588:	444b      	add	r3, r9
 800b58a:	9309      	str	r3, [sp, #36]	; 0x24
 800b58c:	e76d      	b.n	800b46a <_svfiprintf_r+0x4a>
 800b58e:	fb05 3202 	mla	r2, r5, r2, r3
 800b592:	2001      	movs	r0, #1
 800b594:	460f      	mov	r7, r1
 800b596:	e7a6      	b.n	800b4e6 <_svfiprintf_r+0xc6>
 800b598:	2300      	movs	r3, #0
 800b59a:	3701      	adds	r7, #1
 800b59c:	9305      	str	r3, [sp, #20]
 800b59e:	4619      	mov	r1, r3
 800b5a0:	250a      	movs	r5, #10
 800b5a2:	4638      	mov	r0, r7
 800b5a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5a8:	3a30      	subs	r2, #48	; 0x30
 800b5aa:	2a09      	cmp	r2, #9
 800b5ac:	d903      	bls.n	800b5b6 <_svfiprintf_r+0x196>
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d0c8      	beq.n	800b544 <_svfiprintf_r+0x124>
 800b5b2:	9105      	str	r1, [sp, #20]
 800b5b4:	e7c6      	b.n	800b544 <_svfiprintf_r+0x124>
 800b5b6:	fb05 2101 	mla	r1, r5, r1, r2
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	4607      	mov	r7, r0
 800b5be:	e7f0      	b.n	800b5a2 <_svfiprintf_r+0x182>
 800b5c0:	ab03      	add	r3, sp, #12
 800b5c2:	9300      	str	r3, [sp, #0]
 800b5c4:	4622      	mov	r2, r4
 800b5c6:	4b11      	ldr	r3, [pc, #68]	; (800b60c <_svfiprintf_r+0x1ec>)
 800b5c8:	a904      	add	r1, sp, #16
 800b5ca:	4640      	mov	r0, r8
 800b5cc:	f3af 8000 	nop.w
 800b5d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b5d4:	4681      	mov	r9, r0
 800b5d6:	d1d6      	bne.n	800b586 <_svfiprintf_r+0x166>
 800b5d8:	89a3      	ldrh	r3, [r4, #12]
 800b5da:	065b      	lsls	r3, r3, #25
 800b5dc:	f53f af35 	bmi.w	800b44a <_svfiprintf_r+0x2a>
 800b5e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5e2:	b01d      	add	sp, #116	; 0x74
 800b5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e8:	ab03      	add	r3, sp, #12
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	4622      	mov	r2, r4
 800b5ee:	4b07      	ldr	r3, [pc, #28]	; (800b60c <_svfiprintf_r+0x1ec>)
 800b5f0:	a904      	add	r1, sp, #16
 800b5f2:	4640      	mov	r0, r8
 800b5f4:	f000 f882 	bl	800b6fc <_printf_i>
 800b5f8:	e7ea      	b.n	800b5d0 <_svfiprintf_r+0x1b0>
 800b5fa:	bf00      	nop
 800b5fc:	0800bc64 	.word	0x0800bc64
 800b600:	0800bc6a 	.word	0x0800bc6a
 800b604:	0800bc6e 	.word	0x0800bc6e
 800b608:	00000000 	.word	0x00000000
 800b60c:	0800b36d 	.word	0x0800b36d

0800b610 <_printf_common>:
 800b610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b614:	4691      	mov	r9, r2
 800b616:	461f      	mov	r7, r3
 800b618:	688a      	ldr	r2, [r1, #8]
 800b61a:	690b      	ldr	r3, [r1, #16]
 800b61c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b620:	4293      	cmp	r3, r2
 800b622:	bfb8      	it	lt
 800b624:	4613      	movlt	r3, r2
 800b626:	f8c9 3000 	str.w	r3, [r9]
 800b62a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b62e:	4606      	mov	r6, r0
 800b630:	460c      	mov	r4, r1
 800b632:	b112      	cbz	r2, 800b63a <_printf_common+0x2a>
 800b634:	3301      	adds	r3, #1
 800b636:	f8c9 3000 	str.w	r3, [r9]
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	0699      	lsls	r1, r3, #26
 800b63e:	bf42      	ittt	mi
 800b640:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b644:	3302      	addmi	r3, #2
 800b646:	f8c9 3000 	strmi.w	r3, [r9]
 800b64a:	6825      	ldr	r5, [r4, #0]
 800b64c:	f015 0506 	ands.w	r5, r5, #6
 800b650:	d107      	bne.n	800b662 <_printf_common+0x52>
 800b652:	f104 0a19 	add.w	sl, r4, #25
 800b656:	68e3      	ldr	r3, [r4, #12]
 800b658:	f8d9 2000 	ldr.w	r2, [r9]
 800b65c:	1a9b      	subs	r3, r3, r2
 800b65e:	42ab      	cmp	r3, r5
 800b660:	dc28      	bgt.n	800b6b4 <_printf_common+0xa4>
 800b662:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b666:	6822      	ldr	r2, [r4, #0]
 800b668:	3300      	adds	r3, #0
 800b66a:	bf18      	it	ne
 800b66c:	2301      	movne	r3, #1
 800b66e:	0692      	lsls	r2, r2, #26
 800b670:	d42d      	bmi.n	800b6ce <_printf_common+0xbe>
 800b672:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b676:	4639      	mov	r1, r7
 800b678:	4630      	mov	r0, r6
 800b67a:	47c0      	blx	r8
 800b67c:	3001      	adds	r0, #1
 800b67e:	d020      	beq.n	800b6c2 <_printf_common+0xb2>
 800b680:	6823      	ldr	r3, [r4, #0]
 800b682:	68e5      	ldr	r5, [r4, #12]
 800b684:	f8d9 2000 	ldr.w	r2, [r9]
 800b688:	f003 0306 	and.w	r3, r3, #6
 800b68c:	2b04      	cmp	r3, #4
 800b68e:	bf08      	it	eq
 800b690:	1aad      	subeq	r5, r5, r2
 800b692:	68a3      	ldr	r3, [r4, #8]
 800b694:	6922      	ldr	r2, [r4, #16]
 800b696:	bf0c      	ite	eq
 800b698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b69c:	2500      	movne	r5, #0
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	bfc4      	itt	gt
 800b6a2:	1a9b      	subgt	r3, r3, r2
 800b6a4:	18ed      	addgt	r5, r5, r3
 800b6a6:	f04f 0900 	mov.w	r9, #0
 800b6aa:	341a      	adds	r4, #26
 800b6ac:	454d      	cmp	r5, r9
 800b6ae:	d11a      	bne.n	800b6e6 <_printf_common+0xd6>
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	e008      	b.n	800b6c6 <_printf_common+0xb6>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	4652      	mov	r2, sl
 800b6b8:	4639      	mov	r1, r7
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	47c0      	blx	r8
 800b6be:	3001      	adds	r0, #1
 800b6c0:	d103      	bne.n	800b6ca <_printf_common+0xba>
 800b6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ca:	3501      	adds	r5, #1
 800b6cc:	e7c3      	b.n	800b656 <_printf_common+0x46>
 800b6ce:	18e1      	adds	r1, r4, r3
 800b6d0:	1c5a      	adds	r2, r3, #1
 800b6d2:	2030      	movs	r0, #48	; 0x30
 800b6d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6d8:	4422      	add	r2, r4
 800b6da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6e2:	3302      	adds	r3, #2
 800b6e4:	e7c5      	b.n	800b672 <_printf_common+0x62>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	4622      	mov	r2, r4
 800b6ea:	4639      	mov	r1, r7
 800b6ec:	4630      	mov	r0, r6
 800b6ee:	47c0      	blx	r8
 800b6f0:	3001      	adds	r0, #1
 800b6f2:	d0e6      	beq.n	800b6c2 <_printf_common+0xb2>
 800b6f4:	f109 0901 	add.w	r9, r9, #1
 800b6f8:	e7d8      	b.n	800b6ac <_printf_common+0x9c>
	...

0800b6fc <_printf_i>:
 800b6fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b700:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b704:	460c      	mov	r4, r1
 800b706:	7e09      	ldrb	r1, [r1, #24]
 800b708:	b085      	sub	sp, #20
 800b70a:	296e      	cmp	r1, #110	; 0x6e
 800b70c:	4617      	mov	r7, r2
 800b70e:	4606      	mov	r6, r0
 800b710:	4698      	mov	r8, r3
 800b712:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b714:	f000 80b3 	beq.w	800b87e <_printf_i+0x182>
 800b718:	d822      	bhi.n	800b760 <_printf_i+0x64>
 800b71a:	2963      	cmp	r1, #99	; 0x63
 800b71c:	d036      	beq.n	800b78c <_printf_i+0x90>
 800b71e:	d80a      	bhi.n	800b736 <_printf_i+0x3a>
 800b720:	2900      	cmp	r1, #0
 800b722:	f000 80b9 	beq.w	800b898 <_printf_i+0x19c>
 800b726:	2958      	cmp	r1, #88	; 0x58
 800b728:	f000 8083 	beq.w	800b832 <_printf_i+0x136>
 800b72c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b730:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b734:	e032      	b.n	800b79c <_printf_i+0xa0>
 800b736:	2964      	cmp	r1, #100	; 0x64
 800b738:	d001      	beq.n	800b73e <_printf_i+0x42>
 800b73a:	2969      	cmp	r1, #105	; 0x69
 800b73c:	d1f6      	bne.n	800b72c <_printf_i+0x30>
 800b73e:	6820      	ldr	r0, [r4, #0]
 800b740:	6813      	ldr	r3, [r2, #0]
 800b742:	0605      	lsls	r5, r0, #24
 800b744:	f103 0104 	add.w	r1, r3, #4
 800b748:	d52a      	bpl.n	800b7a0 <_printf_i+0xa4>
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	6011      	str	r1, [r2, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	da03      	bge.n	800b75a <_printf_i+0x5e>
 800b752:	222d      	movs	r2, #45	; 0x2d
 800b754:	425b      	negs	r3, r3
 800b756:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b75a:	486f      	ldr	r0, [pc, #444]	; (800b918 <_printf_i+0x21c>)
 800b75c:	220a      	movs	r2, #10
 800b75e:	e039      	b.n	800b7d4 <_printf_i+0xd8>
 800b760:	2973      	cmp	r1, #115	; 0x73
 800b762:	f000 809d 	beq.w	800b8a0 <_printf_i+0x1a4>
 800b766:	d808      	bhi.n	800b77a <_printf_i+0x7e>
 800b768:	296f      	cmp	r1, #111	; 0x6f
 800b76a:	d020      	beq.n	800b7ae <_printf_i+0xb2>
 800b76c:	2970      	cmp	r1, #112	; 0x70
 800b76e:	d1dd      	bne.n	800b72c <_printf_i+0x30>
 800b770:	6823      	ldr	r3, [r4, #0]
 800b772:	f043 0320 	orr.w	r3, r3, #32
 800b776:	6023      	str	r3, [r4, #0]
 800b778:	e003      	b.n	800b782 <_printf_i+0x86>
 800b77a:	2975      	cmp	r1, #117	; 0x75
 800b77c:	d017      	beq.n	800b7ae <_printf_i+0xb2>
 800b77e:	2978      	cmp	r1, #120	; 0x78
 800b780:	d1d4      	bne.n	800b72c <_printf_i+0x30>
 800b782:	2378      	movs	r3, #120	; 0x78
 800b784:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b788:	4864      	ldr	r0, [pc, #400]	; (800b91c <_printf_i+0x220>)
 800b78a:	e055      	b.n	800b838 <_printf_i+0x13c>
 800b78c:	6813      	ldr	r3, [r2, #0]
 800b78e:	1d19      	adds	r1, r3, #4
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	6011      	str	r1, [r2, #0]
 800b794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b79c:	2301      	movs	r3, #1
 800b79e:	e08c      	b.n	800b8ba <_printf_i+0x1be>
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	6011      	str	r1, [r2, #0]
 800b7a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b7a8:	bf18      	it	ne
 800b7aa:	b21b      	sxthne	r3, r3
 800b7ac:	e7cf      	b.n	800b74e <_printf_i+0x52>
 800b7ae:	6813      	ldr	r3, [r2, #0]
 800b7b0:	6825      	ldr	r5, [r4, #0]
 800b7b2:	1d18      	adds	r0, r3, #4
 800b7b4:	6010      	str	r0, [r2, #0]
 800b7b6:	0628      	lsls	r0, r5, #24
 800b7b8:	d501      	bpl.n	800b7be <_printf_i+0xc2>
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	e002      	b.n	800b7c4 <_printf_i+0xc8>
 800b7be:	0668      	lsls	r0, r5, #25
 800b7c0:	d5fb      	bpl.n	800b7ba <_printf_i+0xbe>
 800b7c2:	881b      	ldrh	r3, [r3, #0]
 800b7c4:	4854      	ldr	r0, [pc, #336]	; (800b918 <_printf_i+0x21c>)
 800b7c6:	296f      	cmp	r1, #111	; 0x6f
 800b7c8:	bf14      	ite	ne
 800b7ca:	220a      	movne	r2, #10
 800b7cc:	2208      	moveq	r2, #8
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7d4:	6865      	ldr	r5, [r4, #4]
 800b7d6:	60a5      	str	r5, [r4, #8]
 800b7d8:	2d00      	cmp	r5, #0
 800b7da:	f2c0 8095 	blt.w	800b908 <_printf_i+0x20c>
 800b7de:	6821      	ldr	r1, [r4, #0]
 800b7e0:	f021 0104 	bic.w	r1, r1, #4
 800b7e4:	6021      	str	r1, [r4, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d13d      	bne.n	800b866 <_printf_i+0x16a>
 800b7ea:	2d00      	cmp	r5, #0
 800b7ec:	f040 808e 	bne.w	800b90c <_printf_i+0x210>
 800b7f0:	4665      	mov	r5, ip
 800b7f2:	2a08      	cmp	r2, #8
 800b7f4:	d10b      	bne.n	800b80e <_printf_i+0x112>
 800b7f6:	6823      	ldr	r3, [r4, #0]
 800b7f8:	07db      	lsls	r3, r3, #31
 800b7fa:	d508      	bpl.n	800b80e <_printf_i+0x112>
 800b7fc:	6923      	ldr	r3, [r4, #16]
 800b7fe:	6862      	ldr	r2, [r4, #4]
 800b800:	429a      	cmp	r2, r3
 800b802:	bfde      	ittt	le
 800b804:	2330      	movle	r3, #48	; 0x30
 800b806:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b80a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b80e:	ebac 0305 	sub.w	r3, ip, r5
 800b812:	6123      	str	r3, [r4, #16]
 800b814:	f8cd 8000 	str.w	r8, [sp]
 800b818:	463b      	mov	r3, r7
 800b81a:	aa03      	add	r2, sp, #12
 800b81c:	4621      	mov	r1, r4
 800b81e:	4630      	mov	r0, r6
 800b820:	f7ff fef6 	bl	800b610 <_printf_common>
 800b824:	3001      	adds	r0, #1
 800b826:	d14d      	bne.n	800b8c4 <_printf_i+0x1c8>
 800b828:	f04f 30ff 	mov.w	r0, #4294967295
 800b82c:	b005      	add	sp, #20
 800b82e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b832:	4839      	ldr	r0, [pc, #228]	; (800b918 <_printf_i+0x21c>)
 800b834:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b838:	6813      	ldr	r3, [r2, #0]
 800b83a:	6821      	ldr	r1, [r4, #0]
 800b83c:	1d1d      	adds	r5, r3, #4
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	6015      	str	r5, [r2, #0]
 800b842:	060a      	lsls	r2, r1, #24
 800b844:	d50b      	bpl.n	800b85e <_printf_i+0x162>
 800b846:	07ca      	lsls	r2, r1, #31
 800b848:	bf44      	itt	mi
 800b84a:	f041 0120 	orrmi.w	r1, r1, #32
 800b84e:	6021      	strmi	r1, [r4, #0]
 800b850:	b91b      	cbnz	r3, 800b85a <_printf_i+0x15e>
 800b852:	6822      	ldr	r2, [r4, #0]
 800b854:	f022 0220 	bic.w	r2, r2, #32
 800b858:	6022      	str	r2, [r4, #0]
 800b85a:	2210      	movs	r2, #16
 800b85c:	e7b7      	b.n	800b7ce <_printf_i+0xd2>
 800b85e:	064d      	lsls	r5, r1, #25
 800b860:	bf48      	it	mi
 800b862:	b29b      	uxthmi	r3, r3
 800b864:	e7ef      	b.n	800b846 <_printf_i+0x14a>
 800b866:	4665      	mov	r5, ip
 800b868:	fbb3 f1f2 	udiv	r1, r3, r2
 800b86c:	fb02 3311 	mls	r3, r2, r1, r3
 800b870:	5cc3      	ldrb	r3, [r0, r3]
 800b872:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b876:	460b      	mov	r3, r1
 800b878:	2900      	cmp	r1, #0
 800b87a:	d1f5      	bne.n	800b868 <_printf_i+0x16c>
 800b87c:	e7b9      	b.n	800b7f2 <_printf_i+0xf6>
 800b87e:	6813      	ldr	r3, [r2, #0]
 800b880:	6825      	ldr	r5, [r4, #0]
 800b882:	6961      	ldr	r1, [r4, #20]
 800b884:	1d18      	adds	r0, r3, #4
 800b886:	6010      	str	r0, [r2, #0]
 800b888:	0628      	lsls	r0, r5, #24
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	d501      	bpl.n	800b892 <_printf_i+0x196>
 800b88e:	6019      	str	r1, [r3, #0]
 800b890:	e002      	b.n	800b898 <_printf_i+0x19c>
 800b892:	066a      	lsls	r2, r5, #25
 800b894:	d5fb      	bpl.n	800b88e <_printf_i+0x192>
 800b896:	8019      	strh	r1, [r3, #0]
 800b898:	2300      	movs	r3, #0
 800b89a:	6123      	str	r3, [r4, #16]
 800b89c:	4665      	mov	r5, ip
 800b89e:	e7b9      	b.n	800b814 <_printf_i+0x118>
 800b8a0:	6813      	ldr	r3, [r2, #0]
 800b8a2:	1d19      	adds	r1, r3, #4
 800b8a4:	6011      	str	r1, [r2, #0]
 800b8a6:	681d      	ldr	r5, [r3, #0]
 800b8a8:	6862      	ldr	r2, [r4, #4]
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	f7f4 fcaf 	bl	8000210 <memchr>
 800b8b2:	b108      	cbz	r0, 800b8b8 <_printf_i+0x1bc>
 800b8b4:	1b40      	subs	r0, r0, r5
 800b8b6:	6060      	str	r0, [r4, #4]
 800b8b8:	6863      	ldr	r3, [r4, #4]
 800b8ba:	6123      	str	r3, [r4, #16]
 800b8bc:	2300      	movs	r3, #0
 800b8be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8c2:	e7a7      	b.n	800b814 <_printf_i+0x118>
 800b8c4:	6923      	ldr	r3, [r4, #16]
 800b8c6:	462a      	mov	r2, r5
 800b8c8:	4639      	mov	r1, r7
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	47c0      	blx	r8
 800b8ce:	3001      	adds	r0, #1
 800b8d0:	d0aa      	beq.n	800b828 <_printf_i+0x12c>
 800b8d2:	6823      	ldr	r3, [r4, #0]
 800b8d4:	079b      	lsls	r3, r3, #30
 800b8d6:	d413      	bmi.n	800b900 <_printf_i+0x204>
 800b8d8:	68e0      	ldr	r0, [r4, #12]
 800b8da:	9b03      	ldr	r3, [sp, #12]
 800b8dc:	4298      	cmp	r0, r3
 800b8de:	bfb8      	it	lt
 800b8e0:	4618      	movlt	r0, r3
 800b8e2:	e7a3      	b.n	800b82c <_printf_i+0x130>
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	464a      	mov	r2, r9
 800b8e8:	4639      	mov	r1, r7
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	47c0      	blx	r8
 800b8ee:	3001      	adds	r0, #1
 800b8f0:	d09a      	beq.n	800b828 <_printf_i+0x12c>
 800b8f2:	3501      	adds	r5, #1
 800b8f4:	68e3      	ldr	r3, [r4, #12]
 800b8f6:	9a03      	ldr	r2, [sp, #12]
 800b8f8:	1a9b      	subs	r3, r3, r2
 800b8fa:	42ab      	cmp	r3, r5
 800b8fc:	dcf2      	bgt.n	800b8e4 <_printf_i+0x1e8>
 800b8fe:	e7eb      	b.n	800b8d8 <_printf_i+0x1dc>
 800b900:	2500      	movs	r5, #0
 800b902:	f104 0919 	add.w	r9, r4, #25
 800b906:	e7f5      	b.n	800b8f4 <_printf_i+0x1f8>
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1ac      	bne.n	800b866 <_printf_i+0x16a>
 800b90c:	7803      	ldrb	r3, [r0, #0]
 800b90e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b912:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b916:	e76c      	b.n	800b7f2 <_printf_i+0xf6>
 800b918:	0800bc75 	.word	0x0800bc75
 800b91c:	0800bc86 	.word	0x0800bc86

0800b920 <memmove>:
 800b920:	4288      	cmp	r0, r1
 800b922:	b510      	push	{r4, lr}
 800b924:	eb01 0302 	add.w	r3, r1, r2
 800b928:	d807      	bhi.n	800b93a <memmove+0x1a>
 800b92a:	1e42      	subs	r2, r0, #1
 800b92c:	4299      	cmp	r1, r3
 800b92e:	d00a      	beq.n	800b946 <memmove+0x26>
 800b930:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b934:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b938:	e7f8      	b.n	800b92c <memmove+0xc>
 800b93a:	4283      	cmp	r3, r0
 800b93c:	d9f5      	bls.n	800b92a <memmove+0xa>
 800b93e:	1881      	adds	r1, r0, r2
 800b940:	1ad2      	subs	r2, r2, r3
 800b942:	42d3      	cmn	r3, r2
 800b944:	d100      	bne.n	800b948 <memmove+0x28>
 800b946:	bd10      	pop	{r4, pc}
 800b948:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b94c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b950:	e7f7      	b.n	800b942 <memmove+0x22>
	...

0800b954 <_free_r>:
 800b954:	b538      	push	{r3, r4, r5, lr}
 800b956:	4605      	mov	r5, r0
 800b958:	2900      	cmp	r1, #0
 800b95a:	d045      	beq.n	800b9e8 <_free_r+0x94>
 800b95c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b960:	1f0c      	subs	r4, r1, #4
 800b962:	2b00      	cmp	r3, #0
 800b964:	bfb8      	it	lt
 800b966:	18e4      	addlt	r4, r4, r3
 800b968:	f000 f8d2 	bl	800bb10 <__malloc_lock>
 800b96c:	4a1f      	ldr	r2, [pc, #124]	; (800b9ec <_free_r+0x98>)
 800b96e:	6813      	ldr	r3, [r2, #0]
 800b970:	4610      	mov	r0, r2
 800b972:	b933      	cbnz	r3, 800b982 <_free_r+0x2e>
 800b974:	6063      	str	r3, [r4, #4]
 800b976:	6014      	str	r4, [r2, #0]
 800b978:	4628      	mov	r0, r5
 800b97a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b97e:	f000 b8c8 	b.w	800bb12 <__malloc_unlock>
 800b982:	42a3      	cmp	r3, r4
 800b984:	d90c      	bls.n	800b9a0 <_free_r+0x4c>
 800b986:	6821      	ldr	r1, [r4, #0]
 800b988:	1862      	adds	r2, r4, r1
 800b98a:	4293      	cmp	r3, r2
 800b98c:	bf04      	itt	eq
 800b98e:	681a      	ldreq	r2, [r3, #0]
 800b990:	685b      	ldreq	r3, [r3, #4]
 800b992:	6063      	str	r3, [r4, #4]
 800b994:	bf04      	itt	eq
 800b996:	1852      	addeq	r2, r2, r1
 800b998:	6022      	streq	r2, [r4, #0]
 800b99a:	6004      	str	r4, [r0, #0]
 800b99c:	e7ec      	b.n	800b978 <_free_r+0x24>
 800b99e:	4613      	mov	r3, r2
 800b9a0:	685a      	ldr	r2, [r3, #4]
 800b9a2:	b10a      	cbz	r2, 800b9a8 <_free_r+0x54>
 800b9a4:	42a2      	cmp	r2, r4
 800b9a6:	d9fa      	bls.n	800b99e <_free_r+0x4a>
 800b9a8:	6819      	ldr	r1, [r3, #0]
 800b9aa:	1858      	adds	r0, r3, r1
 800b9ac:	42a0      	cmp	r0, r4
 800b9ae:	d10b      	bne.n	800b9c8 <_free_r+0x74>
 800b9b0:	6820      	ldr	r0, [r4, #0]
 800b9b2:	4401      	add	r1, r0
 800b9b4:	1858      	adds	r0, r3, r1
 800b9b6:	4282      	cmp	r2, r0
 800b9b8:	6019      	str	r1, [r3, #0]
 800b9ba:	d1dd      	bne.n	800b978 <_free_r+0x24>
 800b9bc:	6810      	ldr	r0, [r2, #0]
 800b9be:	6852      	ldr	r2, [r2, #4]
 800b9c0:	605a      	str	r2, [r3, #4]
 800b9c2:	4401      	add	r1, r0
 800b9c4:	6019      	str	r1, [r3, #0]
 800b9c6:	e7d7      	b.n	800b978 <_free_r+0x24>
 800b9c8:	d902      	bls.n	800b9d0 <_free_r+0x7c>
 800b9ca:	230c      	movs	r3, #12
 800b9cc:	602b      	str	r3, [r5, #0]
 800b9ce:	e7d3      	b.n	800b978 <_free_r+0x24>
 800b9d0:	6820      	ldr	r0, [r4, #0]
 800b9d2:	1821      	adds	r1, r4, r0
 800b9d4:	428a      	cmp	r2, r1
 800b9d6:	bf04      	itt	eq
 800b9d8:	6811      	ldreq	r1, [r2, #0]
 800b9da:	6852      	ldreq	r2, [r2, #4]
 800b9dc:	6062      	str	r2, [r4, #4]
 800b9de:	bf04      	itt	eq
 800b9e0:	1809      	addeq	r1, r1, r0
 800b9e2:	6021      	streq	r1, [r4, #0]
 800b9e4:	605c      	str	r4, [r3, #4]
 800b9e6:	e7c7      	b.n	800b978 <_free_r+0x24>
 800b9e8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ea:	bf00      	nop
 800b9ec:	2000161c 	.word	0x2000161c

0800b9f0 <_malloc_r>:
 800b9f0:	b570      	push	{r4, r5, r6, lr}
 800b9f2:	1ccd      	adds	r5, r1, #3
 800b9f4:	f025 0503 	bic.w	r5, r5, #3
 800b9f8:	3508      	adds	r5, #8
 800b9fa:	2d0c      	cmp	r5, #12
 800b9fc:	bf38      	it	cc
 800b9fe:	250c      	movcc	r5, #12
 800ba00:	2d00      	cmp	r5, #0
 800ba02:	4606      	mov	r6, r0
 800ba04:	db01      	blt.n	800ba0a <_malloc_r+0x1a>
 800ba06:	42a9      	cmp	r1, r5
 800ba08:	d903      	bls.n	800ba12 <_malloc_r+0x22>
 800ba0a:	230c      	movs	r3, #12
 800ba0c:	6033      	str	r3, [r6, #0]
 800ba0e:	2000      	movs	r0, #0
 800ba10:	bd70      	pop	{r4, r5, r6, pc}
 800ba12:	f000 f87d 	bl	800bb10 <__malloc_lock>
 800ba16:	4a21      	ldr	r2, [pc, #132]	; (800ba9c <_malloc_r+0xac>)
 800ba18:	6814      	ldr	r4, [r2, #0]
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	b991      	cbnz	r1, 800ba44 <_malloc_r+0x54>
 800ba1e:	4c20      	ldr	r4, [pc, #128]	; (800baa0 <_malloc_r+0xb0>)
 800ba20:	6823      	ldr	r3, [r4, #0]
 800ba22:	b91b      	cbnz	r3, 800ba2c <_malloc_r+0x3c>
 800ba24:	4630      	mov	r0, r6
 800ba26:	f000 f863 	bl	800baf0 <_sbrk_r>
 800ba2a:	6020      	str	r0, [r4, #0]
 800ba2c:	4629      	mov	r1, r5
 800ba2e:	4630      	mov	r0, r6
 800ba30:	f000 f85e 	bl	800baf0 <_sbrk_r>
 800ba34:	1c43      	adds	r3, r0, #1
 800ba36:	d124      	bne.n	800ba82 <_malloc_r+0x92>
 800ba38:	230c      	movs	r3, #12
 800ba3a:	6033      	str	r3, [r6, #0]
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	f000 f868 	bl	800bb12 <__malloc_unlock>
 800ba42:	e7e4      	b.n	800ba0e <_malloc_r+0x1e>
 800ba44:	680b      	ldr	r3, [r1, #0]
 800ba46:	1b5b      	subs	r3, r3, r5
 800ba48:	d418      	bmi.n	800ba7c <_malloc_r+0x8c>
 800ba4a:	2b0b      	cmp	r3, #11
 800ba4c:	d90f      	bls.n	800ba6e <_malloc_r+0x7e>
 800ba4e:	600b      	str	r3, [r1, #0]
 800ba50:	50cd      	str	r5, [r1, r3]
 800ba52:	18cc      	adds	r4, r1, r3
 800ba54:	4630      	mov	r0, r6
 800ba56:	f000 f85c 	bl	800bb12 <__malloc_unlock>
 800ba5a:	f104 000b 	add.w	r0, r4, #11
 800ba5e:	1d23      	adds	r3, r4, #4
 800ba60:	f020 0007 	bic.w	r0, r0, #7
 800ba64:	1ac3      	subs	r3, r0, r3
 800ba66:	d0d3      	beq.n	800ba10 <_malloc_r+0x20>
 800ba68:	425a      	negs	r2, r3
 800ba6a:	50e2      	str	r2, [r4, r3]
 800ba6c:	e7d0      	b.n	800ba10 <_malloc_r+0x20>
 800ba6e:	428c      	cmp	r4, r1
 800ba70:	684b      	ldr	r3, [r1, #4]
 800ba72:	bf16      	itet	ne
 800ba74:	6063      	strne	r3, [r4, #4]
 800ba76:	6013      	streq	r3, [r2, #0]
 800ba78:	460c      	movne	r4, r1
 800ba7a:	e7eb      	b.n	800ba54 <_malloc_r+0x64>
 800ba7c:	460c      	mov	r4, r1
 800ba7e:	6849      	ldr	r1, [r1, #4]
 800ba80:	e7cc      	b.n	800ba1c <_malloc_r+0x2c>
 800ba82:	1cc4      	adds	r4, r0, #3
 800ba84:	f024 0403 	bic.w	r4, r4, #3
 800ba88:	42a0      	cmp	r0, r4
 800ba8a:	d005      	beq.n	800ba98 <_malloc_r+0xa8>
 800ba8c:	1a21      	subs	r1, r4, r0
 800ba8e:	4630      	mov	r0, r6
 800ba90:	f000 f82e 	bl	800baf0 <_sbrk_r>
 800ba94:	3001      	adds	r0, #1
 800ba96:	d0cf      	beq.n	800ba38 <_malloc_r+0x48>
 800ba98:	6025      	str	r5, [r4, #0]
 800ba9a:	e7db      	b.n	800ba54 <_malloc_r+0x64>
 800ba9c:	2000161c 	.word	0x2000161c
 800baa0:	20001620 	.word	0x20001620

0800baa4 <_realloc_r>:
 800baa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baa6:	4607      	mov	r7, r0
 800baa8:	4614      	mov	r4, r2
 800baaa:	460e      	mov	r6, r1
 800baac:	b921      	cbnz	r1, 800bab8 <_realloc_r+0x14>
 800baae:	4611      	mov	r1, r2
 800bab0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bab4:	f7ff bf9c 	b.w	800b9f0 <_malloc_r>
 800bab8:	b922      	cbnz	r2, 800bac4 <_realloc_r+0x20>
 800baba:	f7ff ff4b 	bl	800b954 <_free_r>
 800babe:	4625      	mov	r5, r4
 800bac0:	4628      	mov	r0, r5
 800bac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bac4:	f000 f826 	bl	800bb14 <_malloc_usable_size_r>
 800bac8:	42a0      	cmp	r0, r4
 800baca:	d20f      	bcs.n	800baec <_realloc_r+0x48>
 800bacc:	4621      	mov	r1, r4
 800bace:	4638      	mov	r0, r7
 800bad0:	f7ff ff8e 	bl	800b9f0 <_malloc_r>
 800bad4:	4605      	mov	r5, r0
 800bad6:	2800      	cmp	r0, #0
 800bad8:	d0f2      	beq.n	800bac0 <_realloc_r+0x1c>
 800bada:	4631      	mov	r1, r6
 800badc:	4622      	mov	r2, r4
 800bade:	f7ff fc11 	bl	800b304 <memcpy>
 800bae2:	4631      	mov	r1, r6
 800bae4:	4638      	mov	r0, r7
 800bae6:	f7ff ff35 	bl	800b954 <_free_r>
 800baea:	e7e9      	b.n	800bac0 <_realloc_r+0x1c>
 800baec:	4635      	mov	r5, r6
 800baee:	e7e7      	b.n	800bac0 <_realloc_r+0x1c>

0800baf0 <_sbrk_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4c06      	ldr	r4, [pc, #24]	; (800bb0c <_sbrk_r+0x1c>)
 800baf4:	2300      	movs	r3, #0
 800baf6:	4605      	mov	r5, r0
 800baf8:	4608      	mov	r0, r1
 800bafa:	6023      	str	r3, [r4, #0]
 800bafc:	f7ff fb42 	bl	800b184 <_sbrk>
 800bb00:	1c43      	adds	r3, r0, #1
 800bb02:	d102      	bne.n	800bb0a <_sbrk_r+0x1a>
 800bb04:	6823      	ldr	r3, [r4, #0]
 800bb06:	b103      	cbz	r3, 800bb0a <_sbrk_r+0x1a>
 800bb08:	602b      	str	r3, [r5, #0]
 800bb0a:	bd38      	pop	{r3, r4, r5, pc}
 800bb0c:	20001a1c 	.word	0x20001a1c

0800bb10 <__malloc_lock>:
 800bb10:	4770      	bx	lr

0800bb12 <__malloc_unlock>:
 800bb12:	4770      	bx	lr

0800bb14 <_malloc_usable_size_r>:
 800bb14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb18:	1f18      	subs	r0, r3, #4
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	bfbc      	itt	lt
 800bb1e:	580b      	ldrlt	r3, [r1, r0]
 800bb20:	18c0      	addlt	r0, r0, r3
 800bb22:	4770      	bx	lr

0800bb24 <_init>:
 800bb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb26:	bf00      	nop
 800bb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb2a:	bc08      	pop	{r3}
 800bb2c:	469e      	mov	lr, r3
 800bb2e:	4770      	bx	lr

0800bb30 <_fini>:
 800bb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb32:	bf00      	nop
 800bb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb36:	bc08      	pop	{r3}
 800bb38:	469e      	mov	lr, r3
 800bb3a:	4770      	bx	lr
