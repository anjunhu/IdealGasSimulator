
IdealGasSimulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8e0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  0800baa0  0800baa0  0001baa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3f8  0800c3f8  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3f8  0800c3f8  0001c3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c400  0800c400  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c400  0800c400  0001c400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c404  0800c404  0001c404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800c408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e48  200000f0  0800c4f8  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f38  0800c4f8  00021f38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000294a3  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d39  00000000  00000000  000495c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e00  00000000  00000000  0004e300  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b70  00000000  00000000  00050100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003065a  00000000  00000000  00051c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000198ec  00000000  00000000  000822ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001205b3  00000000  00000000  0009bbb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  001bc169  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f58  00000000  00000000  001bc25c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000fa  00000000  00000000  001c41b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ba88 	.word	0x0800ba88

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000f4 	.word	0x200000f4
 80001fc:	0800ba88 	.word	0x0800ba88

08000200 <kalmanFilterA>:
* R0 = pointer to struct kalmanState
* S0 = measurement, then the return value x
*/

kalmanFilterA:
			PUSH {R4, LR}
 8000200:	b510      	push	{r4, lr}
			VSTMDB.f32 SP!,{S4-S9}
 8000202:	ed2d 2a06 	vpush	{s4-s9}

			VMRS R4, FPSCR
 8000206:	eef1 4a10 	vmrs	r4, fpscr
			BIC R4, R4, #15
 800020a:	f024 040f 	bic.w	r4, r4, #15
			VMSR FPSCR, R4
 800020e:	eee1 4a10 	vmsr	fpscr, r4

			VLDMIA.f32 R0!, {S4-S8} 		// q, r, x, p, k in S4, 5, 6, 7, 8
 8000212:	ecb0 2a05 	vldmia	r0!, {s4-s8}

			VADD.f32 S7, S7, S4 			// p = p + q
 8000216:	ee73 3a82 	vadd.f32	s7, s7, s4
			VADD.f32 S9, S7, S5 			// p + r
 800021a:	ee73 4aa2 	vadd.f32	s9, s7, s5
			VDIV.f32 S8, S7, S9 			// k = p / (p + r)
 800021e:	ee83 4aa4 	vdiv.f32	s8, s7, s9
			VSUB.f32 S9, S0, S6 			// measurement - x
 8000222:	ee70 4a43 	vsub.f32	s9, s0, s6
			VMLA.f32 S6, S8, S9 			// x = x + k*(measurement - x)
 8000226:	ee04 3a24 	vmla.f32	s6, s8, s9
			VMLS.f32 S7, S8, S7 			// p = p - k*p
 800022a:	ee44 3a63 	vmls.f32	s7, s8, s7

			VMRS R4, FPSCR
 800022e:	eef1 4a10 	vmrs	r4, fpscr
			ANDS R4, R4, #15				// check for exceptions R4, R4, #28
 8000232:	f014 040f 	ands.w	r4, r4, #15
			BNE exception
 8000236:	d106      	bne.n	8000246 <exception>

			VMOV.f32 S0, S6					// return self.x
 8000238:	eeb0 0a43 	vmov.f32	s0, s6
			VSTMDB.f32 R0!, {S4-S8} 		// !!We still need this right???
 800023c:	ed20 2a05 	vstmdb	r0!, {s4-s8}

			VLDMIA.f32 SP!,{S4-S9}
 8000240:	ecbd 2a06 	vpop	{s4-s9}
			POP {R4, PC}
 8000244:	bd10      	pop	{r4, pc}

08000246 <exception>:

exception:
			VMOV.f32 S0, S6					// force NaN or let it be x?
 8000246:	eeb0 0a43 	vmov.f32	s0, s6
			VLDMIA.f32 SP!,{S4-S9}
 800024a:	ecbd 2a06 	vpop	{s4-s9}
			POP {R4, PC}
 800024e:	bd10      	pop	{r4, pc}

08000250 <strlen>:
 8000250:	4603      	mov	r3, r0
 8000252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000256:	2a00      	cmp	r2, #0
 8000258:	d1fb      	bne.n	8000252 <strlen+0x2>
 800025a:	1a18      	subs	r0, r3, r0
 800025c:	3801      	subs	r0, #1
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800043e:	f1a4 0401 	sub.w	r4, r4, #1
 8000442:	d1e9      	bne.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__aeabi_dmul>:
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800067e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000682:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000686:	bf1d      	ittte	ne
 8000688:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800068c:	ea94 0f0c 	teqne	r4, ip
 8000690:	ea95 0f0c 	teqne	r5, ip
 8000694:	f000 f8de 	bleq	8000854 <__aeabi_dmul+0x1dc>
 8000698:	442c      	add	r4, r5
 800069a:	ea81 0603 	eor.w	r6, r1, r3
 800069e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006aa:	bf18      	it	ne
 80006ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006b8:	d038      	beq.n	800072c <__aeabi_dmul+0xb4>
 80006ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80006be:	f04f 0500 	mov.w	r5, #0
 80006c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ce:	f04f 0600 	mov.w	r6, #0
 80006d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006d6:	f09c 0f00 	teq	ip, #0
 80006da:	bf18      	it	ne
 80006dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ec:	d204      	bcs.n	80006f8 <__aeabi_dmul+0x80>
 80006ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006f2:	416d      	adcs	r5, r5
 80006f4:	eb46 0606 	adc.w	r6, r6, r6
 80006f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000700:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000704:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000708:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800070c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000710:	bf88      	it	hi
 8000712:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000716:	d81e      	bhi.n	8000756 <__aeabi_dmul+0xde>
 8000718:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800071c:	bf08      	it	eq
 800071e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000722:	f150 0000 	adcs.w	r0, r0, #0
 8000726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000730:	ea46 0101 	orr.w	r1, r6, r1
 8000734:	ea40 0002 	orr.w	r0, r0, r2
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000740:	bfc2      	ittt	gt
 8000742:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000746:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800074a:	bd70      	popgt	{r4, r5, r6, pc}
 800074c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000750:	f04f 0e00 	mov.w	lr, #0
 8000754:	3c01      	subs	r4, #1
 8000756:	f300 80ab 	bgt.w	80008b0 <__aeabi_dmul+0x238>
 800075a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800075e:	bfde      	ittt	le
 8000760:	2000      	movle	r0, #0
 8000762:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000766:	bd70      	pople	{r4, r5, r6, pc}
 8000768:	f1c4 0400 	rsb	r4, r4, #0
 800076c:	3c20      	subs	r4, #32
 800076e:	da35      	bge.n	80007dc <__aeabi_dmul+0x164>
 8000770:	340c      	adds	r4, #12
 8000772:	dc1b      	bgt.n	80007ac <__aeabi_dmul+0x134>
 8000774:	f104 0414 	add.w	r4, r4, #20
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f305 	lsl.w	r3, r0, r5
 8000780:	fa20 f004 	lsr.w	r0, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000794:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000798:	fa21 f604 	lsr.w	r6, r1, r4
 800079c:	eb42 0106 	adc.w	r1, r2, r6
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 040c 	rsb	r4, r4, #12
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f304 	lsl.w	r3, r0, r4
 80007b8:	fa20 f005 	lsr.w	r0, r0, r5
 80007bc:	fa01 f204 	lsl.w	r2, r1, r4
 80007c0:	ea40 0002 	orr.w	r0, r0, r2
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007cc:	f141 0100 	adc.w	r1, r1, #0
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 0520 	rsb	r5, r4, #32
 80007e0:	fa00 f205 	lsl.w	r2, r0, r5
 80007e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007e8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ec:	fa01 f205 	lsl.w	r2, r1, r5
 80007f0:	ea43 0302 	orr.w	r3, r3, r2
 80007f4:	fa21 f004 	lsr.w	r0, r1, r4
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000800:	ea20 0002 	bic.w	r0, r0, r2
 8000804:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800080c:	bf08      	it	eq
 800080e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f094 0f00 	teq	r4, #0
 8000818:	d10f      	bne.n	800083a <__aeabi_dmul+0x1c2>
 800081a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800081e:	0040      	lsls	r0, r0, #1
 8000820:	eb41 0101 	adc.w	r1, r1, r1
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3c01      	subeq	r4, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1a6>
 800082e:	ea41 0106 	orr.w	r1, r1, r6
 8000832:	f095 0f00 	teq	r5, #0
 8000836:	bf18      	it	ne
 8000838:	4770      	bxne	lr
 800083a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800083e:	0052      	lsls	r2, r2, #1
 8000840:	eb43 0303 	adc.w	r3, r3, r3
 8000844:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000848:	bf08      	it	eq
 800084a:	3d01      	subeq	r5, #1
 800084c:	d0f7      	beq.n	800083e <__aeabi_dmul+0x1c6>
 800084e:	ea43 0306 	orr.w	r3, r3, r6
 8000852:	4770      	bx	lr
 8000854:	ea94 0f0c 	teq	r4, ip
 8000858:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800085c:	bf18      	it	ne
 800085e:	ea95 0f0c 	teqne	r5, ip
 8000862:	d00c      	beq.n	800087e <__aeabi_dmul+0x206>
 8000864:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000868:	bf18      	it	ne
 800086a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086e:	d1d1      	bne.n	8000814 <__aeabi_dmul+0x19c>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000878:	f04f 0000 	mov.w	r0, #0
 800087c:	bd70      	pop	{r4, r5, r6, pc}
 800087e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000882:	bf06      	itte	eq
 8000884:	4610      	moveq	r0, r2
 8000886:	4619      	moveq	r1, r3
 8000888:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800088c:	d019      	beq.n	80008c2 <__aeabi_dmul+0x24a>
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	d102      	bne.n	800089a <__aeabi_dmul+0x222>
 8000894:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000898:	d113      	bne.n	80008c2 <__aeabi_dmul+0x24a>
 800089a:	ea95 0f0c 	teq	r5, ip
 800089e:	d105      	bne.n	80008ac <__aeabi_dmul+0x234>
 80008a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008a4:	bf1c      	itt	ne
 80008a6:	4610      	movne	r0, r2
 80008a8:	4619      	movne	r1, r3
 80008aa:	d10a      	bne.n	80008c2 <__aeabi_dmul+0x24a>
 80008ac:	ea81 0103 	eor.w	r1, r1, r3
 80008b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008bc:	f04f 0000 	mov.w	r0, #0
 80008c0:	bd70      	pop	{r4, r5, r6, pc}
 80008c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ca:	bd70      	pop	{r4, r5, r6, pc}

080008cc <__aeabi_ddiv>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008da:	bf1d      	ittte	ne
 80008dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008e0:	ea94 0f0c 	teqne	r4, ip
 80008e4:	ea95 0f0c 	teqne	r5, ip
 80008e8:	f000 f8a7 	bleq	8000a3a <__aeabi_ddiv+0x16e>
 80008ec:	eba4 0405 	sub.w	r4, r4, r5
 80008f0:	ea81 0e03 	eor.w	lr, r1, r3
 80008f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008fc:	f000 8088 	beq.w	8000a10 <__aeabi_ddiv+0x144>
 8000900:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000904:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000908:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800090c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000910:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000914:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000918:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800091c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000920:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000924:	429d      	cmp	r5, r3
 8000926:	bf08      	it	eq
 8000928:	4296      	cmpeq	r6, r2
 800092a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800092e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000932:	d202      	bcs.n	800093a <__aeabi_ddiv+0x6e>
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	1ab6      	subs	r6, r6, r2
 800093c:	eb65 0503 	sbc.w	r5, r5, r3
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800094a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ac:	d018      	beq.n	80009e0 <__aeabi_ddiv+0x114>
 80009ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ca:	d1c0      	bne.n	800094e <__aeabi_ddiv+0x82>
 80009cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d0:	d10b      	bne.n	80009ea <__aeabi_ddiv+0x11e>
 80009d2:	ea41 0100 	orr.w	r1, r1, r0
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009de:	e7b6      	b.n	800094e <__aeabi_ddiv+0x82>
 80009e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009e4:	bf04      	itt	eq
 80009e6:	4301      	orreq	r1, r0
 80009e8:	2000      	moveq	r0, #0
 80009ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ee:	bf88      	it	hi
 80009f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009f4:	f63f aeaf 	bhi.w	8000756 <__aeabi_dmul+0xde>
 80009f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009fc:	bf04      	itt	eq
 80009fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a06:	f150 0000 	adcs.w	r0, r0, #0
 8000a0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a1c:	bfc2      	ittt	gt
 8000a1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a26:	bd70      	popgt	{r4, r5, r6, pc}
 8000a28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a2c:	f04f 0e00 	mov.w	lr, #0
 8000a30:	3c01      	subs	r4, #1
 8000a32:	e690      	b.n	8000756 <__aeabi_dmul+0xde>
 8000a34:	ea45 0e06 	orr.w	lr, r5, r6
 8000a38:	e68d      	b.n	8000756 <__aeabi_dmul+0xde>
 8000a3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a3e:	ea94 0f0c 	teq	r4, ip
 8000a42:	bf08      	it	eq
 8000a44:	ea95 0f0c 	teqeq	r5, ip
 8000a48:	f43f af3b 	beq.w	80008c2 <__aeabi_dmul+0x24a>
 8000a4c:	ea94 0f0c 	teq	r4, ip
 8000a50:	d10a      	bne.n	8000a68 <__aeabi_ddiv+0x19c>
 8000a52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a56:	f47f af34 	bne.w	80008c2 <__aeabi_dmul+0x24a>
 8000a5a:	ea95 0f0c 	teq	r5, ip
 8000a5e:	f47f af25 	bne.w	80008ac <__aeabi_dmul+0x234>
 8000a62:	4610      	mov	r0, r2
 8000a64:	4619      	mov	r1, r3
 8000a66:	e72c      	b.n	80008c2 <__aeabi_dmul+0x24a>
 8000a68:	ea95 0f0c 	teq	r5, ip
 8000a6c:	d106      	bne.n	8000a7c <__aeabi_ddiv+0x1b0>
 8000a6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a72:	f43f aefd 	beq.w	8000870 <__aeabi_dmul+0x1f8>
 8000a76:	4610      	mov	r0, r2
 8000a78:	4619      	mov	r1, r3
 8000a7a:	e722      	b.n	80008c2 <__aeabi_dmul+0x24a>
 8000a7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a86:	f47f aec5 	bne.w	8000814 <__aeabi_dmul+0x19c>
 8000a8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a8e:	f47f af0d 	bne.w	80008ac <__aeabi_dmul+0x234>
 8000a92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a96:	f47f aeeb 	bne.w	8000870 <__aeabi_dmul+0x1f8>
 8000a9a:	e712      	b.n	80008c2 <__aeabi_dmul+0x24a>

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b972 	b.w	8000e78 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9e08      	ldr	r6, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	4688      	mov	r8, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14b      	bne.n	8000c52 <__udivmoddi4+0xa6>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4615      	mov	r5, r2
 8000bbe:	d967      	bls.n	8000c90 <__udivmoddi4+0xe4>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc6:	f1c2 0720 	rsb	r7, r2, #32
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	fa20 f707 	lsr.w	r7, r0, r7
 8000bd2:	4095      	lsls	r5, r2
 8000bd4:	ea47 0803 	orr.w	r8, r7, r3
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000be4:	fa1f fc85 	uxth.w	ip, r5
 8000be8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bf0:	fb07 f10c 	mul.w	r1, r7, ip
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x60>
 8000bf8:	18eb      	adds	r3, r5, r3
 8000bfa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bfe:	f080 811b 	bcs.w	8000e38 <__udivmoddi4+0x28c>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 8118 	bls.w	8000e38 <__udivmoddi4+0x28c>
 8000c08:	3f02      	subs	r7, #2
 8000c0a:	442b      	add	r3, r5
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c20:	45a4      	cmp	ip, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x8c>
 8000c24:	192c      	adds	r4, r5, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2a:	f080 8107 	bcs.w	8000e3c <__udivmoddi4+0x290>
 8000c2e:	45a4      	cmp	ip, r4
 8000c30:	f240 8104 	bls.w	8000e3c <__udivmoddi4+0x290>
 8000c34:	3802      	subs	r0, #2
 8000c36:	442c      	add	r4, r5
 8000c38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c3c:	eba4 040c 	sub.w	r4, r4, ip
 8000c40:	2700      	movs	r7, #0
 8000c42:	b11e      	cbz	r6, 8000c4c <__udivmoddi4+0xa0>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0xbe>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	f000 80eb 	beq.w	8000e32 <__udivmoddi4+0x286>
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c62:	4638      	mov	r0, r7
 8000c64:	4639      	mov	r1, r7
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f783 	clz	r7, r3
 8000c6e:	2f00      	cmp	r7, #0
 8000c70:	d147      	bne.n	8000d02 <__udivmoddi4+0x156>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xd0>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80fa 	bhi.w	8000e70 <__udivmoddi4+0x2c4>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	4698      	mov	r8, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d0e0      	beq.n	8000c4c <__udivmoddi4+0xa0>
 8000c8a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c8e:	e7dd      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000c90:	b902      	cbnz	r2, 8000c94 <__udivmoddi4+0xe8>
 8000c92:	deff      	udf	#255	; 0xff
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f040 808f 	bne.w	8000dbc <__udivmoddi4+0x210>
 8000c9e:	1b49      	subs	r1, r1, r5
 8000ca0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca4:	fa1f f885 	uxth.w	r8, r5
 8000ca8:	2701      	movs	r7, #1
 8000caa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cbc:	4299      	cmp	r1, r3
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0x124>
 8000cc0:	18eb      	adds	r3, r5, r3
 8000cc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x122>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	f200 80cd 	bhi.w	8000e68 <__udivmoddi4+0x2bc>
 8000cce:	4684      	mov	ip, r0
 8000cd0:	1a59      	subs	r1, r3, r1
 8000cd2:	b2a3      	uxth	r3, r4
 8000cd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cdc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ce0:	fb08 f800 	mul.w	r8, r8, r0
 8000ce4:	45a0      	cmp	r8, r4
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x14c>
 8000ce8:	192c      	adds	r4, r5, r4
 8000cea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x14a>
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	f200 80b6 	bhi.w	8000e62 <__udivmoddi4+0x2b6>
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	eba4 0408 	sub.w	r4, r4, r8
 8000cfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d00:	e79f      	b.n	8000c42 <__udivmoddi4+0x96>
 8000d02:	f1c7 0c20 	rsb	ip, r7, #32
 8000d06:	40bb      	lsls	r3, r7
 8000d08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d10:	fa01 f407 	lsl.w	r4, r1, r7
 8000d14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d20:	4325      	orrs	r5, r4
 8000d22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d26:	0c2c      	lsrs	r4, r5, #16
 8000d28:	fb08 3319 	mls	r3, r8, r9, r3
 8000d2c:	fa1f fa8e 	uxth.w	sl, lr
 8000d30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d34:	fb09 f40a 	mul.w	r4, r9, sl
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b0>
 8000d44:	eb1e 0303 	adds.w	r3, lr, r3
 8000d48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d4c:	f080 8087 	bcs.w	8000e5e <__udivmoddi4+0x2b2>
 8000d50:	429c      	cmp	r4, r3
 8000d52:	f240 8084 	bls.w	8000e5e <__udivmoddi4+0x2b2>
 8000d56:	f1a9 0902 	sub.w	r9, r9, #2
 8000d5a:	4473      	add	r3, lr
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	b2ad      	uxth	r5, r5
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d70:	45a2      	cmp	sl, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1da>
 8000d74:	eb1e 0404 	adds.w	r4, lr, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	d26b      	bcs.n	8000e56 <__udivmoddi4+0x2aa>
 8000d7e:	45a2      	cmp	sl, r4
 8000d80:	d969      	bls.n	8000e56 <__udivmoddi4+0x2aa>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4474      	add	r4, lr
 8000d86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8e:	eba4 040a 	sub.w	r4, r4, sl
 8000d92:	454c      	cmp	r4, r9
 8000d94:	46c2      	mov	sl, r8
 8000d96:	464b      	mov	r3, r9
 8000d98:	d354      	bcc.n	8000e44 <__udivmoddi4+0x298>
 8000d9a:	d051      	beq.n	8000e40 <__udivmoddi4+0x294>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d069      	beq.n	8000e74 <__udivmoddi4+0x2c8>
 8000da0:	ebb1 050a 	subs.w	r5, r1, sl
 8000da4:	eb64 0403 	sbc.w	r4, r4, r3
 8000da8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dac:	40fd      	lsrs	r5, r7
 8000dae:	40fc      	lsrs	r4, r7
 8000db0:	ea4c 0505 	orr.w	r5, ip, r5
 8000db4:	e9c6 5400 	strd	r5, r4, [r6]
 8000db8:	2700      	movs	r7, #0
 8000dba:	e747      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f703 	lsr.w	r7, r0, r3
 8000dc4:	4095      	lsls	r5, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	fa21 f303 	lsr.w	r3, r1, r3
 8000dce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd2:	4338      	orrs	r0, r7
 8000dd4:	0c01      	lsrs	r1, r0, #16
 8000dd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dda:	fa1f f885 	uxth.w	r8, r5
 8000dde:	fb0e 3317 	mls	r3, lr, r7, r3
 8000de2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de6:	fb07 f308 	mul.w	r3, r7, r8
 8000dea:	428b      	cmp	r3, r1
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x256>
 8000df2:	1869      	adds	r1, r5, r1
 8000df4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000df8:	d22f      	bcs.n	8000e5a <__udivmoddi4+0x2ae>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d92d      	bls.n	8000e5a <__udivmoddi4+0x2ae>
 8000dfe:	3f02      	subs	r7, #2
 8000e00:	4429      	add	r1, r5
 8000e02:	1acb      	subs	r3, r1, r3
 8000e04:	b281      	uxth	r1, r0
 8000e06:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb00 f308 	mul.w	r3, r0, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x27e>
 8000e1a:	1869      	adds	r1, r5, r1
 8000e1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e20:	d217      	bcs.n	8000e52 <__udivmoddi4+0x2a6>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d915      	bls.n	8000e52 <__udivmoddi4+0x2a6>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4429      	add	r1, r5
 8000e2a:	1ac9      	subs	r1, r1, r3
 8000e2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e30:	e73b      	b.n	8000caa <__udivmoddi4+0xfe>
 8000e32:	4637      	mov	r7, r6
 8000e34:	4630      	mov	r0, r6
 8000e36:	e709      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000e38:	4607      	mov	r7, r0
 8000e3a:	e6e7      	b.n	8000c0c <__udivmoddi4+0x60>
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	e6fb      	b.n	8000c38 <__udivmoddi4+0x8c>
 8000e40:	4541      	cmp	r1, r8
 8000e42:	d2ab      	bcs.n	8000d9c <__udivmoddi4+0x1f0>
 8000e44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e48:	eb69 020e 	sbc.w	r2, r9, lr
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	4613      	mov	r3, r2
 8000e50:	e7a4      	b.n	8000d9c <__udivmoddi4+0x1f0>
 8000e52:	4660      	mov	r0, ip
 8000e54:	e7e9      	b.n	8000e2a <__udivmoddi4+0x27e>
 8000e56:	4618      	mov	r0, r3
 8000e58:	e795      	b.n	8000d86 <__udivmoddi4+0x1da>
 8000e5a:	4667      	mov	r7, ip
 8000e5c:	e7d1      	b.n	8000e02 <__udivmoddi4+0x256>
 8000e5e:	4681      	mov	r9, r0
 8000e60:	e77c      	b.n	8000d5c <__udivmoddi4+0x1b0>
 8000e62:	3802      	subs	r0, #2
 8000e64:	442c      	add	r4, r5
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0x14c>
 8000e68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e6c:	442b      	add	r3, r5
 8000e6e:	e72f      	b.n	8000cd0 <__udivmoddi4+0x124>
 8000e70:	4638      	mov	r0, r7
 8000e72:	e708      	b.n	8000c86 <__udivmoddi4+0xda>
 8000e74:	4637      	mov	r7, r6
 8000e76:	e6e9      	b.n	8000c4c <__udivmoddi4+0xa0>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e86:	2003      	movs	r0, #3
 8000e88:	f000 f8ff 	bl	800108a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f00a f859 	bl	800af44 <HAL_InitTick>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d002      	beq.n	8000e9e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	71fb      	strb	r3, [r7, #7]
 8000e9c:	e001      	b.n	8000ea2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e9e:	f009 fee9 	bl	800ac74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000004 	.word	0x20000004
 8000ed0:	200015d0 	.word	0x200015d0

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200015d0 	.word	0x200015d0

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_Delay+0x40>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000004 	.word	0x20000004

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <__NVIC_EnableIRQ+0x38>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ff4c 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010b2:	f7ff ff61 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	68b9      	ldr	r1, [r7, #8]
 80010bc:	6978      	ldr	r0, [r7, #20]
 80010be:	f7ff ffb1 	bl	8001024 <NVIC_EncodePriority>
 80010c2:	4602      	mov	r2, r0
 80010c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff80 	bl	8000fd0 <__NVIC_SetPriority>
}
 80010d0:	bf00      	nop
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff54 	bl	8000f94 <__NVIC_EnableIRQ>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e014      	b.n	8001130 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	791b      	ldrb	r3, [r3, #4]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d105      	bne.n	800111c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f009 fdd4 	bl	800acc4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2202      	movs	r2, #2
 8001120:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	795b      	ldrb	r3, [r3, #5]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d101      	bne.n	8001156 <HAL_DAC_Start_DMA+0x1e>
 8001152:	2302      	movs	r3, #2
 8001154:	e09e      	b.n	8001294 <HAL_DAC_Start_DMA+0x15c>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2201      	movs	r2, #1
 800115a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2202      	movs	r2, #2
 8001160:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d12a      	bne.n	80011be <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	4a4b      	ldr	r2, [pc, #300]	; (800129c <HAL_DAC_Start_DMA+0x164>)
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	4a4a      	ldr	r2, [pc, #296]	; (80012a0 <HAL_DAC_Start_DMA+0x168>)
 8001176:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	4a49      	ldr	r2, [pc, #292]	; (80012a4 <HAL_DAC_Start_DMA+0x16c>)
 800117e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800118e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	2b04      	cmp	r3, #4
 8001194:	d009      	beq.n	80011aa <HAL_DAC_Start_DMA+0x72>
 8001196:	2b08      	cmp	r3, #8
 8001198:	d00c      	beq.n	80011b4 <HAL_DAC_Start_DMA+0x7c>
 800119a:	2b00      	cmp	r3, #0
 800119c:	d000      	beq.n	80011a0 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800119e:	e039      	b.n	8001214 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3308      	adds	r3, #8
 80011a6:	613b      	str	r3, [r7, #16]
        break;
 80011a8:	e034      	b.n	8001214 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	330c      	adds	r3, #12
 80011b0:	613b      	str	r3, [r7, #16]
        break;
 80011b2:	e02f      	b.n	8001214 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	3310      	adds	r3, #16
 80011ba:	613b      	str	r3, [r7, #16]
        break;
 80011bc:	e02a      	b.n	8001214 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	4a39      	ldr	r2, [pc, #228]	; (80012a8 <HAL_DAC_Start_DMA+0x170>)
 80011c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	4a38      	ldr	r2, [pc, #224]	; (80012ac <HAL_DAC_Start_DMA+0x174>)
 80011cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	4a37      	ldr	r2, [pc, #220]	; (80012b0 <HAL_DAC_Start_DMA+0x178>)
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011e4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80011e6:	6a3b      	ldr	r3, [r7, #32]
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d009      	beq.n	8001200 <HAL_DAC_Start_DMA+0xc8>
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d00c      	beq.n	800120a <HAL_DAC_Start_DMA+0xd2>
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d000      	beq.n	80011f6 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80011f4:	e00e      	b.n	8001214 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3314      	adds	r3, #20
 80011fc:	613b      	str	r3, [r7, #16]
        break;
 80011fe:	e009      	b.n	8001214 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3318      	adds	r3, #24
 8001206:	613b      	str	r3, [r7, #16]
        break;
 8001208:	e004      	b.n	8001214 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	331c      	adds	r3, #28
 8001210:	613b      	str	r3, [r7, #16]
        break;
 8001212:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d111      	bne.n	800123e <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001228:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6898      	ldr	r0, [r3, #8]
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	f000 fb82 	bl	800193c <HAL_DMA_Start_IT>
 8001238:	4603      	mov	r3, r0
 800123a:	75fb      	strb	r3, [r7, #23]
 800123c:	e010      	b.n	8001260 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800124c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	68d8      	ldr	r0, [r3, #12]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	f000 fb70 	bl	800193c <HAL_DMA_Start_IT>
 800125c:	4603      	mov	r3, r0
 800125e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2200      	movs	r2, #0
 8001264:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001266:	7dfb      	ldrb	r3, [r7, #23]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10c      	bne.n	8001286 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6819      	ldr	r1, [r3, #0]
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	2201      	movs	r2, #1
 800127a:	409a      	lsls	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	e005      	b.n	8001292 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	f043 0204 	orr.w	r2, r3, #4
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001292:	7dfb      	ldrb	r3, [r7, #23]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	080016c5 	.word	0x080016c5
 80012a0:	080016e7 	.word	0x080016e7
 80012a4:	08001703 	.word	0x08001703
 80012a8:	08001781 	.word	0x08001781
 80012ac:	080017a3 	.word	0x080017a3
 80012b0:	080017bf 	.word	0x080017bf

080012b4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6819      	ldr	r1, [r3, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	400a      	ands	r2, r1
 80012da:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6819      	ldr	r1, [r3, #0]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	2201      	movs	r2, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	400a      	ands	r2, r1
 80012f6:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10d      	bne.n	800131a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fb95 	bl	8001a32 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	e00c      	b.n	8001334 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fb87 	bl	8001a32 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001332:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001354:	d120      	bne.n	8001398 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001364:	d118      	bne.n	8001398 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2204      	movs	r2, #4
 800136a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	f043 0201 	orr.w	r2, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001380:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001390:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f84b 	bl	800142e <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013a6:	d120      	bne.n	80013ea <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013b6:	d118      	bne.n	80013ea <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2204      	movs	r2, #4
 80013bc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	f043 0202 	orr.w	r2, r3, #2
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80013d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80013e2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f9c1 	bl	800176c <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	795b      	ldrb	r3, [r3, #5]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_DAC_ConfigChannel+0x1c>
 800145c:	2302      	movs	r3, #2
 800145e:	e12a      	b.n	80016b6 <HAL_DAC_ConfigChannel+0x272>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2201      	movs	r2, #1
 8001464:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2202      	movs	r2, #2
 800146a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b04      	cmp	r3, #4
 8001472:	d174      	bne.n	800155e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001474:	f7ff fd2e 	bl	8000ed4 <HAL_GetTick>
 8001478:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d134      	bne.n	80014ea <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001480:	e011      	b.n	80014a6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001482:	f7ff fd27 	bl	8000ed4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b01      	cmp	r3, #1
 800148e:	d90a      	bls.n	80014a6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	f043 0208 	orr.w	r2, r3, #8
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2203      	movs	r2, #3
 80014a0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e107      	b.n	80016b6 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1e6      	bne.n	8001482 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff fd19 	bl	8000eec <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	69d2      	ldr	r2, [r2, #28]
 80014c2:	641a      	str	r2, [r3, #64]	; 0x40
 80014c4:	e01e      	b.n	8001504 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80014c6:	f7ff fd05 	bl	8000ed4 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d90a      	bls.n	80014ea <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	f043 0208 	orr.w	r2, r3, #8
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2203      	movs	r2, #3
 80014e4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e0e5      	b.n	80016b6 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	dbe8      	blt.n	80014c6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff fcf9 	bl	8000eec <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	69d2      	ldr	r2, [r2, #28]
 8001502:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	ea02 0103 	and.w	r1, r2, r3
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	6a1a      	ldr	r2, [r3, #32]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f003 0310 	and.w	r3, r3, #16
 8001528:	409a      	lsls	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	21ff      	movs	r1, #255	; 0xff
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	ea02 0103 	and.w	r1, r2, r3
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	409a      	lsls	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d11d      	bne.n	80015a2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156c:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f003 0310 	and.w	r3, r3, #16
 8001574:	221f      	movs	r2, #31
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	69fa      	ldr	r2, [r7, #28]
 800157e:	4013      	ands	r3, r2
 8001580:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69fa      	ldr	r2, [r7, #28]
 8001596:	4313      	orrs	r3, r2
 8001598:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a8:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f003 0310 	and.w	r3, r3, #16
 80015b0:	2207      	movs	r2, #7
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69fa      	ldr	r2, [r7, #28]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69fa      	ldr	r2, [r7, #28]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6819      	ldr	r1, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	400a      	ands	r2, r1
 8001606:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	f640 72fe 	movw	r2, #4094	; 0xffe
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	69fa      	ldr	r2, [r7, #28]
 8001622:	4013      	ands	r3, r2
 8001624:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	4313      	orrs	r3, r2
 800163c:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001646:	d104      	bne.n	8001652 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800164e:	61fb      	str	r3, [r7, #28]
 8001650:	e018      	b.n	8001684 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d104      	bne.n	8001664 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	e00f      	b.n	8001684 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001664:	f002 fa90 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 8001668:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <HAL_DAC_ConfigChannel+0x27c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d904      	bls.n	800167c <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	e003      	b.n	8001684 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001682:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6819      	ldr	r1, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	22c0      	movs	r2, #192	; 0xc0
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	400a      	ands	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2201      	movs	r2, #1
 80016ac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3720      	adds	r7, #32
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	04c4b400 	.word	0x04c4b400

080016c4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f7ff fe8d 	bl	80013f2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2201      	movs	r2, #1
 80016dc:	711a      	strb	r2, [r3, #4]
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b084      	sub	sp, #16
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f7ff fe86 	bl	8001406 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	f043 0204 	orr.w	r2, r3, #4
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f7ff fe7c 	bl	800141a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2201      	movs	r2, #1
 8001726:	711a      	strb	r2, [r3, #4]
}
 8001728:	bf00      	nop
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f7ff ffce 	bl	8001730 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2201      	movs	r2, #1
 8001798:	711a      	strb	r2, [r3, #4]
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ae:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f7ff ffc7 	bl	8001744 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ca:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	f043 0204 	orr.w	r2, r3, #4
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f7ff ffbd 	bl	8001758 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2201      	movs	r2, #1
 80017e2:	711a      	strb	r2, [r3, #4]
}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e08d      	b.n	800191a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_DMA_Init+0x138>)
 8001806:	429a      	cmp	r2, r3
 8001808:	d80f      	bhi.n	800182a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	4b45      	ldr	r3, [pc, #276]	; (8001928 <HAL_DMA_Init+0x13c>)
 8001812:	4413      	add	r3, r2
 8001814:	4a45      	ldr	r2, [pc, #276]	; (800192c <HAL_DMA_Init+0x140>)
 8001816:	fba2 2303 	umull	r2, r3, r2, r3
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	009a      	lsls	r2, r3, #2
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a42      	ldr	r2, [pc, #264]	; (8001930 <HAL_DMA_Init+0x144>)
 8001826:	641a      	str	r2, [r3, #64]	; 0x40
 8001828:	e00e      	b.n	8001848 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	4b40      	ldr	r3, [pc, #256]	; (8001934 <HAL_DMA_Init+0x148>)
 8001832:	4413      	add	r3, r2
 8001834:	4a3d      	ldr	r2, [pc, #244]	; (800192c <HAL_DMA_Init+0x140>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	009a      	lsls	r2, r3, #2
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a3c      	ldr	r2, [pc, #240]	; (8001938 <HAL_DMA_Init+0x14c>)
 8001846:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2202      	movs	r2, #2
 800184c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800185e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001862:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800186c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001878:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001884:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	4313      	orrs	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 fa12 	bl	8001cc4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018a8:	d102      	bne.n	80018b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018c4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d010      	beq.n	80018f0 <HAL_DMA_Init+0x104>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d80c      	bhi.n	80018f0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 fa32 	bl	8001d40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	e008      	b.n	8001902 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40020407 	.word	0x40020407
 8001928:	bffdfff8 	.word	0xbffdfff8
 800192c:	cccccccd 	.word	0xcccccccd
 8001930:	40020000 	.word	0x40020000
 8001934:	bffdfbf8 	.word	0xbffdfbf8
 8001938:	40020400 	.word	0x40020400

0800193c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_DMA_Start_IT+0x20>
 8001958:	2302      	movs	r3, #2
 800195a:	e066      	b.n	8001a2a <HAL_DMA_Start_IT+0xee>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b01      	cmp	r3, #1
 800196e:	d155      	bne.n	8001a1c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2202      	movs	r2, #2
 8001974:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0201 	bic.w	r2, r2, #1
 800198c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	68b9      	ldr	r1, [r7, #8]
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 f957 	bl	8001c48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d008      	beq.n	80019b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f042 020e 	orr.w	r2, r2, #14
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	e00f      	b.n	80019d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0204 	bic.w	r2, r2, #4
 80019c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 020a 	orr.w	r2, r2, #10
 80019d2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019f0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d007      	beq.n	8001a0a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a08:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f042 0201 	orr.w	r2, r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	e005      	b.n	8001a28 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a24:	2302      	movs	r3, #2
 8001a26:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d008      	beq.n	8001a5c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e040      	b.n	8001ade <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 020e 	bic.w	r2, r2, #14
 8001a6a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a7a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0201 	bic.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a90:	f003 021c 	and.w	r2, r3, #28
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	2101      	movs	r1, #1
 8001a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001aa8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00c      	beq.n	8001acc <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ac0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001aca:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f003 031c 	and.w	r3, r3, #28
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d026      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x7a>
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d021      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0320 	and.w	r3, r3, #32
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d107      	bne.n	8001b3e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0204 	bic.w	r2, r2, #4
 8001b3c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f003 021c 	and.w	r2, r3, #28
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	2104      	movs	r1, #4
 8001b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b50:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d071      	beq.n	8001c3e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001b62:	e06c      	b.n	8001c3e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b68:	f003 031c 	and.w	r3, r3, #28
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d02e      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0xec>
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d029      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0320 	and.w	r3, r3, #32
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10b      	bne.n	8001ba8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 020a 	bic.w	r2, r2, #10
 8001b9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	f003 021c 	and.w	r2, r3, #28
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	2102      	movs	r1, #2
 8001bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d038      	beq.n	8001c3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001bd4:	e033      	b.n	8001c3e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f003 031c 	and.w	r3, r3, #28
 8001bde:	2208      	movs	r2, #8
 8001be0:	409a      	lsls	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d02a      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x156>
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d025      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 020e 	bic.w	r2, r2, #14
 8001c02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c08:	f003 021c 	and.w	r2, r3, #28
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	2101      	movs	r1, #1
 8001c12:	fa01 f202 	lsl.w	r2, r1, r2
 8001c16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d004      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
}
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c5e:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d004      	beq.n	8001c72 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c70:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f003 021c 	and.w	r2, r3, #28
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	2101      	movs	r1, #1
 8001c80:	fa01 f202 	lsl.w	r2, r1, r2
 8001c84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b10      	cmp	r3, #16
 8001c94:	d108      	bne.n	8001ca8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ca6:	e007      	b.n	8001cb8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	60da      	str	r2, [r3, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d80a      	bhi.n	8001cee <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ce4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6493      	str	r3, [r2, #72]	; 0x48
 8001cec:	e007      	b.n	8001cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	009a      	lsls	r2, r3, #2
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001cf8:	4413      	add	r3, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	3b08      	subs	r3, #8
 8001d06:	4a0c      	ldr	r2, [pc, #48]	; (8001d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001d08:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001d14:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	40020407 	.word	0x40020407
 8001d34:	4002081c 	.word	0x4002081c
 8001d38:	cccccccd 	.word	0xcccccccd
 8001d3c:	40020880 	.word	0x40020880

08001d40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	461a      	mov	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001d62:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	1000823f 	.word	0x1000823f
 8001d84:	40020940 	.word	0x40020940

08001d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d96:	e166      	b.n	8002066 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	fa01 f303 	lsl.w	r3, r1, r3
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 8158 	beq.w	8002060 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d00b      	beq.n	8001dd0 <HAL_GPIO_Init+0x48>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d007      	beq.n	8001dd0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dc4:	2b11      	cmp	r3, #17
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b12      	cmp	r3, #18
 8001dce:	d130      	bne.n	8001e32 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e06:	2201      	movs	r2, #1
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	f003 0201 	and.w	r2, r3, #1
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0xea>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b12      	cmp	r3, #18
 8001e70:	d123      	bne.n	8001eba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	08da      	lsrs	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3208      	adds	r2, #8
 8001e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	220f      	movs	r2, #15
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	08da      	lsrs	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3208      	adds	r2, #8
 8001eb4:	6939      	ldr	r1, [r7, #16]
 8001eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0203 	and.w	r2, r3, #3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 80b2 	beq.w	8002060 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efc:	4b61      	ldr	r3, [pc, #388]	; (8002084 <HAL_GPIO_Init+0x2fc>)
 8001efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f00:	4a60      	ldr	r2, [pc, #384]	; (8002084 <HAL_GPIO_Init+0x2fc>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6613      	str	r3, [r2, #96]	; 0x60
 8001f08:	4b5e      	ldr	r3, [pc, #376]	; (8002084 <HAL_GPIO_Init+0x2fc>)
 8001f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f14:	4a5c      	ldr	r2, [pc, #368]	; (8002088 <HAL_GPIO_Init+0x300>)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f3e:	d02b      	beq.n	8001f98 <HAL_GPIO_Init+0x210>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a52      	ldr	r2, [pc, #328]	; (800208c <HAL_GPIO_Init+0x304>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d025      	beq.n	8001f94 <HAL_GPIO_Init+0x20c>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a51      	ldr	r2, [pc, #324]	; (8002090 <HAL_GPIO_Init+0x308>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d01f      	beq.n	8001f90 <HAL_GPIO_Init+0x208>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a50      	ldr	r2, [pc, #320]	; (8002094 <HAL_GPIO_Init+0x30c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d019      	beq.n	8001f8c <HAL_GPIO_Init+0x204>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a4f      	ldr	r2, [pc, #316]	; (8002098 <HAL_GPIO_Init+0x310>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <HAL_GPIO_Init+0x200>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a4e      	ldr	r2, [pc, #312]	; (800209c <HAL_GPIO_Init+0x314>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00d      	beq.n	8001f84 <HAL_GPIO_Init+0x1fc>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a4d      	ldr	r2, [pc, #308]	; (80020a0 <HAL_GPIO_Init+0x318>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <HAL_GPIO_Init+0x1f8>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a4c      	ldr	r2, [pc, #304]	; (80020a4 <HAL_GPIO_Init+0x31c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d101      	bne.n	8001f7c <HAL_GPIO_Init+0x1f4>
 8001f78:	2307      	movs	r3, #7
 8001f7a:	e00e      	b.n	8001f9a <HAL_GPIO_Init+0x212>
 8001f7c:	2308      	movs	r3, #8
 8001f7e:	e00c      	b.n	8001f9a <HAL_GPIO_Init+0x212>
 8001f80:	2306      	movs	r3, #6
 8001f82:	e00a      	b.n	8001f9a <HAL_GPIO_Init+0x212>
 8001f84:	2305      	movs	r3, #5
 8001f86:	e008      	b.n	8001f9a <HAL_GPIO_Init+0x212>
 8001f88:	2304      	movs	r3, #4
 8001f8a:	e006      	b.n	8001f9a <HAL_GPIO_Init+0x212>
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e004      	b.n	8001f9a <HAL_GPIO_Init+0x212>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e002      	b.n	8001f9a <HAL_GPIO_Init+0x212>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_GPIO_Init+0x212>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	f002 0203 	and.w	r2, r2, #3
 8001fa0:	0092      	lsls	r2, r2, #2
 8001fa2:	4093      	lsls	r3, r2
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001faa:	4937      	ldr	r1, [pc, #220]	; (8002088 <HAL_GPIO_Init+0x300>)
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fb8:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <HAL_GPIO_Init+0x320>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fdc:	4a32      	ldr	r2, [pc, #200]	; (80020a8 <HAL_GPIO_Init+0x320>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001fe2:	4b31      	ldr	r3, [pc, #196]	; (80020a8 <HAL_GPIO_Init+0x320>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002006:	4a28      	ldr	r2, [pc, #160]	; (80020a8 <HAL_GPIO_Init+0x320>)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800200c:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <HAL_GPIO_Init+0x320>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002030:	4a1d      	ldr	r2, [pc, #116]	; (80020a8 <HAL_GPIO_Init+0x320>)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002036:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <HAL_GPIO_Init+0x320>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43db      	mvns	r3, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800205a:	4a13      	ldr	r2, [pc, #76]	; (80020a8 <HAL_GPIO_Init+0x320>)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	3301      	adds	r3, #1
 8002064:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	f47f ae91 	bne.w	8001d98 <HAL_GPIO_Init+0x10>
  }
}
 8002076:	bf00      	nop
 8002078:	371c      	adds	r7, #28
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	40010000 	.word	0x40010000
 800208c:	48000400 	.word	0x48000400
 8002090:	48000800 	.word	0x48000800
 8002094:	48000c00 	.word	0x48000c00
 8002098:	48001000 	.word	0x48001000
 800209c:	48001400 	.word	0x48001400
 80020a0:	48001800 	.word	0x48001800
 80020a4:	48001c00 	.word	0x48001c00
 80020a8:	40010400 	.word	0x40010400

080020ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80020ba:	e0c9      	b.n	8002250 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80020bc:	2201      	movs	r2, #1
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	4013      	ands	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 80bc 	beq.w	800224a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80020d2:	4a66      	ldr	r2, [pc, #408]	; (800226c <HAL_GPIO_DeInit+0x1c0>)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	3302      	adds	r3, #2
 80020da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020de:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	220f      	movs	r2, #15
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4013      	ands	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020fa:	d02b      	beq.n	8002154 <HAL_GPIO_DeInit+0xa8>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a5c      	ldr	r2, [pc, #368]	; (8002270 <HAL_GPIO_DeInit+0x1c4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d025      	beq.n	8002150 <HAL_GPIO_DeInit+0xa4>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a5b      	ldr	r2, [pc, #364]	; (8002274 <HAL_GPIO_DeInit+0x1c8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d01f      	beq.n	800214c <HAL_GPIO_DeInit+0xa0>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a5a      	ldr	r2, [pc, #360]	; (8002278 <HAL_GPIO_DeInit+0x1cc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d019      	beq.n	8002148 <HAL_GPIO_DeInit+0x9c>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a59      	ldr	r2, [pc, #356]	; (800227c <HAL_GPIO_DeInit+0x1d0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d013      	beq.n	8002144 <HAL_GPIO_DeInit+0x98>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a58      	ldr	r2, [pc, #352]	; (8002280 <HAL_GPIO_DeInit+0x1d4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d00d      	beq.n	8002140 <HAL_GPIO_DeInit+0x94>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a57      	ldr	r2, [pc, #348]	; (8002284 <HAL_GPIO_DeInit+0x1d8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d007      	beq.n	800213c <HAL_GPIO_DeInit+0x90>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a56      	ldr	r2, [pc, #344]	; (8002288 <HAL_GPIO_DeInit+0x1dc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d101      	bne.n	8002138 <HAL_GPIO_DeInit+0x8c>
 8002134:	2307      	movs	r3, #7
 8002136:	e00e      	b.n	8002156 <HAL_GPIO_DeInit+0xaa>
 8002138:	2308      	movs	r3, #8
 800213a:	e00c      	b.n	8002156 <HAL_GPIO_DeInit+0xaa>
 800213c:	2306      	movs	r3, #6
 800213e:	e00a      	b.n	8002156 <HAL_GPIO_DeInit+0xaa>
 8002140:	2305      	movs	r3, #5
 8002142:	e008      	b.n	8002156 <HAL_GPIO_DeInit+0xaa>
 8002144:	2304      	movs	r3, #4
 8002146:	e006      	b.n	8002156 <HAL_GPIO_DeInit+0xaa>
 8002148:	2303      	movs	r3, #3
 800214a:	e004      	b.n	8002156 <HAL_GPIO_DeInit+0xaa>
 800214c:	2302      	movs	r3, #2
 800214e:	e002      	b.n	8002156 <HAL_GPIO_DeInit+0xaa>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_GPIO_DeInit+0xaa>
 8002154:	2300      	movs	r3, #0
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	f002 0203 	and.w	r2, r2, #3
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	4093      	lsls	r3, r2
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	429a      	cmp	r2, r3
 8002164:	d132      	bne.n	80021cc <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002166:	4b49      	ldr	r3, [pc, #292]	; (800228c <HAL_GPIO_DeInit+0x1e0>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	43db      	mvns	r3, r3
 800216e:	4947      	ldr	r1, [pc, #284]	; (800228c <HAL_GPIO_DeInit+0x1e0>)
 8002170:	4013      	ands	r3, r2
 8002172:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002174:	4b45      	ldr	r3, [pc, #276]	; (800228c <HAL_GPIO_DeInit+0x1e0>)
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	43db      	mvns	r3, r3
 800217c:	4943      	ldr	r1, [pc, #268]	; (800228c <HAL_GPIO_DeInit+0x1e0>)
 800217e:	4013      	ands	r3, r2
 8002180:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002182:	4b42      	ldr	r3, [pc, #264]	; (800228c <HAL_GPIO_DeInit+0x1e0>)
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	4940      	ldr	r1, [pc, #256]	; (800228c <HAL_GPIO_DeInit+0x1e0>)
 800218c:	4013      	ands	r3, r2
 800218e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002190:	4b3e      	ldr	r3, [pc, #248]	; (800228c <HAL_GPIO_DeInit+0x1e0>)
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	43db      	mvns	r3, r3
 8002198:	493c      	ldr	r1, [pc, #240]	; (800228c <HAL_GPIO_DeInit+0x1e0>)
 800219a:	4013      	ands	r3, r2
 800219c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	220f      	movs	r2, #15
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80021ae:	4a2f      	ldr	r2, [pc, #188]	; (800226c <HAL_GPIO_DeInit+0x1c0>)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3302      	adds	r3, #2
 80021b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	43da      	mvns	r2, r3
 80021be:	482b      	ldr	r0, [pc, #172]	; (800226c <HAL_GPIO_DeInit+0x1c0>)
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	400a      	ands	r2, r1
 80021c6:	3302      	adds	r3, #2
 80021c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	2103      	movs	r1, #3
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	08da      	lsrs	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3208      	adds	r2, #8
 80021e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	220f      	movs	r2, #15
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	08d2      	lsrs	r2, r2, #3
 8002200:	4019      	ands	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3208      	adds	r2, #8
 8002206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2103      	movs	r1, #3
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	401a      	ands	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	2101      	movs	r1, #1
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	401a      	ands	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2103      	movs	r1, #3
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	401a      	ands	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	3301      	adds	r3, #1
 800224e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	f47f af2f 	bne.w	80020bc <HAL_GPIO_DeInit+0x10>
  }
}
 800225e:	bf00      	nop
 8002260:	371c      	adds	r7, #28
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40010000 	.word	0x40010000
 8002270:	48000400 	.word	0x48000400
 8002274:	48000800 	.word	0x48000800
 8002278:	48000c00 	.word	0x48000c00
 800227c:	48001000 	.word	0x48001000
 8002280:	48001400 	.word	0x48001400
 8002284:	48001800 	.word	0x48001800
 8002288:	48001c00 	.word	0x48001c00
 800228c:	40010400 	.word	0x40010400

08002290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	807b      	strh	r3, [r7, #2]
 800229c:	4613      	mov	r3, r2
 800229e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a0:	787b      	ldrb	r3, [r7, #1]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022ac:	e002      	b.n	80022b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ae:	887a      	ldrh	r2, [r7, #2]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d006      	beq.n	80022e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022d8:	88fb      	ldrh	r3, [r7, #6]
 80022da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022dc:	88fb      	ldrh	r3, [r7, #6]
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f806 	bl	80022f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40010400 	.word	0x40010400

080022f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e081      	b.n	800241c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d106      	bne.n	8002332 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f008 fd3f 	bl	800adb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2224      	movs	r2, #36	; 0x24
 8002336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0201 	bic.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002356:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002366:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d107      	bne.n	8002380 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	e006      	b.n	800238e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800238c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d104      	bne.n	80023a0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800239e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023c2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	ea42 0103 	orr.w	r1, r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	021a      	lsls	r2, r3, #8
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69d9      	ldr	r1, [r3, #28]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1a      	ldr	r2, [r3, #32]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0201 	orr.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e021      	b.n	800247a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2224      	movs	r2, #36	; 0x24
 800243a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0201 	bic.w	r2, r2, #1
 800244c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f008 fcf2 	bl	800ae38 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	4608      	mov	r0, r1
 800248e:	4611      	mov	r1, r2
 8002490:	461a      	mov	r2, r3
 8002492:	4603      	mov	r3, r0
 8002494:	817b      	strh	r3, [r7, #10]
 8002496:	460b      	mov	r3, r1
 8002498:	813b      	strh	r3, [r7, #8]
 800249a:	4613      	mov	r3, r2
 800249c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	f040 80f9 	bne.w	800269e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <HAL_I2C_Mem_Write+0x34>
 80024b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d105      	bne.n	80024c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0ed      	b.n	80026a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_I2C_Mem_Write+0x4e>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e0e6      	b.n	80026a0 <HAL_I2C_Mem_Write+0x21c>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024da:	f7fe fcfb 	bl	8000ed4 <HAL_GetTick>
 80024de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2319      	movs	r3, #25
 80024e6:	2201      	movs	r2, #1
 80024e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fac3 	bl	8002a78 <I2C_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0d1      	b.n	80026a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2221      	movs	r2, #33	; 0x21
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2240      	movs	r2, #64	; 0x40
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a3a      	ldr	r2, [r7, #32]
 8002516:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800251c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002524:	88f8      	ldrh	r0, [r7, #6]
 8002526:	893a      	ldrh	r2, [r7, #8]
 8002528:	8979      	ldrh	r1, [r7, #10]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	4603      	mov	r3, r0
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f9d3 	bl	80028e0 <I2C_RequestMemoryWrite>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0a9      	b.n	80026a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	2bff      	cmp	r3, #255	; 0xff
 8002554:	d90e      	bls.n	8002574 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	22ff      	movs	r2, #255	; 0xff
 800255a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002560:	b2da      	uxtb	r2, r3
 8002562:	8979      	ldrh	r1, [r7, #10]
 8002564:	2300      	movs	r3, #0
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 fba5 	bl	8002cbc <I2C_TransferConfig>
 8002572:	e00f      	b.n	8002594 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	b2da      	uxtb	r2, r3
 8002584:	8979      	ldrh	r1, [r7, #10]
 8002586:	2300      	movs	r3, #0
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 fb94 	bl	8002cbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 faad 	bl	8002af8 <I2C_WaitOnTXISFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e07b      	b.n	80026a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	781a      	ldrb	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d034      	beq.n	800264c <HAL_I2C_Mem_Write+0x1c8>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d130      	bne.n	800264c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	2200      	movs	r2, #0
 80025f2:	2180      	movs	r1, #128	; 0x80
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fa3f 	bl	8002a78 <I2C_WaitOnFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e04d      	b.n	80026a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002608:	b29b      	uxth	r3, r3
 800260a:	2bff      	cmp	r3, #255	; 0xff
 800260c:	d90e      	bls.n	800262c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	22ff      	movs	r2, #255	; 0xff
 8002612:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	b2da      	uxtb	r2, r3
 800261a:	8979      	ldrh	r1, [r7, #10]
 800261c:	2300      	movs	r3, #0
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 fb49 	bl	8002cbc <I2C_TransferConfig>
 800262a:	e00f      	b.n	800264c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263a:	b2da      	uxtb	r2, r3
 800263c:	8979      	ldrh	r1, [r7, #10]
 800263e:	2300      	movs	r3, #0
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fb38 	bl	8002cbc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d19e      	bne.n	8002594 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 fa8c 	bl	8002b78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e01a      	b.n	80026a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2220      	movs	r2, #32
 8002670:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <HAL_I2C_Mem_Write+0x224>)
 800267e:	400b      	ands	r3, r1
 8002680:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800269e:	2302      	movs	r3, #2
  }
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	fe00e800 	.word	0xfe00e800

080026ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	4608      	mov	r0, r1
 80026b6:	4611      	mov	r1, r2
 80026b8:	461a      	mov	r2, r3
 80026ba:	4603      	mov	r3, r0
 80026bc:	817b      	strh	r3, [r7, #10]
 80026be:	460b      	mov	r3, r1
 80026c0:	813b      	strh	r3, [r7, #8]
 80026c2:	4613      	mov	r3, r2
 80026c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	f040 80fd 	bne.w	80028ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_I2C_Mem_Read+0x34>
 80026da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d105      	bne.n	80026ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0f1      	b.n	80028d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_I2C_Mem_Read+0x4e>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e0ea      	b.n	80028d0 <HAL_I2C_Mem_Read+0x224>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002702:	f7fe fbe7 	bl	8000ed4 <HAL_GetTick>
 8002706:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	2319      	movs	r3, #25
 800270e:	2201      	movs	r2, #1
 8002710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 f9af 	bl	8002a78 <I2C_WaitOnFlagUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0d5      	b.n	80028d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2222      	movs	r2, #34	; 0x22
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2240      	movs	r2, #64	; 0x40
 8002730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a3a      	ldr	r2, [r7, #32]
 800273e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800274c:	88f8      	ldrh	r0, [r7, #6]
 800274e:	893a      	ldrh	r2, [r7, #8]
 8002750:	8979      	ldrh	r1, [r7, #10]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	4603      	mov	r3, r0
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f913 	bl	8002988 <I2C_RequestMemoryRead>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0ad      	b.n	80028d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	2bff      	cmp	r3, #255	; 0xff
 800277c:	d90e      	bls.n	800279c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	22ff      	movs	r2, #255	; 0xff
 8002782:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002788:	b2da      	uxtb	r2, r3
 800278a:	8979      	ldrh	r1, [r7, #10]
 800278c:	4b52      	ldr	r3, [pc, #328]	; (80028d8 <HAL_I2C_Mem_Read+0x22c>)
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 fa91 	bl	8002cbc <I2C_TransferConfig>
 800279a:	e00f      	b.n	80027bc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	8979      	ldrh	r1, [r7, #10]
 80027ae:	4b4a      	ldr	r3, [pc, #296]	; (80028d8 <HAL_I2C_Mem_Read+0x22c>)
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 fa80 	bl	8002cbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c2:	2200      	movs	r2, #0
 80027c4:	2104      	movs	r1, #4
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f956 	bl	8002a78 <I2C_WaitOnFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e07c      	b.n	80028d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d034      	beq.n	800287c <HAL_I2C_Mem_Read+0x1d0>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002816:	2b00      	cmp	r3, #0
 8002818:	d130      	bne.n	800287c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002820:	2200      	movs	r2, #0
 8002822:	2180      	movs	r1, #128	; 0x80
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f927 	bl	8002a78 <I2C_WaitOnFlagUntilTimeout>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e04d      	b.n	80028d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002838:	b29b      	uxth	r3, r3
 800283a:	2bff      	cmp	r3, #255	; 0xff
 800283c:	d90e      	bls.n	800285c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	22ff      	movs	r2, #255	; 0xff
 8002842:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002848:	b2da      	uxtb	r2, r3
 800284a:	8979      	ldrh	r1, [r7, #10]
 800284c:	2300      	movs	r3, #0
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fa31 	bl	8002cbc <I2C_TransferConfig>
 800285a:	e00f      	b.n	800287c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286a:	b2da      	uxtb	r2, r3
 800286c:	8979      	ldrh	r1, [r7, #10]
 800286e:	2300      	movs	r3, #0
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 fa20 	bl	8002cbc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d19a      	bne.n	80027bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f974 	bl	8002b78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e01a      	b.n	80028d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2220      	movs	r2, #32
 80028a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_I2C_Mem_Read+0x230>)
 80028ae:	400b      	ands	r3, r1
 80028b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e000      	b.n	80028d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80028ce:	2302      	movs	r3, #2
  }
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	80002400 	.word	0x80002400
 80028dc:	fe00e800 	.word	0xfe00e800

080028e0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	4608      	mov	r0, r1
 80028ea:	4611      	mov	r1, r2
 80028ec:	461a      	mov	r2, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	817b      	strh	r3, [r7, #10]
 80028f2:	460b      	mov	r3, r1
 80028f4:	813b      	strh	r3, [r7, #8]
 80028f6:	4613      	mov	r3, r2
 80028f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	8979      	ldrh	r1, [r7, #10]
 8002900:	4b20      	ldr	r3, [pc, #128]	; (8002984 <I2C_RequestMemoryWrite+0xa4>)
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f9d7 	bl	8002cbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	69b9      	ldr	r1, [r7, #24]
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f8f0 	bl	8002af8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e02c      	b.n	800297c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d105      	bne.n	8002934 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002928:	893b      	ldrh	r3, [r7, #8]
 800292a:	b2da      	uxtb	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	629a      	str	r2, [r3, #40]	; 0x28
 8002932:	e015      	b.n	8002960 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002934:	893b      	ldrh	r3, [r7, #8]
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	b29b      	uxth	r3, r3
 800293a:	b2da      	uxtb	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	69b9      	ldr	r1, [r7, #24]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f8d6 	bl	8002af8 <I2C_WaitOnTXISFlagUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e012      	b.n	800297c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002956:	893b      	ldrh	r3, [r7, #8]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	2200      	movs	r2, #0
 8002968:	2180      	movs	r1, #128	; 0x80
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f884 	bl	8002a78 <I2C_WaitOnFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	80002000 	.word	0x80002000

08002988 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	4608      	mov	r0, r1
 8002992:	4611      	mov	r1, r2
 8002994:	461a      	mov	r2, r3
 8002996:	4603      	mov	r3, r0
 8002998:	817b      	strh	r3, [r7, #10]
 800299a:	460b      	mov	r3, r1
 800299c:	813b      	strh	r3, [r7, #8]
 800299e:	4613      	mov	r3, r2
 80029a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	8979      	ldrh	r1, [r7, #10]
 80029a8:	4b20      	ldr	r3, [pc, #128]	; (8002a2c <I2C_RequestMemoryRead+0xa4>)
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2300      	movs	r3, #0
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f984 	bl	8002cbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b4:	69fa      	ldr	r2, [r7, #28]
 80029b6:	69b9      	ldr	r1, [r7, #24]
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f89d 	bl	8002af8 <I2C_WaitOnTXISFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e02c      	b.n	8002a22 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029c8:	88fb      	ldrh	r3, [r7, #6]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d105      	bne.n	80029da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029ce:	893b      	ldrh	r3, [r7, #8]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28
 80029d8:	e015      	b.n	8002a06 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029da:	893b      	ldrh	r3, [r7, #8]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	b29b      	uxth	r3, r3
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	69b9      	ldr	r1, [r7, #24]
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f883 	bl	8002af8 <I2C_WaitOnTXISFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e012      	b.n	8002a22 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029fc:	893b      	ldrh	r3, [r7, #8]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2140      	movs	r1, #64	; 0x40
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f831 	bl	8002a78 <I2C_WaitOnFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	80002000 	.word	0x80002000

08002a30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d103      	bne.n	8002a4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d007      	beq.n	8002a6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	619a      	str	r2, [r3, #24]
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	4613      	mov	r3, r2
 8002a86:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a88:	e022      	b.n	8002ad0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a90:	d01e      	beq.n	8002ad0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a92:	f7fe fa1f 	bl	8000ed4 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d302      	bcc.n	8002aa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d113      	bne.n	8002ad0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	f043 0220 	orr.w	r2, r3, #32
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e00f      	b.n	8002af0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d0cd      	beq.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b04:	e02c      	b.n	8002b60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f870 	bl	8002bf0 <I2C_IsAcknowledgeFailed>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e02a      	b.n	8002b70 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b20:	d01e      	beq.n	8002b60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b22:	f7fe f9d7 	bl	8000ed4 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d302      	bcc.n	8002b38 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d113      	bne.n	8002b60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	f043 0220 	orr.w	r2, r3, #32
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e007      	b.n	8002b70 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d1cb      	bne.n	8002b06 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b84:	e028      	b.n	8002bd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f830 	bl	8002bf0 <I2C_IsAcknowledgeFailed>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e026      	b.n	8002be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9a:	f7fe f99b 	bl	8000ed4 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d302      	bcc.n	8002bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d113      	bne.n	8002bd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb4:	f043 0220 	orr.w	r2, r3, #32
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e007      	b.n	8002be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d1cf      	bne.n	8002b86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b10      	cmp	r3, #16
 8002c08:	d151      	bne.n	8002cae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c0a:	e022      	b.n	8002c52 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c12:	d01e      	beq.n	8002c52 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c14:	f7fe f95e 	bl	8000ed4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d302      	bcc.n	8002c2a <I2C_IsAcknowledgeFailed+0x3a>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d113      	bne.n	8002c52 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	f043 0220 	orr.w	r2, r3, #32
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e02e      	b.n	8002cb0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d1d5      	bne.n	8002c0c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2210      	movs	r2, #16
 8002c66:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f7ff fedd 	bl	8002a30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6859      	ldr	r1, [r3, #4]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <I2C_IsAcknowledgeFailed+0xc8>)
 8002c82:	400b      	ands	r3, r1
 8002c84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	f043 0204 	orr.w	r2, r3, #4
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	fe00e800 	.word	0xfe00e800

08002cbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	817b      	strh	r3, [r7, #10]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	0d5b      	lsrs	r3, r3, #21
 8002cd8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <I2C_TransferConfig+0x58>)
 8002cde:	430b      	orrs	r3, r1
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	ea02 0103 	and.w	r1, r2, r3
 8002ce6:	897b      	ldrh	r3, [r7, #10]
 8002ce8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cec:	7a7b      	ldrb	r3, [r7, #9]
 8002cee:	041b      	lsls	r3, r3, #16
 8002cf0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	03ff63ff 	.word	0x03ff63ff

08002d18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	d138      	bne.n	8002da0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e032      	b.n	8002da2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2224      	movs	r2, #36	; 0x24
 8002d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0201 	bic.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6819      	ldr	r1, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e000      	b.n	8002da2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002da0:	2302      	movs	r3, #2
  }
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b085      	sub	sp, #20
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d139      	bne.n	8002e38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e033      	b.n	8002e3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2224      	movs	r2, #36	; 0x24
 8002dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0201 	bic.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	021b      	lsls	r3, r3, #8
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	e000      	b.n	8002e3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e38:	2302      	movs	r3, #2
  }
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e58:	d102      	bne.n	8002e60 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e5e:	e00b      	b.n	8002e78 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002e60:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e6e:	d102      	bne.n	8002e76 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e74:	e000      	b.n	8002e78 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002e76:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40007000 	.word	0x40007000

08002e88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d141      	bne.n	8002f1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e96:	4b4b      	ldr	r3, [pc, #300]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea2:	d131      	bne.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ea4:	4b47      	ldr	r3, [pc, #284]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eaa:	4a46      	ldr	r2, [pc, #280]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eb4:	4b43      	ldr	r3, [pc, #268]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ebc:	4a41      	ldr	r2, [pc, #260]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ec2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ec4:	4b40      	ldr	r3, [pc, #256]	; (8002fc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2232      	movs	r2, #50	; 0x32
 8002eca:	fb02 f303 	mul.w	r3, r2, r3
 8002ece:	4a3f      	ldr	r2, [pc, #252]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	0c9b      	lsrs	r3, r3, #18
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eda:	e002      	b.n	8002ee2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ee2:	4b38      	ldr	r3, [pc, #224]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eee:	d102      	bne.n	8002ef6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f2      	bne.n	8002edc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ef6:	4b33      	ldr	r3, [pc, #204]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f02:	d158      	bne.n	8002fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e057      	b.n	8002fb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f08:	4b2e      	ldr	r3, [pc, #184]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f0e:	4a2d      	ldr	r2, [pc, #180]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f18:	e04d      	b.n	8002fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f20:	d141      	bne.n	8002fa6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f22:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2e:	d131      	bne.n	8002f94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f30:	4b24      	ldr	r3, [pc, #144]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f36:	4a23      	ldr	r2, [pc, #140]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f40:	4b20      	ldr	r3, [pc, #128]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f48:	4a1e      	ldr	r2, [pc, #120]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f50:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2232      	movs	r2, #50	; 0x32
 8002f56:	fb02 f303 	mul.w	r3, r2, r3
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	0c9b      	lsrs	r3, r3, #18
 8002f62:	3301      	adds	r3, #1
 8002f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f66:	e002      	b.n	8002f6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f6e:	4b15      	ldr	r3, [pc, #84]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7a:	d102      	bne.n	8002f82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f2      	bne.n	8002f68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f82:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8e:	d112      	bne.n	8002fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e011      	b.n	8002fb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002fa4:	e007      	b.n	8002fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fa6:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fae:	4a05      	ldr	r2, [pc, #20]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fb4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	40007000 	.word	0x40007000
 8002fc8:	20000088 	.word	0x20000088
 8002fcc:	431bde83 	.word	0x431bde83

08002fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f000 bc16 	b.w	8003810 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe4:	4ba0      	ldr	r3, [pc, #640]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fee:	4b9e      	ldr	r3, [pc, #632]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80e4 	beq.w	80031ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d007      	beq.n	800301c <HAL_RCC_OscConfig+0x4c>
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	2b0c      	cmp	r3, #12
 8003010:	f040 808b 	bne.w	800312a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2b01      	cmp	r3, #1
 8003018:	f040 8087 	bne.w	800312a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800301c:	4b92      	ldr	r3, [pc, #584]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_OscConfig+0x64>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e3ed      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1a      	ldr	r2, [r3, #32]
 8003038:	4b8b      	ldr	r3, [pc, #556]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <HAL_RCC_OscConfig+0x7e>
 8003044:	4b88      	ldr	r3, [pc, #544]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800304c:	e005      	b.n	800305a <HAL_RCC_OscConfig+0x8a>
 800304e:	4b86      	ldr	r3, [pc, #536]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800305a:	4293      	cmp	r3, r2
 800305c:	d223      	bcs.n	80030a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fdfa 	bl	8003c5c <RCC_SetFlashLatencyFromMSIRange>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e3ce      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003072:	4b7d      	ldr	r3, [pc, #500]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a7c      	ldr	r2, [pc, #496]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003078:	f043 0308 	orr.w	r3, r3, #8
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	4b7a      	ldr	r3, [pc, #488]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	4977      	ldr	r1, [pc, #476]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 800308c:	4313      	orrs	r3, r2
 800308e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003090:	4b75      	ldr	r3, [pc, #468]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	4972      	ldr	r1, [pc, #456]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
 80030a4:	e025      	b.n	80030f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030a6:	4b70      	ldr	r3, [pc, #448]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6f      	ldr	r2, [pc, #444]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 80030ac:	f043 0308 	orr.w	r3, r3, #8
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4b6d      	ldr	r3, [pc, #436]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	496a      	ldr	r1, [pc, #424]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030c4:	4b68      	ldr	r3, [pc, #416]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	4965      	ldr	r1, [pc, #404]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fdba 	bl	8003c5c <RCC_SetFlashLatencyFromMSIRange>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e38e      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030f2:	f000 fcbf 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 80030f6:	4601      	mov	r1, r0
 80030f8:	4b5b      	ldr	r3, [pc, #364]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	4a5a      	ldr	r2, [pc, #360]	; (800326c <HAL_RCC_OscConfig+0x29c>)
 8003104:	5cd3      	ldrb	r3, [r2, r3]
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	fa21 f303 	lsr.w	r3, r1, r3
 800310e:	4a58      	ldr	r2, [pc, #352]	; (8003270 <HAL_RCC_OscConfig+0x2a0>)
 8003110:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003112:	4b58      	ldr	r3, [pc, #352]	; (8003274 <HAL_RCC_OscConfig+0x2a4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f007 ff14 	bl	800af44 <HAL_InitTick>
 800311c:	4603      	mov	r3, r0
 800311e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d052      	beq.n	80031cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	e372      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d032      	beq.n	8003198 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003132:	4b4d      	ldr	r3, [pc, #308]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a4c      	ldr	r2, [pc, #304]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800313e:	f7fd fec9 	bl	8000ed4 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003146:	f7fd fec5 	bl	8000ed4 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e35b      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003158:	4b43      	ldr	r3, [pc, #268]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003164:	4b40      	ldr	r3, [pc, #256]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a3f      	ldr	r2, [pc, #252]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 800316a:	f043 0308 	orr.w	r3, r3, #8
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b3d      	ldr	r3, [pc, #244]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	493a      	ldr	r1, [pc, #232]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003182:	4b39      	ldr	r3, [pc, #228]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	4935      	ldr	r1, [pc, #212]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003192:	4313      	orrs	r3, r2
 8003194:	604b      	str	r3, [r1, #4]
 8003196:	e01a      	b.n	80031ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003198:	4b33      	ldr	r3, [pc, #204]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a32      	ldr	r2, [pc, #200]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 800319e:	f023 0301 	bic.w	r3, r3, #1
 80031a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031a4:	f7fd fe96 	bl	8000ed4 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031ac:	f7fd fe92 	bl	8000ed4 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e328      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031be:	4b2a      	ldr	r3, [pc, #168]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x1dc>
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d073      	beq.n	80032c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d005      	beq.n	80031ec <HAL_RCC_OscConfig+0x21c>
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	d10e      	bne.n	8003204 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d10b      	bne.n	8003204 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ec:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d063      	beq.n	80032c0 <HAL_RCC_OscConfig+0x2f0>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d15f      	bne.n	80032c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e305      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320c:	d106      	bne.n	800321c <HAL_RCC_OscConfig+0x24c>
 800320e:	4b16      	ldr	r3, [pc, #88]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a15      	ldr	r2, [pc, #84]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e01d      	b.n	8003258 <HAL_RCC_OscConfig+0x288>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0x270>
 8003226:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a0f      	ldr	r2, [pc, #60]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 800322c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a0c      	ldr	r2, [pc, #48]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e00b      	b.n	8003258 <HAL_RCC_OscConfig+0x288>
 8003240:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a08      	ldr	r2, [pc, #32]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a05      	ldr	r2, [pc, #20]	; (8003268 <HAL_RCC_OscConfig+0x298>)
 8003252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d01b      	beq.n	8003298 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fd fe38 	bl	8000ed4 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003266:	e010      	b.n	800328a <HAL_RCC_OscConfig+0x2ba>
 8003268:	40021000 	.word	0x40021000
 800326c:	0800bb78 	.word	0x0800bb78
 8003270:	20000088 	.word	0x20000088
 8003274:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003278:	f7fd fe2c 	bl	8000ed4 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b64      	cmp	r3, #100	; 0x64
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e2c2      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800328a:	4baf      	ldr	r3, [pc, #700]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0x2a8>
 8003296:	e014      	b.n	80032c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fd fe1c 	bl	8000ed4 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fd fe18 	bl	8000ed4 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	; 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e2ae      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032b2:	4ba5      	ldr	r3, [pc, #660]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x2d0>
 80032be:	e000      	b.n	80032c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d060      	beq.n	8003390 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_OscConfig+0x310>
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	2b0c      	cmp	r3, #12
 80032d8:	d119      	bne.n	800330e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d116      	bne.n	800330e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032e0:	4b99      	ldr	r3, [pc, #612]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_OscConfig+0x328>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e28b      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f8:	4b93      	ldr	r3, [pc, #588]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	061b      	lsls	r3, r3, #24
 8003306:	4990      	ldr	r1, [pc, #576]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800330c:	e040      	b.n	8003390 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d023      	beq.n	800335e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003316:	4b8c      	ldr	r3, [pc, #560]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a8b      	ldr	r2, [pc, #556]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 800331c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003322:	f7fd fdd7 	bl	8000ed4 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332a:	f7fd fdd3 	bl	8000ed4 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e269      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800333c:	4b82      	ldr	r3, [pc, #520]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003348:	4b7f      	ldr	r3, [pc, #508]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	061b      	lsls	r3, r3, #24
 8003356:	497c      	ldr	r1, [pc, #496]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]
 800335c:	e018      	b.n	8003390 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335e:	4b7a      	ldr	r3, [pc, #488]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a79      	ldr	r2, [pc, #484]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 8003364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336a:	f7fd fdb3 	bl	8000ed4 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003372:	f7fd fdaf 	bl	8000ed4 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e245      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003384:	4b70      	ldr	r3, [pc, #448]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f0      	bne.n	8003372 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d03c      	beq.n	8003416 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01c      	beq.n	80033de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a4:	4b68      	ldr	r3, [pc, #416]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 80033a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033aa:	4a67      	ldr	r2, [pc, #412]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fd fd8e 	bl	8000ed4 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033bc:	f7fd fd8a 	bl	8000ed4 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e220      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033ce:	4b5e      	ldr	r3, [pc, #376]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 80033d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0ef      	beq.n	80033bc <HAL_RCC_OscConfig+0x3ec>
 80033dc:	e01b      	b.n	8003416 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033de:	4b5a      	ldr	r3, [pc, #360]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 80033e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e4:	4a58      	ldr	r2, [pc, #352]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 80033e6:	f023 0301 	bic.w	r3, r3, #1
 80033ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ee:	f7fd fd71 	bl	8000ed4 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f6:	f7fd fd6d 	bl	8000ed4 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e203      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003408:	4b4f      	ldr	r3, [pc, #316]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 800340a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1ef      	bne.n	80033f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80a6 	beq.w	8003570 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003424:	2300      	movs	r3, #0
 8003426:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003428:	4b47      	ldr	r3, [pc, #284]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10d      	bne.n	8003450 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003434:	4b44      	ldr	r3, [pc, #272]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 8003436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003438:	4a43      	ldr	r2, [pc, #268]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 800343a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800343e:	6593      	str	r3, [r2, #88]	; 0x58
 8003440:	4b41      	ldr	r3, [pc, #260]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 8003442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344c:	2301      	movs	r3, #1
 800344e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003450:	4b3e      	ldr	r3, [pc, #248]	; (800354c <HAL_RCC_OscConfig+0x57c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d118      	bne.n	800348e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800345c:	4b3b      	ldr	r3, [pc, #236]	; (800354c <HAL_RCC_OscConfig+0x57c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a3a      	ldr	r2, [pc, #232]	; (800354c <HAL_RCC_OscConfig+0x57c>)
 8003462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003466:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003468:	f7fd fd34 	bl	8000ed4 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003470:	f7fd fd30 	bl	8000ed4 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e1c6      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003482:	4b32      	ldr	r3, [pc, #200]	; (800354c <HAL_RCC_OscConfig+0x57c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d108      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4d8>
 8003496:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 8003498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349c:	4a2a      	ldr	r2, [pc, #168]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034a6:	e024      	b.n	80034f2 <HAL_RCC_OscConfig+0x522>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b05      	cmp	r3, #5
 80034ae:	d110      	bne.n	80034d2 <HAL_RCC_OscConfig+0x502>
 80034b0:	4b25      	ldr	r3, [pc, #148]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	4a24      	ldr	r2, [pc, #144]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 80034b8:	f043 0304 	orr.w	r3, r3, #4
 80034bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034c0:	4b21      	ldr	r3, [pc, #132]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	4a20      	ldr	r2, [pc, #128]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034d0:	e00f      	b.n	80034f2 <HAL_RCC_OscConfig+0x522>
 80034d2:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 80034da:	f023 0301 	bic.w	r3, r3, #1
 80034de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034e2:	4b19      	ldr	r3, [pc, #100]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	4a17      	ldr	r2, [pc, #92]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 80034ea:	f023 0304 	bic.w	r3, r3, #4
 80034ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d016      	beq.n	8003528 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fa:	f7fd fceb 	bl	8000ed4 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003500:	e00a      	b.n	8003518 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003502:	f7fd fce7 	bl	8000ed4 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003510:	4293      	cmp	r3, r2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e17b      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003518:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_RCC_OscConfig+0x578>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0ed      	beq.n	8003502 <HAL_RCC_OscConfig+0x532>
 8003526:	e01a      	b.n	800355e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003528:	f7fd fcd4 	bl	8000ed4 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800352e:	e00f      	b.n	8003550 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003530:	f7fd fcd0 	bl	8000ed4 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	; 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d906      	bls.n	8003550 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e164      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000
 800354c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003550:	4ba8      	ldr	r3, [pc, #672]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1e8      	bne.n	8003530 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800355e:	7ffb      	ldrb	r3, [r7, #31]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d105      	bne.n	8003570 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003564:	4ba3      	ldr	r3, [pc, #652]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	4aa2      	ldr	r2, [pc, #648]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 800356a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800356e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	2b00      	cmp	r3, #0
 800357a:	d03c      	beq.n	80035f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	2b00      	cmp	r3, #0
 8003582:	d01c      	beq.n	80035be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003584:	4b9b      	ldr	r3, [pc, #620]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 8003586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800358a:	4a9a      	ldr	r2, [pc, #616]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003594:	f7fd fc9e 	bl	8000ed4 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800359c:	f7fd fc9a 	bl	8000ed4 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e130      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035ae:	4b91      	ldr	r3, [pc, #580]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 80035b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0ef      	beq.n	800359c <HAL_RCC_OscConfig+0x5cc>
 80035bc:	e01b      	b.n	80035f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035be:	4b8d      	ldr	r3, [pc, #564]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 80035c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035c4:	4a8b      	ldr	r2, [pc, #556]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 80035c6:	f023 0301 	bic.w	r3, r3, #1
 80035ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ce:	f7fd fc81 	bl	8000ed4 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035d6:	f7fd fc7d 	bl	8000ed4 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e113      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035e8:	4b82      	ldr	r3, [pc, #520]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 80035ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1ef      	bne.n	80035d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 8107 	beq.w	800380e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	2b02      	cmp	r3, #2
 8003606:	f040 80cb 	bne.w	80037a0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800360a:	4b7a      	ldr	r3, [pc, #488]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f003 0203 	and.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361a:	429a      	cmp	r2, r3
 800361c:	d12c      	bne.n	8003678 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	3b01      	subs	r3, #1
 800362a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800362c:	429a      	cmp	r2, r3
 800362e:	d123      	bne.n	8003678 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d11b      	bne.n	8003678 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d113      	bne.n	8003678 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	085b      	lsrs	r3, r3, #1
 800365c:	3b01      	subs	r3, #1
 800365e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003660:	429a      	cmp	r2, r3
 8003662:	d109      	bne.n	8003678 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	085b      	lsrs	r3, r3, #1
 8003670:	3b01      	subs	r3, #1
 8003672:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d06d      	beq.n	8003754 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2b0c      	cmp	r3, #12
 800367c:	d068      	beq.n	8003750 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800367e:	4b5d      	ldr	r3, [pc, #372]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d105      	bne.n	8003696 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800368a:	4b5a      	ldr	r3, [pc, #360]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e0ba      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800369a:	4b56      	ldr	r3, [pc, #344]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a55      	ldr	r2, [pc, #340]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 80036a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036a6:	f7fd fc15 	bl	8000ed4 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ae:	f7fd fc11 	bl	8000ed4 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e0a7      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c0:	4b4c      	ldr	r3, [pc, #304]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f0      	bne.n	80036ae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036cc:	4b49      	ldr	r3, [pc, #292]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	4b49      	ldr	r3, [pc, #292]	; (80037f8 <HAL_RCC_OscConfig+0x828>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036dc:	3a01      	subs	r2, #1
 80036de:	0112      	lsls	r2, r2, #4
 80036e0:	4311      	orrs	r1, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036e6:	0212      	lsls	r2, r2, #8
 80036e8:	4311      	orrs	r1, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036ee:	0852      	lsrs	r2, r2, #1
 80036f0:	3a01      	subs	r2, #1
 80036f2:	0552      	lsls	r2, r2, #21
 80036f4:	4311      	orrs	r1, r2
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036fa:	0852      	lsrs	r2, r2, #1
 80036fc:	3a01      	subs	r2, #1
 80036fe:	0652      	lsls	r2, r2, #25
 8003700:	4311      	orrs	r1, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003706:	06d2      	lsls	r2, r2, #27
 8003708:	430a      	orrs	r2, r1
 800370a:	493a      	ldr	r1, [pc, #232]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 800370c:	4313      	orrs	r3, r2
 800370e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003710:	4b38      	ldr	r3, [pc, #224]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a37      	ldr	r2, [pc, #220]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 8003716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800371a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800371c:	4b35      	ldr	r3, [pc, #212]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4a34      	ldr	r2, [pc, #208]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 8003722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003726:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003728:	f7fd fbd4 	bl	8000ed4 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003730:	f7fd fbd0 	bl	8000ed4 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e066      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003742:	4b2c      	ldr	r3, [pc, #176]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800374e:	e05e      	b.n	800380e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e05d      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003754:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d156      	bne.n	800380e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003760:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a23      	ldr	r2, [pc, #140]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 8003766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800376a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800376c:	4b21      	ldr	r3, [pc, #132]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4a20      	ldr	r2, [pc, #128]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 8003772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003776:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003778:	f7fd fbac 	bl	8000ed4 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003780:	f7fd fba8 	bl	8000ed4 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e03e      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003792:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x7b0>
 800379e:	e036      	b.n	800380e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2b0c      	cmp	r3, #12
 80037a4:	d031      	beq.n	800380a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 80037ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80037b2:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d105      	bne.n	80037ca <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037be:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	4a0c      	ldr	r2, [pc, #48]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 80037c4:	f023 0303 	bic.w	r3, r3, #3
 80037c8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037ca:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	4a09      	ldr	r2, [pc, #36]	; (80037f4 <HAL_RCC_OscConfig+0x824>)
 80037d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7fd fb7b 	bl	8000ed4 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e0:	e00c      	b.n	80037fc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fd fb77 	bl	8000ed4 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d905      	bls.n	80037fc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e00d      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
 80037f4:	40021000 	.word	0x40021000
 80037f8:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <HAL_RCC_OscConfig+0x848>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1ec      	bne.n	80037e2 <HAL_RCC_OscConfig+0x812>
 8003808:	e001      	b.n	800380e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3720      	adds	r7, #32
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40021000 	.word	0x40021000

0800381c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e10f      	b.n	8003a54 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003834:	4b89      	ldr	r3, [pc, #548]	; (8003a5c <HAL_RCC_ClockConfig+0x240>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d910      	bls.n	8003864 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b86      	ldr	r3, [pc, #536]	; (8003a5c <HAL_RCC_ClockConfig+0x240>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 020f 	bic.w	r2, r3, #15
 800384a:	4984      	ldr	r1, [pc, #528]	; (8003a5c <HAL_RCC_ClockConfig+0x240>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b82      	ldr	r3, [pc, #520]	; (8003a5c <HAL_RCC_ClockConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0f7      	b.n	8003a54 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8089 	beq.w	8003984 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b03      	cmp	r3, #3
 8003878:	d133      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800387a:	4b79      	ldr	r3, [pc, #484]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e0e4      	b.n	8003a54 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800388a:	f000 fa41 	bl	8003d10 <RCC_GetSysClockFreqFromPLLSource>
 800388e:	4602      	mov	r2, r0
 8003890:	4b74      	ldr	r3, [pc, #464]	; (8003a64 <HAL_RCC_ClockConfig+0x248>)
 8003892:	429a      	cmp	r2, r3
 8003894:	d955      	bls.n	8003942 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003896:	4b72      	ldr	r3, [pc, #456]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038a2:	4b6f      	ldr	r3, [pc, #444]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038aa:	4a6d      	ldr	r2, [pc, #436]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80038ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	e044      	b.n	8003942 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d03e      	beq.n	8003942 <HAL_RCC_ClockConfig+0x126>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d13a      	bne.n	8003942 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038cc:	4b64      	ldr	r3, [pc, #400]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d4:	4a62      	ldr	r2, [pc, #392]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80038d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038da:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	e02f      	b.n	8003942 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d107      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ea:	4b5d      	ldr	r3, [pc, #372]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d115      	bne.n	8003922 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e0ac      	b.n	8003a54 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d107      	bne.n	8003912 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003902:	4b57      	ldr	r3, [pc, #348]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e0a0      	b.n	8003a54 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003912:	4b53      	ldr	r3, [pc, #332]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e098      	b.n	8003a54 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003922:	f000 f8a7 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 8003926:	4602      	mov	r2, r0
 8003928:	4b4e      	ldr	r3, [pc, #312]	; (8003a64 <HAL_RCC_ClockConfig+0x248>)
 800392a:	429a      	cmp	r2, r3
 800392c:	d909      	bls.n	8003942 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800392e:	4b4c      	ldr	r3, [pc, #304]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003936:	4a4a      	ldr	r2, [pc, #296]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800393c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800393e:	2380      	movs	r3, #128	; 0x80
 8003940:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003942:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f023 0203 	bic.w	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4944      	ldr	r1, [pc, #272]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003950:	4313      	orrs	r3, r2
 8003952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003954:	f7fd fabe 	bl	8000ed4 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395a:	e00a      	b.n	8003972 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800395c:	f7fd faba 	bl	8000ed4 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f241 3288 	movw	r2, #5000	; 0x1388
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e070      	b.n	8003a54 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 020c 	and.w	r2, r3, #12
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	429a      	cmp	r2, r3
 8003982:	d1eb      	bne.n	800395c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d009      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003990:	4b33      	ldr	r3, [pc, #204]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	4930      	ldr	r1, [pc, #192]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2b80      	cmp	r3, #128	; 0x80
 80039a8:	d105      	bne.n	80039b6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80039aa:	4b2d      	ldr	r3, [pc, #180]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	4a2c      	ldr	r2, [pc, #176]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80039b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039b4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039b6:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <HAL_RCC_ClockConfig+0x240>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d210      	bcs.n	80039e6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c4:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <HAL_RCC_ClockConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f023 020f 	bic.w	r2, r3, #15
 80039cc:	4923      	ldr	r1, [pc, #140]	; (8003a5c <HAL_RCC_ClockConfig+0x240>)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d4:	4b21      	ldr	r3, [pc, #132]	; (8003a5c <HAL_RCC_ClockConfig+0x240>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d001      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e036      	b.n	8003a54 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f2:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	4918      	ldr	r1, [pc, #96]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d009      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a10:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4910      	ldr	r1, [pc, #64]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a24:	f000 f826 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 8003a28:	4601      	mov	r1, r0
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	4a0c      	ldr	r2, [pc, #48]	; (8003a68 <HAL_RCC_ClockConfig+0x24c>)
 8003a36:	5cd3      	ldrb	r3, [r2, r3]
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	fa21 f303 	lsr.w	r3, r1, r3
 8003a40:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <HAL_RCC_ClockConfig+0x250>)
 8003a42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a44:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <HAL_RCC_ClockConfig+0x254>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f007 fa7b 	bl	800af44 <HAL_InitTick>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	73fb      	strb	r3, [r7, #15]

  return status;
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40022000 	.word	0x40022000
 8003a60:	40021000 	.word	0x40021000
 8003a64:	04c4b400 	.word	0x04c4b400
 8003a68:	0800bb78 	.word	0x0800bb78
 8003a6c:	20000088 	.word	0x20000088
 8003a70:	20000000 	.word	0x20000000

08003a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b089      	sub	sp, #36	; 0x24
 8003a78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a82:	4b3d      	ldr	r3, [pc, #244]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a8c:	4b3a      	ldr	r3, [pc, #232]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b0c      	cmp	r3, #12
 8003aa0:	d121      	bne.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d11e      	bne.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003aa8:	4b33      	ldr	r3, [pc, #204]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x104>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d107      	bne.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ab4:	4b30      	ldr	r3, [pc, #192]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aba:	0a1b      	lsrs	r3, r3, #8
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	e005      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ac4:	4b2c      	ldr	r3, [pc, #176]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	091b      	lsrs	r3, r3, #4
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ad0:	4a2a      	ldr	r2, [pc, #168]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10d      	bne.n	8003afc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d102      	bne.n	8003af2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003aec:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003aee:	61bb      	str	r3, [r7, #24]
 8003af0:	e004      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003af8:	4b22      	ldr	r3, [pc, #136]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x110>)
 8003afa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	2b0c      	cmp	r3, #12
 8003b00:	d133      	bne.n	8003b6a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b02:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d002      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0xa4>
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d003      	beq.n	8003b1e <HAL_RCC_GetSysClockFreq+0xaa>
 8003b16:	e005      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b18:	4b19      	ldr	r3, [pc, #100]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b1a:	617b      	str	r3, [r7, #20]
      break;
 8003b1c:	e005      	b.n	8003b2a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b1e:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b20:	617b      	str	r3, [r7, #20]
      break;
 8003b22:	e002      	b.n	8003b2a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	617b      	str	r3, [r7, #20]
      break;
 8003b28:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b2a:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	091b      	lsrs	r3, r3, #4
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	3301      	adds	r3, #1
 8003b36:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b38:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	0a1b      	lsrs	r3, r3, #8
 8003b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	fb02 f203 	mul.w	r2, r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b50:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	0e5b      	lsrs	r3, r3, #25
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b68:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b6a:	69bb      	ldr	r3, [r7, #24]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3724      	adds	r7, #36	; 0x24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	0800bb90 	.word	0x0800bb90
 8003b80:	00f42400 	.word	0x00f42400
 8003b84:	007a1200 	.word	0x007a1200

08003b88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20000088 	.word	0x20000088

08003ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ba4:	f7ff fff0 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 8003ba8:	4601      	mov	r1, r0
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	0a1b      	lsrs	r3, r3, #8
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	4a04      	ldr	r2, [pc, #16]	; (8003bc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bb6:	5cd3      	ldrb	r3, [r2, r3]
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	0800bb88 	.word	0x0800bb88

08003bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bd0:	f7ff ffda 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 8003bd4:	4601      	mov	r1, r0
 8003bd6:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	0adb      	lsrs	r3, r3, #11
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4a04      	ldr	r2, [pc, #16]	; (8003bf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003be2:	5cd3      	ldrb	r3, [r2, r3]
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	0800bb88 	.word	0x0800bb88

08003bf8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	220f      	movs	r2, #15
 8003c06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c08:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <HAL_RCC_GetClockConfig+0x5c>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 0203 	and.w	r2, r3, #3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003c14:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <HAL_RCC_GetClockConfig+0x5c>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003c20:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <HAL_RCC_GetClockConfig+0x5c>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003c2c:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <HAL_RCC_GetClockConfig+0x5c>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	08db      	lsrs	r3, r3, #3
 8003c32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003c3a:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <HAL_RCC_GetClockConfig+0x60>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 020f 	and.w	r2, r3, #15
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	601a      	str	r2, [r3, #0]
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40021000 	.word	0x40021000
 8003c58:	40022000 	.word	0x40022000

08003c5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c64:	2300      	movs	r3, #0
 8003c66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c68:	4b27      	ldr	r3, [pc, #156]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c74:	f7ff f8e8 	bl	8002e48 <HAL_PWREx_GetVoltageRange>
 8003c78:	6178      	str	r0, [r7, #20]
 8003c7a:	e014      	b.n	8003ca6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c7c:	4b22      	ldr	r3, [pc, #136]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	4a21      	ldr	r2, [pc, #132]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c86:	6593      	str	r3, [r2, #88]	; 0x58
 8003c88:	4b1f      	ldr	r3, [pc, #124]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c94:	f7ff f8d8 	bl	8002e48 <HAL_PWREx_GetVoltageRange>
 8003c98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c9a:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9e:	4a1a      	ldr	r2, [pc, #104]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cac:	d10b      	bne.n	8003cc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b80      	cmp	r3, #128	; 0x80
 8003cb2:	d913      	bls.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2ba0      	cmp	r3, #160	; 0xa0
 8003cb8:	d902      	bls.n	8003cc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cba:	2302      	movs	r3, #2
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	e00d      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	e00a      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8003cca:	d902      	bls.n	8003cd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003ccc:	2302      	movs	r3, #2
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	e004      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b70      	cmp	r3, #112	; 0x70
 8003cd6:	d101      	bne.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cd8:	2301      	movs	r3, #1
 8003cda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f023 020f 	bic.w	r2, r3, #15
 8003ce4:	4909      	ldr	r1, [pc, #36]	; (8003d0c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cec:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d001      	beq.n	8003cfe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40022000 	.word	0x40022000

08003d10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003d1a:	4b2d      	ldr	r3, [pc, #180]	; (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d118      	bne.n	8003d58 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d26:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d107      	bne.n	8003d42 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d32:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d38:	0a1b      	lsrs	r3, r3, #8
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e005      	b.n	8003d4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d42:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d4e:	4a21      	ldr	r2, [pc, #132]	; (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d56:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d58:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d002      	beq.n	8003d6e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d003      	beq.n	8003d74 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003d6c:	e005      	b.n	8003d7a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003d6e:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003d70:	613b      	str	r3, [r7, #16]
    break;
 8003d72:	e005      	b.n	8003d80 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003d74:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003d76:	613b      	str	r3, [r7, #16]
    break;
 8003d78:	e002      	b.n	8003d80 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	613b      	str	r3, [r7, #16]
    break;
 8003d7e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d80:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	0a1b      	lsrs	r3, r3, #8
 8003d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	fb02 f203 	mul.w	r2, r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da4:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003da6:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	0e5b      	lsrs	r3, r3, #25
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	3301      	adds	r3, #1
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbe:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003dc0:	683b      	ldr	r3, [r7, #0]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	0800bb90 	.word	0x0800bb90
 8003dd8:	00f42400 	.word	0x00f42400
 8003ddc:	007a1200 	.word	0x007a1200

08003de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003de8:	2300      	movs	r3, #0
 8003dea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dec:	2300      	movs	r3, #0
 8003dee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d03d      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e00:	2b40      	cmp	r3, #64	; 0x40
 8003e02:	d00b      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003e04:	2b40      	cmp	r3, #64	; 0x40
 8003e06:	d804      	bhi.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00e      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d015      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003e10:	e01d      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003e12:	2b60      	cmp	r3, #96	; 0x60
 8003e14:	d01e      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e16:	2b80      	cmp	r3, #128	; 0x80
 8003e18:	d01c      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e1a:	e018      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e1c:	4b86      	ldr	r3, [pc, #536]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4a85      	ldr	r2, [pc, #532]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e28:	e015      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fafd 	bl	8004430 <RCCEx_PLLSAI1_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e3a:	e00c      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3320      	adds	r3, #32
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fbe4 	bl	8004610 <RCCEx_PLLSAI2_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e4c:	e003      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	74fb      	strb	r3, [r7, #19]
      break;
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10b      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e5c:	4b76      	ldr	r3, [pc, #472]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e62:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e6a:	4973      	ldr	r1, [pc, #460]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e72:	e001      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
 8003e76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d042      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e8c:	d00f      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e92:	d805      	bhi.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d011      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e9c:	d017      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003e9e:	e01f      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003ea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ea4:	d01f      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eaa:	d01c      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003eac:	e018      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003eae:	4b62      	ldr	r3, [pc, #392]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	4a61      	ldr	r2, [pc, #388]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eba:	e015      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fab4 	bl	8004430 <RCCEx_PLLSAI1_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ecc:	e00c      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3320      	adds	r3, #32
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fb9b 	bl	8004610 <RCCEx_PLLSAI2_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ede:	e003      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	74fb      	strb	r3, [r7, #19]
      break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee8:	7cfb      	ldrb	r3, [r7, #19]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10b      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003eee:	4b52      	ldr	r3, [pc, #328]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ef0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	494e      	ldr	r1, [pc, #312]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003f04:	e001      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f06:	7cfb      	ldrb	r3, [r7, #19]
 8003f08:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 809f 	beq.w	8004056 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f1c:	4b46      	ldr	r3, [pc, #280]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00d      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f32:	4b41      	ldr	r3, [pc, #260]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	4a40      	ldr	r2, [pc, #256]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f3e:	4b3e      	ldr	r3, [pc, #248]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f4e:	4b3b      	ldr	r3, [pc, #236]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f5a:	f7fc ffbb 	bl	8000ed4 <HAL_GetTick>
 8003f5e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f60:	e009      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f62:	f7fc ffb7 	bl	8000ed4 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d902      	bls.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	74fb      	strb	r3, [r7, #19]
        break;
 8003f74:	e005      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f76:	4b31      	ldr	r3, [pc, #196]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0ef      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003f82:	7cfb      	ldrb	r3, [r7, #19]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d15b      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f88:	4b2b      	ldr	r3, [pc, #172]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f92:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d01f      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d019      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fa6:	4b24      	ldr	r3, [pc, #144]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fb2:	4b21      	ldr	r3, [pc, #132]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb8:	4a1f      	ldr	r2, [pc, #124]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fc2:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc8:	4a1b      	ldr	r2, [pc, #108]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fd2:	4a19      	ldr	r2, [pc, #100]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d016      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fc ff76 	bl	8000ed4 <HAL_GetTick>
 8003fe8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fea:	e00b      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fec:	f7fc ff72 	bl	8000ed4 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d902      	bls.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	74fb      	strb	r3, [r7, #19]
            break;
 8004002:	e006      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004004:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0ec      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8004012:	7cfb      	ldrb	r3, [r7, #19]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10c      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004018:	4b07      	ldr	r3, [pc, #28]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004028:	4903      	ldr	r1, [pc, #12]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004030:	e008      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004032:	7cfb      	ldrb	r3, [r7, #19]
 8004034:	74bb      	strb	r3, [r7, #18]
 8004036:	e005      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004038:	40021000 	.word	0x40021000
 800403c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004044:	7c7b      	ldrb	r3, [r7, #17]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d105      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800404a:	4ba0      	ldr	r3, [pc, #640]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404e:	4a9f      	ldr	r2, [pc, #636]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004054:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004062:	4b9a      	ldr	r3, [pc, #616]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004068:	f023 0203 	bic.w	r2, r3, #3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004070:	4996      	ldr	r1, [pc, #600]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004084:	4b91      	ldr	r3, [pc, #580]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408a:	f023 020c 	bic.w	r2, r3, #12
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	498e      	ldr	r1, [pc, #568]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040a6:	4b89      	ldr	r3, [pc, #548]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b4:	4985      	ldr	r1, [pc, #532]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040c8:	4b80      	ldr	r3, [pc, #512]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d6:	497d      	ldr	r1, [pc, #500]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040ea:	4b78      	ldr	r3, [pc, #480]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f8:	4974      	ldr	r1, [pc, #464]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800410c:	4b6f      	ldr	r3, [pc, #444]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411a:	496c      	ldr	r1, [pc, #432]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800412e:	4b67      	ldr	r3, [pc, #412]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004134:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800413c:	4963      	ldr	r1, [pc, #396]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004150:	4b5e      	ldr	r3, [pc, #376]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800415e:	495b      	ldr	r1, [pc, #364]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004172:	4b56      	ldr	r3, [pc, #344]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004180:	4952      	ldr	r1, [pc, #328]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004194:	4b4d      	ldr	r3, [pc, #308]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a2:	494a      	ldr	r1, [pc, #296]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041b6:	4b45      	ldr	r3, [pc, #276]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c4:	4941      	ldr	r1, [pc, #260]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041d8:	4b3c      	ldr	r3, [pc, #240]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041de:	f023 0203 	bic.w	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e6:	4939      	ldr	r1, [pc, #228]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d028      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041fa:	4b34      	ldr	r3, [pc, #208]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004200:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004208:	4930      	ldr	r1, [pc, #192]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004214:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004218:	d106      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800421a:	4b2c      	ldr	r3, [pc, #176]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	4a2b      	ldr	r2, [pc, #172]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004220:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004224:	60d3      	str	r3, [r2, #12]
 8004226:	e011      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004230:	d10c      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3304      	adds	r3, #4
 8004236:	2101      	movs	r1, #1
 8004238:	4618      	mov	r0, r3
 800423a:	f000 f8f9 	bl	8004430 <RCCEx_PLLSAI1_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004242:	7cfb      	ldrb	r3, [r7, #19]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8004248:	7cfb      	ldrb	r3, [r7, #19]
 800424a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d04d      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800425c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004260:	d108      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004262:	4b1a      	ldr	r3, [pc, #104]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004264:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004268:	4a18      	ldr	r2, [pc, #96]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800426e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004272:	e012      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004274:	4b15      	ldr	r3, [pc, #84]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004276:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800427a:	4a14      	ldr	r2, [pc, #80]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004280:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004284:	4b11      	ldr	r3, [pc, #68]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004292:	490e      	ldr	r1, [pc, #56]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800429e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042a2:	d106      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a4:	4b09      	ldr	r3, [pc, #36]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	4a08      	ldr	r2, [pc, #32]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ae:	60d3      	str	r3, [r2, #12]
 80042b0:	e020      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ba:	d109      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042bc:	4b03      	ldr	r3, [pc, #12]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4a02      	ldr	r2, [pc, #8]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c6:	60d3      	str	r3, [r2, #12]
 80042c8:	e014      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3304      	adds	r3, #4
 80042de:	2101      	movs	r1, #1
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 f8a5 	bl	8004430 <RCCEx_PLLSAI1_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042ea:	7cfb      	ldrb	r3, [r7, #19]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80042f0:	7cfb      	ldrb	r3, [r7, #19]
 80042f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d028      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004300:	4b4a      	ldr	r3, [pc, #296]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004306:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800430e:	4947      	ldr	r1, [pc, #284]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800431a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800431e:	d106      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004320:	4b42      	ldr	r3, [pc, #264]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4a41      	ldr	r2, [pc, #260]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800432a:	60d3      	str	r3, [r2, #12]
 800432c:	e011      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004332:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004336:	d10c      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3304      	adds	r3, #4
 800433c:	2101      	movs	r1, #1
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f876 	bl	8004430 <RCCEx_PLLSAI1_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004348:	7cfb      	ldrb	r3, [r7, #19]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800434e:	7cfb      	ldrb	r3, [r7, #19]
 8004350:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01e      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800435e:	4b33      	ldr	r3, [pc, #204]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800436e:	492f      	ldr	r1, [pc, #188]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800437c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004380:	d10c      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3304      	adds	r3, #4
 8004386:	2102      	movs	r1, #2
 8004388:	4618      	mov	r0, r3
 800438a:	f000 f851 	bl	8004430 <RCCEx_PLLSAI1_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004392:	7cfb      	ldrb	r3, [r7, #19]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004398:	7cfb      	ldrb	r3, [r7, #19]
 800439a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00b      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043a8:	4b20      	ldr	r3, [pc, #128]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043ae:	f023 0204 	bic.w	r2, r3, #4
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b8:	491c      	ldr	r1, [pc, #112]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00b      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80043cc:	4b17      	ldr	r3, [pc, #92]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043d2:	f023 0218 	bic.w	r2, r3, #24
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	4913      	ldr	r1, [pc, #76]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d017      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80043f0:	4b0e      	ldr	r3, [pc, #56]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004400:	490a      	ldr	r1, [pc, #40]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800440e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004412:	d105      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4a04      	ldr	r2, [pc, #16]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800441a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800441e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004420:	7cbb      	ldrb	r3, [r7, #18]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000

08004430 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800443e:	4b70      	ldr	r3, [pc, #448]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00e      	beq.n	8004468 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800444a:	4b6d      	ldr	r3, [pc, #436]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0203 	and.w	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d103      	bne.n	8004462 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
       ||
 800445e:	2b00      	cmp	r3, #0
 8004460:	d13f      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
 8004466:	e03c      	b.n	80044e2 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b02      	cmp	r3, #2
 800446e:	d00c      	beq.n	800448a <RCCEx_PLLSAI1_Config+0x5a>
 8004470:	2b03      	cmp	r3, #3
 8004472:	d013      	beq.n	800449c <RCCEx_PLLSAI1_Config+0x6c>
 8004474:	2b01      	cmp	r3, #1
 8004476:	d120      	bne.n	80044ba <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004478:	4b61      	ldr	r3, [pc, #388]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d11d      	bne.n	80044c0 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004488:	e01a      	b.n	80044c0 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800448a:	4b5d      	ldr	r3, [pc, #372]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004492:	2b00      	cmp	r3, #0
 8004494:	d116      	bne.n	80044c4 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800449a:	e013      	b.n	80044c4 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800449c:	4b58      	ldr	r3, [pc, #352]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10f      	bne.n	80044c8 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044a8:	4b55      	ldr	r3, [pc, #340]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044b8:	e006      	b.n	80044c8 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
      break;
 80044be:	e004      	b.n	80044ca <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80044c0:	bf00      	nop
 80044c2:	e002      	b.n	80044ca <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80044c4:	bf00      	nop
 80044c6:	e000      	b.n	80044ca <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80044c8:	bf00      	nop
    }

    if(status == HAL_OK)
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d108      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80044d0:	4b4b      	ldr	r3, [pc, #300]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f023 0203 	bic.w	r2, r3, #3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4948      	ldr	r1, [pc, #288]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f040 8086 	bne.w	80045f6 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044ea:	4b45      	ldr	r3, [pc, #276]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a44      	ldr	r2, [pc, #272]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f6:	f7fc fced 	bl	8000ed4 <HAL_GetTick>
 80044fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044fc:	e009      	b.n	8004512 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044fe:	f7fc fce9 	bl	8000ed4 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d902      	bls.n	8004512 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	73fb      	strb	r3, [r7, #15]
        break;
 8004510:	e005      	b.n	800451e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004512:	4b3b      	ldr	r3, [pc, #236]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1ef      	bne.n	80044fe <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d168      	bne.n	80045f6 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d113      	bne.n	8004552 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800452a:	4b35      	ldr	r3, [pc, #212]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	4b35      	ldr	r3, [pc, #212]	; (8004604 <RCCEx_PLLSAI1_Config+0x1d4>)
 8004530:	4013      	ands	r3, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6892      	ldr	r2, [r2, #8]
 8004536:	0211      	lsls	r1, r2, #8
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	68d2      	ldr	r2, [r2, #12]
 800453c:	06d2      	lsls	r2, r2, #27
 800453e:	4311      	orrs	r1, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6852      	ldr	r2, [r2, #4]
 8004544:	3a01      	subs	r2, #1
 8004546:	0112      	lsls	r2, r2, #4
 8004548:	430a      	orrs	r2, r1
 800454a:	492d      	ldr	r1, [pc, #180]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 800454c:	4313      	orrs	r3, r2
 800454e:	610b      	str	r3, [r1, #16]
 8004550:	e02d      	b.n	80045ae <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d115      	bne.n	8004584 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004558:	4b29      	ldr	r3, [pc, #164]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	4b2a      	ldr	r3, [pc, #168]	; (8004608 <RCCEx_PLLSAI1_Config+0x1d8>)
 800455e:	4013      	ands	r3, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6892      	ldr	r2, [r2, #8]
 8004564:	0211      	lsls	r1, r2, #8
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6912      	ldr	r2, [r2, #16]
 800456a:	0852      	lsrs	r2, r2, #1
 800456c:	3a01      	subs	r2, #1
 800456e:	0552      	lsls	r2, r2, #21
 8004570:	4311      	orrs	r1, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6852      	ldr	r2, [r2, #4]
 8004576:	3a01      	subs	r2, #1
 8004578:	0112      	lsls	r2, r2, #4
 800457a:	430a      	orrs	r2, r1
 800457c:	4920      	ldr	r1, [pc, #128]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 800457e:	4313      	orrs	r3, r2
 8004580:	610b      	str	r3, [r1, #16]
 8004582:	e014      	b.n	80045ae <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004584:	4b1e      	ldr	r3, [pc, #120]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	4b20      	ldr	r3, [pc, #128]	; (800460c <RCCEx_PLLSAI1_Config+0x1dc>)
 800458a:	4013      	ands	r3, r2
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6892      	ldr	r2, [r2, #8]
 8004590:	0211      	lsls	r1, r2, #8
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6952      	ldr	r2, [r2, #20]
 8004596:	0852      	lsrs	r2, r2, #1
 8004598:	3a01      	subs	r2, #1
 800459a:	0652      	lsls	r2, r2, #25
 800459c:	4311      	orrs	r1, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6852      	ldr	r2, [r2, #4]
 80045a2:	3a01      	subs	r2, #1
 80045a4:	0112      	lsls	r2, r2, #4
 80045a6:	430a      	orrs	r2, r1
 80045a8:	4915      	ldr	r1, [pc, #84]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045ae:	4b14      	ldr	r3, [pc, #80]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a13      	ldr	r2, [pc, #76]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ba:	f7fc fc8b 	bl	8000ed4 <HAL_GetTick>
 80045be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045c0:	e009      	b.n	80045d6 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045c2:	f7fc fc87 	bl	8000ed4 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d902      	bls.n	80045d6 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	73fb      	strb	r3, [r7, #15]
          break;
 80045d4:	e005      	b.n	80045e2 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0ef      	beq.n	80045c2 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	4903      	ldr	r1, [pc, #12]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40021000 	.word	0x40021000
 8004604:	07ff800f 	.word	0x07ff800f
 8004608:	ff9f800f 	.word	0xff9f800f
 800460c:	f9ff800f 	.word	0xf9ff800f

08004610 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800461e:	4b70      	ldr	r3, [pc, #448]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00e      	beq.n	8004648 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800462a:	4b6d      	ldr	r3, [pc, #436]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f003 0203 	and.w	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d103      	bne.n	8004642 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
       ||
 800463e:	2b00      	cmp	r3, #0
 8004640:	d13f      	bne.n	80046c2 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
 8004646:	e03c      	b.n	80046c2 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d00c      	beq.n	800466a <RCCEx_PLLSAI2_Config+0x5a>
 8004650:	2b03      	cmp	r3, #3
 8004652:	d013      	beq.n	800467c <RCCEx_PLLSAI2_Config+0x6c>
 8004654:	2b01      	cmp	r3, #1
 8004656:	d120      	bne.n	800469a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004658:	4b61      	ldr	r3, [pc, #388]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d11d      	bne.n	80046a0 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004668:	e01a      	b.n	80046a0 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800466a:	4b5d      	ldr	r3, [pc, #372]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004672:	2b00      	cmp	r3, #0
 8004674:	d116      	bne.n	80046a4 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800467a:	e013      	b.n	80046a4 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800467c:	4b58      	ldr	r3, [pc, #352]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10f      	bne.n	80046a8 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004688:	4b55      	ldr	r3, [pc, #340]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d109      	bne.n	80046a8 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004698:	e006      	b.n	80046a8 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	73fb      	strb	r3, [r7, #15]
      break;
 800469e:	e004      	b.n	80046aa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80046a0:	bf00      	nop
 80046a2:	e002      	b.n	80046aa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80046a4:	bf00      	nop
 80046a6:	e000      	b.n	80046aa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80046a8:	bf00      	nop
    }

    if(status == HAL_OK)
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d108      	bne.n	80046c2 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80046b0:	4b4b      	ldr	r3, [pc, #300]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f023 0203 	bic.w	r2, r3, #3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4948      	ldr	r1, [pc, #288]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f040 8086 	bne.w	80047d6 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046ca:	4b45      	ldr	r3, [pc, #276]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a44      	ldr	r2, [pc, #272]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d6:	f7fc fbfd 	bl	8000ed4 <HAL_GetTick>
 80046da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046dc:	e009      	b.n	80046f2 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046de:	f7fc fbf9 	bl	8000ed4 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d902      	bls.n	80046f2 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	73fb      	strb	r3, [r7, #15]
        break;
 80046f0:	e005      	b.n	80046fe <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046f2:	4b3b      	ldr	r3, [pc, #236]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1ef      	bne.n	80046de <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d168      	bne.n	80047d6 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d113      	bne.n	8004732 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800470a:	4b35      	ldr	r3, [pc, #212]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800470c:	695a      	ldr	r2, [r3, #20]
 800470e:	4b35      	ldr	r3, [pc, #212]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d4>)
 8004710:	4013      	ands	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6892      	ldr	r2, [r2, #8]
 8004716:	0211      	lsls	r1, r2, #8
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	68d2      	ldr	r2, [r2, #12]
 800471c:	06d2      	lsls	r2, r2, #27
 800471e:	4311      	orrs	r1, r2
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6852      	ldr	r2, [r2, #4]
 8004724:	3a01      	subs	r2, #1
 8004726:	0112      	lsls	r2, r2, #4
 8004728:	430a      	orrs	r2, r1
 800472a:	492d      	ldr	r1, [pc, #180]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800472c:	4313      	orrs	r3, r2
 800472e:	614b      	str	r3, [r1, #20]
 8004730:	e02d      	b.n	800478e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d115      	bne.n	8004764 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004738:	4b29      	ldr	r3, [pc, #164]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800473a:	695a      	ldr	r2, [r3, #20]
 800473c:	4b2a      	ldr	r3, [pc, #168]	; (80047e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800473e:	4013      	ands	r3, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6892      	ldr	r2, [r2, #8]
 8004744:	0211      	lsls	r1, r2, #8
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6912      	ldr	r2, [r2, #16]
 800474a:	0852      	lsrs	r2, r2, #1
 800474c:	3a01      	subs	r2, #1
 800474e:	0552      	lsls	r2, r2, #21
 8004750:	4311      	orrs	r1, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6852      	ldr	r2, [r2, #4]
 8004756:	3a01      	subs	r2, #1
 8004758:	0112      	lsls	r2, r2, #4
 800475a:	430a      	orrs	r2, r1
 800475c:	4920      	ldr	r1, [pc, #128]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800475e:	4313      	orrs	r3, r2
 8004760:	614b      	str	r3, [r1, #20]
 8004762:	e014      	b.n	800478e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004764:	4b1e      	ldr	r3, [pc, #120]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004766:	695a      	ldr	r2, [r3, #20]
 8004768:	4b20      	ldr	r3, [pc, #128]	; (80047ec <RCCEx_PLLSAI2_Config+0x1dc>)
 800476a:	4013      	ands	r3, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6892      	ldr	r2, [r2, #8]
 8004770:	0211      	lsls	r1, r2, #8
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6952      	ldr	r2, [r2, #20]
 8004776:	0852      	lsrs	r2, r2, #1
 8004778:	3a01      	subs	r2, #1
 800477a:	0652      	lsls	r2, r2, #25
 800477c:	4311      	orrs	r1, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6852      	ldr	r2, [r2, #4]
 8004782:	3a01      	subs	r2, #1
 8004784:	0112      	lsls	r2, r2, #4
 8004786:	430a      	orrs	r2, r1
 8004788:	4915      	ldr	r1, [pc, #84]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800478a:	4313      	orrs	r3, r2
 800478c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800478e:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a13      	ldr	r2, [pc, #76]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004798:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479a:	f7fc fb9b 	bl	8000ed4 <HAL_GetTick>
 800479e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047a0:	e009      	b.n	80047b6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047a2:	f7fc fb97 	bl	8000ed4 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d902      	bls.n	80047b6 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	73fb      	strb	r3, [r7, #15]
          break;
 80047b4:	e005      	b.n	80047c2 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047b6:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ef      	beq.n	80047a2 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047ca:	695a      	ldr	r2, [r3, #20]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	4903      	ldr	r1, [pc, #12]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40021000 	.word	0x40021000
 80047e4:	07ff800f 	.word	0x07ff800f
 80047e8:	ff9f800f 	.word	0xff9f800f
 80047ec:	f9ff800f 	.word	0xf9ff800f

080047f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e049      	b.n	8004896 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f006 fb32 	bl	800ae80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3304      	adds	r3, #4
 800482c:	4619      	mov	r1, r3
 800482e:	4610      	mov	r0, r2
 8004830:	f000 fb0e 	bl	8004e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d001      	beq.n	80048b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e047      	b.n	8004948 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a23      	ldr	r2, [pc, #140]	; (8004954 <HAL_TIM_Base_Start+0xb4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d01d      	beq.n	8004906 <HAL_TIM_Base_Start+0x66>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d2:	d018      	beq.n	8004906 <HAL_TIM_Base_Start+0x66>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1f      	ldr	r2, [pc, #124]	; (8004958 <HAL_TIM_Base_Start+0xb8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d013      	beq.n	8004906 <HAL_TIM_Base_Start+0x66>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1e      	ldr	r2, [pc, #120]	; (800495c <HAL_TIM_Base_Start+0xbc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d00e      	beq.n	8004906 <HAL_TIM_Base_Start+0x66>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1c      	ldr	r2, [pc, #112]	; (8004960 <HAL_TIM_Base_Start+0xc0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d009      	beq.n	8004906 <HAL_TIM_Base_Start+0x66>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1b      	ldr	r2, [pc, #108]	; (8004964 <HAL_TIM_Base_Start+0xc4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d004      	beq.n	8004906 <HAL_TIM_Base_Start+0x66>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a19      	ldr	r2, [pc, #100]	; (8004968 <HAL_TIM_Base_Start+0xc8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d115      	bne.n	8004932 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	4b17      	ldr	r3, [pc, #92]	; (800496c <HAL_TIM_Base_Start+0xcc>)
 800490e:	4013      	ands	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b06      	cmp	r3, #6
 8004916:	d015      	beq.n	8004944 <HAL_TIM_Base_Start+0xa4>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800491e:	d011      	beq.n	8004944 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004930:	e008      	b.n	8004944 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0201 	orr.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	e000      	b.n	8004946 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004944:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	40012c00 	.word	0x40012c00
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40000c00 	.word	0x40000c00
 8004964:	40013400 	.word	0x40013400
 8004968:	40014000 	.word	0x40014000
 800496c:	00010007 	.word	0x00010007

08004970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b01      	cmp	r3, #1
 8004982:	d001      	beq.n	8004988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e04f      	b.n	8004a28 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a23      	ldr	r2, [pc, #140]	; (8004a34 <HAL_TIM_Base_Start_IT+0xc4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01d      	beq.n	80049e6 <HAL_TIM_Base_Start_IT+0x76>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b2:	d018      	beq.n	80049e6 <HAL_TIM_Base_Start_IT+0x76>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1f      	ldr	r2, [pc, #124]	; (8004a38 <HAL_TIM_Base_Start_IT+0xc8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d013      	beq.n	80049e6 <HAL_TIM_Base_Start_IT+0x76>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1e      	ldr	r2, [pc, #120]	; (8004a3c <HAL_TIM_Base_Start_IT+0xcc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00e      	beq.n	80049e6 <HAL_TIM_Base_Start_IT+0x76>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1c      	ldr	r2, [pc, #112]	; (8004a40 <HAL_TIM_Base_Start_IT+0xd0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d009      	beq.n	80049e6 <HAL_TIM_Base_Start_IT+0x76>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1b      	ldr	r2, [pc, #108]	; (8004a44 <HAL_TIM_Base_Start_IT+0xd4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d004      	beq.n	80049e6 <HAL_TIM_Base_Start_IT+0x76>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a19      	ldr	r2, [pc, #100]	; (8004a48 <HAL_TIM_Base_Start_IT+0xd8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d115      	bne.n	8004a12 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	4b17      	ldr	r3, [pc, #92]	; (8004a4c <HAL_TIM_Base_Start_IT+0xdc>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b06      	cmp	r3, #6
 80049f6:	d015      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0xb4>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049fe:	d011      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a10:	e008      	b.n	8004a24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f042 0201 	orr.w	r2, r2, #1
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	e000      	b.n	8004a26 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	40012c00 	.word	0x40012c00
 8004a38:	40000400 	.word	0x40000400
 8004a3c:	40000800 	.word	0x40000800
 8004a40:	40000c00 	.word	0x40000c00
 8004a44:	40013400 	.word	0x40013400
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	00010007 	.word	0x00010007

08004a50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d122      	bne.n	8004aac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d11b      	bne.n	8004aac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0202 	mvn.w	r2, #2
 8004a7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f9be 	bl	8004e14 <HAL_TIM_IC_CaptureCallback>
 8004a98:	e005      	b.n	8004aa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f9b0 	bl	8004e00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f9c1 	bl	8004e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d122      	bne.n	8004b00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d11b      	bne.n	8004b00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0204 	mvn.w	r2, #4
 8004ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f994 	bl	8004e14 <HAL_TIM_IC_CaptureCallback>
 8004aec:	e005      	b.n	8004afa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f986 	bl	8004e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f997 	bl	8004e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d122      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d11b      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0208 	mvn.w	r2, #8
 8004b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2204      	movs	r2, #4
 8004b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f96a 	bl	8004e14 <HAL_TIM_IC_CaptureCallback>
 8004b40:	e005      	b.n	8004b4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f95c 	bl	8004e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f96d 	bl	8004e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b10      	cmp	r3, #16
 8004b60:	d122      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0310 	and.w	r3, r3, #16
 8004b6c:	2b10      	cmp	r3, #16
 8004b6e:	d11b      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0210 	mvn.w	r2, #16
 8004b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2208      	movs	r2, #8
 8004b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f940 	bl	8004e14 <HAL_TIM_IC_CaptureCallback>
 8004b94:	e005      	b.n	8004ba2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f932 	bl	8004e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f943 	bl	8004e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d10e      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d107      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0201 	mvn.w	r2, #1
 8004bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f005 fe38 	bl	800a844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bde:	2b80      	cmp	r3, #128	; 0x80
 8004be0:	d10e      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bec:	2b80      	cmp	r3, #128	; 0x80
 8004bee:	d107      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 faee 	bl	80051dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c0e:	d10e      	bne.n	8004c2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1a:	2b80      	cmp	r3, #128	; 0x80
 8004c1c:	d107      	bne.n	8004c2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fae1 	bl	80051f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c38:	2b40      	cmp	r3, #64	; 0x40
 8004c3a:	d10e      	bne.n	8004c5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d107      	bne.n	8004c5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f8f1 	bl	8004e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d10e      	bne.n	8004c86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	d107      	bne.n	8004c86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f06f 0220 	mvn.w	r2, #32
 8004c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 faa1 	bl	80051c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_TIM_ConfigClockSource+0x18>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e0a8      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x16a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cc8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cd0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b40      	cmp	r3, #64	; 0x40
 8004ce0:	d067      	beq.n	8004db2 <HAL_TIM_ConfigClockSource+0x124>
 8004ce2:	2b40      	cmp	r3, #64	; 0x40
 8004ce4:	d80b      	bhi.n	8004cfe <HAL_TIM_ConfigClockSource+0x70>
 8004ce6:	2b10      	cmp	r3, #16
 8004ce8:	d073      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x144>
 8004cea:	2b10      	cmp	r3, #16
 8004cec:	d802      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x66>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d06f      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004cf2:	e078      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d06c      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x144>
 8004cf8:	2b30      	cmp	r3, #48	; 0x30
 8004cfa:	d06a      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004cfc:	e073      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004cfe:	2b70      	cmp	r3, #112	; 0x70
 8004d00:	d00d      	beq.n	8004d1e <HAL_TIM_ConfigClockSource+0x90>
 8004d02:	2b70      	cmp	r3, #112	; 0x70
 8004d04:	d804      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x82>
 8004d06:	2b50      	cmp	r3, #80	; 0x50
 8004d08:	d033      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0xe4>
 8004d0a:	2b60      	cmp	r3, #96	; 0x60
 8004d0c:	d041      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004d0e:	e06a      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d14:	d066      	beq.n	8004de4 <HAL_TIM_ConfigClockSource+0x156>
 8004d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d1a:	d017      	beq.n	8004d4c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004d1c:	e063      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	6899      	ldr	r1, [r3, #8]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f000 f9a3 	bl	8005078 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	609a      	str	r2, [r3, #8]
      break;
 8004d4a:	e04c      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6818      	ldr	r0, [r3, #0]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	6899      	ldr	r1, [r3, #8]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f000 f98c 	bl	8005078 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d6e:	609a      	str	r2, [r3, #8]
      break;
 8004d70:	e039      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6859      	ldr	r1, [r3, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f000 f900 	bl	8004f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2150      	movs	r1, #80	; 0x50
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 f959 	bl	8005042 <TIM_ITRx_SetConfig>
      break;
 8004d90:	e029      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	6859      	ldr	r1, [r3, #4]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f000 f91f 	bl	8004fe2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2160      	movs	r1, #96	; 0x60
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 f949 	bl	8005042 <TIM_ITRx_SetConfig>
      break;
 8004db0:	e019      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6859      	ldr	r1, [r3, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f000 f8e0 	bl	8004f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2140      	movs	r1, #64	; 0x40
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 f939 	bl	8005042 <TIM_ITRx_SetConfig>
      break;
 8004dd0:	e009      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4610      	mov	r0, r2
 8004dde:	f000 f930 	bl	8005042 <TIM_ITRx_SetConfig>
        break;
 8004de2:	e000      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004de4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a40      	ldr	r2, [pc, #256]	; (8004f64 <TIM_Base_SetConfig+0x114>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d013      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6e:	d00f      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a3d      	ldr	r2, [pc, #244]	; (8004f68 <TIM_Base_SetConfig+0x118>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00b      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a3c      	ldr	r2, [pc, #240]	; (8004f6c <TIM_Base_SetConfig+0x11c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d007      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a3b      	ldr	r2, [pc, #236]	; (8004f70 <TIM_Base_SetConfig+0x120>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a3a      	ldr	r2, [pc, #232]	; (8004f74 <TIM_Base_SetConfig+0x124>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d108      	bne.n	8004ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2f      	ldr	r2, [pc, #188]	; (8004f64 <TIM_Base_SetConfig+0x114>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d01f      	beq.n	8004eea <TIM_Base_SetConfig+0x9a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb0:	d01b      	beq.n	8004eea <TIM_Base_SetConfig+0x9a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a2c      	ldr	r2, [pc, #176]	; (8004f68 <TIM_Base_SetConfig+0x118>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d017      	beq.n	8004eea <TIM_Base_SetConfig+0x9a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a2b      	ldr	r2, [pc, #172]	; (8004f6c <TIM_Base_SetConfig+0x11c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d013      	beq.n	8004eea <TIM_Base_SetConfig+0x9a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a2a      	ldr	r2, [pc, #168]	; (8004f70 <TIM_Base_SetConfig+0x120>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00f      	beq.n	8004eea <TIM_Base_SetConfig+0x9a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a29      	ldr	r2, [pc, #164]	; (8004f74 <TIM_Base_SetConfig+0x124>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00b      	beq.n	8004eea <TIM_Base_SetConfig+0x9a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a28      	ldr	r2, [pc, #160]	; (8004f78 <TIM_Base_SetConfig+0x128>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <TIM_Base_SetConfig+0x9a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a27      	ldr	r2, [pc, #156]	; (8004f7c <TIM_Base_SetConfig+0x12c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d003      	beq.n	8004eea <TIM_Base_SetConfig+0x9a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a26      	ldr	r2, [pc, #152]	; (8004f80 <TIM_Base_SetConfig+0x130>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d108      	bne.n	8004efc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a10      	ldr	r2, [pc, #64]	; (8004f64 <TIM_Base_SetConfig+0x114>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00f      	beq.n	8004f48 <TIM_Base_SetConfig+0xf8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a12      	ldr	r2, [pc, #72]	; (8004f74 <TIM_Base_SetConfig+0x124>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00b      	beq.n	8004f48 <TIM_Base_SetConfig+0xf8>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a11      	ldr	r2, [pc, #68]	; (8004f78 <TIM_Base_SetConfig+0x128>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d007      	beq.n	8004f48 <TIM_Base_SetConfig+0xf8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a10      	ldr	r2, [pc, #64]	; (8004f7c <TIM_Base_SetConfig+0x12c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0xf8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a0f      	ldr	r2, [pc, #60]	; (8004f80 <TIM_Base_SetConfig+0x130>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d103      	bne.n	8004f50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	615a      	str	r2, [r3, #20]
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40012c00 	.word	0x40012c00
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40000800 	.word	0x40000800
 8004f70:	40000c00 	.word	0x40000c00
 8004f74:	40013400 	.word	0x40013400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800

08004f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	f023 0201 	bic.w	r2, r3, #1
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f023 030a 	bic.w	r3, r3, #10
 8004fc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	621a      	str	r2, [r3, #32]
}
 8004fd6:	bf00      	nop
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b087      	sub	sp, #28
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f023 0210 	bic.w	r2, r3, #16
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800500c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	031b      	lsls	r3, r3, #12
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800501e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	621a      	str	r2, [r3, #32]
}
 8005036:	bf00      	nop
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005042:	b480      	push	{r7}
 8005044:	b085      	sub	sp, #20
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	f043 0307 	orr.w	r3, r3, #7
 8005064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	609a      	str	r2, [r3, #8]
}
 800506c:	bf00      	nop
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	021a      	lsls	r2, r3, #8
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	431a      	orrs	r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4313      	orrs	r3, r2
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	609a      	str	r2, [r3, #8]
}
 80050ac:	bf00      	nop
 80050ae:	371c      	adds	r7, #28
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e068      	b.n	80051a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a2e      	ldr	r2, [pc, #184]	; (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d004      	beq.n	8005104 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2d      	ldr	r2, [pc, #180]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d108      	bne.n	8005116 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800510a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a1e      	ldr	r2, [pc, #120]	; (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d01d      	beq.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005142:	d018      	beq.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1b      	ldr	r2, [pc, #108]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d013      	beq.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a1a      	ldr	r2, [pc, #104]	; (80051bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00e      	beq.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a18      	ldr	r2, [pc, #96]	; (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d009      	beq.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a13      	ldr	r2, [pc, #76]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d004      	beq.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a14      	ldr	r2, [pc, #80]	; (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d10c      	bne.n	8005190 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800517c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	4313      	orrs	r3, r2
 8005186:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40012c00 	.word	0x40012c00
 80051b4:	40013400 	.word	0x40013400
 80051b8:	40000400 	.word	0x40000400
 80051bc:	40000800 	.word	0x40000800
 80051c0:	40000c00 	.word	0x40000c00
 80051c4:	40014000 	.word	0x40014000

080051c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e042      	b.n	800529c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f005 fe47 	bl	800aebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2224      	movs	r2, #36	; 0x24
 8005232:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0201 	bic.w	r2, r2, #1
 8005244:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f8c4 	bl	80053d4 <UART_SetConfig>
 800524c:	4603      	mov	r3, r0
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e022      	b.n	800529c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fb8a 	bl	8005978 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fc11 	bl	8005abc <UART_CheckIdleState>
 800529a:	4603      	mov	r3, r0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08a      	sub	sp, #40	; 0x28
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	f040 8084 	bne.w	80053c8 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_UART_Transmit+0x28>
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e07c      	b.n	80053ca <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_UART_Transmit+0x3a>
 80052da:	2302      	movs	r3, #2
 80052dc:	e075      	b.n	80053ca <HAL_UART_Transmit+0x126>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2221      	movs	r2, #33	; 0x21
 80052f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80052f6:	f7fb fded 	bl	8000ed4 <HAL_GetTick>
 80052fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	88fa      	ldrh	r2, [r7, #6]
 8005300:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	88fa      	ldrh	r2, [r7, #6]
 8005308:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005314:	d108      	bne.n	8005328 <HAL_UART_Transmit+0x84>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d104      	bne.n	8005328 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	61bb      	str	r3, [r7, #24]
 8005326:	e003      	b.n	8005330 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800532c:	2300      	movs	r3, #0
 800532e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005338:	e02d      	b.n	8005396 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2200      	movs	r2, #0
 8005342:	2180      	movs	r1, #128	; 0x80
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 fc01 	bl	8005b4c <UART_WaitOnFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e03a      	b.n	80053ca <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10b      	bne.n	8005372 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	881a      	ldrh	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005366:	b292      	uxth	r2, r2
 8005368:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	3302      	adds	r3, #2
 800536e:	61bb      	str	r3, [r7, #24]
 8005370:	e008      	b.n	8005384 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	781a      	ldrb	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	b292      	uxth	r2, r2
 800537c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	3301      	adds	r3, #1
 8005382:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1cb      	bne.n	800533a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2200      	movs	r2, #0
 80053aa:	2140      	movs	r1, #64	; 0x40
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 fbcd 	bl	8005b4c <UART_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e006      	b.n	80053ca <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2220      	movs	r2, #32
 80053c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	e000      	b.n	80053ca <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80053c8:	2302      	movs	r3, #2
  }
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3720      	adds	r7, #32
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80053d8:	b088      	sub	sp, #32
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	4313      	orrs	r3, r2
 8005402:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4bb1      	ldr	r3, [pc, #708]	; (80056d0 <UART_SetConfig+0x2fc>)
 800540c:	4013      	ands	r3, r2
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6812      	ldr	r2, [r2, #0]
 8005412:	69f9      	ldr	r1, [r7, #28]
 8005414:	430b      	orrs	r3, r1
 8005416:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4aa6      	ldr	r2, [pc, #664]	; (80056d4 <UART_SetConfig+0x300>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	4313      	orrs	r3, r2
 8005446:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005452:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6812      	ldr	r2, [r2, #0]
 800545a:	69f9      	ldr	r1, [r7, #28]
 800545c:	430b      	orrs	r3, r1
 800545e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005466:	f023 010f 	bic.w	r1, r3, #15
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a97      	ldr	r2, [pc, #604]	; (80056d8 <UART_SetConfig+0x304>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d121      	bne.n	80054c4 <UART_SetConfig+0xf0>
 8005480:	4b96      	ldr	r3, [pc, #600]	; (80056dc <UART_SetConfig+0x308>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	2b03      	cmp	r3, #3
 800548c:	d816      	bhi.n	80054bc <UART_SetConfig+0xe8>
 800548e:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <UART_SetConfig+0xc0>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054a5 	.word	0x080054a5
 8005498:	080054b1 	.word	0x080054b1
 800549c:	080054ab 	.word	0x080054ab
 80054a0:	080054b7 	.word	0x080054b7
 80054a4:	2301      	movs	r3, #1
 80054a6:	76fb      	strb	r3, [r7, #27]
 80054a8:	e0e8      	b.n	800567c <UART_SetConfig+0x2a8>
 80054aa:	2302      	movs	r3, #2
 80054ac:	76fb      	strb	r3, [r7, #27]
 80054ae:	e0e5      	b.n	800567c <UART_SetConfig+0x2a8>
 80054b0:	2304      	movs	r3, #4
 80054b2:	76fb      	strb	r3, [r7, #27]
 80054b4:	e0e2      	b.n	800567c <UART_SetConfig+0x2a8>
 80054b6:	2308      	movs	r3, #8
 80054b8:	76fb      	strb	r3, [r7, #27]
 80054ba:	e0df      	b.n	800567c <UART_SetConfig+0x2a8>
 80054bc:	2310      	movs	r3, #16
 80054be:	76fb      	strb	r3, [r7, #27]
 80054c0:	bf00      	nop
 80054c2:	e0db      	b.n	800567c <UART_SetConfig+0x2a8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a85      	ldr	r2, [pc, #532]	; (80056e0 <UART_SetConfig+0x30c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d134      	bne.n	8005538 <UART_SetConfig+0x164>
 80054ce:	4b83      	ldr	r3, [pc, #524]	; (80056dc <UART_SetConfig+0x308>)
 80054d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d4:	f003 030c 	and.w	r3, r3, #12
 80054d8:	2b0c      	cmp	r3, #12
 80054da:	d829      	bhi.n	8005530 <UART_SetConfig+0x15c>
 80054dc:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <UART_SetConfig+0x110>)
 80054de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e2:	bf00      	nop
 80054e4:	08005519 	.word	0x08005519
 80054e8:	08005531 	.word	0x08005531
 80054ec:	08005531 	.word	0x08005531
 80054f0:	08005531 	.word	0x08005531
 80054f4:	08005525 	.word	0x08005525
 80054f8:	08005531 	.word	0x08005531
 80054fc:	08005531 	.word	0x08005531
 8005500:	08005531 	.word	0x08005531
 8005504:	0800551f 	.word	0x0800551f
 8005508:	08005531 	.word	0x08005531
 800550c:	08005531 	.word	0x08005531
 8005510:	08005531 	.word	0x08005531
 8005514:	0800552b 	.word	0x0800552b
 8005518:	2300      	movs	r3, #0
 800551a:	76fb      	strb	r3, [r7, #27]
 800551c:	e0ae      	b.n	800567c <UART_SetConfig+0x2a8>
 800551e:	2302      	movs	r3, #2
 8005520:	76fb      	strb	r3, [r7, #27]
 8005522:	e0ab      	b.n	800567c <UART_SetConfig+0x2a8>
 8005524:	2304      	movs	r3, #4
 8005526:	76fb      	strb	r3, [r7, #27]
 8005528:	e0a8      	b.n	800567c <UART_SetConfig+0x2a8>
 800552a:	2308      	movs	r3, #8
 800552c:	76fb      	strb	r3, [r7, #27]
 800552e:	e0a5      	b.n	800567c <UART_SetConfig+0x2a8>
 8005530:	2310      	movs	r3, #16
 8005532:	76fb      	strb	r3, [r7, #27]
 8005534:	bf00      	nop
 8005536:	e0a1      	b.n	800567c <UART_SetConfig+0x2a8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a69      	ldr	r2, [pc, #420]	; (80056e4 <UART_SetConfig+0x310>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d120      	bne.n	8005584 <UART_SetConfig+0x1b0>
 8005542:	4b66      	ldr	r3, [pc, #408]	; (80056dc <UART_SetConfig+0x308>)
 8005544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005548:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800554c:	2b10      	cmp	r3, #16
 800554e:	d00f      	beq.n	8005570 <UART_SetConfig+0x19c>
 8005550:	2b10      	cmp	r3, #16
 8005552:	d802      	bhi.n	800555a <UART_SetConfig+0x186>
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <UART_SetConfig+0x190>
 8005558:	e010      	b.n	800557c <UART_SetConfig+0x1a8>
 800555a:	2b20      	cmp	r3, #32
 800555c:	d005      	beq.n	800556a <UART_SetConfig+0x196>
 800555e:	2b30      	cmp	r3, #48	; 0x30
 8005560:	d009      	beq.n	8005576 <UART_SetConfig+0x1a2>
 8005562:	e00b      	b.n	800557c <UART_SetConfig+0x1a8>
 8005564:	2300      	movs	r3, #0
 8005566:	76fb      	strb	r3, [r7, #27]
 8005568:	e088      	b.n	800567c <UART_SetConfig+0x2a8>
 800556a:	2302      	movs	r3, #2
 800556c:	76fb      	strb	r3, [r7, #27]
 800556e:	e085      	b.n	800567c <UART_SetConfig+0x2a8>
 8005570:	2304      	movs	r3, #4
 8005572:	76fb      	strb	r3, [r7, #27]
 8005574:	e082      	b.n	800567c <UART_SetConfig+0x2a8>
 8005576:	2308      	movs	r3, #8
 8005578:	76fb      	strb	r3, [r7, #27]
 800557a:	e07f      	b.n	800567c <UART_SetConfig+0x2a8>
 800557c:	2310      	movs	r3, #16
 800557e:	76fb      	strb	r3, [r7, #27]
 8005580:	bf00      	nop
 8005582:	e07b      	b.n	800567c <UART_SetConfig+0x2a8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a57      	ldr	r2, [pc, #348]	; (80056e8 <UART_SetConfig+0x314>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d120      	bne.n	80055d0 <UART_SetConfig+0x1fc>
 800558e:	4b53      	ldr	r3, [pc, #332]	; (80056dc <UART_SetConfig+0x308>)
 8005590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005594:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005598:	2b40      	cmp	r3, #64	; 0x40
 800559a:	d00f      	beq.n	80055bc <UART_SetConfig+0x1e8>
 800559c:	2b40      	cmp	r3, #64	; 0x40
 800559e:	d802      	bhi.n	80055a6 <UART_SetConfig+0x1d2>
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d005      	beq.n	80055b0 <UART_SetConfig+0x1dc>
 80055a4:	e010      	b.n	80055c8 <UART_SetConfig+0x1f4>
 80055a6:	2b80      	cmp	r3, #128	; 0x80
 80055a8:	d005      	beq.n	80055b6 <UART_SetConfig+0x1e2>
 80055aa:	2bc0      	cmp	r3, #192	; 0xc0
 80055ac:	d009      	beq.n	80055c2 <UART_SetConfig+0x1ee>
 80055ae:	e00b      	b.n	80055c8 <UART_SetConfig+0x1f4>
 80055b0:	2300      	movs	r3, #0
 80055b2:	76fb      	strb	r3, [r7, #27]
 80055b4:	e062      	b.n	800567c <UART_SetConfig+0x2a8>
 80055b6:	2302      	movs	r3, #2
 80055b8:	76fb      	strb	r3, [r7, #27]
 80055ba:	e05f      	b.n	800567c <UART_SetConfig+0x2a8>
 80055bc:	2304      	movs	r3, #4
 80055be:	76fb      	strb	r3, [r7, #27]
 80055c0:	e05c      	b.n	800567c <UART_SetConfig+0x2a8>
 80055c2:	2308      	movs	r3, #8
 80055c4:	76fb      	strb	r3, [r7, #27]
 80055c6:	e059      	b.n	800567c <UART_SetConfig+0x2a8>
 80055c8:	2310      	movs	r3, #16
 80055ca:	76fb      	strb	r3, [r7, #27]
 80055cc:	bf00      	nop
 80055ce:	e055      	b.n	800567c <UART_SetConfig+0x2a8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a45      	ldr	r2, [pc, #276]	; (80056ec <UART_SetConfig+0x318>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d124      	bne.n	8005624 <UART_SetConfig+0x250>
 80055da:	4b40      	ldr	r3, [pc, #256]	; (80056dc <UART_SetConfig+0x308>)
 80055dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e8:	d012      	beq.n	8005610 <UART_SetConfig+0x23c>
 80055ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ee:	d802      	bhi.n	80055f6 <UART_SetConfig+0x222>
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d007      	beq.n	8005604 <UART_SetConfig+0x230>
 80055f4:	e012      	b.n	800561c <UART_SetConfig+0x248>
 80055f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055fa:	d006      	beq.n	800560a <UART_SetConfig+0x236>
 80055fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005600:	d009      	beq.n	8005616 <UART_SetConfig+0x242>
 8005602:	e00b      	b.n	800561c <UART_SetConfig+0x248>
 8005604:	2300      	movs	r3, #0
 8005606:	76fb      	strb	r3, [r7, #27]
 8005608:	e038      	b.n	800567c <UART_SetConfig+0x2a8>
 800560a:	2302      	movs	r3, #2
 800560c:	76fb      	strb	r3, [r7, #27]
 800560e:	e035      	b.n	800567c <UART_SetConfig+0x2a8>
 8005610:	2304      	movs	r3, #4
 8005612:	76fb      	strb	r3, [r7, #27]
 8005614:	e032      	b.n	800567c <UART_SetConfig+0x2a8>
 8005616:	2308      	movs	r3, #8
 8005618:	76fb      	strb	r3, [r7, #27]
 800561a:	e02f      	b.n	800567c <UART_SetConfig+0x2a8>
 800561c:	2310      	movs	r3, #16
 800561e:	76fb      	strb	r3, [r7, #27]
 8005620:	bf00      	nop
 8005622:	e02b      	b.n	800567c <UART_SetConfig+0x2a8>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a2a      	ldr	r2, [pc, #168]	; (80056d4 <UART_SetConfig+0x300>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d124      	bne.n	8005678 <UART_SetConfig+0x2a4>
 800562e:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <UART_SetConfig+0x308>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005634:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800563c:	d012      	beq.n	8005664 <UART_SetConfig+0x290>
 800563e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005642:	d802      	bhi.n	800564a <UART_SetConfig+0x276>
 8005644:	2b00      	cmp	r3, #0
 8005646:	d007      	beq.n	8005658 <UART_SetConfig+0x284>
 8005648:	e012      	b.n	8005670 <UART_SetConfig+0x29c>
 800564a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564e:	d006      	beq.n	800565e <UART_SetConfig+0x28a>
 8005650:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005654:	d009      	beq.n	800566a <UART_SetConfig+0x296>
 8005656:	e00b      	b.n	8005670 <UART_SetConfig+0x29c>
 8005658:	2300      	movs	r3, #0
 800565a:	76fb      	strb	r3, [r7, #27]
 800565c:	e00e      	b.n	800567c <UART_SetConfig+0x2a8>
 800565e:	2302      	movs	r3, #2
 8005660:	76fb      	strb	r3, [r7, #27]
 8005662:	e00b      	b.n	800567c <UART_SetConfig+0x2a8>
 8005664:	2304      	movs	r3, #4
 8005666:	76fb      	strb	r3, [r7, #27]
 8005668:	e008      	b.n	800567c <UART_SetConfig+0x2a8>
 800566a:	2308      	movs	r3, #8
 800566c:	76fb      	strb	r3, [r7, #27]
 800566e:	e005      	b.n	800567c <UART_SetConfig+0x2a8>
 8005670:	2310      	movs	r3, #16
 8005672:	76fb      	strb	r3, [r7, #27]
 8005674:	bf00      	nop
 8005676:	e001      	b.n	800567c <UART_SetConfig+0x2a8>
 8005678:	2310      	movs	r3, #16
 800567a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a14      	ldr	r2, [pc, #80]	; (80056d4 <UART_SetConfig+0x300>)
 8005682:	4293      	cmp	r3, r2
 8005684:	f040 80a1 	bne.w	80057ca <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005688:	7efb      	ldrb	r3, [r7, #27]
 800568a:	2b08      	cmp	r3, #8
 800568c:	d836      	bhi.n	80056fc <UART_SetConfig+0x328>
 800568e:	a201      	add	r2, pc, #4	; (adr r2, 8005694 <UART_SetConfig+0x2c0>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056b9 	.word	0x080056b9
 8005698:	080056fd 	.word	0x080056fd
 800569c:	080056c1 	.word	0x080056c1
 80056a0:	080056fd 	.word	0x080056fd
 80056a4:	080056c7 	.word	0x080056c7
 80056a8:	080056fd 	.word	0x080056fd
 80056ac:	080056fd 	.word	0x080056fd
 80056b0:	080056fd 	.word	0x080056fd
 80056b4:	080056f5 	.word	0x080056f5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b8:	f7fe fa72 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 80056bc:	6178      	str	r0, [r7, #20]
        break;
 80056be:	e022      	b.n	8005706 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c0:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <UART_SetConfig+0x31c>)
 80056c2:	617b      	str	r3, [r7, #20]
        break;
 80056c4:	e01f      	b.n	8005706 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056c6:	f7fe f9d5 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 80056ca:	6178      	str	r0, [r7, #20]
        break;
 80056cc:	e01b      	b.n	8005706 <UART_SetConfig+0x332>
 80056ce:	bf00      	nop
 80056d0:	cfff69f3 	.word	0xcfff69f3
 80056d4:	40008000 	.word	0x40008000
 80056d8:	40013800 	.word	0x40013800
 80056dc:	40021000 	.word	0x40021000
 80056e0:	40004400 	.word	0x40004400
 80056e4:	40004800 	.word	0x40004800
 80056e8:	40004c00 	.word	0x40004c00
 80056ec:	40005000 	.word	0x40005000
 80056f0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056f8:	617b      	str	r3, [r7, #20]
        break;
 80056fa:	e004      	b.n	8005706 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	76bb      	strb	r3, [r7, #26]
        break;
 8005704:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 811d 	beq.w	8005948 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	4a97      	ldr	r2, [pc, #604]	; (8005970 <UART_SetConfig+0x59c>)
 8005714:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005718:	461a      	mov	r2, r3
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005720:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	4413      	add	r3, r2
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	429a      	cmp	r2, r3
 8005730:	d305      	bcc.n	800573e <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	429a      	cmp	r2, r3
 800573c:	d902      	bls.n	8005744 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	76bb      	strb	r3, [r7, #26]
 8005742:	e101      	b.n	8005948 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	4618      	mov	r0, r3
 8005748:	f04f 0100 	mov.w	r1, #0
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	4a87      	ldr	r2, [pc, #540]	; (8005970 <UART_SetConfig+0x59c>)
 8005752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005756:	b29b      	uxth	r3, r3
 8005758:	f04f 0400 	mov.w	r4, #0
 800575c:	461a      	mov	r2, r3
 800575e:	4623      	mov	r3, r4
 8005760:	f7fb fa0c 	bl	8000b7c <__aeabi_uldivmod>
 8005764:	4603      	mov	r3, r0
 8005766:	460c      	mov	r4, r1
 8005768:	4619      	mov	r1, r3
 800576a:	4622      	mov	r2, r4
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	f04f 0400 	mov.w	r4, #0
 8005774:	0214      	lsls	r4, r2, #8
 8005776:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800577a:	020b      	lsls	r3, r1, #8
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6852      	ldr	r2, [r2, #4]
 8005780:	0852      	lsrs	r2, r2, #1
 8005782:	4611      	mov	r1, r2
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	eb13 0b01 	adds.w	fp, r3, r1
 800578c:	eb44 0c02 	adc.w	ip, r4, r2
 8005790:	4658      	mov	r0, fp
 8005792:	4661      	mov	r1, ip
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f04f 0400 	mov.w	r4, #0
 800579c:	461a      	mov	r2, r3
 800579e:	4623      	mov	r3, r4
 80057a0:	f7fb f9ec 	bl	8000b7c <__aeabi_uldivmod>
 80057a4:	4603      	mov	r3, r0
 80057a6:	460c      	mov	r4, r1
 80057a8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057b0:	d308      	bcc.n	80057c4 <UART_SetConfig+0x3f0>
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b8:	d204      	bcs.n	80057c4 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	60da      	str	r2, [r3, #12]
 80057c2:	e0c1      	b.n	8005948 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	76bb      	strb	r3, [r7, #26]
 80057c8:	e0be      	b.n	8005948 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057d2:	d164      	bne.n	800589e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80057d4:	7efb      	ldrb	r3, [r7, #27]
 80057d6:	2b08      	cmp	r3, #8
 80057d8:	d827      	bhi.n	800582a <UART_SetConfig+0x456>
 80057da:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <UART_SetConfig+0x40c>)
 80057dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e0:	08005805 	.word	0x08005805
 80057e4:	0800580d 	.word	0x0800580d
 80057e8:	08005815 	.word	0x08005815
 80057ec:	0800582b 	.word	0x0800582b
 80057f0:	0800581b 	.word	0x0800581b
 80057f4:	0800582b 	.word	0x0800582b
 80057f8:	0800582b 	.word	0x0800582b
 80057fc:	0800582b 	.word	0x0800582b
 8005800:	08005823 	.word	0x08005823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005804:	f7fe f9cc 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 8005808:	6178      	str	r0, [r7, #20]
        break;
 800580a:	e013      	b.n	8005834 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800580c:	f7fe f9de 	bl	8003bcc <HAL_RCC_GetPCLK2Freq>
 8005810:	6178      	str	r0, [r7, #20]
        break;
 8005812:	e00f      	b.n	8005834 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005814:	4b57      	ldr	r3, [pc, #348]	; (8005974 <UART_SetConfig+0x5a0>)
 8005816:	617b      	str	r3, [r7, #20]
        break;
 8005818:	e00c      	b.n	8005834 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800581a:	f7fe f92b 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 800581e:	6178      	str	r0, [r7, #20]
        break;
 8005820:	e008      	b.n	8005834 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005826:	617b      	str	r3, [r7, #20]
        break;
 8005828:	e004      	b.n	8005834 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	76bb      	strb	r3, [r7, #26]
        break;
 8005832:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 8086 	beq.w	8005948 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	4a4b      	ldr	r2, [pc, #300]	; (8005970 <UART_SetConfig+0x59c>)
 8005842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005846:	461a      	mov	r2, r3
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	fbb3 f3f2 	udiv	r3, r3, r2
 800584e:	005a      	lsls	r2, r3, #1
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	085b      	lsrs	r3, r3, #1
 8005856:	441a      	add	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005860:	b29b      	uxth	r3, r3
 8005862:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2b0f      	cmp	r3, #15
 8005868:	d916      	bls.n	8005898 <UART_SetConfig+0x4c4>
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005870:	d212      	bcs.n	8005898 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	b29b      	uxth	r3, r3
 8005876:	f023 030f 	bic.w	r3, r3, #15
 800587a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	b29b      	uxth	r3, r3
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	b29a      	uxth	r2, r3
 8005888:	89fb      	ldrh	r3, [r7, #14]
 800588a:	4313      	orrs	r3, r2
 800588c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	89fa      	ldrh	r2, [r7, #14]
 8005894:	60da      	str	r2, [r3, #12]
 8005896:	e057      	b.n	8005948 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	76bb      	strb	r3, [r7, #26]
 800589c:	e054      	b.n	8005948 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800589e:	7efb      	ldrb	r3, [r7, #27]
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d828      	bhi.n	80058f6 <UART_SetConfig+0x522>
 80058a4:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <UART_SetConfig+0x4d8>)
 80058a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058aa:	bf00      	nop
 80058ac:	080058d1 	.word	0x080058d1
 80058b0:	080058d9 	.word	0x080058d9
 80058b4:	080058e1 	.word	0x080058e1
 80058b8:	080058f7 	.word	0x080058f7
 80058bc:	080058e7 	.word	0x080058e7
 80058c0:	080058f7 	.word	0x080058f7
 80058c4:	080058f7 	.word	0x080058f7
 80058c8:	080058f7 	.word	0x080058f7
 80058cc:	080058ef 	.word	0x080058ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d0:	f7fe f966 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 80058d4:	6178      	str	r0, [r7, #20]
        break;
 80058d6:	e013      	b.n	8005900 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058d8:	f7fe f978 	bl	8003bcc <HAL_RCC_GetPCLK2Freq>
 80058dc:	6178      	str	r0, [r7, #20]
        break;
 80058de:	e00f      	b.n	8005900 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e0:	4b24      	ldr	r3, [pc, #144]	; (8005974 <UART_SetConfig+0x5a0>)
 80058e2:	617b      	str	r3, [r7, #20]
        break;
 80058e4:	e00c      	b.n	8005900 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058e6:	f7fe f8c5 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 80058ea:	6178      	str	r0, [r7, #20]
        break;
 80058ec:	e008      	b.n	8005900 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058f2:	617b      	str	r3, [r7, #20]
        break;
 80058f4:	e004      	b.n	8005900 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	76bb      	strb	r3, [r7, #26]
        break;
 80058fe:	bf00      	nop
    }

    if (pclk != 0U)
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d020      	beq.n	8005948 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	4a19      	ldr	r2, [pc, #100]	; (8005970 <UART_SetConfig+0x59c>)
 800590c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005910:	461a      	mov	r2, r3
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	fbb3 f2f2 	udiv	r2, r3, r2
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	085b      	lsrs	r3, r3, #1
 800591e:	441a      	add	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	fbb2 f3f3 	udiv	r3, r2, r3
 8005928:	b29b      	uxth	r3, r3
 800592a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	2b0f      	cmp	r3, #15
 8005930:	d908      	bls.n	8005944 <UART_SetConfig+0x570>
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005938:	d204      	bcs.n	8005944 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	60da      	str	r2, [r3, #12]
 8005942:	e001      	b.n	8005948 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005964:	7ebb      	ldrb	r3, [r7, #26]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3720      	adds	r7, #32
 800596a:	46bd      	mov	sp, r7
 800596c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005970:	0800bb60 	.word	0x0800bb60
 8005974:	00f42400 	.word	0x00f42400

08005978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00a      	beq.n	80059a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00a      	beq.n	80059e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d01a      	beq.n	8005a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a76:	d10a      	bne.n	8005a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	605a      	str	r2, [r3, #4]
  }
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af02      	add	r7, sp, #8
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005acc:	f7fb fa02 	bl	8000ed4 <HAL_GetTick>
 8005ad0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d10e      	bne.n	8005afe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f82c 	bl	8005b4c <UART_WaitOnFlagUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e022      	b.n	8005b44 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d10e      	bne.n	8005b2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f816 	bl	8005b4c <UART_WaitOnFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e00c      	b.n	8005b44 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b5c:	e062      	b.n	8005c24 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b64:	d05e      	beq.n	8005c24 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b66:	f7fb f9b5 	bl	8000ed4 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d302      	bcc.n	8005b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d11d      	bne.n	8005bb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b8a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0201 	bic.w	r2, r2, #1
 8005b9a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e045      	b.n	8005c44 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0304 	and.w	r3, r3, #4
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d02e      	beq.n	8005c24 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd4:	d126      	bne.n	8005c24 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bde:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bee:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0201 	bic.w	r2, r2, #1
 8005bfe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e00f      	b.n	8005c44 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	69da      	ldr	r2, [r3, #28]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	bf0c      	ite	eq
 8005c34:	2301      	moveq	r3, #1
 8005c36:	2300      	movne	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d08d      	beq.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e027      	b.n	8005cb2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2224      	movs	r2, #36	; 0x24
 8005c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0201 	bic.w	r2, r2, #1
 8005c88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e02d      	b.n	8005d32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2224      	movs	r2, #36	; 0x24
 8005ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f850 	bl	8005db8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d101      	bne.n	8005d52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e02d      	b.n	8005dae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2224      	movs	r2, #36	; 0x24
 8005d5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0201 	bic.w	r2, r2, #1
 8005d78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f812 	bl	8005db8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b089      	sub	sp, #36	; 0x24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005dc0:	4a2f      	ldr	r2, [pc, #188]	; (8005e80 <UARTEx_SetNbDataToProcess+0xc8>)
 8005dc2:	f107 0314 	add.w	r3, r7, #20
 8005dc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005dca:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005dce:	4a2d      	ldr	r2, [pc, #180]	; (8005e84 <UARTEx_SetNbDataToProcess+0xcc>)
 8005dd0:	f107 030c 	add.w	r3, r7, #12
 8005dd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005dd8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d108      	bne.n	8005df6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005df4:	e03d      	b.n	8005e72 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005df6:	2308      	movs	r3, #8
 8005df8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005dfa:	2308      	movs	r3, #8
 8005dfc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	0e5b      	lsrs	r3, r3, #25
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	0f5b      	lsrs	r3, r3, #29
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	f003 0307 	and.w	r3, r3, #7
 8005e1c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005e1e:	7fbb      	ldrb	r3, [r7, #30]
 8005e20:	7f3a      	ldrb	r2, [r7, #28]
 8005e22:	f107 0120 	add.w	r1, r7, #32
 8005e26:	440a      	add	r2, r1
 8005e28:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005e2c:	fb02 f303 	mul.w	r3, r2, r3
 8005e30:	7f3a      	ldrb	r2, [r7, #28]
 8005e32:	f107 0120 	add.w	r1, r7, #32
 8005e36:	440a      	add	r2, r1
 8005e38:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005e3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005e48:	7ffb      	ldrb	r3, [r7, #31]
 8005e4a:	7f7a      	ldrb	r2, [r7, #29]
 8005e4c:	f107 0120 	add.w	r1, r7, #32
 8005e50:	440a      	add	r2, r1
 8005e52:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005e56:	fb02 f303 	mul.w	r3, r2, r3
 8005e5a:	7f7a      	ldrb	r2, [r7, #29]
 8005e5c:	f107 0120 	add.w	r1, r7, #32
 8005e60:	440a      	add	r2, r1
 8005e62:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005e66:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e72:	bf00      	nop
 8005e74:	3724      	adds	r7, #36	; 0x24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	0800baa0 	.word	0x0800baa0
 8005e84:	0800baa8 	.word	0x0800baa8

08005e88 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	4603      	mov	r3, r0
 8005e90:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e9a:	2b84      	cmp	r3, #132	; 0x84
 8005e9c:	d005      	beq.n	8005eaa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005e9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	3303      	adds	r3, #3
 8005ea8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ebe:	f3ef 8305 	mrs	r3, IPSR
 8005ec2:	607b      	str	r3, [r7, #4]
  return(result);
 8005ec4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	bf14      	ite	ne
 8005eca:	2301      	movne	r3, #1
 8005ecc:	2300      	moveq	r3, #0
 8005ece:	b2db      	uxtb	r3, r3
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005ee0:	f001 fc3e 	bl	8007760 <vTaskStartScheduler>
  
  return osOK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005eea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eec:	b089      	sub	sp, #36	; 0x24
 8005eee:	af04      	add	r7, sp, #16
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d020      	beq.n	8005f3e <osThreadCreate+0x54>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01c      	beq.n	8005f3e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685c      	ldr	r4, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681d      	ldr	r5, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691e      	ldr	r6, [r3, #16]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff ffb6 	bl	8005e88 <makeFreeRtosPriority>
 8005f1c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f26:	9202      	str	r2, [sp, #8]
 8005f28:	9301      	str	r3, [sp, #4]
 8005f2a:	9100      	str	r1, [sp, #0]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	4632      	mov	r2, r6
 8005f30:	4629      	mov	r1, r5
 8005f32:	4620      	mov	r0, r4
 8005f34:	f001 fa50 	bl	80073d8 <xTaskCreateStatic>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	e01c      	b.n	8005f78 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685c      	ldr	r4, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f4a:	b29e      	uxth	r6, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff ff98 	bl	8005e88 <makeFreeRtosPriority>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	f107 030c 	add.w	r3, r7, #12
 8005f5e:	9301      	str	r3, [sp, #4]
 8005f60:	9200      	str	r2, [sp, #0]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	4632      	mov	r2, r6
 8005f66:	4629      	mov	r1, r5
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f001 fa8f 	bl	800748c <xTaskCreate>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d001      	beq.n	8005f78 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005f74:	2300      	movs	r3, #0
 8005f76:	e000      	b.n	8005f7a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005f78:	68fb      	ldr	r3, [r7, #12]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f82 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <osDelay+0x16>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	e000      	b.n	8005f9a <osDelay+0x18>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 fbac 	bl	80076f8 <vTaskDelay>
  
  return osOK;
 8005fa0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d013      	beq.n	8005fea <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8005fc2:	7afb      	ldrb	r3, [r7, #11]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <osTimerCreate+0x20>
 8005fc8:	2101      	movs	r1, #1
 8005fca:	e000      	b.n	8005fce <osTimerCreate+0x22>
 8005fcc:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8005fd6:	9201      	str	r2, [sp, #4]
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	460a      	mov	r2, r1
 8005fde:	2101      	movs	r1, #1
 8005fe0:	480b      	ldr	r0, [pc, #44]	; (8006010 <osTimerCreate+0x64>)
 8005fe2:	f002 fc72 	bl	80088ca <xTimerCreateStatic>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	e00e      	b.n	8006008 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8005fea:	7afb      	ldrb	r3, [r7, #11]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d101      	bne.n	8005ff4 <osTimerCreate+0x48>
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	e000      	b.n	8005ff6 <osTimerCreate+0x4a>
 8005ff4:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2101      	movs	r1, #1
 8006000:	4803      	ldr	r0, [pc, #12]	; (8006010 <osTimerCreate+0x64>)
 8006002:	f002 fc41 	bl	8008888 <xTimerCreate>
 8006006:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	0800bab0 	.word	0x0800bab0

08006014 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b088      	sub	sp, #32
 8006018:	af02      	add	r7, sp, #8
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <osTimerStart+0x20>
    ticks = 1;
 8006030:	2301      	movs	r3, #1
 8006032:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8006034:	f7ff ff40 	bl	8005eb8 <inHandlerMode>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01b      	beq.n	8006076 <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800603e:	f107 020c 	add.w	r2, r7, #12
 8006042:	2300      	movs	r3, #0
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	4613      	mov	r3, r2
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	2109      	movs	r1, #9
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f002 fcb3 	bl	80089b8 <xTimerGenericCommand>
 8006052:	4603      	mov	r3, r0
 8006054:	2b01      	cmp	r3, #1
 8006056:	d002      	beq.n	800605e <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8006058:	23ff      	movs	r3, #255	; 0xff
 800605a:	617b      	str	r3, [r7, #20]
 800605c:	e018      	b.n	8006090 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d015      	beq.n	8006090 <osTimerStart+0x7c>
 8006064:	4b0d      	ldr	r3, [pc, #52]	; (800609c <osTimerStart+0x88>)
 8006066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	e00c      	b.n	8006090 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8006076:	2300      	movs	r3, #0
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	2300      	movs	r3, #0
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	2104      	movs	r1, #4
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f002 fc99 	bl	80089b8 <xTimerGenericCommand>
 8006086:	4603      	mov	r3, r0
 8006088:	2b01      	cmp	r3, #1
 800608a:	d001      	beq.n	8006090 <osTimerStart+0x7c>
      result = osErrorOS;
 800608c:	23ff      	movs	r3, #255	; 0xff
 800608e:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8006090:	697b      	ldr	r3, [r7, #20]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	e000ed04 	.word	0xe000ed04

080060a0 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80060ac:	2300      	movs	r3, #0
 80060ae:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 80060b0:	f7ff ff02 	bl	8005eb8 <inHandlerMode>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d01a      	beq.n	80060f0 <osTimerStop+0x50>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 80060ba:	f107 0208 	add.w	r2, r7, #8
 80060be:	2300      	movs	r3, #0
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	4613      	mov	r3, r2
 80060c4:	2200      	movs	r2, #0
 80060c6:	2108      	movs	r1, #8
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f002 fc75 	bl	80089b8 <xTimerGenericCommand>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d001      	beq.n	80060d8 <osTimerStop+0x38>
      return osErrorOS;
 80060d4:	23ff      	movs	r3, #255	; 0xff
 80060d6:	e019      	b.n	800610c <osTimerStop+0x6c>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d015      	beq.n	800610a <osTimerStop+0x6a>
 80060de:	4b0d      	ldr	r3, [pc, #52]	; (8006114 <osTimerStop+0x74>)
 80060e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	e00c      	b.n	800610a <osTimerStop+0x6a>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 80060f0:	2300      	movs	r3, #0
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	2300      	movs	r3, #0
 80060f6:	2200      	movs	r2, #0
 80060f8:	2103      	movs	r1, #3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f002 fc5c 	bl	80089b8 <xTimerGenericCommand>
 8006100:	4603      	mov	r3, r0
 8006102:	2b01      	cmp	r3, #1
 8006104:	d001      	beq.n	800610a <osTimerStop+0x6a>
      result = osErrorOS;
 8006106:	23ff      	movs	r3, #255	; 0xff
 8006108:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 800610a:	68fb      	ldr	r3, [r7, #12]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	e000ed04 	.word	0xe000ed04

08006118 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af02      	add	r7, sp, #8
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8006126:	2300      	movs	r3, #0
 8006128:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800612a:	f7ff fec5 	bl	8005eb8 <inHandlerMode>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01c      	beq.n	800616e <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	f107 0208 	add.w	r2, r7, #8
 800613a:	f107 030c 	add.w	r3, r7, #12
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	4613      	mov	r3, r2
 8006142:	2201      	movs	r2, #1
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f002 fa19 	bl	800857c <xTaskGenericNotifyFromISR>
 800614a:	4603      	mov	r3, r0
 800614c:	2b01      	cmp	r3, #1
 800614e:	d002      	beq.n	8006156 <osSignalSet+0x3e>
      return 0x80000000;
 8006150:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006154:	e019      	b.n	800618a <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d015      	beq.n	8006188 <osSignalSet+0x70>
 800615c:	4b0d      	ldr	r3, [pc, #52]	; (8006194 <osSignalSet+0x7c>)
 800615e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	e00c      	b.n	8006188 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	f107 0308 	add.w	r3, r7, #8
 8006174:	2201      	movs	r2, #1
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f002 f94e 	bl	8008418 <xTaskGenericNotify>
 800617c:	4603      	mov	r3, r0
 800617e:	2b01      	cmp	r3, #1
 8006180:	d002      	beq.n	8006188 <osSignalSet+0x70>
    return 0x80000000;
 8006182:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006186:	e000      	b.n	800618a <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8006188:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	e000ed04 	.word	0xe000ed04

08006198 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8006198:	b590      	push	{r4, r7, lr}
 800619a:	b089      	sub	sp, #36	; 0x24
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80061a4:	2300      	movs	r3, #0
 80061a6:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80061a8:	2300      	movs	r3, #0
 80061aa:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d103      	bne.n	80061bc <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80061b4:	f04f 33ff 	mov.w	r3, #4294967295
 80061b8:	61fb      	str	r3, [r7, #28]
 80061ba:	e009      	b.n	80061d0 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d006      	beq.n	80061d0 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <osSignalWait+0x38>
      ticks = 1;
 80061cc:	2301      	movs	r3, #1
 80061ce:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80061d0:	f7ff fe72 	bl	8005eb8 <inHandlerMode>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80061da:	2382      	movs	r3, #130	; 0x82
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	e01b      	b.n	8006218 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80061e0:	68b9      	ldr	r1, [r7, #8]
 80061e2:	f107 0310 	add.w	r3, r7, #16
 80061e6:	1d1a      	adds	r2, r3, #4
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	2000      	movs	r0, #0
 80061ec:	f002 f8ba 	bl	8008364 <xTaskNotifyWait>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d008      	beq.n	8006208 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d102      	bne.n	8006202 <osSignalWait+0x6a>
 80061fc:	2300      	movs	r3, #0
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	e00a      	b.n	8006218 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8006202:	2340      	movs	r3, #64	; 0x40
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	e007      	b.n	8006218 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2b00      	cmp	r3, #0
 800620c:	da02      	bge.n	8006214 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800620e:	2386      	movs	r3, #134	; 0x86
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	e001      	b.n	8006218 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8006214:	2308      	movs	r3, #8
 8006216:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	461c      	mov	r4, r3
 800621c:	f107 0310 	add.w	r3, r7, #16
 8006220:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006224:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	3724      	adds	r7, #36	; 0x24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd90      	pop	{r4, r7, pc}

08006230 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d007      	beq.n	8006250 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	4619      	mov	r1, r3
 8006246:	2001      	movs	r0, #1
 8006248:	f000 faad 	bl	80067a6 <xQueueCreateMutexStatic>
 800624c:	4603      	mov	r3, r0
 800624e:	e003      	b.n	8006258 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006250:	2001      	movs	r0, #1
 8006252:	f000 fa90 	bl	8006776 <xQueueCreateMutex>
 8006256:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800626a:	2300      	movs	r3, #0
 800626c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <osMutexWait+0x18>
    return osErrorParameter;
 8006274:	2380      	movs	r3, #128	; 0x80
 8006276:	e03a      	b.n	80062ee <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006282:	d103      	bne.n	800628c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006284:	f04f 33ff 	mov.w	r3, #4294967295
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	e009      	b.n	80062a0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d006      	beq.n	80062a0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <osMutexWait+0x40>
      ticks = 1;
 800629c:	2301      	movs	r3, #1
 800629e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80062a0:	f7ff fe0a 	bl	8005eb8 <inHandlerMode>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d017      	beq.n	80062da <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80062aa:	f107 0308 	add.w	r3, r7, #8
 80062ae:	461a      	mov	r2, r3
 80062b0:	2100      	movs	r1, #0
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fe8e 	bl	8006fd4 <xQueueReceiveFromISR>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d001      	beq.n	80062c2 <osMutexWait+0x62>
      return osErrorOS;
 80062be:	23ff      	movs	r3, #255	; 0xff
 80062c0:	e015      	b.n	80062ee <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d011      	beq.n	80062ec <osMutexWait+0x8c>
 80062c8:	4b0b      	ldr	r3, [pc, #44]	; (80062f8 <osMutexWait+0x98>)
 80062ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	e008      	b.n	80062ec <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80062da:	68f9      	ldr	r1, [r7, #12]
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fd71 	bl	8006dc4 <xQueueSemaphoreTake>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d001      	beq.n	80062ec <osMutexWait+0x8c>
    return osErrorOS;
 80062e8:	23ff      	movs	r3, #255	; 0xff
 80062ea:	e000      	b.n	80062ee <osMutexWait+0x8e>
  }
  
  return osOK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	e000ed04 	.word	0xe000ed04

080062fc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006308:	2300      	movs	r3, #0
 800630a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800630c:	f7ff fdd4 	bl	8005eb8 <inHandlerMode>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d016      	beq.n	8006344 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006316:	f107 0308 	add.w	r3, r7, #8
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fbeb 	bl	8006af8 <xQueueGiveFromISR>
 8006322:	4603      	mov	r3, r0
 8006324:	2b01      	cmp	r3, #1
 8006326:	d001      	beq.n	800632c <osMutexRelease+0x30>
      return osErrorOS;
 8006328:	23ff      	movs	r3, #255	; 0xff
 800632a:	e017      	b.n	800635c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d013      	beq.n	800635a <osMutexRelease+0x5e>
 8006332:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <osMutexRelease+0x68>)
 8006334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	e00a      	b.n	800635a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006344:	2300      	movs	r3, #0
 8006346:	2200      	movs	r2, #0
 8006348:	2100      	movs	r1, #0
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fa46 	bl	80067dc <xQueueGenericSend>
 8006350:	4603      	mov	r3, r0
 8006352:	2b01      	cmp	r3, #1
 8006354:	d001      	beq.n	800635a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006356:	23ff      	movs	r3, #255	; 0xff
 8006358:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800635a:	68fb      	ldr	r3, [r7, #12]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	e000ed04 	.word	0xe000ed04

08006368 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f103 0208 	add.w	r2, r3, #8
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f04f 32ff 	mov.w	r2, #4294967295
 8006380:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f103 0208 	add.w	r2, r3, #8
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f103 0208 	add.w	r2, r3, #8
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063c2:	b480      	push	{r7}
 80063c4:	b085      	sub	sp, #20
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	601a      	str	r2, [r3, #0]
}
 80063fe:	bf00      	nop
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800640a:	b480      	push	{r7}
 800640c:	b085      	sub	sp, #20
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006420:	d103      	bne.n	800642a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	e00c      	b.n	8006444 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	3308      	adds	r3, #8
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	e002      	b.n	8006438 <vListInsert+0x2e>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	429a      	cmp	r2, r3
 8006442:	d2f6      	bcs.n	8006432 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	601a      	str	r2, [r3, #0]
}
 8006470:	bf00      	nop
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	6892      	ldr	r2, [r2, #8]
 8006492:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	6852      	ldr	r2, [r2, #4]
 800649c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d103      	bne.n	80064b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	1e5a      	subs	r2, r3, #1
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d109      	bne.n	80064f8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	60bb      	str	r3, [r7, #8]
 80064f6:	e7fe      	b.n	80064f6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80064f8:	f002 fe68 	bl	80091cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006504:	68f9      	ldr	r1, [r7, #12]
 8006506:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006508:	fb01 f303 	mul.w	r3, r1, r3
 800650c:	441a      	add	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006528:	3b01      	subs	r3, #1
 800652a:	68f9      	ldr	r1, [r7, #12]
 800652c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800652e:	fb01 f303 	mul.w	r3, r1, r3
 8006532:	441a      	add	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	22ff      	movs	r2, #255	; 0xff
 800653c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	22ff      	movs	r2, #255	; 0xff
 8006544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d114      	bne.n	8006578 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d01a      	beq.n	800658c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3310      	adds	r3, #16
 800655a:	4618      	mov	r0, r3
 800655c:	f001 fb7e 	bl	8007c5c <xTaskRemoveFromEventList>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d012      	beq.n	800658c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006566:	4b0d      	ldr	r3, [pc, #52]	; (800659c <xQueueGenericReset+0xcc>)
 8006568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	e009      	b.n	800658c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	3310      	adds	r3, #16
 800657c:	4618      	mov	r0, r3
 800657e:	f7ff fef3 	bl	8006368 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	3324      	adds	r3, #36	; 0x24
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff feee 	bl	8006368 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800658c:	f002 fe4c 	bl	8009228 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006590:	2301      	movs	r3, #1
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	e000ed04 	.word	0xe000ed04

080065a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08e      	sub	sp, #56	; 0x38
 80065a4:	af02      	add	r7, sp, #8
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d109      	bne.n	80065c8 <xQueueGenericCreateStatic+0x28>
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065c6:	e7fe      	b.n	80065c6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d109      	bne.n	80065e2 <xQueueGenericCreateStatic+0x42>
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
 80065e0:	e7fe      	b.n	80065e0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <xQueueGenericCreateStatic+0x4e>
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <xQueueGenericCreateStatic+0x52>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e000      	b.n	80065f4 <xQueueGenericCreateStatic+0x54>
 80065f2:	2300      	movs	r3, #0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d109      	bne.n	800660c <xQueueGenericCreateStatic+0x6c>
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	623b      	str	r3, [r7, #32]
 800660a:	e7fe      	b.n	800660a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d102      	bne.n	8006618 <xQueueGenericCreateStatic+0x78>
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <xQueueGenericCreateStatic+0x7c>
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <xQueueGenericCreateStatic+0x7e>
 800661c:	2300      	movs	r3, #0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d109      	bne.n	8006636 <xQueueGenericCreateStatic+0x96>
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	61fb      	str	r3, [r7, #28]
 8006634:	e7fe      	b.n	8006634 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006636:	2348      	movs	r3, #72	; 0x48
 8006638:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2b48      	cmp	r3, #72	; 0x48
 800663e:	d009      	beq.n	8006654 <xQueueGenericCreateStatic+0xb4>
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	61bb      	str	r3, [r7, #24]
 8006652:	e7fe      	b.n	8006652 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006654:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800665a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00d      	beq.n	800667c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006668:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800666c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	4613      	mov	r3, r2
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 f844 	bl	8006704 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800667e:	4618      	mov	r0, r3
 8006680:	3730      	adds	r7, #48	; 0x30
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006686:	b580      	push	{r7, lr}
 8006688:	b08a      	sub	sp, #40	; 0x28
 800668a:	af02      	add	r7, sp, #8
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	4613      	mov	r3, r2
 8006692:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d109      	bne.n	80066ae <xQueueGenericCreate+0x28>
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	e7fe      	b.n	80066ac <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d102      	bne.n	80066ba <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	61fb      	str	r3, [r7, #28]
 80066b8:	e004      	b.n	80066c4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	fb02 f303 	mul.w	r3, r2, r3
 80066c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	3348      	adds	r3, #72	; 0x48
 80066c8:	4618      	mov	r0, r3
 80066ca:	f002 fe99 	bl	8009400 <pvPortMalloc>
 80066ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d011      	beq.n	80066fa <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	3348      	adds	r3, #72	; 0x48
 80066de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066e8:	79fa      	ldrb	r2, [r7, #7]
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	4613      	mov	r3, r2
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f805 	bl	8006704 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066fa:	69bb      	ldr	r3, [r7, #24]
	}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3720      	adds	r7, #32
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d103      	bne.n	8006720 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	e002      	b.n	8006726 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006732:	2101      	movs	r1, #1
 8006734:	69b8      	ldr	r0, [r7, #24]
 8006736:	f7ff fecb 	bl	80064d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800673a:	bf00      	nop
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006742:	b580      	push	{r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00e      	beq.n	800676e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006762:	2300      	movs	r3, #0
 8006764:	2200      	movs	r2, #0
 8006766:	2100      	movs	r1, #0
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f837 	bl	80067dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006776:	b580      	push	{r7, lr}
 8006778:	b086      	sub	sp, #24
 800677a:	af00      	add	r7, sp, #0
 800677c:	4603      	mov	r3, r0
 800677e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006780:	2301      	movs	r3, #1
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	2300      	movs	r3, #0
 8006786:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	461a      	mov	r2, r3
 800678c:	6939      	ldr	r1, [r7, #16]
 800678e:	6978      	ldr	r0, [r7, #20]
 8006790:	f7ff ff79 	bl	8006686 <xQueueGenericCreate>
 8006794:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f7ff ffd3 	bl	8006742 <prvInitialiseMutex>

		return xNewQueue;
 800679c:	68fb      	ldr	r3, [r7, #12]
	}
 800679e:	4618      	mov	r0, r3
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b088      	sub	sp, #32
 80067aa:	af02      	add	r7, sp, #8
 80067ac:	4603      	mov	r3, r0
 80067ae:	6039      	str	r1, [r7, #0]
 80067b0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80067b2:	2301      	movs	r3, #1
 80067b4:	617b      	str	r3, [r7, #20]
 80067b6:	2300      	movs	r3, #0
 80067b8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2200      	movs	r2, #0
 80067c2:	6939      	ldr	r1, [r7, #16]
 80067c4:	6978      	ldr	r0, [r7, #20]
 80067c6:	f7ff feeb 	bl	80065a0 <xQueueGenericCreateStatic>
 80067ca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff ffb8 	bl	8006742 <prvInitialiseMutex>

		return xNewQueue;
 80067d2:	68fb      	ldr	r3, [r7, #12]
	}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08e      	sub	sp, #56	; 0x38
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
 80067e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067ea:	2300      	movs	r3, #0
 80067ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d109      	bne.n	800680c <xQueueGenericSend+0x30>
 80067f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	62bb      	str	r3, [r7, #40]	; 0x28
 800680a:	e7fe      	b.n	800680a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d103      	bne.n	800681a <xQueueGenericSend+0x3e>
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <xQueueGenericSend+0x42>
 800681a:	2301      	movs	r3, #1
 800681c:	e000      	b.n	8006820 <xQueueGenericSend+0x44>
 800681e:	2300      	movs	r3, #0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d109      	bne.n	8006838 <xQueueGenericSend+0x5c>
 8006824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
 8006836:	e7fe      	b.n	8006836 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b02      	cmp	r3, #2
 800683c:	d103      	bne.n	8006846 <xQueueGenericSend+0x6a>
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <xQueueGenericSend+0x6e>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <xQueueGenericSend+0x70>
 800684a:	2300      	movs	r3, #0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d109      	bne.n	8006864 <xQueueGenericSend+0x88>
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	623b      	str	r3, [r7, #32]
 8006862:	e7fe      	b.n	8006862 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006864:	f001 fbb0 	bl	8007fc8 <xTaskGetSchedulerState>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d102      	bne.n	8006874 <xQueueGenericSend+0x98>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <xQueueGenericSend+0x9c>
 8006874:	2301      	movs	r3, #1
 8006876:	e000      	b.n	800687a <xQueueGenericSend+0x9e>
 8006878:	2300      	movs	r3, #0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d109      	bne.n	8006892 <xQueueGenericSend+0xb6>
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	61fb      	str	r3, [r7, #28]
 8006890:	e7fe      	b.n	8006890 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006892:	f002 fc9b 	bl	80091cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800689e:	429a      	cmp	r2, r3
 80068a0:	d302      	bcc.n	80068a8 <xQueueGenericSend+0xcc>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d129      	bne.n	80068fc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068ae:	f000 fc26 	bl	80070fe <prvCopyDataToQueue>
 80068b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d010      	beq.n	80068de <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	3324      	adds	r3, #36	; 0x24
 80068c0:	4618      	mov	r0, r3
 80068c2:	f001 f9cb 	bl	8007c5c <xTaskRemoveFromEventList>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d013      	beq.n	80068f4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80068cc:	4b3f      	ldr	r3, [pc, #252]	; (80069cc <xQueueGenericSend+0x1f0>)
 80068ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	e00a      	b.n	80068f4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80068de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d007      	beq.n	80068f4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80068e4:	4b39      	ldr	r3, [pc, #228]	; (80069cc <xQueueGenericSend+0x1f0>)
 80068e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80068f4:	f002 fc98 	bl	8009228 <vPortExitCritical>
				return pdPASS;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e063      	b.n	80069c4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d103      	bne.n	800690a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006902:	f002 fc91 	bl	8009228 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006906:	2300      	movs	r3, #0
 8006908:	e05c      	b.n	80069c4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800690a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690c:	2b00      	cmp	r3, #0
 800690e:	d106      	bne.n	800691e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006910:	f107 0314 	add.w	r3, r7, #20
 8006914:	4618      	mov	r0, r3
 8006916:	f001 fa03 	bl	8007d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800691a:	2301      	movs	r3, #1
 800691c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800691e:	f002 fc83 	bl	8009228 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006922:	f000 ff81 	bl	8007828 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006926:	f002 fc51 	bl	80091cc <vPortEnterCritical>
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006930:	b25b      	sxtb	r3, r3
 8006932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006936:	d103      	bne.n	8006940 <xQueueGenericSend+0x164>
 8006938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006946:	b25b      	sxtb	r3, r3
 8006948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694c:	d103      	bne.n	8006956 <xQueueGenericSend+0x17a>
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006956:	f002 fc67 	bl	8009228 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800695a:	1d3a      	adds	r2, r7, #4
 800695c:	f107 0314 	add.w	r3, r7, #20
 8006960:	4611      	mov	r1, r2
 8006962:	4618      	mov	r0, r3
 8006964:	f001 f9f2 	bl	8007d4c <xTaskCheckForTimeOut>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d124      	bne.n	80069b8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800696e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006970:	f000 fcbd 	bl	80072ee <prvIsQueueFull>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d018      	beq.n	80069ac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	3310      	adds	r3, #16
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	4611      	mov	r1, r2
 8006982:	4618      	mov	r0, r3
 8006984:	f001 f91c 	bl	8007bc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800698a:	f000 fc48 	bl	800721e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800698e:	f000 ff59 	bl	8007844 <xTaskResumeAll>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	f47f af7c 	bne.w	8006892 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800699a:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <xQueueGenericSend+0x1f0>)
 800699c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	e772      	b.n	8006892 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069ae:	f000 fc36 	bl	800721e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069b2:	f000 ff47 	bl	8007844 <xTaskResumeAll>
 80069b6:	e76c      	b.n	8006892 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069ba:	f000 fc30 	bl	800721e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069be:	f000 ff41 	bl	8007844 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80069c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3738      	adds	r7, #56	; 0x38
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	e000ed04 	.word	0xe000ed04

080069d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08e      	sub	sp, #56	; 0x38
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d109      	bne.n	80069fc <xQueueGenericSendFromISR+0x2c>
 80069e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
 80069fa:	e7fe      	b.n	80069fa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d103      	bne.n	8006a0a <xQueueGenericSendFromISR+0x3a>
 8006a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <xQueueGenericSendFromISR+0x3e>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e000      	b.n	8006a10 <xQueueGenericSendFromISR+0x40>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d109      	bne.n	8006a28 <xQueueGenericSendFromISR+0x58>
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	623b      	str	r3, [r7, #32]
 8006a26:	e7fe      	b.n	8006a26 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d103      	bne.n	8006a36 <xQueueGenericSendFromISR+0x66>
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <xQueueGenericSendFromISR+0x6a>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e000      	b.n	8006a3c <xQueueGenericSendFromISR+0x6c>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d109      	bne.n	8006a54 <xQueueGenericSendFromISR+0x84>
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	61fb      	str	r3, [r7, #28]
 8006a52:	e7fe      	b.n	8006a52 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a54:	f002 fc96 	bl	8009384 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a58:	f3ef 8211 	mrs	r2, BASEPRI
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	61ba      	str	r2, [r7, #24]
 8006a6e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a70:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d302      	bcc.n	8006a86 <xQueueGenericSendFromISR+0xb6>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d12c      	bne.n	8006ae0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	68b9      	ldr	r1, [r7, #8]
 8006a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a96:	f000 fb32 	bl	80070fe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a9a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa2:	d112      	bne.n	8006aca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d016      	beq.n	8006ada <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	3324      	adds	r3, #36	; 0x24
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f001 f8d3 	bl	8007c5c <xTaskRemoveFromEventList>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00e      	beq.n	8006ada <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00b      	beq.n	8006ada <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	e007      	b.n	8006ada <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006aca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ace:	3301      	adds	r3, #1
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	b25a      	sxtb	r2, r3
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ada:	2301      	movs	r3, #1
 8006adc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006ade:	e001      	b.n	8006ae4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3738      	adds	r7, #56	; 0x38
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08e      	sub	sp, #56	; 0x38
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <xQueueGiveFromISR+0x28>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	623b      	str	r3, [r7, #32]
 8006b1e:	e7fe      	b.n	8006b1e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d009      	beq.n	8006b3c <xQueueGiveFromISR+0x44>
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	61fb      	str	r3, [r7, #28]
 8006b3a:	e7fe      	b.n	8006b3a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d103      	bne.n	8006b4c <xQueueGiveFromISR+0x54>
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <xQueueGiveFromISR+0x58>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e000      	b.n	8006b52 <xQueueGiveFromISR+0x5a>
 8006b50:	2300      	movs	r3, #0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d109      	bne.n	8006b6a <xQueueGiveFromISR+0x72>
 8006b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	61bb      	str	r3, [r7, #24]
 8006b68:	e7fe      	b.n	8006b68 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b6a:	f002 fc0b 	bl	8009384 <vPortValidateInterruptPriority>
	__asm volatile
 8006b6e:	f3ef 8211 	mrs	r2, BASEPRI
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	617a      	str	r2, [r7, #20]
 8006b84:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006b86:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d22b      	bcs.n	8006bf2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb4:	d112      	bne.n	8006bdc <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d016      	beq.n	8006bec <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	3324      	adds	r3, #36	; 0x24
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f001 f84a 	bl	8007c5c <xTaskRemoveFromEventList>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00e      	beq.n	8006bec <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00b      	beq.n	8006bec <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	e007      	b.n	8006bec <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006be0:	3301      	adds	r3, #1
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	b25a      	sxtb	r2, r3
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006bec:	2301      	movs	r3, #1
 8006bee:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf0:	e001      	b.n	8006bf6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3738      	adds	r7, #56	; 0x38
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
	...

08006c0c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08c      	sub	sp, #48	; 0x30
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <xQueueReceive+0x2e>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	623b      	str	r3, [r7, #32]
 8006c38:	e7fe      	b.n	8006c38 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d103      	bne.n	8006c48 <xQueueReceive+0x3c>
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <xQueueReceive+0x40>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e000      	b.n	8006c4e <xQueueReceive+0x42>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d109      	bne.n	8006c66 <xQueueReceive+0x5a>
 8006c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	61fb      	str	r3, [r7, #28]
 8006c64:	e7fe      	b.n	8006c64 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c66:	f001 f9af 	bl	8007fc8 <xTaskGetSchedulerState>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d102      	bne.n	8006c76 <xQueueReceive+0x6a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <xQueueReceive+0x6e>
 8006c76:	2301      	movs	r3, #1
 8006c78:	e000      	b.n	8006c7c <xQueueReceive+0x70>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d109      	bne.n	8006c94 <xQueueReceive+0x88>
 8006c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	61bb      	str	r3, [r7, #24]
 8006c92:	e7fe      	b.n	8006c92 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c94:	f002 fa9a 	bl	80091cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d01f      	beq.n	8006ce4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ca4:	68b9      	ldr	r1, [r7, #8]
 8006ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ca8:	f000 fa93 	bl	80071d2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	1e5a      	subs	r2, r3, #1
 8006cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00f      	beq.n	8006cdc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	3310      	adds	r3, #16
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 ffcb 	bl	8007c5c <xTaskRemoveFromEventList>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d007      	beq.n	8006cdc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ccc:	4b3c      	ldr	r3, [pc, #240]	; (8006dc0 <xQueueReceive+0x1b4>)
 8006cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006cdc:	f002 faa4 	bl	8009228 <vPortExitCritical>
				return pdPASS;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e069      	b.n	8006db8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d103      	bne.n	8006cf2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cea:	f002 fa9d 	bl	8009228 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	e062      	b.n	8006db8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d106      	bne.n	8006d06 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cf8:	f107 0310 	add.w	r3, r7, #16
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f001 f80f 	bl	8007d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d02:	2301      	movs	r3, #1
 8006d04:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d06:	f002 fa8f 	bl	8009228 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d0a:	f000 fd8d 	bl	8007828 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d0e:	f002 fa5d 	bl	80091cc <vPortEnterCritical>
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d18:	b25b      	sxtb	r3, r3
 8006d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1e:	d103      	bne.n	8006d28 <xQueueReceive+0x11c>
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d2e:	b25b      	sxtb	r3, r3
 8006d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d34:	d103      	bne.n	8006d3e <xQueueReceive+0x132>
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d3e:	f002 fa73 	bl	8009228 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d42:	1d3a      	adds	r2, r7, #4
 8006d44:	f107 0310 	add.w	r3, r7, #16
 8006d48:	4611      	mov	r1, r2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 fffe 	bl	8007d4c <xTaskCheckForTimeOut>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d123      	bne.n	8006d9e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d58:	f000 fab3 	bl	80072c2 <prvIsQueueEmpty>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d017      	beq.n	8006d92 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	3324      	adds	r3, #36	; 0x24
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	4611      	mov	r1, r2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 ff28 	bl	8007bc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d72:	f000 fa54 	bl	800721e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d76:	f000 fd65 	bl	8007844 <xTaskResumeAll>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d189      	bne.n	8006c94 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006d80:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <xQueueReceive+0x1b4>)
 8006d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	e780      	b.n	8006c94 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d94:	f000 fa43 	bl	800721e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d98:	f000 fd54 	bl	8007844 <xTaskResumeAll>
 8006d9c:	e77a      	b.n	8006c94 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006da0:	f000 fa3d 	bl	800721e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006da4:	f000 fd4e 	bl	8007844 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006daa:	f000 fa8a 	bl	80072c2 <prvIsQueueEmpty>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f43f af6f 	beq.w	8006c94 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006db6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3730      	adds	r7, #48	; 0x30
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	e000ed04 	.word	0xe000ed04

08006dc4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b08e      	sub	sp, #56	; 0x38
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d109      	bne.n	8006df4 <xQueueSemaphoreTake+0x30>
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	623b      	str	r3, [r7, #32]
 8006df2:	e7fe      	b.n	8006df2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d009      	beq.n	8006e10 <xQueueSemaphoreTake+0x4c>
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	61fb      	str	r3, [r7, #28]
 8006e0e:	e7fe      	b.n	8006e0e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e10:	f001 f8da 	bl	8007fc8 <xTaskGetSchedulerState>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d102      	bne.n	8006e20 <xQueueSemaphoreTake+0x5c>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <xQueueSemaphoreTake+0x60>
 8006e20:	2301      	movs	r3, #1
 8006e22:	e000      	b.n	8006e26 <xQueueSemaphoreTake+0x62>
 8006e24:	2300      	movs	r3, #0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d109      	bne.n	8006e3e <xQueueSemaphoreTake+0x7a>
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	e7fe      	b.n	8006e3c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e3e:	f002 f9c5 	bl	80091cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e46:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d024      	beq.n	8006e98 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e50:	1e5a      	subs	r2, r3, #1
 8006e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e54:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d104      	bne.n	8006e68 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006e5e:	f001 fa6d 	bl	800833c <pvTaskIncrementMutexHeldCount>
 8006e62:	4602      	mov	r2, r0
 8006e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e66:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00f      	beq.n	8006e90 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e72:	3310      	adds	r3, #16
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 fef1 	bl	8007c5c <xTaskRemoveFromEventList>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d007      	beq.n	8006e90 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e80:	4b53      	ldr	r3, [pc, #332]	; (8006fd0 <xQueueSemaphoreTake+0x20c>)
 8006e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e90:	f002 f9ca 	bl	8009228 <vPortExitCritical>
				return pdPASS;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e096      	b.n	8006fc6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d110      	bne.n	8006ec0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d009      	beq.n	8006eb8 <xQueueSemaphoreTake+0xf4>
 8006ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	617b      	str	r3, [r7, #20]
 8006eb6:	e7fe      	b.n	8006eb6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006eb8:	f002 f9b6 	bl	8009228 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	e082      	b.n	8006fc6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d106      	bne.n	8006ed4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ec6:	f107 030c 	add.w	r3, r7, #12
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 ff28 	bl	8007d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ed4:	f002 f9a8 	bl	8009228 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ed8:	f000 fca6 	bl	8007828 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006edc:	f002 f976 	bl	80091cc <vPortEnterCritical>
 8006ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ee6:	b25b      	sxtb	r3, r3
 8006ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eec:	d103      	bne.n	8006ef6 <xQueueSemaphoreTake+0x132>
 8006eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006efc:	b25b      	sxtb	r3, r3
 8006efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f02:	d103      	bne.n	8006f0c <xQueueSemaphoreTake+0x148>
 8006f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f0c:	f002 f98c 	bl	8009228 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f10:	463a      	mov	r2, r7
 8006f12:	f107 030c 	add.w	r3, r7, #12
 8006f16:	4611      	mov	r1, r2
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 ff17 	bl	8007d4c <xTaskCheckForTimeOut>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d132      	bne.n	8006f8a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f26:	f000 f9cc 	bl	80072c2 <prvIsQueueEmpty>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d026      	beq.n	8006f7e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d109      	bne.n	8006f4c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006f38:	f002 f948 	bl	80091cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f001 f85f 	bl	8008004 <xTaskPriorityInherit>
 8006f46:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006f48:	f002 f96e 	bl	8009228 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4e:	3324      	adds	r3, #36	; 0x24
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	4611      	mov	r1, r2
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fe33 	bl	8007bc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f5c:	f000 f95f 	bl	800721e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f60:	f000 fc70 	bl	8007844 <xTaskResumeAll>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f47f af69 	bne.w	8006e3e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006f6c:	4b18      	ldr	r3, [pc, #96]	; (8006fd0 <xQueueSemaphoreTake+0x20c>)
 8006f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	e75f      	b.n	8006e3e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006f7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f80:	f000 f94d 	bl	800721e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f84:	f000 fc5e 	bl	8007844 <xTaskResumeAll>
 8006f88:	e759      	b.n	8006e3e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006f8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f8c:	f000 f947 	bl	800721e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f90:	f000 fc58 	bl	8007844 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f96:	f000 f994 	bl	80072c2 <prvIsQueueEmpty>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f43f af4e 	beq.w	8006e3e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00d      	beq.n	8006fc4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006fa8:	f002 f910 	bl	80091cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006fac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fae:	f000 f88e 	bl	80070ce <prvGetDisinheritPriorityAfterTimeout>
 8006fb2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 f926 	bl	800820c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006fc0:	f002 f932 	bl	8009228 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3738      	adds	r7, #56	; 0x38
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	e000ed04 	.word	0xe000ed04

08006fd4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08e      	sub	sp, #56	; 0x38
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d109      	bne.n	8006ffe <xQueueReceiveFromISR+0x2a>
 8006fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	623b      	str	r3, [r7, #32]
 8006ffc:	e7fe      	b.n	8006ffc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d103      	bne.n	800700c <xQueueReceiveFromISR+0x38>
 8007004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <xQueueReceiveFromISR+0x3c>
 800700c:	2301      	movs	r3, #1
 800700e:	e000      	b.n	8007012 <xQueueReceiveFromISR+0x3e>
 8007010:	2300      	movs	r3, #0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d109      	bne.n	800702a <xQueueReceiveFromISR+0x56>
 8007016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	61fb      	str	r3, [r7, #28]
 8007028:	e7fe      	b.n	8007028 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800702a:	f002 f9ab 	bl	8009384 <vPortValidateInterruptPriority>
	__asm volatile
 800702e:	f3ef 8211 	mrs	r2, BASEPRI
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	61ba      	str	r2, [r7, #24]
 8007044:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007046:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007048:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	2b00      	cmp	r3, #0
 8007054:	d02f      	beq.n	80070b6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800705c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007060:	68b9      	ldr	r1, [r7, #8]
 8007062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007064:	f000 f8b5 	bl	80071d2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706a:	1e5a      	subs	r2, r3, #1
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007070:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007078:	d112      	bne.n	80070a0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d016      	beq.n	80070b0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	3310      	adds	r3, #16
 8007086:	4618      	mov	r0, r3
 8007088:	f000 fde8 	bl	8007c5c <xTaskRemoveFromEventList>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00e      	beq.n	80070b0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00b      	beq.n	80070b0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	e007      	b.n	80070b0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80070a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070a4:	3301      	adds	r3, #1
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	b25a      	sxtb	r2, r3
 80070aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80070b0:	2301      	movs	r3, #1
 80070b2:	637b      	str	r3, [r7, #52]	; 0x34
 80070b4:	e001      	b.n	80070ba <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	637b      	str	r3, [r7, #52]	; 0x34
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3738      	adds	r7, #56	; 0x38
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80070ce:	b480      	push	{r7}
 80070d0:	b085      	sub	sp, #20
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d006      	beq.n	80070ec <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f1c3 0307 	rsb	r3, r3, #7
 80070e8:	60fb      	str	r3, [r7, #12]
 80070ea:	e001      	b.n	80070f0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80070ec:	2300      	movs	r3, #0
 80070ee:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80070f0:	68fb      	ldr	r3, [r7, #12]
	}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b086      	sub	sp, #24
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007112:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10d      	bne.n	8007138 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d14d      	bne.n	80071c0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	4618      	mov	r0, r3
 800712a:	f000 ffeb 	bl	8008104 <xTaskPriorityDisinherit>
 800712e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	609a      	str	r2, [r3, #8]
 8007136:	e043      	b.n	80071c0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d119      	bne.n	8007172 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6858      	ldr	r0, [r3, #4]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	461a      	mov	r2, r3
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	f004 f88d 	bl	800b268 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007156:	441a      	add	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	429a      	cmp	r2, r3
 8007166:	d32b      	bcc.n	80071c0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	605a      	str	r2, [r3, #4]
 8007170:	e026      	b.n	80071c0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	68d8      	ldr	r0, [r3, #12]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	461a      	mov	r2, r3
 800717c:	68b9      	ldr	r1, [r7, #8]
 800717e:	f004 f873 	bl	800b268 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	425b      	negs	r3, r3
 800718c:	441a      	add	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	68da      	ldr	r2, [r3, #12]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	d207      	bcs.n	80071ae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	689a      	ldr	r2, [r3, #8]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	425b      	negs	r3, r3
 80071a8:	441a      	add	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d105      	bne.n	80071c0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	3b01      	subs	r3, #1
 80071be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80071c8:	697b      	ldr	r3, [r7, #20]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b082      	sub	sp, #8
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d018      	beq.n	8007216 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68da      	ldr	r2, [r3, #12]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ec:	441a      	add	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68da      	ldr	r2, [r3, #12]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d303      	bcc.n	8007206 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68d9      	ldr	r1, [r3, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	461a      	mov	r2, r3
 8007210:	6838      	ldr	r0, [r7, #0]
 8007212:	f004 f829 	bl	800b268 <memcpy>
	}
}
 8007216:	bf00      	nop
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b084      	sub	sp, #16
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007226:	f001 ffd1 	bl	80091cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007230:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007232:	e011      	b.n	8007258 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	2b00      	cmp	r3, #0
 800723a:	d012      	beq.n	8007262 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3324      	adds	r3, #36	; 0x24
 8007240:	4618      	mov	r0, r3
 8007242:	f000 fd0b 	bl	8007c5c <xTaskRemoveFromEventList>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800724c:	f000 fdde 	bl	8007e0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	3b01      	subs	r3, #1
 8007254:	b2db      	uxtb	r3, r3
 8007256:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800725c:	2b00      	cmp	r3, #0
 800725e:	dce9      	bgt.n	8007234 <prvUnlockQueue+0x16>
 8007260:	e000      	b.n	8007264 <prvUnlockQueue+0x46>
					break;
 8007262:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	22ff      	movs	r2, #255	; 0xff
 8007268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800726c:	f001 ffdc 	bl	8009228 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007270:	f001 ffac 	bl	80091cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800727a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800727c:	e011      	b.n	80072a2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d012      	beq.n	80072ac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	3310      	adds	r3, #16
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fce6 	bl	8007c5c <xTaskRemoveFromEventList>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007296:	f000 fdb9 	bl	8007e0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800729a:	7bbb      	ldrb	r3, [r7, #14]
 800729c:	3b01      	subs	r3, #1
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	dce9      	bgt.n	800727e <prvUnlockQueue+0x60>
 80072aa:	e000      	b.n	80072ae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072ac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	22ff      	movs	r2, #255	; 0xff
 80072b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80072b6:	f001 ffb7 	bl	8009228 <vPortExitCritical>
}
 80072ba:	bf00      	nop
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b084      	sub	sp, #16
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072ca:	f001 ff7f 	bl	80091cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d102      	bne.n	80072dc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072d6:	2301      	movs	r3, #1
 80072d8:	60fb      	str	r3, [r7, #12]
 80072da:	e001      	b.n	80072e0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072dc:	2300      	movs	r3, #0
 80072de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072e0:	f001 ffa2 	bl	8009228 <vPortExitCritical>

	return xReturn;
 80072e4:	68fb      	ldr	r3, [r7, #12]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072f6:	f001 ff69 	bl	80091cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007302:	429a      	cmp	r2, r3
 8007304:	d102      	bne.n	800730c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007306:	2301      	movs	r3, #1
 8007308:	60fb      	str	r3, [r7, #12]
 800730a:	e001      	b.n	8007310 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800730c:	2300      	movs	r3, #0
 800730e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007310:	f001 ff8a 	bl	8009228 <vPortExitCritical>

	return xReturn;
 8007314:	68fb      	ldr	r3, [r7, #12]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
 800732e:	e014      	b.n	800735a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007330:	4a0e      	ldr	r2, [pc, #56]	; (800736c <vQueueAddToRegistry+0x4c>)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10b      	bne.n	8007354 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800733c:	490b      	ldr	r1, [pc, #44]	; (800736c <vQueueAddToRegistry+0x4c>)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007346:	4a09      	ldr	r2, [pc, #36]	; (800736c <vQueueAddToRegistry+0x4c>)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	4413      	add	r3, r2
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007352:	e005      	b.n	8007360 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	3301      	adds	r3, #1
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2b07      	cmp	r3, #7
 800735e:	d9e7      	bls.n	8007330 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007360:	bf00      	nop
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	200015d4 	.word	0x200015d4

08007370 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007380:	f001 ff24 	bl	80091cc <vPortEnterCritical>
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800738a:	b25b      	sxtb	r3, r3
 800738c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007390:	d103      	bne.n	800739a <vQueueWaitForMessageRestricted+0x2a>
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073a0:	b25b      	sxtb	r3, r3
 80073a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a6:	d103      	bne.n	80073b0 <vQueueWaitForMessageRestricted+0x40>
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073b0:	f001 ff3a 	bl	8009228 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d106      	bne.n	80073ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	3324      	adds	r3, #36	; 0x24
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	68b9      	ldr	r1, [r7, #8]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 fc1f 	bl	8007c08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80073ca:	6978      	ldr	r0, [r7, #20]
 80073cc:	f7ff ff27 	bl	800721e <prvUnlockQueue>
	}
 80073d0:	bf00      	nop
 80073d2:	3718      	adds	r7, #24
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08e      	sub	sp, #56	; 0x38
 80073dc:	af04      	add	r7, sp, #16
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d109      	bne.n	8007400 <xTaskCreateStatic+0x28>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	623b      	str	r3, [r7, #32]
 80073fe:	e7fe      	b.n	80073fe <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007402:	2b00      	cmp	r3, #0
 8007404:	d109      	bne.n	800741a <xTaskCreateStatic+0x42>
 8007406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	61fb      	str	r3, [r7, #28]
 8007418:	e7fe      	b.n	8007418 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800741a:	2354      	movs	r3, #84	; 0x54
 800741c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	2b54      	cmp	r3, #84	; 0x54
 8007422:	d009      	beq.n	8007438 <xTaskCreateStatic+0x60>
 8007424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	61bb      	str	r3, [r7, #24]
 8007436:	e7fe      	b.n	8007436 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007438:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800743a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743c:	2b00      	cmp	r3, #0
 800743e:	d01e      	beq.n	800747e <xTaskCreateStatic+0xa6>
 8007440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007442:	2b00      	cmp	r3, #0
 8007444:	d01b      	beq.n	800747e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800744e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	2202      	movs	r2, #2
 8007454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007458:	2300      	movs	r3, #0
 800745a:	9303      	str	r3, [sp, #12]
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	9302      	str	r3, [sp, #8]
 8007460:	f107 0314 	add.w	r3, r7, #20
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	68b9      	ldr	r1, [r7, #8]
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 f850 	bl	8007516 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007476:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007478:	f000 f8d4 	bl	8007624 <prvAddNewTaskToReadyList>
 800747c:	e001      	b.n	8007482 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007482:	697b      	ldr	r3, [r7, #20]
	}
 8007484:	4618      	mov	r0, r3
 8007486:	3728      	adds	r7, #40	; 0x28
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08c      	sub	sp, #48	; 0x30
 8007490:	af04      	add	r7, sp, #16
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	603b      	str	r3, [r7, #0]
 8007498:	4613      	mov	r3, r2
 800749a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800749c:	88fb      	ldrh	r3, [r7, #6]
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4618      	mov	r0, r3
 80074a2:	f001 ffad 	bl	8009400 <pvPortMalloc>
 80074a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00e      	beq.n	80074cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074ae:	2054      	movs	r0, #84	; 0x54
 80074b0:	f001 ffa6 	bl	8009400 <pvPortMalloc>
 80074b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	631a      	str	r2, [r3, #48]	; 0x30
 80074c2:	e005      	b.n	80074d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074c4:	6978      	ldr	r0, [r7, #20]
 80074c6:	f002 f85d 	bl	8009584 <vPortFree>
 80074ca:	e001      	b.n	80074d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074cc:	2300      	movs	r3, #0
 80074ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d017      	beq.n	8007506 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074de:	88fa      	ldrh	r2, [r7, #6]
 80074e0:	2300      	movs	r3, #0
 80074e2:	9303      	str	r3, [sp, #12]
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	9302      	str	r3, [sp, #8]
 80074e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ea:	9301      	str	r3, [sp, #4]
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	68b9      	ldr	r1, [r7, #8]
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 f80e 	bl	8007516 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074fa:	69f8      	ldr	r0, [r7, #28]
 80074fc:	f000 f892 	bl	8007624 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007500:	2301      	movs	r3, #1
 8007502:	61bb      	str	r3, [r7, #24]
 8007504:	e002      	b.n	800750c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007506:	f04f 33ff 	mov.w	r3, #4294967295
 800750a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800750c:	69bb      	ldr	r3, [r7, #24]
	}
 800750e:	4618      	mov	r0, r3
 8007510:	3720      	adds	r7, #32
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b088      	sub	sp, #32
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	607a      	str	r2, [r7, #4]
 8007522:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800752e:	3b01      	subs	r3, #1
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	f023 0307 	bic.w	r3, r3, #7
 800753c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	f003 0307 	and.w	r3, r3, #7
 8007544:	2b00      	cmp	r3, #0
 8007546:	d009      	beq.n	800755c <prvInitialiseNewTask+0x46>
 8007548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	617b      	str	r3, [r7, #20]
 800755a:	e7fe      	b.n	800755a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01f      	beq.n	80075a2 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007562:	2300      	movs	r3, #0
 8007564:	61fb      	str	r3, [r7, #28]
 8007566:	e012      	b.n	800758e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	4413      	add	r3, r2
 800756e:	7819      	ldrb	r1, [r3, #0]
 8007570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	4413      	add	r3, r2
 8007576:	3334      	adds	r3, #52	; 0x34
 8007578:	460a      	mov	r2, r1
 800757a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	4413      	add	r3, r2
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d006      	beq.n	8007596 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	3301      	adds	r3, #1
 800758c:	61fb      	str	r3, [r7, #28]
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	2b0f      	cmp	r3, #15
 8007592:	d9e9      	bls.n	8007568 <prvInitialiseNewTask+0x52>
 8007594:	e000      	b.n	8007598 <prvInitialiseNewTask+0x82>
			{
				break;
 8007596:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	2200      	movs	r2, #0
 800759c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075a0:	e003      	b.n	80075aa <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	2b06      	cmp	r3, #6
 80075ae:	d901      	bls.n	80075b4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075b0:	2306      	movs	r3, #6
 80075b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80075c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c2:	2200      	movs	r2, #0
 80075c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	3304      	adds	r3, #4
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe feec 	bl	80063a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	3318      	adds	r3, #24
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe fee7 	bl	80063a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	f1c3 0207 	rsb	r2, r3, #7
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	2200      	movs	r2, #0
 80075f4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	68f9      	ldr	r1, [r7, #12]
 8007602:	69b8      	ldr	r0, [r7, #24]
 8007604:	f001 fcbe 	bl	8008f84 <pxPortInitialiseStack>
 8007608:	4602      	mov	r2, r0
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007618:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800761a:	bf00      	nop
 800761c:	3720      	adds	r7, #32
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800762c:	f001 fdce 	bl	80091cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007630:	4b2a      	ldr	r3, [pc, #168]	; (80076dc <prvAddNewTaskToReadyList+0xb8>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3301      	adds	r3, #1
 8007636:	4a29      	ldr	r2, [pc, #164]	; (80076dc <prvAddNewTaskToReadyList+0xb8>)
 8007638:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800763a:	4b29      	ldr	r3, [pc, #164]	; (80076e0 <prvAddNewTaskToReadyList+0xbc>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d109      	bne.n	8007656 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007642:	4a27      	ldr	r2, [pc, #156]	; (80076e0 <prvAddNewTaskToReadyList+0xbc>)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007648:	4b24      	ldr	r3, [pc, #144]	; (80076dc <prvAddNewTaskToReadyList+0xb8>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d110      	bne.n	8007672 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007650:	f000 fc00 	bl	8007e54 <prvInitialiseTaskLists>
 8007654:	e00d      	b.n	8007672 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007656:	4b23      	ldr	r3, [pc, #140]	; (80076e4 <prvAddNewTaskToReadyList+0xc0>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d109      	bne.n	8007672 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800765e:	4b20      	ldr	r3, [pc, #128]	; (80076e0 <prvAddNewTaskToReadyList+0xbc>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	429a      	cmp	r2, r3
 800766a:	d802      	bhi.n	8007672 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800766c:	4a1c      	ldr	r2, [pc, #112]	; (80076e0 <prvAddNewTaskToReadyList+0xbc>)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007672:	4b1d      	ldr	r3, [pc, #116]	; (80076e8 <prvAddNewTaskToReadyList+0xc4>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3301      	adds	r3, #1
 8007678:	4a1b      	ldr	r2, [pc, #108]	; (80076e8 <prvAddNewTaskToReadyList+0xc4>)
 800767a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	2201      	movs	r2, #1
 8007682:	409a      	lsls	r2, r3
 8007684:	4b19      	ldr	r3, [pc, #100]	; (80076ec <prvAddNewTaskToReadyList+0xc8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4313      	orrs	r3, r2
 800768a:	4a18      	ldr	r2, [pc, #96]	; (80076ec <prvAddNewTaskToReadyList+0xc8>)
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007692:	4613      	mov	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4a15      	ldr	r2, [pc, #84]	; (80076f0 <prvAddNewTaskToReadyList+0xcc>)
 800769c:	441a      	add	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	3304      	adds	r3, #4
 80076a2:	4619      	mov	r1, r3
 80076a4:	4610      	mov	r0, r2
 80076a6:	f7fe fe8c 	bl	80063c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076aa:	f001 fdbd 	bl	8009228 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076ae:	4b0d      	ldr	r3, [pc, #52]	; (80076e4 <prvAddNewTaskToReadyList+0xc0>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00e      	beq.n	80076d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076b6:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <prvAddNewTaskToReadyList+0xbc>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d207      	bcs.n	80076d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076c4:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <prvAddNewTaskToReadyList+0xd0>)
 80076c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	2000020c 	.word	0x2000020c
 80076e0:	2000010c 	.word	0x2000010c
 80076e4:	20000218 	.word	0x20000218
 80076e8:	20000228 	.word	0x20000228
 80076ec:	20000214 	.word	0x20000214
 80076f0:	20000110 	.word	0x20000110
 80076f4:	e000ed04 	.word	0xe000ed04

080076f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007700:	2300      	movs	r3, #0
 8007702:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d016      	beq.n	8007738 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800770a:	4b13      	ldr	r3, [pc, #76]	; (8007758 <vTaskDelay+0x60>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d009      	beq.n	8007726 <vTaskDelay+0x2e>
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	60bb      	str	r3, [r7, #8]
 8007724:	e7fe      	b.n	8007724 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007726:	f000 f87f 	bl	8007828 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800772a:	2100      	movs	r1, #0
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fffd 	bl	800872c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007732:	f000 f887 	bl	8007844 <xTaskResumeAll>
 8007736:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d107      	bne.n	800774e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800773e:	4b07      	ldr	r3, [pc, #28]	; (800775c <vTaskDelay+0x64>)
 8007740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007744:	601a      	str	r2, [r3, #0]
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800774e:	bf00      	nop
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	20000234 	.word	0x20000234
 800775c:	e000ed04 	.word	0xe000ed04

08007760 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08a      	sub	sp, #40	; 0x28
 8007764:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007766:	2300      	movs	r3, #0
 8007768:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800776a:	2300      	movs	r3, #0
 800776c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800776e:	463a      	mov	r2, r7
 8007770:	1d39      	adds	r1, r7, #4
 8007772:	f107 0308 	add.w	r3, r7, #8
 8007776:	4618      	mov	r0, r3
 8007778:	f002 f818 	bl	80097ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	9202      	str	r2, [sp, #8]
 8007784:	9301      	str	r3, [sp, #4]
 8007786:	2300      	movs	r3, #0
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	2300      	movs	r3, #0
 800778c:	460a      	mov	r2, r1
 800778e:	4920      	ldr	r1, [pc, #128]	; (8007810 <vTaskStartScheduler+0xb0>)
 8007790:	4820      	ldr	r0, [pc, #128]	; (8007814 <vTaskStartScheduler+0xb4>)
 8007792:	f7ff fe21 	bl	80073d8 <xTaskCreateStatic>
 8007796:	4602      	mov	r2, r0
 8007798:	4b1f      	ldr	r3, [pc, #124]	; (8007818 <vTaskStartScheduler+0xb8>)
 800779a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800779c:	4b1e      	ldr	r3, [pc, #120]	; (8007818 <vTaskStartScheduler+0xb8>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077a4:	2301      	movs	r3, #1
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	e001      	b.n	80077ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077aa:	2300      	movs	r3, #0
 80077ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d102      	bne.n	80077ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80077b4:	f001 f820 	bl	80087f8 <xTimerCreateTimerTask>
 80077b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d115      	bne.n	80077ec <vTaskStartScheduler+0x8c>
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077d2:	4b12      	ldr	r3, [pc, #72]	; (800781c <vTaskStartScheduler+0xbc>)
 80077d4:	f04f 32ff 	mov.w	r2, #4294967295
 80077d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077da:	4b11      	ldr	r3, [pc, #68]	; (8007820 <vTaskStartScheduler+0xc0>)
 80077dc:	2201      	movs	r2, #1
 80077de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077e0:	4b10      	ldr	r3, [pc, #64]	; (8007824 <vTaskStartScheduler+0xc4>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077e6:	f001 fc53 	bl	8009090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077ea:	e00d      	b.n	8007808 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f2:	d109      	bne.n	8007808 <vTaskStartScheduler+0xa8>
 80077f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	e7fe      	b.n	8007806 <vTaskStartScheduler+0xa6>
}
 8007808:	bf00      	nop
 800780a:	3718      	adds	r7, #24
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	0800bab4 	.word	0x0800bab4
 8007814:	08007e25 	.word	0x08007e25
 8007818:	20000230 	.word	0x20000230
 800781c:	2000022c 	.word	0x2000022c
 8007820:	20000218 	.word	0x20000218
 8007824:	20000210 	.word	0x20000210

08007828 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007828:	b480      	push	{r7}
 800782a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800782c:	4b04      	ldr	r3, [pc, #16]	; (8007840 <vTaskSuspendAll+0x18>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3301      	adds	r3, #1
 8007832:	4a03      	ldr	r2, [pc, #12]	; (8007840 <vTaskSuspendAll+0x18>)
 8007834:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007836:	bf00      	nop
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	20000234 	.word	0x20000234

08007844 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800784a:	2300      	movs	r3, #0
 800784c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800784e:	2300      	movs	r3, #0
 8007850:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007852:	4b41      	ldr	r3, [pc, #260]	; (8007958 <xTaskResumeAll+0x114>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d109      	bne.n	800786e <xTaskResumeAll+0x2a>
 800785a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	603b      	str	r3, [r7, #0]
 800786c:	e7fe      	b.n	800786c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800786e:	f001 fcad 	bl	80091cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007872:	4b39      	ldr	r3, [pc, #228]	; (8007958 <xTaskResumeAll+0x114>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3b01      	subs	r3, #1
 8007878:	4a37      	ldr	r2, [pc, #220]	; (8007958 <xTaskResumeAll+0x114>)
 800787a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800787c:	4b36      	ldr	r3, [pc, #216]	; (8007958 <xTaskResumeAll+0x114>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d161      	bne.n	8007948 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007884:	4b35      	ldr	r3, [pc, #212]	; (800795c <xTaskResumeAll+0x118>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d05d      	beq.n	8007948 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800788c:	e02e      	b.n	80078ec <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800788e:	4b34      	ldr	r3, [pc, #208]	; (8007960 <xTaskResumeAll+0x11c>)
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	3318      	adds	r3, #24
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe fdee 	bl	800647c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3304      	adds	r3, #4
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7fe fde9 	bl	800647c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ae:	2201      	movs	r2, #1
 80078b0:	409a      	lsls	r2, r3
 80078b2:	4b2c      	ldr	r3, [pc, #176]	; (8007964 <xTaskResumeAll+0x120>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	4a2a      	ldr	r2, [pc, #168]	; (8007964 <xTaskResumeAll+0x120>)
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c0:	4613      	mov	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4a27      	ldr	r2, [pc, #156]	; (8007968 <xTaskResumeAll+0x124>)
 80078ca:	441a      	add	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	3304      	adds	r3, #4
 80078d0:	4619      	mov	r1, r3
 80078d2:	4610      	mov	r0, r2
 80078d4:	f7fe fd75 	bl	80063c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078dc:	4b23      	ldr	r3, [pc, #140]	; (800796c <xTaskResumeAll+0x128>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d302      	bcc.n	80078ec <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80078e6:	4b22      	ldr	r3, [pc, #136]	; (8007970 <xTaskResumeAll+0x12c>)
 80078e8:	2201      	movs	r2, #1
 80078ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078ec:	4b1c      	ldr	r3, [pc, #112]	; (8007960 <xTaskResumeAll+0x11c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1cc      	bne.n	800788e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078fa:	f000 fb45 	bl	8007f88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80078fe:	4b1d      	ldr	r3, [pc, #116]	; (8007974 <xTaskResumeAll+0x130>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d010      	beq.n	800792c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800790a:	f000 f847 	bl	800799c <xTaskIncrementTick>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007914:	4b16      	ldr	r3, [pc, #88]	; (8007970 <xTaskResumeAll+0x12c>)
 8007916:	2201      	movs	r2, #1
 8007918:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3b01      	subs	r3, #1
 800791e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1f1      	bne.n	800790a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007926:	4b13      	ldr	r3, [pc, #76]	; (8007974 <xTaskResumeAll+0x130>)
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800792c:	4b10      	ldr	r3, [pc, #64]	; (8007970 <xTaskResumeAll+0x12c>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d009      	beq.n	8007948 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007934:	2301      	movs	r3, #1
 8007936:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007938:	4b0f      	ldr	r3, [pc, #60]	; (8007978 <xTaskResumeAll+0x134>)
 800793a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007948:	f001 fc6e 	bl	8009228 <vPortExitCritical>

	return xAlreadyYielded;
 800794c:	68bb      	ldr	r3, [r7, #8]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	20000234 	.word	0x20000234
 800795c:	2000020c 	.word	0x2000020c
 8007960:	200001cc 	.word	0x200001cc
 8007964:	20000214 	.word	0x20000214
 8007968:	20000110 	.word	0x20000110
 800796c:	2000010c 	.word	0x2000010c
 8007970:	20000220 	.word	0x20000220
 8007974:	2000021c 	.word	0x2000021c
 8007978:	e000ed04 	.word	0xe000ed04

0800797c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007982:	4b05      	ldr	r3, [pc, #20]	; (8007998 <xTaskGetTickCount+0x1c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007988:	687b      	ldr	r3, [r7, #4]
}
 800798a:	4618      	mov	r0, r3
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	20000210 	.word	0x20000210

0800799c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079a2:	2300      	movs	r3, #0
 80079a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079a6:	4b4e      	ldr	r3, [pc, #312]	; (8007ae0 <xTaskIncrementTick+0x144>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f040 8087 	bne.w	8007abe <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079b0:	4b4c      	ldr	r3, [pc, #304]	; (8007ae4 <xTaskIncrementTick+0x148>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3301      	adds	r3, #1
 80079b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079b8:	4a4a      	ldr	r2, [pc, #296]	; (8007ae4 <xTaskIncrementTick+0x148>)
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d11f      	bne.n	8007a04 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80079c4:	4b48      	ldr	r3, [pc, #288]	; (8007ae8 <xTaskIncrementTick+0x14c>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d009      	beq.n	80079e2 <xTaskIncrementTick+0x46>
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	603b      	str	r3, [r7, #0]
 80079e0:	e7fe      	b.n	80079e0 <xTaskIncrementTick+0x44>
 80079e2:	4b41      	ldr	r3, [pc, #260]	; (8007ae8 <xTaskIncrementTick+0x14c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	4b40      	ldr	r3, [pc, #256]	; (8007aec <xTaskIncrementTick+0x150>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a3e      	ldr	r2, [pc, #248]	; (8007ae8 <xTaskIncrementTick+0x14c>)
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	4a3e      	ldr	r2, [pc, #248]	; (8007aec <xTaskIncrementTick+0x150>)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	4b3e      	ldr	r3, [pc, #248]	; (8007af0 <xTaskIncrementTick+0x154>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3301      	adds	r3, #1
 80079fc:	4a3c      	ldr	r2, [pc, #240]	; (8007af0 <xTaskIncrementTick+0x154>)
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	f000 fac2 	bl	8007f88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a04:	4b3b      	ldr	r3, [pc, #236]	; (8007af4 <xTaskIncrementTick+0x158>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d348      	bcc.n	8007aa0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a0e:	4b36      	ldr	r3, [pc, #216]	; (8007ae8 <xTaskIncrementTick+0x14c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d104      	bne.n	8007a22 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a18:	4b36      	ldr	r3, [pc, #216]	; (8007af4 <xTaskIncrementTick+0x158>)
 8007a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a1e:	601a      	str	r2, [r3, #0]
					break;
 8007a20:	e03e      	b.n	8007aa0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a22:	4b31      	ldr	r3, [pc, #196]	; (8007ae8 <xTaskIncrementTick+0x14c>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d203      	bcs.n	8007a42 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a3a:	4a2e      	ldr	r2, [pc, #184]	; (8007af4 <xTaskIncrementTick+0x158>)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a40:	e02e      	b.n	8007aa0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	3304      	adds	r3, #4
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fe fd18 	bl	800647c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d004      	beq.n	8007a5e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	3318      	adds	r3, #24
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fe fd0f 	bl	800647c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a62:	2201      	movs	r2, #1
 8007a64:	409a      	lsls	r2, r3
 8007a66:	4b24      	ldr	r3, [pc, #144]	; (8007af8 <xTaskIncrementTick+0x15c>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	4a22      	ldr	r2, [pc, #136]	; (8007af8 <xTaskIncrementTick+0x15c>)
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a74:	4613      	mov	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4a1f      	ldr	r2, [pc, #124]	; (8007afc <xTaskIncrementTick+0x160>)
 8007a7e:	441a      	add	r2, r3
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	3304      	adds	r3, #4
 8007a84:	4619      	mov	r1, r3
 8007a86:	4610      	mov	r0, r2
 8007a88:	f7fe fc9b 	bl	80063c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a90:	4b1b      	ldr	r3, [pc, #108]	; (8007b00 <xTaskIncrementTick+0x164>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d3b9      	bcc.n	8007a0e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a9e:	e7b6      	b.n	8007a0e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007aa0:	4b17      	ldr	r3, [pc, #92]	; (8007b00 <xTaskIncrementTick+0x164>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa6:	4915      	ldr	r1, [pc, #84]	; (8007afc <xTaskIncrementTick+0x160>)
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	440b      	add	r3, r1
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d907      	bls.n	8007ac8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	617b      	str	r3, [r7, #20]
 8007abc:	e004      	b.n	8007ac8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007abe:	4b11      	ldr	r3, [pc, #68]	; (8007b04 <xTaskIncrementTick+0x168>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	4a0f      	ldr	r2, [pc, #60]	; (8007b04 <xTaskIncrementTick+0x168>)
 8007ac6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007ac8:	4b0f      	ldr	r3, [pc, #60]	; (8007b08 <xTaskIncrementTick+0x16c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ad4:	697b      	ldr	r3, [r7, #20]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	20000234 	.word	0x20000234
 8007ae4:	20000210 	.word	0x20000210
 8007ae8:	200001c4 	.word	0x200001c4
 8007aec:	200001c8 	.word	0x200001c8
 8007af0:	20000224 	.word	0x20000224
 8007af4:	2000022c 	.word	0x2000022c
 8007af8:	20000214 	.word	0x20000214
 8007afc:	20000110 	.word	0x20000110
 8007b00:	2000010c 	.word	0x2000010c
 8007b04:	2000021c 	.word	0x2000021c
 8007b08:	20000220 	.word	0x20000220

08007b0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b12:	4b26      	ldr	r3, [pc, #152]	; (8007bac <vTaskSwitchContext+0xa0>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b1a:	4b25      	ldr	r3, [pc, #148]	; (8007bb0 <vTaskSwitchContext+0xa4>)
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b20:	e03e      	b.n	8007ba0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007b22:	4b23      	ldr	r3, [pc, #140]	; (8007bb0 <vTaskSwitchContext+0xa4>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b28:	4b22      	ldr	r3, [pc, #136]	; (8007bb4 <vTaskSwitchContext+0xa8>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	fab3 f383 	clz	r3, r3
 8007b34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007b36:	7afb      	ldrb	r3, [r7, #11]
 8007b38:	f1c3 031f 	rsb	r3, r3, #31
 8007b3c:	617b      	str	r3, [r7, #20]
 8007b3e:	491e      	ldr	r1, [pc, #120]	; (8007bb8 <vTaskSwitchContext+0xac>)
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	4613      	mov	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	440b      	add	r3, r1
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d109      	bne.n	8007b66 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	607b      	str	r3, [r7, #4]
 8007b64:	e7fe      	b.n	8007b64 <vTaskSwitchContext+0x58>
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4a11      	ldr	r2, [pc, #68]	; (8007bb8 <vTaskSwitchContext+0xac>)
 8007b72:	4413      	add	r3, r2
 8007b74:	613b      	str	r3, [r7, #16]
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	605a      	str	r2, [r3, #4]
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	3308      	adds	r3, #8
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d104      	bne.n	8007b96 <vTaskSwitchContext+0x8a>
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	605a      	str	r2, [r3, #4]
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	4a07      	ldr	r2, [pc, #28]	; (8007bbc <vTaskSwitchContext+0xb0>)
 8007b9e:	6013      	str	r3, [r2, #0]
}
 8007ba0:	bf00      	nop
 8007ba2:	371c      	adds	r7, #28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	20000234 	.word	0x20000234
 8007bb0:	20000220 	.word	0x20000220
 8007bb4:	20000214 	.word	0x20000214
 8007bb8:	20000110 	.word	0x20000110
 8007bbc:	2000010c 	.word	0x2000010c

08007bc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d109      	bne.n	8007be4 <vTaskPlaceOnEventList+0x24>
 8007bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	e7fe      	b.n	8007be2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007be4:	4b07      	ldr	r3, [pc, #28]	; (8007c04 <vTaskPlaceOnEventList+0x44>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3318      	adds	r3, #24
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7fe fc0c 	bl	800640a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007bf2:	2101      	movs	r1, #1
 8007bf4:	6838      	ldr	r0, [r7, #0]
 8007bf6:	f000 fd99 	bl	800872c <prvAddCurrentTaskToDelayedList>
}
 8007bfa:	bf00      	nop
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	2000010c 	.word	0x2000010c

08007c08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d109      	bne.n	8007c2e <vTaskPlaceOnEventListRestricted+0x26>
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	617b      	str	r3, [r7, #20]
 8007c2c:	e7fe      	b.n	8007c2c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c2e:	4b0a      	ldr	r3, [pc, #40]	; (8007c58 <vTaskPlaceOnEventListRestricted+0x50>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3318      	adds	r3, #24
 8007c34:	4619      	mov	r1, r3
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f7fe fbc3 	bl	80063c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d002      	beq.n	8007c48 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007c42:	f04f 33ff 	mov.w	r3, #4294967295
 8007c46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c48:	6879      	ldr	r1, [r7, #4]
 8007c4a:	68b8      	ldr	r0, [r7, #8]
 8007c4c:	f000 fd6e 	bl	800872c <prvAddCurrentTaskToDelayedList>
	}
 8007c50:	bf00      	nop
 8007c52:	3718      	adds	r7, #24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	2000010c 	.word	0x2000010c

08007c5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d109      	bne.n	8007c86 <xTaskRemoveFromEventList+0x2a>
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	e7fe      	b.n	8007c84 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	3318      	adds	r3, #24
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fbf6 	bl	800647c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c90:	4b1d      	ldr	r3, [pc, #116]	; (8007d08 <xTaskRemoveFromEventList+0xac>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d11c      	bne.n	8007cd2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fe fbed 	bl	800647c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	409a      	lsls	r2, r3
 8007caa:	4b18      	ldr	r3, [pc, #96]	; (8007d0c <xTaskRemoveFromEventList+0xb0>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	4a16      	ldr	r2, [pc, #88]	; (8007d0c <xTaskRemoveFromEventList+0xb0>)
 8007cb2:	6013      	str	r3, [r2, #0]
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb8:	4613      	mov	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4a13      	ldr	r2, [pc, #76]	; (8007d10 <xTaskRemoveFromEventList+0xb4>)
 8007cc2:	441a      	add	r2, r3
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	4619      	mov	r1, r3
 8007cca:	4610      	mov	r0, r2
 8007ccc:	f7fe fb79 	bl	80063c2 <vListInsertEnd>
 8007cd0:	e005      	b.n	8007cde <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	3318      	adds	r3, #24
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	480e      	ldr	r0, [pc, #56]	; (8007d14 <xTaskRemoveFromEventList+0xb8>)
 8007cda:	f7fe fb72 	bl	80063c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce2:	4b0d      	ldr	r3, [pc, #52]	; (8007d18 <xTaskRemoveFromEventList+0xbc>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d905      	bls.n	8007cf8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007cec:	2301      	movs	r3, #1
 8007cee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007cf0:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <xTaskRemoveFromEventList+0xc0>)
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	e001      	b.n	8007cfc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007cfc:	697b      	ldr	r3, [r7, #20]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20000234 	.word	0x20000234
 8007d0c:	20000214 	.word	0x20000214
 8007d10:	20000110 	.word	0x20000110
 8007d14:	200001cc 	.word	0x200001cc
 8007d18:	2000010c 	.word	0x2000010c
 8007d1c:	20000220 	.word	0x20000220

08007d20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d28:	4b06      	ldr	r3, [pc, #24]	; (8007d44 <vTaskInternalSetTimeOutState+0x24>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d30:	4b05      	ldr	r3, [pc, #20]	; (8007d48 <vTaskInternalSetTimeOutState+0x28>)
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	605a      	str	r2, [r3, #4]
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	20000224 	.word	0x20000224
 8007d48:	20000210 	.word	0x20000210

08007d4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d109      	bne.n	8007d70 <xTaskCheckForTimeOut+0x24>
 8007d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	613b      	str	r3, [r7, #16]
 8007d6e:	e7fe      	b.n	8007d6e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d109      	bne.n	8007d8a <xTaskCheckForTimeOut+0x3e>
 8007d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	60fb      	str	r3, [r7, #12]
 8007d88:	e7fe      	b.n	8007d88 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007d8a:	f001 fa1f 	bl	80091cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d8e:	4b1d      	ldr	r3, [pc, #116]	; (8007e04 <xTaskCheckForTimeOut+0xb8>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da6:	d102      	bne.n	8007dae <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007da8:	2300      	movs	r3, #0
 8007daa:	61fb      	str	r3, [r7, #28]
 8007dac:	e023      	b.n	8007df6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <xTaskCheckForTimeOut+0xbc>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d007      	beq.n	8007dca <xTaskCheckForTimeOut+0x7e>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d302      	bcc.n	8007dca <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	61fb      	str	r3, [r7, #28]
 8007dc8:	e015      	b.n	8007df6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d20b      	bcs.n	8007dec <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	1ad2      	subs	r2, r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7ff ff9d 	bl	8007d20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007de6:	2300      	movs	r3, #0
 8007de8:	61fb      	str	r3, [r7, #28]
 8007dea:	e004      	b.n	8007df6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	2200      	movs	r2, #0
 8007df0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007df2:	2301      	movs	r3, #1
 8007df4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007df6:	f001 fa17 	bl	8009228 <vPortExitCritical>

	return xReturn;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3720      	adds	r7, #32
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	20000210 	.word	0x20000210
 8007e08:	20000224 	.word	0x20000224

08007e0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e10:	4b03      	ldr	r3, [pc, #12]	; (8007e20 <vTaskMissedYield+0x14>)
 8007e12:	2201      	movs	r2, #1
 8007e14:	601a      	str	r2, [r3, #0]
}
 8007e16:	bf00      	nop
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	20000220 	.word	0x20000220

08007e24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e2c:	f000 f852 	bl	8007ed4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e30:	4b06      	ldr	r3, [pc, #24]	; (8007e4c <prvIdleTask+0x28>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d9f9      	bls.n	8007e2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e38:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <prvIdleTask+0x2c>)
 8007e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e3e:	601a      	str	r2, [r3, #0]
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e48:	e7f0      	b.n	8007e2c <prvIdleTask+0x8>
 8007e4a:	bf00      	nop
 8007e4c:	20000110 	.word	0x20000110
 8007e50:	e000ed04 	.word	0xe000ed04

08007e54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	607b      	str	r3, [r7, #4]
 8007e5e:	e00c      	b.n	8007e7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4a12      	ldr	r2, [pc, #72]	; (8007eb4 <prvInitialiseTaskLists+0x60>)
 8007e6c:	4413      	add	r3, r2
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe fa7a 	bl	8006368 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3301      	adds	r3, #1
 8007e78:	607b      	str	r3, [r7, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b06      	cmp	r3, #6
 8007e7e:	d9ef      	bls.n	8007e60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e80:	480d      	ldr	r0, [pc, #52]	; (8007eb8 <prvInitialiseTaskLists+0x64>)
 8007e82:	f7fe fa71 	bl	8006368 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e86:	480d      	ldr	r0, [pc, #52]	; (8007ebc <prvInitialiseTaskLists+0x68>)
 8007e88:	f7fe fa6e 	bl	8006368 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e8c:	480c      	ldr	r0, [pc, #48]	; (8007ec0 <prvInitialiseTaskLists+0x6c>)
 8007e8e:	f7fe fa6b 	bl	8006368 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e92:	480c      	ldr	r0, [pc, #48]	; (8007ec4 <prvInitialiseTaskLists+0x70>)
 8007e94:	f7fe fa68 	bl	8006368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e98:	480b      	ldr	r0, [pc, #44]	; (8007ec8 <prvInitialiseTaskLists+0x74>)
 8007e9a:	f7fe fa65 	bl	8006368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e9e:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <prvInitialiseTaskLists+0x78>)
 8007ea0:	4a05      	ldr	r2, [pc, #20]	; (8007eb8 <prvInitialiseTaskLists+0x64>)
 8007ea2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ea4:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <prvInitialiseTaskLists+0x7c>)
 8007ea6:	4a05      	ldr	r2, [pc, #20]	; (8007ebc <prvInitialiseTaskLists+0x68>)
 8007ea8:	601a      	str	r2, [r3, #0]
}
 8007eaa:	bf00      	nop
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20000110 	.word	0x20000110
 8007eb8:	2000019c 	.word	0x2000019c
 8007ebc:	200001b0 	.word	0x200001b0
 8007ec0:	200001cc 	.word	0x200001cc
 8007ec4:	200001e0 	.word	0x200001e0
 8007ec8:	200001f8 	.word	0x200001f8
 8007ecc:	200001c4 	.word	0x200001c4
 8007ed0:	200001c8 	.word	0x200001c8

08007ed4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007eda:	e019      	b.n	8007f10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007edc:	f001 f976 	bl	80091cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ee0:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <prvCheckTasksWaitingTermination+0x4c>)
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3304      	adds	r3, #4
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fe fac5 	bl	800647c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ef2:	4b0c      	ldr	r3, [pc, #48]	; (8007f24 <prvCheckTasksWaitingTermination+0x50>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	4a0a      	ldr	r2, [pc, #40]	; (8007f24 <prvCheckTasksWaitingTermination+0x50>)
 8007efa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007efc:	4b0a      	ldr	r3, [pc, #40]	; (8007f28 <prvCheckTasksWaitingTermination+0x54>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3b01      	subs	r3, #1
 8007f02:	4a09      	ldr	r2, [pc, #36]	; (8007f28 <prvCheckTasksWaitingTermination+0x54>)
 8007f04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f06:	f001 f98f 	bl	8009228 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f80e 	bl	8007f2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f10:	4b05      	ldr	r3, [pc, #20]	; (8007f28 <prvCheckTasksWaitingTermination+0x54>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e1      	bne.n	8007edc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f18:	bf00      	nop
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	200001e0 	.word	0x200001e0
 8007f24:	2000020c 	.word	0x2000020c
 8007f28:	200001f4 	.word	0x200001f4

08007f2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d108      	bne.n	8007f50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f42:	4618      	mov	r0, r3
 8007f44:	f001 fb1e 	bl	8009584 <vPortFree>
				vPortFree( pxTCB );
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f001 fb1b 	bl	8009584 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f4e:	e017      	b.n	8007f80 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d103      	bne.n	8007f62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f001 fb12 	bl	8009584 <vPortFree>
	}
 8007f60:	e00e      	b.n	8007f80 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d009      	beq.n	8007f80 <prvDeleteTCB+0x54>
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	60fb      	str	r3, [r7, #12]
 8007f7e:	e7fe      	b.n	8007f7e <prvDeleteTCB+0x52>
	}
 8007f80:	bf00      	nop
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f8e:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <prvResetNextTaskUnblockTime+0x38>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d104      	bne.n	8007fa2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f98:	4b0a      	ldr	r3, [pc, #40]	; (8007fc4 <prvResetNextTaskUnblockTime+0x3c>)
 8007f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fa0:	e008      	b.n	8007fb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fa2:	4b07      	ldr	r3, [pc, #28]	; (8007fc0 <prvResetNextTaskUnblockTime+0x38>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	4a04      	ldr	r2, [pc, #16]	; (8007fc4 <prvResetNextTaskUnblockTime+0x3c>)
 8007fb2:	6013      	str	r3, [r2, #0]
}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	200001c4 	.word	0x200001c4
 8007fc4:	2000022c 	.word	0x2000022c

08007fc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007fce:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <xTaskGetSchedulerState+0x34>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d102      	bne.n	8007fdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	607b      	str	r3, [r7, #4]
 8007fda:	e008      	b.n	8007fee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fdc:	4b08      	ldr	r3, [pc, #32]	; (8008000 <xTaskGetSchedulerState+0x38>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d102      	bne.n	8007fea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	607b      	str	r3, [r7, #4]
 8007fe8:	e001      	b.n	8007fee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007fea:	2300      	movs	r3, #0
 8007fec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007fee:	687b      	ldr	r3, [r7, #4]
	}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	20000218 	.word	0x20000218
 8008000:	20000234 	.word	0x20000234

08008004 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008010:	2300      	movs	r3, #0
 8008012:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d069      	beq.n	80080ee <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801e:	4b36      	ldr	r3, [pc, #216]	; (80080f8 <xTaskPriorityInherit+0xf4>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008024:	429a      	cmp	r2, r3
 8008026:	d259      	bcs.n	80080dc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	2b00      	cmp	r3, #0
 800802e:	db06      	blt.n	800803e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008030:	4b31      	ldr	r3, [pc, #196]	; (80080f8 <xTaskPriorityInherit+0xf4>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008036:	f1c3 0207 	rsb	r2, r3, #7
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	6959      	ldr	r1, [r3, #20]
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008046:	4613      	mov	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4a2b      	ldr	r2, [pc, #172]	; (80080fc <xTaskPriorityInherit+0xf8>)
 8008050:	4413      	add	r3, r2
 8008052:	4299      	cmp	r1, r3
 8008054:	d13a      	bne.n	80080cc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	3304      	adds	r3, #4
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe fa0e 	bl	800647c <uxListRemove>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d115      	bne.n	8008092 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806a:	4924      	ldr	r1, [pc, #144]	; (80080fc <xTaskPriorityInherit+0xf8>)
 800806c:	4613      	mov	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4413      	add	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	440b      	add	r3, r1
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <xTaskPriorityInherit+0x8e>
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008080:	2201      	movs	r2, #1
 8008082:	fa02 f303 	lsl.w	r3, r2, r3
 8008086:	43da      	mvns	r2, r3
 8008088:	4b1d      	ldr	r3, [pc, #116]	; (8008100 <xTaskPriorityInherit+0xfc>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4013      	ands	r3, r2
 800808e:	4a1c      	ldr	r2, [pc, #112]	; (8008100 <xTaskPriorityInherit+0xfc>)
 8008090:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008092:	4b19      	ldr	r3, [pc, #100]	; (80080f8 <xTaskPriorityInherit+0xf4>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a0:	2201      	movs	r2, #1
 80080a2:	409a      	lsls	r2, r3
 80080a4:	4b16      	ldr	r3, [pc, #88]	; (8008100 <xTaskPriorityInherit+0xfc>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	4a15      	ldr	r2, [pc, #84]	; (8008100 <xTaskPriorityInherit+0xfc>)
 80080ac:	6013      	str	r3, [r2, #0]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b2:	4613      	mov	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4a10      	ldr	r2, [pc, #64]	; (80080fc <xTaskPriorityInherit+0xf8>)
 80080bc:	441a      	add	r2, r3
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	3304      	adds	r3, #4
 80080c2:	4619      	mov	r1, r3
 80080c4:	4610      	mov	r0, r2
 80080c6:	f7fe f97c 	bl	80063c2 <vListInsertEnd>
 80080ca:	e004      	b.n	80080d6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80080cc:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <xTaskPriorityInherit+0xf4>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80080d6:	2301      	movs	r3, #1
 80080d8:	60fb      	str	r3, [r7, #12]
 80080da:	e008      	b.n	80080ee <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080e0:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <xTaskPriorityInherit+0xf4>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d201      	bcs.n	80080ee <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80080ea:	2301      	movs	r3, #1
 80080ec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080ee:	68fb      	ldr	r3, [r7, #12]
	}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	2000010c 	.word	0x2000010c
 80080fc:	20000110 	.word	0x20000110
 8008100:	20000214 	.word	0x20000214

08008104 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008110:	2300      	movs	r3, #0
 8008112:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d06c      	beq.n	80081f4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800811a:	4b39      	ldr	r3, [pc, #228]	; (8008200 <xTaskPriorityDisinherit+0xfc>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	429a      	cmp	r2, r3
 8008122:	d009      	beq.n	8008138 <xTaskPriorityDisinherit+0x34>
 8008124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	60fb      	str	r3, [r7, #12]
 8008136:	e7fe      	b.n	8008136 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800813c:	2b00      	cmp	r3, #0
 800813e:	d109      	bne.n	8008154 <xTaskPriorityDisinherit+0x50>
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	60bb      	str	r3, [r7, #8]
 8008152:	e7fe      	b.n	8008152 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008158:	1e5a      	subs	r2, r3, #1
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008166:	429a      	cmp	r2, r3
 8008168:	d044      	beq.n	80081f4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800816e:	2b00      	cmp	r3, #0
 8008170:	d140      	bne.n	80081f4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	3304      	adds	r3, #4
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe f980 	bl	800647c <uxListRemove>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d115      	bne.n	80081ae <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008186:	491f      	ldr	r1, [pc, #124]	; (8008204 <xTaskPriorityDisinherit+0x100>)
 8008188:	4613      	mov	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	440b      	add	r3, r1
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10a      	bne.n	80081ae <xTaskPriorityDisinherit+0xaa>
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	2201      	movs	r2, #1
 800819e:	fa02 f303 	lsl.w	r3, r2, r3
 80081a2:	43da      	mvns	r2, r3
 80081a4:	4b18      	ldr	r3, [pc, #96]	; (8008208 <xTaskPriorityDisinherit+0x104>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4013      	ands	r3, r2
 80081aa:	4a17      	ldr	r2, [pc, #92]	; (8008208 <xTaskPriorityDisinherit+0x104>)
 80081ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ba:	f1c3 0207 	rsb	r2, r3, #7
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	2201      	movs	r2, #1
 80081c8:	409a      	lsls	r2, r3
 80081ca:	4b0f      	ldr	r3, [pc, #60]	; (8008208 <xTaskPriorityDisinherit+0x104>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	4a0d      	ldr	r2, [pc, #52]	; (8008208 <xTaskPriorityDisinherit+0x104>)
 80081d2:	6013      	str	r3, [r2, #0]
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d8:	4613      	mov	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4a08      	ldr	r2, [pc, #32]	; (8008204 <xTaskPriorityDisinherit+0x100>)
 80081e2:	441a      	add	r2, r3
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	3304      	adds	r3, #4
 80081e8:	4619      	mov	r1, r3
 80081ea:	4610      	mov	r0, r2
 80081ec:	f7fe f8e9 	bl	80063c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081f0:	2301      	movs	r3, #1
 80081f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081f4:	697b      	ldr	r3, [r7, #20]
	}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	2000010c 	.word	0x2000010c
 8008204:	20000110 	.word	0x20000110
 8008208:	20000214 	.word	0x20000214

0800820c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800820c:	b580      	push	{r7, lr}
 800820e:	b088      	sub	sp, #32
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800821a:	2301      	movs	r3, #1
 800821c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 8081 	beq.w	8008328 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800822a:	2b00      	cmp	r3, #0
 800822c:	d109      	bne.n	8008242 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	e7fe      	b.n	8008240 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	429a      	cmp	r2, r3
 800824a:	d902      	bls.n	8008252 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	61fb      	str	r3, [r7, #28]
 8008250:	e002      	b.n	8008258 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008256:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	69fa      	ldr	r2, [r7, #28]
 800825e:	429a      	cmp	r2, r3
 8008260:	d062      	beq.n	8008328 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	429a      	cmp	r2, r3
 800826a:	d15d      	bne.n	8008328 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800826c:	4b30      	ldr	r3, [pc, #192]	; (8008330 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	429a      	cmp	r2, r3
 8008274:	d109      	bne.n	800828a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8008276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	60bb      	str	r3, [r7, #8]
 8008288:	e7fe      	b.n	8008288 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	69fa      	ldr	r2, [r7, #28]
 8008294:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	2b00      	cmp	r3, #0
 800829c:	db04      	blt.n	80082a8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	f1c3 0207 	rsb	r2, r3, #7
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	6959      	ldr	r1, [r3, #20]
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4a1f      	ldr	r2, [pc, #124]	; (8008334 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80082b8:	4413      	add	r3, r2
 80082ba:	4299      	cmp	r1, r3
 80082bc:	d134      	bne.n	8008328 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	3304      	adds	r3, #4
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe f8da 	bl	800647c <uxListRemove>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d115      	bne.n	80082fa <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d2:	4918      	ldr	r1, [pc, #96]	; (8008334 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80082d4:	4613      	mov	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	440b      	add	r3, r1
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10a      	bne.n	80082fa <vTaskPriorityDisinheritAfterTimeout+0xee>
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e8:	2201      	movs	r2, #1
 80082ea:	fa02 f303 	lsl.w	r3, r2, r3
 80082ee:	43da      	mvns	r2, r3
 80082f0:	4b11      	ldr	r3, [pc, #68]	; (8008338 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4013      	ands	r3, r2
 80082f6:	4a10      	ldr	r2, [pc, #64]	; (8008338 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80082f8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fe:	2201      	movs	r2, #1
 8008300:	409a      	lsls	r2, r3
 8008302:	4b0d      	ldr	r3, [pc, #52]	; (8008338 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4313      	orrs	r3, r2
 8008308:	4a0b      	ldr	r2, [pc, #44]	; (8008338 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800830a:	6013      	str	r3, [r2, #0]
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008310:	4613      	mov	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4413      	add	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4a06      	ldr	r2, [pc, #24]	; (8008334 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800831a:	441a      	add	r2, r3
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	3304      	adds	r3, #4
 8008320:	4619      	mov	r1, r3
 8008322:	4610      	mov	r0, r2
 8008324:	f7fe f84d 	bl	80063c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008328:	bf00      	nop
 800832a:	3720      	adds	r7, #32
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	2000010c 	.word	0x2000010c
 8008334:	20000110 	.word	0x20000110
 8008338:	20000214 	.word	0x20000214

0800833c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800833c:	b480      	push	{r7}
 800833e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008340:	4b07      	ldr	r3, [pc, #28]	; (8008360 <pvTaskIncrementMutexHeldCount+0x24>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d004      	beq.n	8008352 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008348:	4b05      	ldr	r3, [pc, #20]	; (8008360 <pvTaskIncrementMutexHeldCount+0x24>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800834e:	3201      	adds	r2, #1
 8008350:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008352:	4b03      	ldr	r3, [pc, #12]	; (8008360 <pvTaskIncrementMutexHeldCount+0x24>)
 8008354:	681b      	ldr	r3, [r3, #0]
	}
 8008356:	4618      	mov	r0, r3
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	2000010c 	.word	0x2000010c

08008364 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008372:	f000 ff2b 	bl	80091cc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008376:	4b26      	ldr	r3, [pc, #152]	; (8008410 <xTaskNotifyWait+0xac>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b02      	cmp	r3, #2
 8008382:	d01a      	beq.n	80083ba <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008384:	4b22      	ldr	r3, [pc, #136]	; (8008410 <xTaskNotifyWait+0xac>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	43d2      	mvns	r2, r2
 800838e:	400a      	ands	r2, r1
 8008390:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008392:	4b1f      	ldr	r3, [pc, #124]	; (8008410 <xTaskNotifyWait+0xac>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00b      	beq.n	80083ba <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80083a2:	2101      	movs	r1, #1
 80083a4:	6838      	ldr	r0, [r7, #0]
 80083a6:	f000 f9c1 	bl	800872c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80083aa:	4b1a      	ldr	r3, [pc, #104]	; (8008414 <xTaskNotifyWait+0xb0>)
 80083ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80083ba:	f000 ff35 	bl	8009228 <vPortExitCritical>

		taskENTER_CRITICAL();
 80083be:	f000 ff05 	bl	80091cc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d004      	beq.n	80083d2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80083c8:	4b11      	ldr	r3, [pc, #68]	; (8008410 <xTaskNotifyWait+0xac>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80083d2:	4b0f      	ldr	r3, [pc, #60]	; (8008410 <xTaskNotifyWait+0xac>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d002      	beq.n	80083e6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80083e0:	2300      	movs	r3, #0
 80083e2:	617b      	str	r3, [r7, #20]
 80083e4:	e008      	b.n	80083f8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80083e6:	4b0a      	ldr	r3, [pc, #40]	; (8008410 <xTaskNotifyWait+0xac>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	43d2      	mvns	r2, r2
 80083f0:	400a      	ands	r2, r1
 80083f2:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80083f4:	2301      	movs	r3, #1
 80083f6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083f8:	4b05      	ldr	r3, [pc, #20]	; (8008410 <xTaskNotifyWait+0xac>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8008402:	f000 ff11 	bl	8009228 <vPortExitCritical>

		return xReturn;
 8008406:	697b      	ldr	r3, [r7, #20]
	}
 8008408:	4618      	mov	r0, r3
 800840a:	3718      	adds	r7, #24
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	2000010c 	.word	0x2000010c
 8008414:	e000ed04 	.word	0xe000ed04

08008418 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008418:	b580      	push	{r7, lr}
 800841a:	b08a      	sub	sp, #40	; 0x28
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	603b      	str	r3, [r7, #0]
 8008424:	4613      	mov	r3, r2
 8008426:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008428:	2301      	movs	r3, #1
 800842a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d109      	bne.n	8008446 <xTaskGenericNotify+0x2e>
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	61bb      	str	r3, [r7, #24]
 8008444:	e7fe      	b.n	8008444 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800844a:	f000 febf 	bl	80091cc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d003      	beq.n	800845c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008454:	6a3b      	ldr	r3, [r7, #32]
 8008456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008462:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	2202      	movs	r2, #2
 8008468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800846c:	79fb      	ldrb	r3, [r7, #7]
 800846e:	2b04      	cmp	r3, #4
 8008470:	d827      	bhi.n	80084c2 <xTaskGenericNotify+0xaa>
 8008472:	a201      	add	r2, pc, #4	; (adr r2, 8008478 <xTaskGenericNotify+0x60>)
 8008474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008478:	080084e1 	.word	0x080084e1
 800847c:	0800848d 	.word	0x0800848d
 8008480:	0800849b 	.word	0x0800849b
 8008484:	080084a7 	.word	0x080084a7
 8008488:	080084af 	.word	0x080084af
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800848c:	6a3b      	ldr	r3, [r7, #32]
 800848e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	431a      	orrs	r2, r3
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8008498:	e025      	b.n	80084e6 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800849a:	6a3b      	ldr	r3, [r7, #32]
 800849c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800849e:	1c5a      	adds	r2, r3, #1
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80084a4:	e01f      	b.n	80084e6 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80084a6:	6a3b      	ldr	r3, [r7, #32]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80084ac:	e01b      	b.n	80084e6 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80084ae:	7ffb      	ldrb	r3, [r7, #31]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d003      	beq.n	80084bc <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80084ba:	e014      	b.n	80084e6 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 80084bc:	2300      	movs	r3, #0
 80084be:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80084c0:	e011      	b.n	80084e6 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ca:	d00b      	beq.n	80084e4 <xTaskGenericNotify+0xcc>
 80084cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	617b      	str	r3, [r7, #20]
 80084de:	e7fe      	b.n	80084de <xTaskGenericNotify+0xc6>
					break;
 80084e0:	bf00      	nop
 80084e2:	e000      	b.n	80084e6 <xTaskGenericNotify+0xce>

					break;
 80084e4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80084e6:	7ffb      	ldrb	r3, [r7, #31]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d138      	bne.n	800855e <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	3304      	adds	r3, #4
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fd ffc3 	bl	800647c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80084f6:	6a3b      	ldr	r3, [r7, #32]
 80084f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fa:	2201      	movs	r2, #1
 80084fc:	409a      	lsls	r2, r3
 80084fe:	4b1b      	ldr	r3, [pc, #108]	; (800856c <xTaskGenericNotify+0x154>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4313      	orrs	r3, r2
 8008504:	4a19      	ldr	r2, [pc, #100]	; (800856c <xTaskGenericNotify+0x154>)
 8008506:	6013      	str	r3, [r2, #0]
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850c:	4613      	mov	r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	4a16      	ldr	r2, [pc, #88]	; (8008570 <xTaskGenericNotify+0x158>)
 8008516:	441a      	add	r2, r3
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	3304      	adds	r3, #4
 800851c:	4619      	mov	r1, r3
 800851e:	4610      	mov	r0, r2
 8008520:	f7fd ff4f 	bl	80063c2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008528:	2b00      	cmp	r3, #0
 800852a:	d009      	beq.n	8008540 <xTaskGenericNotify+0x128>
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	613b      	str	r3, [r7, #16]
 800853e:	e7fe      	b.n	800853e <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008540:	6a3b      	ldr	r3, [r7, #32]
 8008542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008544:	4b0b      	ldr	r3, [pc, #44]	; (8008574 <xTaskGenericNotify+0x15c>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854a:	429a      	cmp	r2, r3
 800854c:	d907      	bls.n	800855e <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800854e:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <xTaskGenericNotify+0x160>)
 8008550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008554:	601a      	str	r2, [r3, #0]
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800855e:	f000 fe63 	bl	8009228 <vPortExitCritical>

		return xReturn;
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008564:	4618      	mov	r0, r3
 8008566:	3728      	adds	r7, #40	; 0x28
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	20000214 	.word	0x20000214
 8008570:	20000110 	.word	0x20000110
 8008574:	2000010c 	.word	0x2000010c
 8008578:	e000ed04 	.word	0xe000ed04

0800857c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08e      	sub	sp, #56	; 0x38
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	603b      	str	r3, [r7, #0]
 8008588:	4613      	mov	r3, r2
 800858a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800858c:	2301      	movs	r3, #1
 800858e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d109      	bne.n	80085aa <xTaskGenericNotifyFromISR+0x2e>
 8008596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	627b      	str	r3, [r7, #36]	; 0x24
 80085a8:	e7fe      	b.n	80085a8 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085aa:	f000 feeb 	bl	8009384 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80085b2:	f3ef 8211 	mrs	r2, BASEPRI
 80085b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	623a      	str	r2, [r7, #32]
 80085c8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80085ca:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d003      	beq.n	80085dc <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80085d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80085dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80085e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	2202      	movs	r2, #2
 80085ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80085ee:	79fb      	ldrb	r3, [r7, #7]
 80085f0:	2b04      	cmp	r3, #4
 80085f2:	d829      	bhi.n	8008648 <xTaskGenericNotifyFromISR+0xcc>
 80085f4:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <xTaskGenericNotifyFromISR+0x80>)
 80085f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fa:	bf00      	nop
 80085fc:	08008667 	.word	0x08008667
 8008600:	08008611 	.word	0x08008611
 8008604:	0800861f 	.word	0x0800861f
 8008608:	0800862b 	.word	0x0800862b
 800860c:	08008633 	.word	0x08008633
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	431a      	orrs	r2, r3
 8008618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800861c:	e026      	b.n	800866c <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800861e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008622:	1c5a      	adds	r2, r3, #1
 8008624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008626:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8008628:	e020      	b.n	800866c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8008630:	e01c      	b.n	800866c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008632:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008636:	2b02      	cmp	r3, #2
 8008638:	d003      	beq.n	8008642 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800863a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008640:	e014      	b.n	800866c <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8008642:	2300      	movs	r3, #0
 8008644:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8008646:	e011      	b.n	800866c <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800864c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008650:	d00b      	beq.n	800866a <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	61bb      	str	r3, [r7, #24]
 8008664:	e7fe      	b.n	8008664 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8008666:	bf00      	nop
 8008668:	e000      	b.n	800866c <xTaskGenericNotifyFromISR+0xf0>
					break;
 800866a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800866c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008670:	2b01      	cmp	r3, #1
 8008672:	d144      	bne.n	80086fe <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008678:	2b00      	cmp	r3, #0
 800867a:	d009      	beq.n	8008690 <xTaskGenericNotifyFromISR+0x114>
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	617b      	str	r3, [r7, #20]
 800868e:	e7fe      	b.n	800868e <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008690:	4b20      	ldr	r3, [pc, #128]	; (8008714 <xTaskGenericNotifyFromISR+0x198>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d11c      	bne.n	80086d2 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869a:	3304      	adds	r3, #4
 800869c:	4618      	mov	r0, r3
 800869e:	f7fd feed 	bl	800647c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a6:	2201      	movs	r2, #1
 80086a8:	409a      	lsls	r2, r3
 80086aa:	4b1b      	ldr	r3, [pc, #108]	; (8008718 <xTaskGenericNotifyFromISR+0x19c>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	4a19      	ldr	r2, [pc, #100]	; (8008718 <xTaskGenericNotifyFromISR+0x19c>)
 80086b2:	6013      	str	r3, [r2, #0]
 80086b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b8:	4613      	mov	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4a16      	ldr	r2, [pc, #88]	; (800871c <xTaskGenericNotifyFromISR+0x1a0>)
 80086c2:	441a      	add	r2, r3
 80086c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c6:	3304      	adds	r3, #4
 80086c8:	4619      	mov	r1, r3
 80086ca:	4610      	mov	r0, r2
 80086cc:	f7fd fe79 	bl	80063c2 <vListInsertEnd>
 80086d0:	e005      	b.n	80086de <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	3318      	adds	r3, #24
 80086d6:	4619      	mov	r1, r3
 80086d8:	4811      	ldr	r0, [pc, #68]	; (8008720 <xTaskGenericNotifyFromISR+0x1a4>)
 80086da:	f7fd fe72 	bl	80063c2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e2:	4b10      	ldr	r3, [pc, #64]	; (8008724 <xTaskGenericNotifyFromISR+0x1a8>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d908      	bls.n	80086fe <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80086ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d002      	beq.n	80086f8 <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80086f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086f4:	2201      	movs	r2, #1
 80086f6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80086f8:	4b0b      	ldr	r3, [pc, #44]	; (8008728 <xTaskGenericNotifyFromISR+0x1ac>)
 80086fa:	2201      	movs	r2, #1
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800870a:	4618      	mov	r0, r3
 800870c:	3738      	adds	r7, #56	; 0x38
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	20000234 	.word	0x20000234
 8008718:	20000214 	.word	0x20000214
 800871c:	20000110 	.word	0x20000110
 8008720:	200001cc 	.word	0x200001cc
 8008724:	2000010c 	.word	0x2000010c
 8008728:	20000220 	.word	0x20000220

0800872c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008736:	4b29      	ldr	r3, [pc, #164]	; (80087dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800873c:	4b28      	ldr	r3, [pc, #160]	; (80087e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3304      	adds	r3, #4
 8008742:	4618      	mov	r0, r3
 8008744:	f7fd fe9a 	bl	800647c <uxListRemove>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10b      	bne.n	8008766 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800874e:	4b24      	ldr	r3, [pc, #144]	; (80087e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008754:	2201      	movs	r2, #1
 8008756:	fa02 f303 	lsl.w	r3, r2, r3
 800875a:	43da      	mvns	r2, r3
 800875c:	4b21      	ldr	r3, [pc, #132]	; (80087e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4013      	ands	r3, r2
 8008762:	4a20      	ldr	r2, [pc, #128]	; (80087e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008764:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876c:	d10a      	bne.n	8008784 <prvAddCurrentTaskToDelayedList+0x58>
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d007      	beq.n	8008784 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008774:	4b1a      	ldr	r3, [pc, #104]	; (80087e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3304      	adds	r3, #4
 800877a:	4619      	mov	r1, r3
 800877c:	481a      	ldr	r0, [pc, #104]	; (80087e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800877e:	f7fd fe20 	bl	80063c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008782:	e026      	b.n	80087d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4413      	add	r3, r2
 800878a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800878c:	4b14      	ldr	r3, [pc, #80]	; (80087e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	429a      	cmp	r2, r3
 800879a:	d209      	bcs.n	80087b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800879c:	4b13      	ldr	r3, [pc, #76]	; (80087ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	4b0f      	ldr	r3, [pc, #60]	; (80087e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3304      	adds	r3, #4
 80087a6:	4619      	mov	r1, r3
 80087a8:	4610      	mov	r0, r2
 80087aa:	f7fd fe2e 	bl	800640a <vListInsert>
}
 80087ae:	e010      	b.n	80087d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087b0:	4b0f      	ldr	r3, [pc, #60]	; (80087f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	4b0a      	ldr	r3, [pc, #40]	; (80087e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3304      	adds	r3, #4
 80087ba:	4619      	mov	r1, r3
 80087bc:	4610      	mov	r0, r2
 80087be:	f7fd fe24 	bl	800640a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80087c2:	4b0c      	ldr	r3, [pc, #48]	; (80087f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d202      	bcs.n	80087d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80087cc:	4a09      	ldr	r2, [pc, #36]	; (80087f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	6013      	str	r3, [r2, #0]
}
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	20000210 	.word	0x20000210
 80087e0:	2000010c 	.word	0x2000010c
 80087e4:	20000214 	.word	0x20000214
 80087e8:	200001f8 	.word	0x200001f8
 80087ec:	200001c8 	.word	0x200001c8
 80087f0:	200001c4 	.word	0x200001c4
 80087f4:	2000022c 	.word	0x2000022c

080087f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b08a      	sub	sp, #40	; 0x28
 80087fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80087fe:	2300      	movs	r3, #0
 8008800:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008802:	f000 fb7f 	bl	8008f04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008806:	4b1c      	ldr	r3, [pc, #112]	; (8008878 <xTimerCreateTimerTask+0x80>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d021      	beq.n	8008852 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800880e:	2300      	movs	r3, #0
 8008810:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008812:	2300      	movs	r3, #0
 8008814:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008816:	1d3a      	adds	r2, r7, #4
 8008818:	f107 0108 	add.w	r1, r7, #8
 800881c:	f107 030c 	add.w	r3, r7, #12
 8008820:	4618      	mov	r0, r3
 8008822:	f000 ffdd 	bl	80097e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008826:	6879      	ldr	r1, [r7, #4]
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	9202      	str	r2, [sp, #8]
 800882e:	9301      	str	r3, [sp, #4]
 8008830:	2302      	movs	r3, #2
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	2300      	movs	r3, #0
 8008836:	460a      	mov	r2, r1
 8008838:	4910      	ldr	r1, [pc, #64]	; (800887c <xTimerCreateTimerTask+0x84>)
 800883a:	4811      	ldr	r0, [pc, #68]	; (8008880 <xTimerCreateTimerTask+0x88>)
 800883c:	f7fe fdcc 	bl	80073d8 <xTaskCreateStatic>
 8008840:	4602      	mov	r2, r0
 8008842:	4b10      	ldr	r3, [pc, #64]	; (8008884 <xTimerCreateTimerTask+0x8c>)
 8008844:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008846:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <xTimerCreateTimerTask+0x8c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800884e:	2301      	movs	r3, #1
 8008850:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d109      	bne.n	800886c <xTimerCreateTimerTask+0x74>
	__asm volatile
 8008858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885c:	f383 8811 	msr	BASEPRI, r3
 8008860:	f3bf 8f6f 	isb	sy
 8008864:	f3bf 8f4f 	dsb	sy
 8008868:	613b      	str	r3, [r7, #16]
 800886a:	e7fe      	b.n	800886a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800886c:	697b      	ldr	r3, [r7, #20]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3718      	adds	r7, #24
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	20000268 	.word	0x20000268
 800887c:	0800babc 	.word	0x0800babc
 8008880:	08008ae9 	.word	0x08008ae9
 8008884:	2000026c 	.word	0x2000026c

08008888 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af02      	add	r7, sp, #8
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
 8008894:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008896:	2028      	movs	r0, #40	; 0x28
 8008898:	f000 fdb2 	bl	8009400 <pvPortMalloc>
 800889c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00d      	beq.n	80088c0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	9301      	str	r3, [sp, #4]
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	68b9      	ldr	r1, [r7, #8]
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 f841 	bl	8008942 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80088c0:	697b      	ldr	r3, [r7, #20]
	}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b08a      	sub	sp, #40	; 0x28
 80088ce:	af02      	add	r7, sp, #8
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	60b9      	str	r1, [r7, #8]
 80088d4:	607a      	str	r2, [r7, #4]
 80088d6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80088d8:	2328      	movs	r3, #40	; 0x28
 80088da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	2b28      	cmp	r3, #40	; 0x28
 80088e0:	d009      	beq.n	80088f6 <xTimerCreateStatic+0x2c>
 80088e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	61bb      	str	r3, [r7, #24]
 80088f4:	e7fe      	b.n	80088f4 <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80088f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80088f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d109      	bne.n	8008912 <xTimerCreateStatic+0x48>
 80088fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008902:	f383 8811 	msr	BASEPRI, r3
 8008906:	f3bf 8f6f 	isb	sy
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	617b      	str	r3, [r7, #20]
 8008910:	e7fe      	b.n	8008910 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00d      	beq.n	8008938 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	2202      	movs	r2, #2
 8008920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	9301      	str	r3, [sp, #4]
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	68b9      	ldr	r1, [r7, #8]
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f000 f805 	bl	8008942 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008938:	69fb      	ldr	r3, [r7, #28]
	}
 800893a:	4618      	mov	r0, r3
 800893c:	3720      	adds	r7, #32
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b086      	sub	sp, #24
 8008946:	af00      	add	r7, sp, #0
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	60b9      	str	r1, [r7, #8]
 800894c:	607a      	str	r2, [r7, #4]
 800894e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d109      	bne.n	800896a <prvInitialiseNewTimer+0x28>
 8008956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895a:	f383 8811 	msr	BASEPRI, r3
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	e7fe      	b.n	8008968 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	2b00      	cmp	r3, #0
 800896e:	d01e      	beq.n	80089ae <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008970:	f000 fac8 	bl	8008f04 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	6a3a      	ldr	r2, [r7, #32]
 800898a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	3304      	adds	r3, #4
 8008990:	4618      	mov	r0, r3
 8008992:	f7fd fd09 	bl	80063a8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d008      	beq.n	80089ae <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089a2:	f043 0304 	orr.w	r3, r3, #4
 80089a6:	b2da      	uxtb	r2, r3
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80089ae:	bf00      	nop
 80089b0:	3718      	adds	r7, #24
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
	...

080089b8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b08a      	sub	sp, #40	; 0x28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80089c6:	2300      	movs	r3, #0
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d109      	bne.n	80089e4 <xTimerGenericCommand+0x2c>
 80089d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	623b      	str	r3, [r7, #32]
 80089e2:	e7fe      	b.n	80089e2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80089e4:	4b19      	ldr	r3, [pc, #100]	; (8008a4c <xTimerGenericCommand+0x94>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d02a      	beq.n	8008a42 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	2b05      	cmp	r3, #5
 80089fc:	dc18      	bgt.n	8008a30 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80089fe:	f7ff fae3 	bl	8007fc8 <xTaskGetSchedulerState>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d109      	bne.n	8008a1c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a08:	4b10      	ldr	r3, [pc, #64]	; (8008a4c <xTimerGenericCommand+0x94>)
 8008a0a:	6818      	ldr	r0, [r3, #0]
 8008a0c:	f107 0114 	add.w	r1, r7, #20
 8008a10:	2300      	movs	r3, #0
 8008a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a14:	f7fd fee2 	bl	80067dc <xQueueGenericSend>
 8008a18:	6278      	str	r0, [r7, #36]	; 0x24
 8008a1a:	e012      	b.n	8008a42 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a1c:	4b0b      	ldr	r3, [pc, #44]	; (8008a4c <xTimerGenericCommand+0x94>)
 8008a1e:	6818      	ldr	r0, [r3, #0]
 8008a20:	f107 0114 	add.w	r1, r7, #20
 8008a24:	2300      	movs	r3, #0
 8008a26:	2200      	movs	r2, #0
 8008a28:	f7fd fed8 	bl	80067dc <xQueueGenericSend>
 8008a2c:	6278      	str	r0, [r7, #36]	; 0x24
 8008a2e:	e008      	b.n	8008a42 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a30:	4b06      	ldr	r3, [pc, #24]	; (8008a4c <xTimerGenericCommand+0x94>)
 8008a32:	6818      	ldr	r0, [r3, #0]
 8008a34:	f107 0114 	add.w	r1, r7, #20
 8008a38:	2300      	movs	r3, #0
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	f7fd ffc8 	bl	80069d0 <xQueueGenericSendFromISR>
 8008a40:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3728      	adds	r7, #40	; 0x28
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	20000268 	.word	0x20000268

08008a50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b088      	sub	sp, #32
 8008a54:	af02      	add	r7, sp, #8
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a5a:	4b22      	ldr	r3, [pc, #136]	; (8008ae4 <prvProcessExpiredTimer+0x94>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	3304      	adds	r3, #4
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fd fd07 	bl	800647c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a74:	f003 0304 	and.w	r3, r3, #4
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d021      	beq.n	8008ac0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	699a      	ldr	r2, [r3, #24]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	18d1      	adds	r1, r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	6978      	ldr	r0, [r7, #20]
 8008a8a:	f000 f8d1 	bl	8008c30 <prvInsertTimerInActiveList>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d01e      	beq.n	8008ad2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a94:	2300      	movs	r3, #0
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	2300      	movs	r3, #0
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	6978      	ldr	r0, [r7, #20]
 8008aa0:	f7ff ff8a 	bl	80089b8 <xTimerGenericCommand>
 8008aa4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d112      	bne.n	8008ad2 <prvProcessExpiredTimer+0x82>
 8008aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab0:	f383 8811 	msr	BASEPRI, r3
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	60fb      	str	r3, [r7, #12]
 8008abe:	e7fe      	b.n	8008abe <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008ac6:	f023 0301 	bic.w	r3, r3, #1
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	6978      	ldr	r0, [r7, #20]
 8008ad8:	4798      	blx	r3
}
 8008ada:	bf00      	nop
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	20000260 	.word	0x20000260

08008ae8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008af0:	f107 0308 	add.w	r3, r7, #8
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 f857 	bl	8008ba8 <prvGetNextExpireTime>
 8008afa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	4619      	mov	r1, r3
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f000 f803 	bl	8008b0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b06:	f000 f8d5 	bl	8008cb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b0a:	e7f1      	b.n	8008af0 <prvTimerTask+0x8>

08008b0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008b16:	f7fe fe87 	bl	8007828 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b1a:	f107 0308 	add.w	r3, r7, #8
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 f866 	bl	8008bf0 <prvSampleTimeNow>
 8008b24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d130      	bne.n	8008b8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10a      	bne.n	8008b48 <prvProcessTimerOrBlockTask+0x3c>
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d806      	bhi.n	8008b48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008b3a:	f7fe fe83 	bl	8007844 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008b3e:	68f9      	ldr	r1, [r7, #12]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f7ff ff85 	bl	8008a50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008b46:	e024      	b.n	8008b92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d008      	beq.n	8008b60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b4e:	4b13      	ldr	r3, [pc, #76]	; (8008b9c <prvProcessTimerOrBlockTask+0x90>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <prvProcessTimerOrBlockTask+0x50>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e000      	b.n	8008b5e <prvProcessTimerOrBlockTask+0x52>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b60:	4b0f      	ldr	r3, [pc, #60]	; (8008ba0 <prvProcessTimerOrBlockTask+0x94>)
 8008b62:	6818      	ldr	r0, [r3, #0]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	683a      	ldr	r2, [r7, #0]
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	f7fe fbff 	bl	8007370 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b72:	f7fe fe67 	bl	8007844 <xTaskResumeAll>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10a      	bne.n	8008b92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b7c:	4b09      	ldr	r3, [pc, #36]	; (8008ba4 <prvProcessTimerOrBlockTask+0x98>)
 8008b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	f3bf 8f6f 	isb	sy
}
 8008b8c:	e001      	b.n	8008b92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b8e:	f7fe fe59 	bl	8007844 <xTaskResumeAll>
}
 8008b92:	bf00      	nop
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	20000264 	.word	0x20000264
 8008ba0:	20000268 	.word	0x20000268
 8008ba4:	e000ed04 	.word	0xe000ed04

08008ba8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008bb0:	4b0e      	ldr	r3, [pc, #56]	; (8008bec <prvGetNextExpireTime+0x44>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <prvGetNextExpireTime+0x16>
 8008bba:	2201      	movs	r2, #1
 8008bbc:	e000      	b.n	8008bc0 <prvGetNextExpireTime+0x18>
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d105      	bne.n	8008bd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008bcc:	4b07      	ldr	r3, [pc, #28]	; (8008bec <prvGetNextExpireTime+0x44>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	60fb      	str	r3, [r7, #12]
 8008bd6:	e001      	b.n	8008bdc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	20000260 	.word	0x20000260

08008bf0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008bf8:	f7fe fec0 	bl	800797c <xTaskGetTickCount>
 8008bfc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008bfe:	4b0b      	ldr	r3, [pc, #44]	; (8008c2c <prvSampleTimeNow+0x3c>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d205      	bcs.n	8008c14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008c08:	f000 f918 	bl	8008e3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	601a      	str	r2, [r3, #0]
 8008c12:	e002      	b.n	8008c1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008c1a:	4a04      	ldr	r2, [pc, #16]	; (8008c2c <prvSampleTimeNow+0x3c>)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008c20:	68fb      	ldr	r3, [r7, #12]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20000270 	.word	0x20000270

08008c30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
 8008c3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d812      	bhi.n	8008c7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	1ad2      	subs	r2, r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d302      	bcc.n	8008c6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c64:	2301      	movs	r3, #1
 8008c66:	617b      	str	r3, [r7, #20]
 8008c68:	e01b      	b.n	8008ca2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c6a:	4b10      	ldr	r3, [pc, #64]	; (8008cac <prvInsertTimerInActiveList+0x7c>)
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	3304      	adds	r3, #4
 8008c72:	4619      	mov	r1, r3
 8008c74:	4610      	mov	r0, r2
 8008c76:	f7fd fbc8 	bl	800640a <vListInsert>
 8008c7a:	e012      	b.n	8008ca2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d206      	bcs.n	8008c92 <prvInsertTimerInActiveList+0x62>
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d302      	bcc.n	8008c92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	617b      	str	r3, [r7, #20]
 8008c90:	e007      	b.n	8008ca2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c92:	4b07      	ldr	r3, [pc, #28]	; (8008cb0 <prvInsertTimerInActiveList+0x80>)
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	3304      	adds	r3, #4
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	f7fd fbb4 	bl	800640a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ca2:	697b      	ldr	r3, [r7, #20]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	20000264 	.word	0x20000264
 8008cb0:	20000260 	.word	0x20000260

08008cb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b08c      	sub	sp, #48	; 0x30
 8008cb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cba:	e0ac      	b.n	8008e16 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f2c0 80a8 	blt.w	8008e14 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d004      	beq.n	8008cda <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd2:	3304      	adds	r3, #4
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fd fbd1 	bl	800647c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cda:	1d3b      	adds	r3, r7, #4
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7ff ff87 	bl	8008bf0 <prvSampleTimeNow>
 8008ce2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2b09      	cmp	r3, #9
 8008ce8:	f200 8095 	bhi.w	8008e16 <prvProcessReceivedCommands+0x162>
 8008cec:	a201      	add	r2, pc, #4	; (adr r2, 8008cf4 <prvProcessReceivedCommands+0x40>)
 8008cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf2:	bf00      	nop
 8008cf4:	08008d1d 	.word	0x08008d1d
 8008cf8:	08008d1d 	.word	0x08008d1d
 8008cfc:	08008d1d 	.word	0x08008d1d
 8008d00:	08008d8f 	.word	0x08008d8f
 8008d04:	08008da3 	.word	0x08008da3
 8008d08:	08008deb 	.word	0x08008deb
 8008d0c:	08008d1d 	.word	0x08008d1d
 8008d10:	08008d1d 	.word	0x08008d1d
 8008d14:	08008d8f 	.word	0x08008d8f
 8008d18:	08008da3 	.word	0x08008da3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d22:	f043 0301 	orr.w	r3, r3, #1
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	18d1      	adds	r1, r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6a3a      	ldr	r2, [r7, #32]
 8008d3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d3c:	f7ff ff78 	bl	8008c30 <prvInsertTimerInActiveList>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d067      	beq.n	8008e16 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d54:	f003 0304 	and.w	r3, r3, #4
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d05c      	beq.n	8008e16 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	441a      	add	r2, r3
 8008d64:	2300      	movs	r3, #0
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	2300      	movs	r3, #0
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d6e:	f7ff fe23 	bl	80089b8 <xTimerGenericCommand>
 8008d72:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d14d      	bne.n	8008e16 <prvProcessReceivedCommands+0x162>
 8008d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	61bb      	str	r3, [r7, #24]
 8008d8c:	e7fe      	b.n	8008d8c <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d94:	f023 0301 	bic.w	r3, r3, #1
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8008da0:	e039      	b.n	8008e16 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008da8:	f043 0301 	orr.w	r3, r3, #1
 8008dac:	b2da      	uxtb	r2, r3
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d109      	bne.n	8008dd6 <prvProcessReceivedCommands+0x122>
 8008dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	617b      	str	r3, [r7, #20]
 8008dd4:	e7fe      	b.n	8008dd4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	699a      	ldr	r2, [r3, #24]
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	18d1      	adds	r1, r2, r3
 8008dde:	6a3b      	ldr	r3, [r7, #32]
 8008de0:	6a3a      	ldr	r2, [r7, #32]
 8008de2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008de4:	f7ff ff24 	bl	8008c30 <prvInsertTimerInActiveList>
					break;
 8008de8:	e015      	b.n	8008e16 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008df0:	f003 0302 	and.w	r3, r3, #2
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d103      	bne.n	8008e00 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8008df8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dfa:	f000 fbc3 	bl	8009584 <vPortFree>
 8008dfe:	e00a      	b.n	8008e16 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008e06:	f023 0301 	bic.w	r3, r3, #1
 8008e0a:	b2da      	uxtb	r2, r3
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e12:	e000      	b.n	8008e16 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008e14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e16:	4b08      	ldr	r3, [pc, #32]	; (8008e38 <prvProcessReceivedCommands+0x184>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f107 0108 	add.w	r1, r7, #8
 8008e1e:	2200      	movs	r2, #0
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7fd fef3 	bl	8006c0c <xQueueReceive>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f47f af47 	bne.w	8008cbc <prvProcessReceivedCommands+0x8>
	}
}
 8008e2e:	bf00      	nop
 8008e30:	3728      	adds	r7, #40	; 0x28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20000268 	.word	0x20000268

08008e3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b088      	sub	sp, #32
 8008e40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e42:	e047      	b.n	8008ed4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e44:	4b2d      	ldr	r3, [pc, #180]	; (8008efc <prvSwitchTimerLists+0xc0>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e4e:	4b2b      	ldr	r3, [pc, #172]	; (8008efc <prvSwitchTimerLists+0xc0>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fd fb0d 	bl	800647c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d02d      	beq.n	8008ed4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	4413      	add	r3, r2
 8008e80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d90e      	bls.n	8008ea8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e96:	4b19      	ldr	r3, [pc, #100]	; (8008efc <prvSwitchTimerLists+0xc0>)
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	f7fd fab2 	bl	800640a <vListInsert>
 8008ea6:	e015      	b.n	8008ed4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	2300      	movs	r3, #0
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7ff fd80 	bl	80089b8 <xTimerGenericCommand>
 8008eb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d109      	bne.n	8008ed4 <prvSwitchTimerLists+0x98>
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	603b      	str	r3, [r7, #0]
 8008ed2:	e7fe      	b.n	8008ed2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ed4:	4b09      	ldr	r3, [pc, #36]	; (8008efc <prvSwitchTimerLists+0xc0>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1b2      	bne.n	8008e44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ede:	4b07      	ldr	r3, [pc, #28]	; (8008efc <prvSwitchTimerLists+0xc0>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ee4:	4b06      	ldr	r3, [pc, #24]	; (8008f00 <prvSwitchTimerLists+0xc4>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a04      	ldr	r2, [pc, #16]	; (8008efc <prvSwitchTimerLists+0xc0>)
 8008eea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008eec:	4a04      	ldr	r2, [pc, #16]	; (8008f00 <prvSwitchTimerLists+0xc4>)
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	6013      	str	r3, [r2, #0]
}
 8008ef2:	bf00      	nop
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20000260 	.word	0x20000260
 8008f00:	20000264 	.word	0x20000264

08008f04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008f0a:	f000 f95f 	bl	80091cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008f0e:	4b15      	ldr	r3, [pc, #84]	; (8008f64 <prvCheckForValidListAndQueue+0x60>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d120      	bne.n	8008f58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f16:	4814      	ldr	r0, [pc, #80]	; (8008f68 <prvCheckForValidListAndQueue+0x64>)
 8008f18:	f7fd fa26 	bl	8006368 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f1c:	4813      	ldr	r0, [pc, #76]	; (8008f6c <prvCheckForValidListAndQueue+0x68>)
 8008f1e:	f7fd fa23 	bl	8006368 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f22:	4b13      	ldr	r3, [pc, #76]	; (8008f70 <prvCheckForValidListAndQueue+0x6c>)
 8008f24:	4a10      	ldr	r2, [pc, #64]	; (8008f68 <prvCheckForValidListAndQueue+0x64>)
 8008f26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f28:	4b12      	ldr	r3, [pc, #72]	; (8008f74 <prvCheckForValidListAndQueue+0x70>)
 8008f2a:	4a10      	ldr	r2, [pc, #64]	; (8008f6c <prvCheckForValidListAndQueue+0x68>)
 8008f2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	4b11      	ldr	r3, [pc, #68]	; (8008f78 <prvCheckForValidListAndQueue+0x74>)
 8008f34:	4a11      	ldr	r2, [pc, #68]	; (8008f7c <prvCheckForValidListAndQueue+0x78>)
 8008f36:	210c      	movs	r1, #12
 8008f38:	200a      	movs	r0, #10
 8008f3a:	f7fd fb31 	bl	80065a0 <xQueueGenericCreateStatic>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	4b08      	ldr	r3, [pc, #32]	; (8008f64 <prvCheckForValidListAndQueue+0x60>)
 8008f42:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f44:	4b07      	ldr	r3, [pc, #28]	; (8008f64 <prvCheckForValidListAndQueue+0x60>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d005      	beq.n	8008f58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f4c:	4b05      	ldr	r3, [pc, #20]	; (8008f64 <prvCheckForValidListAndQueue+0x60>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	490b      	ldr	r1, [pc, #44]	; (8008f80 <prvCheckForValidListAndQueue+0x7c>)
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fe f9e4 	bl	8007320 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f58:	f000 f966 	bl	8009228 <vPortExitCritical>
}
 8008f5c:	bf00      	nop
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20000268 	.word	0x20000268
 8008f68:	20000238 	.word	0x20000238
 8008f6c:	2000024c 	.word	0x2000024c
 8008f70:	20000260 	.word	0x20000260
 8008f74:	20000264 	.word	0x20000264
 8008f78:	200002ec 	.word	0x200002ec
 8008f7c:	20000274 	.word	0x20000274
 8008f80:	0800bac4 	.word	0x0800bac4

08008f84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	3b04      	subs	r3, #4
 8008f94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3b04      	subs	r3, #4
 8008fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	f023 0201 	bic.w	r2, r3, #1
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3b04      	subs	r3, #4
 8008fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008fb4:	4a0c      	ldr	r2, [pc, #48]	; (8008fe8 <pxPortInitialiseStack+0x64>)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3b14      	subs	r3, #20
 8008fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3b04      	subs	r3, #4
 8008fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f06f 0202 	mvn.w	r2, #2
 8008fd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	3b20      	subs	r3, #32
 8008fd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008fda:	68fb      	ldr	r3, [r7, #12]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3714      	adds	r7, #20
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	08008fed 	.word	0x08008fed

08008fec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008ff6:	4b11      	ldr	r3, [pc, #68]	; (800903c <prvTaskExitError+0x50>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffe:	d009      	beq.n	8009014 <prvTaskExitError+0x28>
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	60fb      	str	r3, [r7, #12]
 8009012:	e7fe      	b.n	8009012 <prvTaskExitError+0x26>
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009026:	bf00      	nop
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0fc      	beq.n	8009028 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800902e:	bf00      	nop
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	20000008 	.word	0x20000008

08009040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009040:	4b07      	ldr	r3, [pc, #28]	; (8009060 <pxCurrentTCBConst2>)
 8009042:	6819      	ldr	r1, [r3, #0]
 8009044:	6808      	ldr	r0, [r1, #0]
 8009046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904a:	f380 8809 	msr	PSP, r0
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	f04f 0000 	mov.w	r0, #0
 8009056:	f380 8811 	msr	BASEPRI, r0
 800905a:	4770      	bx	lr
 800905c:	f3af 8000 	nop.w

08009060 <pxCurrentTCBConst2>:
 8009060:	2000010c 	.word	0x2000010c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009064:	bf00      	nop
 8009066:	bf00      	nop

08009068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009068:	4808      	ldr	r0, [pc, #32]	; (800908c <prvPortStartFirstTask+0x24>)
 800906a:	6800      	ldr	r0, [r0, #0]
 800906c:	6800      	ldr	r0, [r0, #0]
 800906e:	f380 8808 	msr	MSP, r0
 8009072:	f04f 0000 	mov.w	r0, #0
 8009076:	f380 8814 	msr	CONTROL, r0
 800907a:	b662      	cpsie	i
 800907c:	b661      	cpsie	f
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	df00      	svc	0
 8009088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800908a:	bf00      	nop
 800908c:	e000ed08 	.word	0xe000ed08

08009090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009096:	4b44      	ldr	r3, [pc, #272]	; (80091a8 <xPortStartScheduler+0x118>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a44      	ldr	r2, [pc, #272]	; (80091ac <xPortStartScheduler+0x11c>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d109      	bne.n	80090b4 <xPortStartScheduler+0x24>
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	613b      	str	r3, [r7, #16]
 80090b2:	e7fe      	b.n	80090b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80090b4:	4b3c      	ldr	r3, [pc, #240]	; (80091a8 <xPortStartScheduler+0x118>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a3d      	ldr	r2, [pc, #244]	; (80091b0 <xPortStartScheduler+0x120>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d109      	bne.n	80090d2 <xPortStartScheduler+0x42>
 80090be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	e7fe      	b.n	80090d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80090d2:	4b38      	ldr	r3, [pc, #224]	; (80091b4 <xPortStartScheduler+0x124>)
 80090d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	22ff      	movs	r2, #255	; 0xff
 80090e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80090ec:	78fb      	ldrb	r3, [r7, #3]
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	4b30      	ldr	r3, [pc, #192]	; (80091b8 <xPortStartScheduler+0x128>)
 80090f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80090fa:	4b30      	ldr	r3, [pc, #192]	; (80091bc <xPortStartScheduler+0x12c>)
 80090fc:	2207      	movs	r2, #7
 80090fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009100:	e009      	b.n	8009116 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009102:	4b2e      	ldr	r3, [pc, #184]	; (80091bc <xPortStartScheduler+0x12c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3b01      	subs	r3, #1
 8009108:	4a2c      	ldr	r2, [pc, #176]	; (80091bc <xPortStartScheduler+0x12c>)
 800910a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800910c:	78fb      	ldrb	r3, [r7, #3]
 800910e:	b2db      	uxtb	r3, r3
 8009110:	005b      	lsls	r3, r3, #1
 8009112:	b2db      	uxtb	r3, r3
 8009114:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009116:	78fb      	ldrb	r3, [r7, #3]
 8009118:	b2db      	uxtb	r3, r3
 800911a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800911e:	2b80      	cmp	r3, #128	; 0x80
 8009120:	d0ef      	beq.n	8009102 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009122:	4b26      	ldr	r3, [pc, #152]	; (80091bc <xPortStartScheduler+0x12c>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f1c3 0307 	rsb	r3, r3, #7
 800912a:	2b04      	cmp	r3, #4
 800912c:	d009      	beq.n	8009142 <xPortStartScheduler+0xb2>
 800912e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009132:	f383 8811 	msr	BASEPRI, r3
 8009136:	f3bf 8f6f 	isb	sy
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	60bb      	str	r3, [r7, #8]
 8009140:	e7fe      	b.n	8009140 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009142:	4b1e      	ldr	r3, [pc, #120]	; (80091bc <xPortStartScheduler+0x12c>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	021b      	lsls	r3, r3, #8
 8009148:	4a1c      	ldr	r2, [pc, #112]	; (80091bc <xPortStartScheduler+0x12c>)
 800914a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800914c:	4b1b      	ldr	r3, [pc, #108]	; (80091bc <xPortStartScheduler+0x12c>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009154:	4a19      	ldr	r2, [pc, #100]	; (80091bc <xPortStartScheduler+0x12c>)
 8009156:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	b2da      	uxtb	r2, r3
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009160:	4b17      	ldr	r3, [pc, #92]	; (80091c0 <xPortStartScheduler+0x130>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a16      	ldr	r2, [pc, #88]	; (80091c0 <xPortStartScheduler+0x130>)
 8009166:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800916a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800916c:	4b14      	ldr	r3, [pc, #80]	; (80091c0 <xPortStartScheduler+0x130>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a13      	ldr	r2, [pc, #76]	; (80091c0 <xPortStartScheduler+0x130>)
 8009172:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009176:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009178:	f000 f8d6 	bl	8009328 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800917c:	4b11      	ldr	r3, [pc, #68]	; (80091c4 <xPortStartScheduler+0x134>)
 800917e:	2200      	movs	r2, #0
 8009180:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009182:	f000 f8f5 	bl	8009370 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009186:	4b10      	ldr	r3, [pc, #64]	; (80091c8 <xPortStartScheduler+0x138>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a0f      	ldr	r2, [pc, #60]	; (80091c8 <xPortStartScheduler+0x138>)
 800918c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009190:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009192:	f7ff ff69 	bl	8009068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009196:	f7fe fcb9 	bl	8007b0c <vTaskSwitchContext>
	prvTaskExitError();
 800919a:	f7ff ff27 	bl	8008fec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3718      	adds	r7, #24
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	e000ed00 	.word	0xe000ed00
 80091ac:	410fc271 	.word	0x410fc271
 80091b0:	410fc270 	.word	0x410fc270
 80091b4:	e000e400 	.word	0xe000e400
 80091b8:	20000334 	.word	0x20000334
 80091bc:	20000338 	.word	0x20000338
 80091c0:	e000ed20 	.word	0xe000ed20
 80091c4:	20000008 	.word	0x20000008
 80091c8:	e000ef34 	.word	0xe000ef34

080091cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d6:	f383 8811 	msr	BASEPRI, r3
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80091e4:	4b0e      	ldr	r3, [pc, #56]	; (8009220 <vPortEnterCritical+0x54>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	3301      	adds	r3, #1
 80091ea:	4a0d      	ldr	r2, [pc, #52]	; (8009220 <vPortEnterCritical+0x54>)
 80091ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80091ee:	4b0c      	ldr	r3, [pc, #48]	; (8009220 <vPortEnterCritical+0x54>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d10e      	bne.n	8009214 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80091f6:	4b0b      	ldr	r3, [pc, #44]	; (8009224 <vPortEnterCritical+0x58>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d009      	beq.n	8009214 <vPortEnterCritical+0x48>
 8009200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	603b      	str	r3, [r7, #0]
 8009212:	e7fe      	b.n	8009212 <vPortEnterCritical+0x46>
	}
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	20000008 	.word	0x20000008
 8009224:	e000ed04 	.word	0xe000ed04

08009228 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800922e:	4b11      	ldr	r3, [pc, #68]	; (8009274 <vPortExitCritical+0x4c>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d109      	bne.n	800924a <vPortExitCritical+0x22>
 8009236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	607b      	str	r3, [r7, #4]
 8009248:	e7fe      	b.n	8009248 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800924a:	4b0a      	ldr	r3, [pc, #40]	; (8009274 <vPortExitCritical+0x4c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3b01      	subs	r3, #1
 8009250:	4a08      	ldr	r2, [pc, #32]	; (8009274 <vPortExitCritical+0x4c>)
 8009252:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009254:	4b07      	ldr	r3, [pc, #28]	; (8009274 <vPortExitCritical+0x4c>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d104      	bne.n	8009266 <vPortExitCritical+0x3e>
 800925c:	2300      	movs	r3, #0
 800925e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009266:	bf00      	nop
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	20000008 	.word	0x20000008
	...

08009280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009280:	f3ef 8009 	mrs	r0, PSP
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	4b15      	ldr	r3, [pc, #84]	; (80092e0 <pxCurrentTCBConst>)
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	f01e 0f10 	tst.w	lr, #16
 8009290:	bf08      	it	eq
 8009292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800929a:	6010      	str	r0, [r2, #0]
 800929c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80092a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80092a4:	f380 8811 	msr	BASEPRI, r0
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f7fe fc2c 	bl	8007b0c <vTaskSwitchContext>
 80092b4:	f04f 0000 	mov.w	r0, #0
 80092b8:	f380 8811 	msr	BASEPRI, r0
 80092bc:	bc09      	pop	{r0, r3}
 80092be:	6819      	ldr	r1, [r3, #0]
 80092c0:	6808      	ldr	r0, [r1, #0]
 80092c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c6:	f01e 0f10 	tst.w	lr, #16
 80092ca:	bf08      	it	eq
 80092cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80092d0:	f380 8809 	msr	PSP, r0
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	f3af 8000 	nop.w

080092e0 <pxCurrentTCBConst>:
 80092e0:	2000010c 	.word	0x2000010c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80092e4:	bf00      	nop
 80092e6:	bf00      	nop

080092e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
	__asm volatile
 80092ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009300:	f7fe fb4c 	bl	800799c <xTaskIncrementTick>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d003      	beq.n	8009312 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800930a:	4b06      	ldr	r3, [pc, #24]	; (8009324 <SysTick_Handler+0x3c>)
 800930c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009310:	601a      	str	r2, [r3, #0]
 8009312:	2300      	movs	r3, #0
 8009314:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	e000ed04 	.word	0xe000ed04

08009328 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009328:	b480      	push	{r7}
 800932a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800932c:	4b0b      	ldr	r3, [pc, #44]	; (800935c <vPortSetupTimerInterrupt+0x34>)
 800932e:	2200      	movs	r2, #0
 8009330:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009332:	4b0b      	ldr	r3, [pc, #44]	; (8009360 <vPortSetupTimerInterrupt+0x38>)
 8009334:	2200      	movs	r2, #0
 8009336:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009338:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <vPortSetupTimerInterrupt+0x3c>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a0a      	ldr	r2, [pc, #40]	; (8009368 <vPortSetupTimerInterrupt+0x40>)
 800933e:	fba2 2303 	umull	r2, r3, r2, r3
 8009342:	099b      	lsrs	r3, r3, #6
 8009344:	4a09      	ldr	r2, [pc, #36]	; (800936c <vPortSetupTimerInterrupt+0x44>)
 8009346:	3b01      	subs	r3, #1
 8009348:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800934a:	4b04      	ldr	r3, [pc, #16]	; (800935c <vPortSetupTimerInterrupt+0x34>)
 800934c:	2207      	movs	r2, #7
 800934e:	601a      	str	r2, [r3, #0]
}
 8009350:	bf00      	nop
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	e000e010 	.word	0xe000e010
 8009360:	e000e018 	.word	0xe000e018
 8009364:	20000088 	.word	0x20000088
 8009368:	10624dd3 	.word	0x10624dd3
 800936c:	e000e014 	.word	0xe000e014

08009370 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009370:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009380 <vPortEnableVFP+0x10>
 8009374:	6801      	ldr	r1, [r0, #0]
 8009376:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800937a:	6001      	str	r1, [r0, #0]
 800937c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800937e:	bf00      	nop
 8009380:	e000ed88 	.word	0xe000ed88

08009384 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800938a:	f3ef 8305 	mrs	r3, IPSR
 800938e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2b0f      	cmp	r3, #15
 8009394:	d913      	bls.n	80093be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009396:	4a16      	ldr	r2, [pc, #88]	; (80093f0 <vPortValidateInterruptPriority+0x6c>)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	4413      	add	r3, r2
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80093a0:	4b14      	ldr	r3, [pc, #80]	; (80093f4 <vPortValidateInterruptPriority+0x70>)
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	7afa      	ldrb	r2, [r7, #11]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d209      	bcs.n	80093be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80093aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ae:	f383 8811 	msr	BASEPRI, r3
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	607b      	str	r3, [r7, #4]
 80093bc:	e7fe      	b.n	80093bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80093be:	4b0e      	ldr	r3, [pc, #56]	; (80093f8 <vPortValidateInterruptPriority+0x74>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80093c6:	4b0d      	ldr	r3, [pc, #52]	; (80093fc <vPortValidateInterruptPriority+0x78>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d909      	bls.n	80093e2 <vPortValidateInterruptPriority+0x5e>
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	603b      	str	r3, [r7, #0]
 80093e0:	e7fe      	b.n	80093e0 <vPortValidateInterruptPriority+0x5c>
	}
 80093e2:	bf00      	nop
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	e000e3f0 	.word	0xe000e3f0
 80093f4:	20000334 	.word	0x20000334
 80093f8:	e000ed0c 	.word	0xe000ed0c
 80093fc:	20000338 	.word	0x20000338

08009400 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b08a      	sub	sp, #40	; 0x28
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009408:	2300      	movs	r3, #0
 800940a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800940c:	f7fe fa0c 	bl	8007828 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009410:	4b57      	ldr	r3, [pc, #348]	; (8009570 <pvPortMalloc+0x170>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009418:	f000 f90c 	bl	8009634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800941c:	4b55      	ldr	r3, [pc, #340]	; (8009574 <pvPortMalloc+0x174>)
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4013      	ands	r3, r2
 8009424:	2b00      	cmp	r3, #0
 8009426:	f040 808c 	bne.w	8009542 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d01c      	beq.n	800946a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009430:	2208      	movs	r2, #8
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4413      	add	r3, r2
 8009436:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f003 0307 	and.w	r3, r3, #7
 800943e:	2b00      	cmp	r3, #0
 8009440:	d013      	beq.n	800946a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f023 0307 	bic.w	r3, r3, #7
 8009448:	3308      	adds	r3, #8
 800944a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f003 0307 	and.w	r3, r3, #7
 8009452:	2b00      	cmp	r3, #0
 8009454:	d009      	beq.n	800946a <pvPortMalloc+0x6a>
 8009456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	617b      	str	r3, [r7, #20]
 8009468:	e7fe      	b.n	8009468 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d068      	beq.n	8009542 <pvPortMalloc+0x142>
 8009470:	4b41      	ldr	r3, [pc, #260]	; (8009578 <pvPortMalloc+0x178>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	429a      	cmp	r2, r3
 8009478:	d863      	bhi.n	8009542 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800947a:	4b40      	ldr	r3, [pc, #256]	; (800957c <pvPortMalloc+0x17c>)
 800947c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800947e:	4b3f      	ldr	r3, [pc, #252]	; (800957c <pvPortMalloc+0x17c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009484:	e004      	b.n	8009490 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009488:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	429a      	cmp	r2, r3
 8009498:	d903      	bls.n	80094a2 <pvPortMalloc+0xa2>
 800949a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1f1      	bne.n	8009486 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80094a2:	4b33      	ldr	r3, [pc, #204]	; (8009570 <pvPortMalloc+0x170>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d04a      	beq.n	8009542 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80094ac:	6a3b      	ldr	r3, [r7, #32]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2208      	movs	r2, #8
 80094b2:	4413      	add	r3, r2
 80094b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	6a3b      	ldr	r3, [r7, #32]
 80094bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c0:	685a      	ldr	r2, [r3, #4]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	1ad2      	subs	r2, r2, r3
 80094c6:	2308      	movs	r3, #8
 80094c8:	005b      	lsls	r3, r3, #1
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d91e      	bls.n	800950c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4413      	add	r3, r2
 80094d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	f003 0307 	and.w	r3, r3, #7
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d009      	beq.n	80094f4 <pvPortMalloc+0xf4>
 80094e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	613b      	str	r3, [r7, #16]
 80094f2:	e7fe      	b.n	80094f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	1ad2      	subs	r2, r2, r3
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009506:	69b8      	ldr	r0, [r7, #24]
 8009508:	f000 f8f6 	bl	80096f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800950c:	4b1a      	ldr	r3, [pc, #104]	; (8009578 <pvPortMalloc+0x178>)
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	4a18      	ldr	r2, [pc, #96]	; (8009578 <pvPortMalloc+0x178>)
 8009518:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800951a:	4b17      	ldr	r3, [pc, #92]	; (8009578 <pvPortMalloc+0x178>)
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	4b18      	ldr	r3, [pc, #96]	; (8009580 <pvPortMalloc+0x180>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	429a      	cmp	r2, r3
 8009524:	d203      	bcs.n	800952e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009526:	4b14      	ldr	r3, [pc, #80]	; (8009578 <pvPortMalloc+0x178>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a15      	ldr	r2, [pc, #84]	; (8009580 <pvPortMalloc+0x180>)
 800952c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800952e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	4b10      	ldr	r3, [pc, #64]	; (8009574 <pvPortMalloc+0x174>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	431a      	orrs	r2, r3
 8009538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953e:	2200      	movs	r2, #0
 8009540:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009542:	f7fe f97f 	bl	8007844 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	f003 0307 	and.w	r3, r3, #7
 800954c:	2b00      	cmp	r3, #0
 800954e:	d009      	beq.n	8009564 <pvPortMalloc+0x164>
 8009550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	e7fe      	b.n	8009562 <pvPortMalloc+0x162>
	return pvReturn;
 8009564:	69fb      	ldr	r3, [r7, #28]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3728      	adds	r7, #40	; 0x28
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	20000efc 	.word	0x20000efc
 8009574:	20000f08 	.word	0x20000f08
 8009578:	20000f00 	.word	0x20000f00
 800957c:	20000ef4 	.word	0x20000ef4
 8009580:	20000f04 	.word	0x20000f04

08009584 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d046      	beq.n	8009624 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009596:	2308      	movs	r3, #8
 8009598:	425b      	negs	r3, r3
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	4413      	add	r3, r2
 800959e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	685a      	ldr	r2, [r3, #4]
 80095a8:	4b20      	ldr	r3, [pc, #128]	; (800962c <vPortFree+0xa8>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4013      	ands	r3, r2
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d109      	bne.n	80095c6 <vPortFree+0x42>
 80095b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	60fb      	str	r3, [r7, #12]
 80095c4:	e7fe      	b.n	80095c4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d009      	beq.n	80095e2 <vPortFree+0x5e>
 80095ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	60bb      	str	r3, [r7, #8]
 80095e0:	e7fe      	b.n	80095e0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	4b11      	ldr	r3, [pc, #68]	; (800962c <vPortFree+0xa8>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4013      	ands	r3, r2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d019      	beq.n	8009624 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d115      	bne.n	8009624 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	4b0b      	ldr	r3, [pc, #44]	; (800962c <vPortFree+0xa8>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	43db      	mvns	r3, r3
 8009602:	401a      	ands	r2, r3
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009608:	f7fe f90e 	bl	8007828 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	685a      	ldr	r2, [r3, #4]
 8009610:	4b07      	ldr	r3, [pc, #28]	; (8009630 <vPortFree+0xac>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4413      	add	r3, r2
 8009616:	4a06      	ldr	r2, [pc, #24]	; (8009630 <vPortFree+0xac>)
 8009618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800961a:	6938      	ldr	r0, [r7, #16]
 800961c:	f000 f86c 	bl	80096f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009620:	f7fe f910 	bl	8007844 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009624:	bf00      	nop
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	20000f08 	.word	0x20000f08
 8009630:	20000f00 	.word	0x20000f00

08009634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800963a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800963e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009640:	4b27      	ldr	r3, [pc, #156]	; (80096e0 <prvHeapInit+0xac>)
 8009642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f003 0307 	and.w	r3, r3, #7
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00c      	beq.n	8009668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	3307      	adds	r3, #7
 8009652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f023 0307 	bic.w	r3, r3, #7
 800965a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	4a1f      	ldr	r2, [pc, #124]	; (80096e0 <prvHeapInit+0xac>)
 8009664:	4413      	add	r3, r2
 8009666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800966c:	4a1d      	ldr	r2, [pc, #116]	; (80096e4 <prvHeapInit+0xb0>)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009672:	4b1c      	ldr	r3, [pc, #112]	; (80096e4 <prvHeapInit+0xb0>)
 8009674:	2200      	movs	r2, #0
 8009676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	4413      	add	r3, r2
 800967e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009680:	2208      	movs	r2, #8
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	1a9b      	subs	r3, r3, r2
 8009686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f023 0307 	bic.w	r3, r3, #7
 800968e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4a15      	ldr	r2, [pc, #84]	; (80096e8 <prvHeapInit+0xb4>)
 8009694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009696:	4b14      	ldr	r3, [pc, #80]	; (80096e8 <prvHeapInit+0xb4>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2200      	movs	r2, #0
 800969c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800969e:	4b12      	ldr	r3, [pc, #72]	; (80096e8 <prvHeapInit+0xb4>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	1ad2      	subs	r2, r2, r3
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80096b4:	4b0c      	ldr	r3, [pc, #48]	; (80096e8 <prvHeapInit+0xb4>)
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	4a0a      	ldr	r2, [pc, #40]	; (80096ec <prvHeapInit+0xb8>)
 80096c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	4a09      	ldr	r2, [pc, #36]	; (80096f0 <prvHeapInit+0xbc>)
 80096ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80096cc:	4b09      	ldr	r3, [pc, #36]	; (80096f4 <prvHeapInit+0xc0>)
 80096ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80096d2:	601a      	str	r2, [r3, #0]
}
 80096d4:	bf00      	nop
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr
 80096e0:	2000033c 	.word	0x2000033c
 80096e4:	20000ef4 	.word	0x20000ef4
 80096e8:	20000efc 	.word	0x20000efc
 80096ec:	20000f04 	.word	0x20000f04
 80096f0:	20000f00 	.word	0x20000f00
 80096f4:	20000f08 	.word	0x20000f08

080096f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009700:	4b28      	ldr	r3, [pc, #160]	; (80097a4 <prvInsertBlockIntoFreeList+0xac>)
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	e002      	b.n	800970c <prvInsertBlockIntoFreeList+0x14>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	60fb      	str	r3, [r7, #12]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	429a      	cmp	r2, r3
 8009714:	d8f7      	bhi.n	8009706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	4413      	add	r3, r2
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	429a      	cmp	r2, r3
 8009726:	d108      	bne.n	800973a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	685a      	ldr	r2, [r3, #4]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	441a      	add	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	441a      	add	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	429a      	cmp	r2, r3
 800974c:	d118      	bne.n	8009780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	4b15      	ldr	r3, [pc, #84]	; (80097a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	429a      	cmp	r2, r3
 8009758:	d00d      	beq.n	8009776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	441a      	add	r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	601a      	str	r2, [r3, #0]
 8009774:	e008      	b.n	8009788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009776:	4b0c      	ldr	r3, [pc, #48]	; (80097a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	601a      	str	r2, [r3, #0]
 800977e:	e003      	b.n	8009788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	429a      	cmp	r2, r3
 800978e:	d002      	beq.n	8009796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009796:	bf00      	nop
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	20000ef4 	.word	0x20000ef4
 80097a8:	20000efc 	.word	0x20000efc

080097ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	4a07      	ldr	r2, [pc, #28]	; (80097d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80097bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	4a06      	ldr	r2, [pc, #24]	; (80097dc <vApplicationGetIdleTaskMemory+0x30>)
 80097c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2280      	movs	r2, #128	; 0x80
 80097c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80097ca:	bf00      	nop
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	20000f0c 	.word	0x20000f0c
 80097dc:	20000f60 	.word	0x20000f60

080097e0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4a07      	ldr	r2, [pc, #28]	; (800980c <vApplicationGetTimerTaskMemory+0x2c>)
 80097f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	4a06      	ldr	r2, [pc, #24]	; (8009810 <vApplicationGetTimerTaskMemory+0x30>)
 80097f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097fe:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8009800:	bf00      	nop
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	20001160 	.word	0x20001160
 8009810:	200011b4 	.word	0x200011b4

08009814 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	4603      	mov	r3, r0
 800981c:	6039      	str	r1, [r7, #0]
 800981e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8009820:	88fb      	ldrh	r3, [r7, #6]
 8009822:	b2db      	uxtb	r3, r3
 8009824:	2120      	movs	r1, #32
 8009826:	4618      	mov	r0, r3
 8009828:	f001 f936 	bl	800aa98 <SENSOR_IO_Read>
 800982c:	4603      	mov	r3, r0
 800982e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8009830:	7bfb      	ldrb	r3, [r7, #15]
 8009832:	f023 0304 	bic.w	r3, r3, #4
 8009836:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	f043 0304 	orr.w	r3, r3, #4
 800983e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	f023 0303 	bic.w	r3, r3, #3
 8009846:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	f043 0301 	orr.w	r3, r3, #1
 800984e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8009850:	7bfb      	ldrb	r3, [r7, #15]
 8009852:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009856:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8009858:	88fb      	ldrh	r3, [r7, #6]
 800985a:	b2db      	uxtb	r3, r3
 800985c:	7bfa      	ldrb	r2, [r7, #15]
 800985e:	2120      	movs	r1, #32
 8009860:	4618      	mov	r0, r3
 8009862:	f001 f8ff 	bl	800aa64 <SENSOR_IO_Write>
}
 8009866:	bf00      	nop
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b088      	sub	sp, #32
 8009872:	af00      	add	r7, sp, #0
 8009874:	4603      	mov	r3, r0
 8009876:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8009878:	88fb      	ldrh	r3, [r7, #6]
 800987a:	b2d8      	uxtb	r0, r3
 800987c:	f107 0208 	add.w	r2, r7, #8
 8009880:	2302      	movs	r3, #2
 8009882:	21b2      	movs	r1, #178	; 0xb2
 8009884:	f001 f926 	bl	800aad4 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8009888:	88fb      	ldrh	r3, [r7, #6]
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2135      	movs	r1, #53	; 0x35
 800988e:	4618      	mov	r0, r3
 8009890:	f001 f902 	bl	800aa98 <SENSOR_IO_Read>
 8009894:	4603      	mov	r3, r0
 8009896:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8009898:	7ffb      	ldrb	r3, [r7, #31]
 800989a:	021b      	lsls	r3, r3, #8
 800989c:	b21b      	sxth	r3, r3
 800989e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098a2:	b21a      	sxth	r2, r3
 80098a4:	7a3b      	ldrb	r3, [r7, #8]
 80098a6:	b21b      	sxth	r3, r3
 80098a8:	4313      	orrs	r3, r2
 80098aa:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80098ac:	7ffb      	ldrb	r3, [r7, #31]
 80098ae:	019b      	lsls	r3, r3, #6
 80098b0:	b21b      	sxth	r3, r3
 80098b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098b6:	b21a      	sxth	r2, r3
 80098b8:	7a7b      	ldrb	r3, [r7, #9]
 80098ba:	b21b      	sxth	r3, r3
 80098bc:	4313      	orrs	r3, r2
 80098be:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80098c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80098c4:	10db      	asrs	r3, r3, #3
 80098c6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80098c8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80098cc:	10db      	asrs	r3, r3, #3
 80098ce:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80098d0:	88fb      	ldrh	r3, [r7, #6]
 80098d2:	b2d8      	uxtb	r0, r3
 80098d4:	f107 0208 	add.w	r2, r7, #8
 80098d8:	2304      	movs	r3, #4
 80098da:	21bc      	movs	r1, #188	; 0xbc
 80098dc:	f001 f8fa 	bl	800aad4 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80098e0:	7a7b      	ldrb	r3, [r7, #9]
 80098e2:	021b      	lsls	r3, r3, #8
 80098e4:	b21a      	sxth	r2, r3
 80098e6:	7a3b      	ldrb	r3, [r7, #8]
 80098e8:	b21b      	sxth	r3, r3
 80098ea:	4313      	orrs	r3, r2
 80098ec:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80098ee:	7afb      	ldrb	r3, [r7, #11]
 80098f0:	021b      	lsls	r3, r3, #8
 80098f2:	b21a      	sxth	r2, r3
 80098f4:	7abb      	ldrb	r3, [r7, #10]
 80098f6:	b21b      	sxth	r3, r3
 80098f8:	4313      	orrs	r3, r2
 80098fa:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80098fc:	88fb      	ldrh	r3, [r7, #6]
 80098fe:	b2d8      	uxtb	r0, r3
 8009900:	f107 0208 	add.w	r2, r7, #8
 8009904:	2302      	movs	r3, #2
 8009906:	21aa      	movs	r1, #170	; 0xaa
 8009908:	f001 f8e4 	bl	800aad4 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800990c:	7a7b      	ldrb	r3, [r7, #9]
 800990e:	021b      	lsls	r3, r3, #8
 8009910:	b21a      	sxth	r2, r3
 8009912:	7a3b      	ldrb	r3, [r7, #8]
 8009914:	b21b      	sxth	r3, r3
 8009916:	4313      	orrs	r3, r2
 8009918:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800991a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800991e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009922:	1ad3      	subs	r3, r2, r3
 8009924:	ee07 3a90 	vmov	s15, r3
 8009928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800992c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009930:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800993e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009942:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009946:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800994a:	1ad3      	subs	r3, r2, r3
 800994c:	ee07 3a90 	vmov	s15, r3
 8009950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009958:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800995c:	ee07 3a90 	vmov	s15, r3
 8009960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009968:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	ee07 3a90 	vmov	s15, r3
}
 8009972:	eeb0 0a67 	vmov.f32	s0, s15
 8009976:	3720      	adds	r7, #32
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	4603      	mov	r3, r0
 8009984:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8009986:	88fb      	ldrh	r3, [r7, #6]
 8009988:	4618      	mov	r0, r3
 800998a:	f000 f87b 	bl	8009a84 <LPS22HB_Init>
}
 800998e:	bf00      	nop
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8009996:	b580      	push	{r7, lr}
 8009998:	b084      	sub	sp, #16
 800999a:	af00      	add	r7, sp, #0
 800999c:	4603      	mov	r3, r0
 800999e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80099a0:	2300      	movs	r3, #0
 80099a2:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80099a4:	f001 f854 	bl	800aa50 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80099a8:	88fb      	ldrh	r3, [r7, #6]
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	210f      	movs	r1, #15
 80099ae:	4618      	mov	r0, r3
 80099b0:	f001 f872 	bl	800aa98 <SENSOR_IO_Read>
 80099b4:	4603      	mov	r3, r0
 80099b6:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
	...

080099c4 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80099c4:	b590      	push	{r4, r7, lr}
 80099c6:	b087      	sub	sp, #28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	4603      	mov	r3, r0
 80099cc:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80099ce:	2300      	movs	r3, #0
 80099d0:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80099d2:	2300      	movs	r3, #0
 80099d4:	74fb      	strb	r3, [r7, #19]
 80099d6:	e013      	b.n	8009a00 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80099d8:	88fb      	ldrh	r3, [r7, #6]
 80099da:	b2da      	uxtb	r2, r3
 80099dc:	7cfb      	ldrb	r3, [r7, #19]
 80099de:	3328      	adds	r3, #40	; 0x28
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	7cfc      	ldrb	r4, [r7, #19]
 80099e4:	4619      	mov	r1, r3
 80099e6:	4610      	mov	r0, r2
 80099e8:	f001 f856 	bl	800aa98 <SENSOR_IO_Read>
 80099ec:	4603      	mov	r3, r0
 80099ee:	461a      	mov	r2, r3
 80099f0:	f107 0318 	add.w	r3, r7, #24
 80099f4:	4423      	add	r3, r4
 80099f6:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80099fa:	7cfb      	ldrb	r3, [r7, #19]
 80099fc:	3301      	adds	r3, #1
 80099fe:	74fb      	strb	r3, [r7, #19]
 8009a00:	7cfb      	ldrb	r3, [r7, #19]
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d9e8      	bls.n	80099d8 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8009a06:	2300      	movs	r3, #0
 8009a08:	74fb      	strb	r3, [r7, #19]
 8009a0a:	e010      	b.n	8009a2e <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8009a0c:	7cfb      	ldrb	r3, [r7, #19]
 8009a0e:	f107 0218 	add.w	r2, r7, #24
 8009a12:	4413      	add	r3, r2
 8009a14:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8009a18:	461a      	mov	r2, r3
 8009a1a:	7cfb      	ldrb	r3, [r7, #19]
 8009a1c:	00db      	lsls	r3, r3, #3
 8009a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8009a28:	7cfb      	ldrb	r3, [r7, #19]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	74fb      	strb	r3, [r7, #19]
 8009a2e:	7cfb      	ldrb	r3, [r7, #19]
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d9eb      	bls.n	8009a0c <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d003      	beq.n	8009a46 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a44:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2264      	movs	r2, #100	; 0x64
 8009a4e:	fb02 f303 	mul.w	r3, r2, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	da01      	bge.n	8009a5a <LPS22HB_P_ReadPressure+0x96>
 8009a56:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8009a5a:	131b      	asrs	r3, r3, #12
 8009a5c:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	ee07 3a90 	vmov	s15, r3
 8009a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a68:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8009a80 <LPS22HB_P_ReadPressure+0xbc>
 8009a6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009a70:	eef0 7a66 	vmov.f32	s15, s13
}
 8009a74:	eeb0 0a67 	vmov.f32	s0, s15
 8009a78:	371c      	adds	r7, #28
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd90      	pop	{r4, r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	42c80000 	.word	0x42c80000

08009a84 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8009a8e:	88fb      	ldrh	r3, [r7, #6]
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	211a      	movs	r1, #26
 8009a94:	4618      	mov	r0, r3
 8009a96:	f000 ffff 	bl	800aa98 <SENSOR_IO_Read>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
 8009aa0:	f023 0301 	bic.w	r3, r3, #1
 8009aa4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
 8009aa8:	f043 0301 	orr.w	r3, r3, #1
 8009aac:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8009aae:	88fb      	ldrh	r3, [r7, #6]
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	7bfa      	ldrb	r2, [r7, #15]
 8009ab4:	211a      	movs	r1, #26
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 ffd4 	bl	800aa64 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8009abc:	88fb      	ldrh	r3, [r7, #6]
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2110      	movs	r1, #16
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 ffe8 	bl	800aa98 <SENSOR_IO_Read>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
 8009ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ad2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
 8009ad6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009ada:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
 8009ade:	f023 0302 	bic.w	r3, r3, #2
 8009ae2:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
 8009ae6:	f043 0302 	orr.w	r3, r3, #2
 8009aea:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8009aec:	88fb      	ldrh	r3, [r7, #6]
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	7bfa      	ldrb	r2, [r7, #15]
 8009af2:	2110      	movs	r1, #16
 8009af4:	4618      	mov	r0, r3
 8009af6:	f000 ffb5 	bl	800aa64 <SENSOR_IO_Write>
}  
 8009afa:	bf00      	nop
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b084      	sub	sp, #16
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	4603      	mov	r3, r0
 8009b0a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8009b10:	2111      	movs	r1, #17
 8009b12:	20d4      	movs	r0, #212	; 0xd4
 8009b14:	f000 ffc0 	bl	800aa98 <SENSOR_IO_Read>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8009b1c:	88fb      	ldrh	r3, [r7, #6]
 8009b1e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8009b20:	7bbb      	ldrb	r3, [r7, #14]
 8009b22:	f003 0303 	and.w	r3, r3, #3
 8009b26:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8009b28:	7bba      	ldrb	r2, [r7, #14]
 8009b2a:	7bfb      	ldrb	r3, [r7, #15]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	461a      	mov	r2, r3
 8009b34:	2111      	movs	r1, #17
 8009b36:	20d4      	movs	r0, #212	; 0xd4
 8009b38:	f000 ff94 	bl	800aa64 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8009b3c:	2112      	movs	r1, #18
 8009b3e:	20d4      	movs	r0, #212	; 0xd4
 8009b40:	f000 ffaa 	bl	800aa98 <SENSOR_IO_Read>
 8009b44:	4603      	mov	r3, r0
 8009b46:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8009b48:	88fb      	ldrh	r3, [r7, #6]
 8009b4a:	0a1b      	lsrs	r3, r3, #8
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8009b50:	7bbb      	ldrb	r3, [r7, #14]
 8009b52:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8009b56:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8009b58:	7bba      	ldrb	r2, [r7, #14]
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
 8009b62:	461a      	mov	r2, r3
 8009b64:	2112      	movs	r1, #18
 8009b66:	20d4      	movs	r0, #212	; 0xd4
 8009b68:	f000 ff7c 	bl	800aa64 <SENSOR_IO_Write>
}
 8009b6c:	bf00      	nop
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8009b7e:	2111      	movs	r1, #17
 8009b80:	20d4      	movs	r0, #212	; 0xd4
 8009b82:	f000 ff89 	bl	800aa98 <SENSOR_IO_Read>
 8009b86:	4603      	mov	r3, r0
 8009b88:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8009b8a:	79fb      	ldrb	r3, [r7, #7]
 8009b8c:	f003 030f 	and.w	r3, r3, #15
 8009b90:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8009b92:	79fb      	ldrb	r3, [r7, #7]
 8009b94:	461a      	mov	r2, r3
 8009b96:	2111      	movs	r1, #17
 8009b98:	20d4      	movs	r0, #212	; 0xd4
 8009b9a:	f000 ff63 	bl	800aa64 <SENSOR_IO_Write>
}
 8009b9e:	bf00      	nop
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8009baa:	f000 ff51 	bl	800aa50 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8009bae:	210f      	movs	r1, #15
 8009bb0:	20d4      	movs	r0, #212	; 0xd4
 8009bb2:	f000 ff71 	bl	800aa98 <SENSOR_IO_Read>
 8009bb6:	4603      	mov	r3, r0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8009bca:	2116      	movs	r1, #22
 8009bcc:	20d4      	movs	r0, #212	; 0xd4
 8009bce:	f000 ff63 	bl	800aa98 <SENSOR_IO_Read>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8009bd6:	7bfb      	ldrb	r3, [r7, #15]
 8009bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bdc:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8009bde:	88fb      	ldrh	r3, [r7, #6]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d003      	beq.n	8009bec <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8009be4:	7bfb      	ldrb	r3, [r7, #15]
 8009be6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009bea:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	2116      	movs	r1, #22
 8009bf2:	20d4      	movs	r0, #212	; 0xd4
 8009bf4:	f000 ff36 	bl	800aa64 <SENSOR_IO_Write>
}
 8009bf8:	bf00      	nop
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b088      	sub	sp, #32
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8009c10:	f04f 0300 	mov.w	r3, #0
 8009c14:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8009c16:	2111      	movs	r1, #17
 8009c18:	20d4      	movs	r0, #212	; 0xd4
 8009c1a:	f000 ff3d 	bl	800aa98 <SENSOR_IO_Read>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8009c22:	f107 0208 	add.w	r2, r7, #8
 8009c26:	2306      	movs	r3, #6
 8009c28:	2122      	movs	r1, #34	; 0x22
 8009c2a:	20d4      	movs	r0, #212	; 0xd4
 8009c2c:	f000 ff52 	bl	800aad4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8009c30:	2300      	movs	r3, #0
 8009c32:	77fb      	strb	r3, [r7, #31]
 8009c34:	e01f      	b.n	8009c76 <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8009c36:	7ffb      	ldrb	r3, [r7, #31]
 8009c38:	005b      	lsls	r3, r3, #1
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	f107 0220 	add.w	r2, r7, #32
 8009c40:	4413      	add	r3, r2
 8009c42:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	021b      	lsls	r3, r3, #8
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	7ffb      	ldrb	r3, [r7, #31]
 8009c4e:	005b      	lsls	r3, r3, #1
 8009c50:	f107 0120 	add.w	r1, r7, #32
 8009c54:	440b      	add	r3, r1
 8009c56:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	4413      	add	r3, r2
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	7ffb      	ldrb	r3, [r7, #31]
 8009c62:	b212      	sxth	r2, r2
 8009c64:	005b      	lsls	r3, r3, #1
 8009c66:	f107 0120 	add.w	r1, r7, #32
 8009c6a:	440b      	add	r3, r1
 8009c6c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8009c70:	7ffb      	ldrb	r3, [r7, #31]
 8009c72:	3301      	adds	r3, #1
 8009c74:	77fb      	strb	r3, [r7, #31]
 8009c76:	7ffb      	ldrb	r3, [r7, #31]
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d9dc      	bls.n	8009c36 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8009c7c:	7dfb      	ldrb	r3, [r7, #23]
 8009c7e:	f003 030c 	and.w	r3, r3, #12
 8009c82:	2b0c      	cmp	r3, #12
 8009c84:	d828      	bhi.n	8009cd8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8009c86:	a201      	add	r2, pc, #4	; (adr r2, 8009c8c <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 8009c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8c:	08009cc1 	.word	0x08009cc1
 8009c90:	08009cd9 	.word	0x08009cd9
 8009c94:	08009cd9 	.word	0x08009cd9
 8009c98:	08009cd9 	.word	0x08009cd9
 8009c9c:	08009cc7 	.word	0x08009cc7
 8009ca0:	08009cd9 	.word	0x08009cd9
 8009ca4:	08009cd9 	.word	0x08009cd9
 8009ca8:	08009cd9 	.word	0x08009cd9
 8009cac:	08009ccd 	.word	0x08009ccd
 8009cb0:	08009cd9 	.word	0x08009cd9
 8009cb4:	08009cd9 	.word	0x08009cd9
 8009cb8:	08009cd9 	.word	0x08009cd9
 8009cbc:	08009cd3 	.word	0x08009cd3
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8009cc0:	4b16      	ldr	r3, [pc, #88]	; (8009d1c <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8009cc2:	61bb      	str	r3, [r7, #24]
    break;
 8009cc4:	e008      	b.n	8009cd8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8009cc6:	4b16      	ldr	r3, [pc, #88]	; (8009d20 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8009cc8:	61bb      	str	r3, [r7, #24]
    break;
 8009cca:	e005      	b.n	8009cd8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8009ccc:	4b15      	ldr	r3, [pc, #84]	; (8009d24 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8009cce:	61bb      	str	r3, [r7, #24]
    break;
 8009cd0:	e002      	b.n	8009cd8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8009cd2:	4b15      	ldr	r3, [pc, #84]	; (8009d28 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 8009cd4:	61bb      	str	r3, [r7, #24]
    break;    
 8009cd6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8009cd8:	2300      	movs	r3, #0
 8009cda:	77fb      	strb	r3, [r7, #31]
 8009cdc:	e017      	b.n	8009d0e <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8009cde:	7ffb      	ldrb	r3, [r7, #31]
 8009ce0:	005b      	lsls	r3, r3, #1
 8009ce2:	f107 0220 	add.w	r2, r7, #32
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8009cec:	ee07 3a90 	vmov	s15, r3
 8009cf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009cf4:	7ffb      	ldrb	r3, [r7, #31]
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8009d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d04:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8009d08:	7ffb      	ldrb	r3, [r7, #31]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	77fb      	strb	r3, [r7, #31]
 8009d0e:	7ffb      	ldrb	r3, [r7, #31]
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d9e4      	bls.n	8009cde <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 8009d14:	bf00      	nop
 8009d16:	3720      	adds	r7, #32
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	410c0000 	.word	0x410c0000
 8009d20:	418c0000 	.word	0x418c0000
 8009d24:	420c0000 	.word	0x420c0000
 8009d28:	428c0000 	.word	0x428c0000

08009d2c <gyro2work>:
	float k; // adaptive Kalman filter gain.;
};

extern float kalmanFilterA (struct KalmanState* ks, float measurement);

float gyro2work (float* gyro){
 8009d2c:	b5b0      	push	{r4, r5, r7, lr}
 8009d2e:	b086      	sub	sp, #24
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
	float gyro_dps[3];
	gyro_dps[0] = gyro[0]/1000;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	ed93 7a00 	vldr	s14, [r3]
 8009d3a:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8009de8 <gyro2work+0xbc>
 8009d3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d42:	edc7 7a02 	vstr	s15, [r7, #8]
	gyro_dps[1] = gyro[1]/1000;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	3304      	adds	r3, #4
 8009d4a:	ed93 7a00 	vldr	s14, [r3]
 8009d4e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009de8 <gyro2work+0xbc>
 8009d52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d56:	edc7 7a03 	vstr	s15, [r7, #12]
	gyro_dps[2] = gyro[2]/1000;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	3308      	adds	r3, #8
 8009d5e:	ed93 7a00 	vldr	s14, [r3]
 8009d62:	eddf 6a21 	vldr	s13, [pc, #132]	; 8009de8 <gyro2work+0xbc>
 8009d66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d6a:	edc7 7a04 	vstr	s15, [r7, #16]
	float inertia = 0.001*0.5*0.5; // based on standard atomic weight
 8009d6e:	4b1f      	ldr	r3, [pc, #124]	; (8009dec <gyro2work+0xc0>)
 8009d70:	617b      	str	r3, [r7, #20]
	return 0.5*inertia*(gyro_dps[0]*gyro_dps[0] + gyro_dps[1]*gyro_dps[1]+gyro_dps[2]*gyro_dps[2]);
 8009d72:	6978      	ldr	r0, [r7, #20]
 8009d74:	f7f6 fc28 	bl	80005c8 <__aeabi_f2d>
 8009d78:	f04f 0200 	mov.w	r2, #0
 8009d7c:	4b1c      	ldr	r3, [pc, #112]	; (8009df0 <gyro2work+0xc4>)
 8009d7e:	f7f6 fc7b 	bl	8000678 <__aeabi_dmul>
 8009d82:	4603      	mov	r3, r0
 8009d84:	460c      	mov	r4, r1
 8009d86:	4625      	mov	r5, r4
 8009d88:	461c      	mov	r4, r3
 8009d8a:	ed97 7a02 	vldr	s14, [r7, #8]
 8009d8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d96:	edd7 6a03 	vldr	s13, [r7, #12]
 8009d9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8009d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009da2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009da6:	edd7 6a04 	vldr	s13, [r7, #16]
 8009daa:	edd7 7a04 	vldr	s15, [r7, #16]
 8009dae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009db6:	ee17 0a90 	vmov	r0, s15
 8009dba:	f7f6 fc05 	bl	80005c8 <__aeabi_f2d>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	f7f6 fc57 	bl	8000678 <__aeabi_dmul>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	460c      	mov	r4, r1
 8009dce:	4618      	mov	r0, r3
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	f7f6 fe83 	bl	8000adc <__aeabi_d2f>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	ee07 3a90 	vmov	s15, r3
}
 8009ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8009de0:	3718      	adds	r7, #24
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bdb0      	pop	{r4, r5, r7, pc}
 8009de6:	bf00      	nop
 8009de8:	447a0000 	.word	0x447a0000
 8009dec:	3983126f 	.word	0x3983126f
 8009df0:	3fe00000 	.word	0x3fe00000
 8009df4:	00000000 	.word	0x00000000

08009df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009df8:	b5b0      	push	{r4, r5, r7, lr}
 8009dfa:	b09c      	sub	sp, #112	; 0x70
 8009dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	for (int i = 0; i < LOOKUP_LEN; i++) {
 8009dfe:	2300      	movs	r3, #0
 8009e00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e02:	e039      	b.n	8009e78 <main+0x80>
		sin_lookup_C6[i] = (MAX_12 * 0.6 * (arm_sin_f32(6.283 * i / 45) + 1));
 8009e04:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009e06:	f7f6 fbcd 	bl	80005a4 <__aeabi_i2d>
 8009e0a:	a399      	add	r3, pc, #612	; (adr r3, 800a070 <main+0x278>)
 8009e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e10:	f7f6 fc32 	bl	8000678 <__aeabi_dmul>
 8009e14:	4603      	mov	r3, r0
 8009e16:	460c      	mov	r4, r1
 8009e18:	4618      	mov	r0, r3
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	f04f 0200 	mov.w	r2, #0
 8009e20:	4b95      	ldr	r3, [pc, #596]	; (800a078 <main+0x280>)
 8009e22:	f7f6 fd53 	bl	80008cc <__aeabi_ddiv>
 8009e26:	4603      	mov	r3, r0
 8009e28:	460c      	mov	r4, r1
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	4621      	mov	r1, r4
 8009e2e:	f7f6 fe55 	bl	8000adc <__aeabi_d2f>
 8009e32:	4603      	mov	r3, r0
 8009e34:	ee00 3a10 	vmov	s0, r3
 8009e38:	f001 f9a6 	bl	800b188 <arm_sin_f32>
 8009e3c:	eeb0 7a40 	vmov.f32	s14, s0
 8009e40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e48:	ee17 0a90 	vmov	r0, s15
 8009e4c:	f7f6 fbbc 	bl	80005c8 <__aeabi_f2d>
 8009e50:	a385      	add	r3, pc, #532	; (adr r3, 800a068 <main+0x270>)
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	f7f6 fc0f 	bl	8000678 <__aeabi_dmul>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	4618      	mov	r0, r3
 8009e60:	4621      	mov	r1, r4
 8009e62:	f7f6 fe1b 	bl	8000a9c <__aeabi_d2uiz>
 8009e66:	4603      	mov	r3, r0
 8009e68:	b299      	uxth	r1, r3
 8009e6a:	4a84      	ldr	r2, [pc, #528]	; (800a07c <main+0x284>)
 8009e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < LOOKUP_LEN; i++) {
 8009e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e74:	3301      	adds	r3, #1
 8009e76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e7a:	2bb3      	cmp	r3, #179	; 0xb3
 8009e7c:	ddc2      	ble.n	8009e04 <main+0xc>
	}
	for (int i = 0; i < LOOKUP_LEN; i++) {
 8009e7e:	2300      	movs	r3, #0
 8009e80:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e82:	e039      	b.n	8009ef8 <main+0x100>
		sin_lookup_E6[i] = (MAX_12 * 0.6 * (arm_sin_f32(6.283 * i / 36) + 1));
 8009e84:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009e86:	f7f6 fb8d 	bl	80005a4 <__aeabi_i2d>
 8009e8a:	a379      	add	r3, pc, #484	; (adr r3, 800a070 <main+0x278>)
 8009e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e90:	f7f6 fbf2 	bl	8000678 <__aeabi_dmul>
 8009e94:	4603      	mov	r3, r0
 8009e96:	460c      	mov	r4, r1
 8009e98:	4618      	mov	r0, r3
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	f04f 0200 	mov.w	r2, #0
 8009ea0:	4b77      	ldr	r3, [pc, #476]	; (800a080 <main+0x288>)
 8009ea2:	f7f6 fd13 	bl	80008cc <__aeabi_ddiv>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	460c      	mov	r4, r1
 8009eaa:	4618      	mov	r0, r3
 8009eac:	4621      	mov	r1, r4
 8009eae:	f7f6 fe15 	bl	8000adc <__aeabi_d2f>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	ee00 3a10 	vmov	s0, r3
 8009eb8:	f001 f966 	bl	800b188 <arm_sin_f32>
 8009ebc:	eeb0 7a40 	vmov.f32	s14, s0
 8009ec0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ec8:	ee17 0a90 	vmov	r0, s15
 8009ecc:	f7f6 fb7c 	bl	80005c8 <__aeabi_f2d>
 8009ed0:	a365      	add	r3, pc, #404	; (adr r3, 800a068 <main+0x270>)
 8009ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed6:	f7f6 fbcf 	bl	8000678 <__aeabi_dmul>
 8009eda:	4603      	mov	r3, r0
 8009edc:	460c      	mov	r4, r1
 8009ede:	4618      	mov	r0, r3
 8009ee0:	4621      	mov	r1, r4
 8009ee2:	f7f6 fddb 	bl	8000a9c <__aeabi_d2uiz>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	b299      	uxth	r1, r3
 8009eea:	4a66      	ldr	r2, [pc, #408]	; (800a084 <main+0x28c>)
 8009eec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009eee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < LOOKUP_LEN; i++) {
 8009ef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ef8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009efa:	2bb3      	cmp	r3, #179	; 0xb3
 8009efc:	ddc2      	ble.n	8009e84 <main+0x8c>
	}
	for (int i = 0; i < LOOKUP_LEN; i++) {
 8009efe:	2300      	movs	r3, #0
 8009f00:	667b      	str	r3, [r7, #100]	; 0x64
 8009f02:	e039      	b.n	8009f78 <main+0x180>
		sin_lookup_G6[i] = (MAX_12 * 0.6 * (arm_sin_f32(6.283 * i / 30) + 1));
 8009f04:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009f06:	f7f6 fb4d 	bl	80005a4 <__aeabi_i2d>
 8009f0a:	a359      	add	r3, pc, #356	; (adr r3, 800a070 <main+0x278>)
 8009f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f10:	f7f6 fbb2 	bl	8000678 <__aeabi_dmul>
 8009f14:	4603      	mov	r3, r0
 8009f16:	460c      	mov	r4, r1
 8009f18:	4618      	mov	r0, r3
 8009f1a:	4621      	mov	r1, r4
 8009f1c:	f04f 0200 	mov.w	r2, #0
 8009f20:	4b59      	ldr	r3, [pc, #356]	; (800a088 <main+0x290>)
 8009f22:	f7f6 fcd3 	bl	80008cc <__aeabi_ddiv>
 8009f26:	4603      	mov	r3, r0
 8009f28:	460c      	mov	r4, r1
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	f7f6 fdd5 	bl	8000adc <__aeabi_d2f>
 8009f32:	4603      	mov	r3, r0
 8009f34:	ee00 3a10 	vmov	s0, r3
 8009f38:	f001 f926 	bl	800b188 <arm_sin_f32>
 8009f3c:	eeb0 7a40 	vmov.f32	s14, s0
 8009f40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f48:	ee17 0a90 	vmov	r0, s15
 8009f4c:	f7f6 fb3c 	bl	80005c8 <__aeabi_f2d>
 8009f50:	a345      	add	r3, pc, #276	; (adr r3, 800a068 <main+0x270>)
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	f7f6 fb8f 	bl	8000678 <__aeabi_dmul>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	4618      	mov	r0, r3
 8009f60:	4621      	mov	r1, r4
 8009f62:	f7f6 fd9b 	bl	8000a9c <__aeabi_d2uiz>
 8009f66:	4603      	mov	r3, r0
 8009f68:	b299      	uxth	r1, r3
 8009f6a:	4a48      	ldr	r2, [pc, #288]	; (800a08c <main+0x294>)
 8009f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < LOOKUP_LEN; i++) {
 8009f72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f74:	3301      	adds	r3, #1
 8009f76:	667b      	str	r3, [r7, #100]	; 0x64
 8009f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f7a:	2bb3      	cmp	r3, #179	; 0xb3
 8009f7c:	ddc2      	ble.n	8009f04 <main+0x10c>
	}
	memset(sin_lookup_chord, 0, sizeof(sin_lookup_chord));
 8009f7e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8009f82:	2100      	movs	r1, #0
 8009f84:	4842      	ldr	r0, [pc, #264]	; (800a090 <main+0x298>)
 8009f86:	f001 f97a 	bl	800b27e <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009f8a:	f7f6 ff77 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009f8e:	f000 f895 	bl	800a0bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009f92:	f000 fa43 	bl	800a41c <MX_GPIO_Init>
  MX_DMA_Init();
 8009f96:	f000 fa17 	bl	800a3c8 <MX_DMA_Init>
  MX_I2C2_Init();
 8009f9a:	f000 f93b 	bl	800a214 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8009f9e:	f000 f9c7 	bl	800a330 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8009fa2:	f000 f977 	bl	800a294 <MX_TIM2_Init>
  MX_DAC1_Init();
 8009fa6:	f000 f901 	bl	800a1ac <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
	// Initialize individual sensors
	BSP_GYRO_Init();
 8009faa:	f000 fdb1 	bl	800ab10 <BSP_GYRO_Init>
	BSP_TSENSOR_Init();
 8009fae:	f000 fe37 	bl	800ac20 <BSP_TSENSOR_Init>
	BSP_PSENSOR_Init();
 8009fb2:	f000 fe07 	bl	800abc4 <BSP_PSENSOR_Init>
	// Initialize Sound Effect Player
	HAL_TIM_Base_Start(&htim2);
 8009fb6:	4837      	ldr	r0, [pc, #220]	; (800a094 <main+0x29c>)
 8009fb8:	f7fa fc72 	bl	80048a0 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of dataMutex */
  osMutexDef(dataMutex);
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	663b      	str	r3, [r7, #96]	; 0x60
  dataMutexHandle = osMutexCreate(osMutex(dataMutex));
 8009fc4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fc f931 	bl	8006230 <osMutexCreate>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	4b31      	ldr	r3, [pc, #196]	; (800a098 <main+0x2a0>)
 8009fd2:	601a      	str	r2, [r3, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of SoundEffectTimer */
  osTimerDef(SoundEffectTimer, CallbackSoundEffectTimer);
 8009fd4:	4b31      	ldr	r3, [pc, #196]	; (800a09c <main+0x2a4>)
 8009fd6:	657b      	str	r3, [r7, #84]	; 0x54
 8009fd8:	2300      	movs	r3, #0
 8009fda:	65bb      	str	r3, [r7, #88]	; 0x58
  SoundEffectTimerHandle = osTimerCreate(osTimer(SoundEffectTimer), osTimerPeriodic, NULL);
 8009fdc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7fb ffe1 	bl	8005fac <osTimerCreate>
 8009fea:	4602      	mov	r2, r0
 8009fec:	4b2c      	ldr	r3, [pc, #176]	; (800a0a0 <main+0x2a8>)
 8009fee:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of measure */
  osThreadDef(measure, StartMeasureTask, osPriorityNormal, 0, 256);
 8009ff0:	4b2c      	ldr	r3, [pc, #176]	; (800a0a4 <main+0x2ac>)
 8009ff2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8009ff6:	461d      	mov	r5, r3
 8009ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ffc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a000:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  measureHandle = osThreadCreate(osThread(measure), NULL);
 800a004:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a008:	2100      	movs	r1, #0
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fb ff6d 	bl	8005eea <osThreadCreate>
 800a010:	4602      	mov	r2, r0
 800a012:	4b25      	ldr	r3, [pc, #148]	; (800a0a8 <main+0x2b0>)
 800a014:	601a      	str	r2, [r3, #0]

  /* definition and creation of transmit */
  osThreadDef(transmit, StartTransmitTask, osPriorityIdle, 0, 128);
 800a016:	4b25      	ldr	r3, [pc, #148]	; (800a0ac <main+0x2b4>)
 800a018:	f107 041c 	add.w	r4, r7, #28
 800a01c:	461d      	mov	r5, r3
 800a01e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a022:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a026:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitHandle = osThreadCreate(osThread(transmit), NULL);
 800a02a:	f107 031c 	add.w	r3, r7, #28
 800a02e:	2100      	movs	r1, #0
 800a030:	4618      	mov	r0, r3
 800a032:	f7fb ff5a 	bl	8005eea <osThreadCreate>
 800a036:	4602      	mov	r2, r0
 800a038:	4b1d      	ldr	r3, [pc, #116]	; (800a0b0 <main+0x2b8>)
 800a03a:	601a      	str	r2, [r3, #0]

  /* definition and creation of listen */
  osThreadDef(listen, StartListenTask, osPriorityIdle, 0, 128);
 800a03c:	4b1d      	ldr	r3, [pc, #116]	; (800a0b4 <main+0x2bc>)
 800a03e:	463c      	mov	r4, r7
 800a040:	461d      	mov	r5, r3
 800a042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a046:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a04a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  listenHandle = osThreadCreate(osThread(listen), NULL);
 800a04e:	463b      	mov	r3, r7
 800a050:	2100      	movs	r1, #0
 800a052:	4618      	mov	r0, r3
 800a054:	f7fb ff49 	bl	8005eea <osThreadCreate>
 800a058:	4602      	mov	r2, r0
 800a05a:	4b17      	ldr	r3, [pc, #92]	; (800a0b8 <main+0x2c0>)
 800a05c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800a05e:	f7fb ff3d 	bl	8005edc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800a062:	e7fe      	b.n	800a062 <main+0x26a>
 800a064:	f3af 8000 	nop.w
 800a068:	00000000 	.word	0x00000000
 800a06c:	40a33200 	.word	0x40a33200
 800a070:	c083126f 	.word	0xc083126f
 800a074:	401921ca 	.word	0x401921ca
 800a078:	40468000 	.word	0x40468000
 800a07c:	2000197c 	.word	0x2000197c
 800a080:	40420000 	.word	0x40420000
 800a084:	20001ca0 	.word	0x20001ca0
 800a088:	403e0000 	.word	0x403e0000
 800a08c:	200016d4 	.word	0x200016d4
 800a090:	20001ae8 	.word	0x20001ae8
 800a094:	20001c54 	.word	0x20001c54
 800a098:	20001978 	.word	0x20001978
 800a09c:	0800a779 	.word	0x0800a779
 800a0a0:	20001ae4 	.word	0x20001ae4
 800a0a4:	0800bad4 	.word	0x0800bad4
 800a0a8:	20001c50 	.word	0x20001c50
 800a0ac:	0800bafc 	.word	0x0800bafc
 800a0b0:	20001850 	.word	0x20001850
 800a0b4:	0800bb20 	.word	0x0800bb20
 800a0b8:	20001e08 	.word	0x20001e08

0800a0bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b0bc      	sub	sp, #240	; 0xf0
 800a0c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a0c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a0c6:	2244      	movs	r2, #68	; 0x44
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f001 f8d7 	bl	800b27e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a0d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	601a      	str	r2, [r3, #0]
 800a0d8:	605a      	str	r2, [r3, #4]
 800a0da:	609a      	str	r2, [r3, #8]
 800a0dc:	60da      	str	r2, [r3, #12]
 800a0de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a0e0:	1d3b      	adds	r3, r7, #4
 800a0e2:	2294      	movs	r2, #148	; 0x94
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f001 f8c9 	bl	800b27e <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	f7f8 fecb 	bl	8002e88 <HAL_PWREx_ControlVoltageScaling>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d001      	beq.n	800a0fc <SystemClock_Config+0x40>
  {
    Error_Handler();
 800a0f8:	f000 fbb6 	bl	800a868 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800a0fc:	2310      	movs	r3, #16
 800a0fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800a102:	2301      	movs	r3, #1
 800a104:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800a108:	2300      	movs	r3, #0
 800a10a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800a10e:	2360      	movs	r3, #96	; 0x60
 800a110:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a114:	2302      	movs	r3, #2
 800a116:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800a11a:	2301      	movs	r3, #1
 800a11c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800a120:	2301      	movs	r3, #1
 800a122:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 800a126:	233c      	movs	r3, #60	; 0x3c
 800a128:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a12c:	2302      	movs	r3, #2
 800a12e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a132:	2302      	movs	r3, #2
 800a134:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a138:	2302      	movs	r3, #2
 800a13a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a13e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a142:	4618      	mov	r0, r3
 800a144:	f7f8 ff44 	bl	8002fd0 <HAL_RCC_OscConfig>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d001      	beq.n	800a152 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800a14e:	f000 fb8b 	bl	800a868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a152:	230f      	movs	r3, #15
 800a154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a158:	2303      	movs	r3, #3
 800a15a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a15e:	2300      	movs	r3, #0
 800a160:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a164:	2300      	movs	r3, #0
 800a166:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a16a:	2300      	movs	r3, #0
 800a16c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a170:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a174:	2105      	movs	r1, #5
 800a176:	4618      	mov	r0, r3
 800a178:	f7f9 fb50 	bl	800381c <HAL_RCC_ClockConfig>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800a182:	f000 fb71 	bl	800a868 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 800a186:	2381      	movs	r3, #129	; 0x81
 800a188:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a18a:	2300      	movs	r3, #0
 800a18c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800a18e:	2300      	movs	r3, #0
 800a190:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a192:	1d3b      	adds	r3, r7, #4
 800a194:	4618      	mov	r0, r3
 800a196:	f7f9 fe23 	bl	8003de0 <HAL_RCCEx_PeriphCLKConfig>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d001      	beq.n	800a1a4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800a1a0:	f000 fb62 	bl	800a868 <Error_Handler>
  }
}
 800a1a4:	bf00      	nop
 800a1a6:	37f0      	adds	r7, #240	; 0xf0
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08a      	sub	sp, #40	; 0x28
 800a1b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800a1b2:	463b      	mov	r3, r7
 800a1b4:	2228      	movs	r2, #40	; 0x28
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f001 f860 	bl	800b27e <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800a1be:	4b13      	ldr	r3, [pc, #76]	; (800a20c <MX_DAC1_Init+0x60>)
 800a1c0:	4a13      	ldr	r2, [pc, #76]	; (800a210 <MX_DAC1_Init+0x64>)
 800a1c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800a1c4:	4811      	ldr	r0, [pc, #68]	; (800a20c <MX_DAC1_Init+0x60>)
 800a1c6:	f7f6 ff95 	bl	80010f4 <HAL_DAC_Init>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d001      	beq.n	800a1d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800a1d0:	f000 fb4a 	bl	800a868 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800a1d8:	230a      	movs	r3, #10
 800a1da:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800a1ec:	463b      	mov	r3, r7
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	4806      	ldr	r0, [pc, #24]	; (800a20c <MX_DAC1_Init+0x60>)
 800a1f4:	f7f7 f926 	bl	8001444 <HAL_DAC_ConfigChannel>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800a1fe:	f000 fb33 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800a202:	bf00      	nop
 800a204:	3728      	adds	r7, #40	; 0x28
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	20001614 	.word	0x20001614
 800a210:	40007400 	.word	0x40007400

0800a214 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a218:	4b1b      	ldr	r3, [pc, #108]	; (800a288 <MX_I2C2_Init+0x74>)
 800a21a:	4a1c      	ldr	r2, [pc, #112]	; (800a28c <MX_I2C2_Init+0x78>)
 800a21c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800a21e:	4b1a      	ldr	r3, [pc, #104]	; (800a288 <MX_I2C2_Init+0x74>)
 800a220:	4a1b      	ldr	r2, [pc, #108]	; (800a290 <MX_I2C2_Init+0x7c>)
 800a222:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800a224:	4b18      	ldr	r3, [pc, #96]	; (800a288 <MX_I2C2_Init+0x74>)
 800a226:	2200      	movs	r2, #0
 800a228:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a22a:	4b17      	ldr	r3, [pc, #92]	; (800a288 <MX_I2C2_Init+0x74>)
 800a22c:	2201      	movs	r2, #1
 800a22e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a230:	4b15      	ldr	r3, [pc, #84]	; (800a288 <MX_I2C2_Init+0x74>)
 800a232:	2200      	movs	r2, #0
 800a234:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800a236:	4b14      	ldr	r3, [pc, #80]	; (800a288 <MX_I2C2_Init+0x74>)
 800a238:	2200      	movs	r2, #0
 800a23a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a23c:	4b12      	ldr	r3, [pc, #72]	; (800a288 <MX_I2C2_Init+0x74>)
 800a23e:	2200      	movs	r2, #0
 800a240:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a242:	4b11      	ldr	r3, [pc, #68]	; (800a288 <MX_I2C2_Init+0x74>)
 800a244:	2200      	movs	r2, #0
 800a246:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a248:	4b0f      	ldr	r3, [pc, #60]	; (800a288 <MX_I2C2_Init+0x74>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a24e:	480e      	ldr	r0, [pc, #56]	; (800a288 <MX_I2C2_Init+0x74>)
 800a250:	f7f8 f859 	bl	8002306 <HAL_I2C_Init>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d001      	beq.n	800a25e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800a25a:	f000 fb05 	bl	800a868 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a25e:	2100      	movs	r1, #0
 800a260:	4809      	ldr	r0, [pc, #36]	; (800a288 <MX_I2C2_Init+0x74>)
 800a262:	f7f8 fd59 	bl	8002d18 <HAL_I2CEx_ConfigAnalogFilter>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800a26c:	f000 fafc 	bl	800a868 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a270:	2100      	movs	r1, #0
 800a272:	4805      	ldr	r0, [pc, #20]	; (800a288 <MX_I2C2_Init+0x74>)
 800a274:	f7f8 fd9b 	bl	8002dae <HAL_I2CEx_ConfigDigitalFilter>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800a27e:	f000 faf3 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a282:	bf00      	nop
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	20001628 	.word	0x20001628
 800a28c:	40005800 	.word	0x40005800
 800a290:	307075b1 	.word	0x307075b1

0800a294 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b088      	sub	sp, #32
 800a298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a29a:	f107 0310 	add.w	r3, r7, #16
 800a29e:	2200      	movs	r2, #0
 800a2a0:	601a      	str	r2, [r3, #0]
 800a2a2:	605a      	str	r2, [r3, #4]
 800a2a4:	609a      	str	r2, [r3, #8]
 800a2a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a2a8:	1d3b      	adds	r3, r7, #4
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	601a      	str	r2, [r3, #0]
 800a2ae:	605a      	str	r2, [r3, #4]
 800a2b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a2b2:	4b1e      	ldr	r3, [pc, #120]	; (800a32c <MX_TIM2_Init+0x98>)
 800a2b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a2b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a2ba:	4b1c      	ldr	r3, [pc, #112]	; (800a32c <MX_TIM2_Init+0x98>)
 800a2bc:	2200      	movs	r2, #0
 800a2be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a2c0:	4b1a      	ldr	r3, [pc, #104]	; (800a32c <MX_TIM2_Init+0x98>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2500;
 800a2c6:	4b19      	ldr	r3, [pc, #100]	; (800a32c <MX_TIM2_Init+0x98>)
 800a2c8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a2cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a2ce:	4b17      	ldr	r3, [pc, #92]	; (800a32c <MX_TIM2_Init+0x98>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a2d4:	4b15      	ldr	r3, [pc, #84]	; (800a32c <MX_TIM2_Init+0x98>)
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a2da:	4814      	ldr	r0, [pc, #80]	; (800a32c <MX_TIM2_Init+0x98>)
 800a2dc:	f7fa fa88 	bl	80047f0 <HAL_TIM_Base_Init>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800a2e6:	f000 fabf 	bl	800a868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a2ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a2f0:	f107 0310 	add.w	r3, r7, #16
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	480d      	ldr	r0, [pc, #52]	; (800a32c <MX_TIM2_Init+0x98>)
 800a2f8:	f7fa fcc9 	bl	8004c8e <HAL_TIM_ConfigClockSource>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d001      	beq.n	800a306 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800a302:	f000 fab1 	bl	800a868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a306:	2320      	movs	r3, #32
 800a308:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a30a:	2300      	movs	r3, #0
 800a30c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a30e:	1d3b      	adds	r3, r7, #4
 800a310:	4619      	mov	r1, r3
 800a312:	4806      	ldr	r0, [pc, #24]	; (800a32c <MX_TIM2_Init+0x98>)
 800a314:	f7fa fed0 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800a31e:	f000 faa3 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a322:	bf00      	nop
 800a324:	3720      	adds	r7, #32
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	20001c54 	.word	0x20001c54

0800a330 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a334:	4b22      	ldr	r3, [pc, #136]	; (800a3c0 <MX_USART1_UART_Init+0x90>)
 800a336:	4a23      	ldr	r2, [pc, #140]	; (800a3c4 <MX_USART1_UART_Init+0x94>)
 800a338:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a33a:	4b21      	ldr	r3, [pc, #132]	; (800a3c0 <MX_USART1_UART_Init+0x90>)
 800a33c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a340:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a342:	4b1f      	ldr	r3, [pc, #124]	; (800a3c0 <MX_USART1_UART_Init+0x90>)
 800a344:	2200      	movs	r2, #0
 800a346:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a348:	4b1d      	ldr	r3, [pc, #116]	; (800a3c0 <MX_USART1_UART_Init+0x90>)
 800a34a:	2200      	movs	r2, #0
 800a34c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a34e:	4b1c      	ldr	r3, [pc, #112]	; (800a3c0 <MX_USART1_UART_Init+0x90>)
 800a350:	2200      	movs	r2, #0
 800a352:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a354:	4b1a      	ldr	r3, [pc, #104]	; (800a3c0 <MX_USART1_UART_Init+0x90>)
 800a356:	220c      	movs	r2, #12
 800a358:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a35a:	4b19      	ldr	r3, [pc, #100]	; (800a3c0 <MX_USART1_UART_Init+0x90>)
 800a35c:	2200      	movs	r2, #0
 800a35e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a360:	4b17      	ldr	r3, [pc, #92]	; (800a3c0 <MX_USART1_UART_Init+0x90>)
 800a362:	2200      	movs	r2, #0
 800a364:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a366:	4b16      	ldr	r3, [pc, #88]	; (800a3c0 <MX_USART1_UART_Init+0x90>)
 800a368:	2200      	movs	r2, #0
 800a36a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a36c:	4b14      	ldr	r3, [pc, #80]	; (800a3c0 <MX_USART1_UART_Init+0x90>)
 800a36e:	2200      	movs	r2, #0
 800a370:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a372:	4b13      	ldr	r3, [pc, #76]	; (800a3c0 <MX_USART1_UART_Init+0x90>)
 800a374:	2200      	movs	r2, #0
 800a376:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a378:	4811      	ldr	r0, [pc, #68]	; (800a3c0 <MX_USART1_UART_Init+0x90>)
 800a37a:	f7fa ff43 	bl	8005204 <HAL_UART_Init>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d001      	beq.n	800a388 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800a384:	f000 fa70 	bl	800a868 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a388:	2100      	movs	r1, #0
 800a38a:	480d      	ldr	r0, [pc, #52]	; (800a3c0 <MX_USART1_UART_Init+0x90>)
 800a38c:	f7fb fc97 	bl	8005cbe <HAL_UARTEx_SetTxFifoThreshold>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d001      	beq.n	800a39a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800a396:	f000 fa67 	bl	800a868 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a39a:	2100      	movs	r1, #0
 800a39c:	4808      	ldr	r0, [pc, #32]	; (800a3c0 <MX_USART1_UART_Init+0x90>)
 800a39e:	f7fb fccc 	bl	8005d3a <HAL_UARTEx_SetRxFifoThreshold>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d001      	beq.n	800a3ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800a3a8:	f000 fa5e 	bl	800a868 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800a3ac:	4804      	ldr	r0, [pc, #16]	; (800a3c0 <MX_USART1_UART_Init+0x90>)
 800a3ae:	f7fb fc4d 	bl	8005c4c <HAL_UARTEx_DisableFifoMode>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d001      	beq.n	800a3bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800a3b8:	f000 fa56 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a3bc:	bf00      	nop
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	20001854 	.word	0x20001854
 800a3c4:	40013800 	.word	0x40013800

0800a3c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800a3ce:	4b12      	ldr	r3, [pc, #72]	; (800a418 <MX_DMA_Init+0x50>)
 800a3d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3d2:	4a11      	ldr	r2, [pc, #68]	; (800a418 <MX_DMA_Init+0x50>)
 800a3d4:	f043 0304 	orr.w	r3, r3, #4
 800a3d8:	6493      	str	r3, [r2, #72]	; 0x48
 800a3da:	4b0f      	ldr	r3, [pc, #60]	; (800a418 <MX_DMA_Init+0x50>)
 800a3dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3de:	f003 0304 	and.w	r3, r3, #4
 800a3e2:	607b      	str	r3, [r7, #4]
 800a3e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a3e6:	4b0c      	ldr	r3, [pc, #48]	; (800a418 <MX_DMA_Init+0x50>)
 800a3e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3ea:	4a0b      	ldr	r2, [pc, #44]	; (800a418 <MX_DMA_Init+0x50>)
 800a3ec:	f043 0301 	orr.w	r3, r3, #1
 800a3f0:	6493      	str	r3, [r2, #72]	; 0x48
 800a3f2:	4b09      	ldr	r3, [pc, #36]	; (800a418 <MX_DMA_Init+0x50>)
 800a3f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3f6:	f003 0301 	and.w	r3, r3, #1
 800a3fa:	603b      	str	r3, [r7, #0]
 800a3fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800a3fe:	2200      	movs	r2, #0
 800a400:	2105      	movs	r1, #5
 800a402:	200b      	movs	r0, #11
 800a404:	f7f6 fe4c 	bl	80010a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a408:	200b      	movs	r0, #11
 800a40a:	f7f6 fe65 	bl	80010d8 <HAL_NVIC_EnableIRQ>

}
 800a40e:	bf00      	nop
 800a410:	3708      	adds	r7, #8
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	40021000 	.word	0x40021000

0800a41c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b08a      	sub	sp, #40	; 0x28
 800a420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a422:	f107 0314 	add.w	r3, r7, #20
 800a426:	2200      	movs	r2, #0
 800a428:	601a      	str	r2, [r3, #0]
 800a42a:	605a      	str	r2, [r3, #4]
 800a42c:	609a      	str	r2, [r3, #8]
 800a42e:	60da      	str	r2, [r3, #12]
 800a430:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a432:	4b38      	ldr	r3, [pc, #224]	; (800a514 <MX_GPIO_Init+0xf8>)
 800a434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a436:	4a37      	ldr	r2, [pc, #220]	; (800a514 <MX_GPIO_Init+0xf8>)
 800a438:	f043 0310 	orr.w	r3, r3, #16
 800a43c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a43e:	4b35      	ldr	r3, [pc, #212]	; (800a514 <MX_GPIO_Init+0xf8>)
 800a440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a442:	f003 0310 	and.w	r3, r3, #16
 800a446:	613b      	str	r3, [r7, #16]
 800a448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a44a:	4b32      	ldr	r3, [pc, #200]	; (800a514 <MX_GPIO_Init+0xf8>)
 800a44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a44e:	4a31      	ldr	r2, [pc, #196]	; (800a514 <MX_GPIO_Init+0xf8>)
 800a450:	f043 0304 	orr.w	r3, r3, #4
 800a454:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a456:	4b2f      	ldr	r3, [pc, #188]	; (800a514 <MX_GPIO_Init+0xf8>)
 800a458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a45a:	f003 0304 	and.w	r3, r3, #4
 800a45e:	60fb      	str	r3, [r7, #12]
 800a460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a462:	4b2c      	ldr	r3, [pc, #176]	; (800a514 <MX_GPIO_Init+0xf8>)
 800a464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a466:	4a2b      	ldr	r2, [pc, #172]	; (800a514 <MX_GPIO_Init+0xf8>)
 800a468:	f043 0301 	orr.w	r3, r3, #1
 800a46c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a46e:	4b29      	ldr	r3, [pc, #164]	; (800a514 <MX_GPIO_Init+0xf8>)
 800a470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a472:	f003 0301 	and.w	r3, r3, #1
 800a476:	60bb      	str	r3, [r7, #8]
 800a478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a47a:	4b26      	ldr	r3, [pc, #152]	; (800a514 <MX_GPIO_Init+0xf8>)
 800a47c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a47e:	4a25      	ldr	r2, [pc, #148]	; (800a514 <MX_GPIO_Init+0xf8>)
 800a480:	f043 0302 	orr.w	r3, r3, #2
 800a484:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a486:	4b23      	ldr	r3, [pc, #140]	; (800a514 <MX_GPIO_Init+0xf8>)
 800a488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a48a:	f003 0302 	and.w	r3, r3, #2
 800a48e:	607b      	str	r3, [r7, #4]
 800a490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800a492:	2200      	movs	r2, #0
 800a494:	2108      	movs	r1, #8
 800a496:	4820      	ldr	r0, [pc, #128]	; (800a518 <MX_GPIO_Init+0xfc>)
 800a498:	f7f7 fefa 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800a49c:	2200      	movs	r2, #0
 800a49e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a4a2:	481e      	ldr	r0, [pc, #120]	; (800a51c <MX_GPIO_Init+0x100>)
 800a4a4:	f7f7 fef4 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 800a4a8:	2308      	movs	r3, #8
 800a4aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800a4b8:	f107 0314 	add.w	r3, r7, #20
 800a4bc:	4619      	mov	r1, r3
 800a4be:	4816      	ldr	r0, [pc, #88]	; (800a518 <MX_GPIO_Init+0xfc>)
 800a4c0:	f7f7 fc62 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800a4c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a4c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a4ca:	4b15      	ldr	r3, [pc, #84]	; (800a520 <MX_GPIO_Init+0x104>)
 800a4cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800a4d2:	f107 0314 	add.w	r3, r7, #20
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	4812      	ldr	r0, [pc, #72]	; (800a524 <MX_GPIO_Init+0x108>)
 800a4da:	f7f7 fc55 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800a4de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a4e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800a4f0:	f107 0314 	add.w	r3, r7, #20
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	4809      	ldr	r0, [pc, #36]	; (800a51c <MX_GPIO_Init+0x100>)
 800a4f8:	f7f7 fc46 	bl	8001d88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	2105      	movs	r1, #5
 800a500:	2028      	movs	r0, #40	; 0x28
 800a502:	f7f6 fdcd 	bl	80010a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a506:	2028      	movs	r0, #40	; 0x28
 800a508:	f7f6 fde6 	bl	80010d8 <HAL_NVIC_EnableIRQ>

}
 800a50c:	bf00      	nop
 800a50e:	3728      	adds	r7, #40	; 0x28
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	40021000 	.word	0x40021000
 800a518:	48001000 	.word	0x48001000
 800a51c:	48000400 	.word	0x48000400
 800a520:	10110000 	.word	0x10110000
 800a524:	48000800 	.word	0x48000800

0800a528 <StartMeasureTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMeasureTask */
void StartMeasureTask(void const * argument)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b086      	sub	sp, #24
 800a52c:	af04      	add	r7, sp, #16
 800a52e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(50);
 800a530:	2032      	movs	r0, #50	; 0x32
 800a532:	f7fb fd26 	bl	8005f82 <osDelay>

		osMutexWait(dataMutexHandle, osWaitForever);
 800a536:	4b53      	ldr	r3, [pc, #332]	; (800a684 <StartMeasureTask+0x15c>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f04f 31ff 	mov.w	r1, #4294967295
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fb fe8e 	bl	8006260 <osMutexWait>

		memset(buffer, 0, strlen(buffer));
 800a544:	4850      	ldr	r0, [pc, #320]	; (800a688 <StartMeasureTask+0x160>)
 800a546:	f7f5 fe83 	bl	8000250 <strlen>
 800a54a:	4603      	mov	r3, r0
 800a54c:	461a      	mov	r2, r3
 800a54e:	2100      	movs	r1, #0
 800a550:	484d      	ldr	r0, [pc, #308]	; (800a688 <StartMeasureTask+0x160>)
 800a552:	f000 fe94 	bl	800b27e <memset>
		BSP_GYRO_GetXYZ(gyro); // unit:mdps
 800a556:	484d      	ldr	r0, [pc, #308]	; (800a68c <StartMeasureTask+0x164>)
 800a558:	f000 fb1c 	bl	800ab94 <BSP_GYRO_GetXYZ>
		pressure = BSP_PSENSOR_ReadPressure();
 800a55c:	f000 fb52 	bl	800ac04 <BSP_PSENSOR_ReadPressure>
 800a560:	eef0 7a40 	vmov.f32	s15, s0
 800a564:	4b4a      	ldr	r3, [pc, #296]	; (800a690 <StartMeasureTask+0x168>)
 800a566:	edc3 7a00 	vstr	s15, [r3]
		temperature = kalmanFilterA(&ksTemp, BSP_TSENSOR_ReadTemp());
 800a56a:	f000 fb75 	bl	800ac58 <BSP_TSENSOR_ReadTemp>
 800a56e:	eef0 7a40 	vmov.f32	s15, s0
 800a572:	eeb0 0a67 	vmov.f32	s0, s15
 800a576:	4847      	ldr	r0, [pc, #284]	; (800a694 <StartMeasureTask+0x16c>)
 800a578:	f7f5 fe42 	bl	8000200 <kalmanFilterA>
 800a57c:	eef0 7a40 	vmov.f32	s15, s0
 800a580:	4b45      	ldr	r3, [pc, #276]	; (800a698 <StartMeasureTask+0x170>)
 800a582:	edc3 7a00 	vstr	s15, [r3]
		work = kalmanFilterA(&ksWork, gyro2work (gyro));
 800a586:	4841      	ldr	r0, [pc, #260]	; (800a68c <StartMeasureTask+0x164>)
 800a588:	f7ff fbd0 	bl	8009d2c <gyro2work>
 800a58c:	eef0 7a40 	vmov.f32	s15, s0
 800a590:	eeb0 0a67 	vmov.f32	s0, s15
 800a594:	4841      	ldr	r0, [pc, #260]	; (800a69c <StartMeasureTask+0x174>)
 800a596:	f7f5 fe33 	bl	8000200 <kalmanFilterA>
 800a59a:	eef0 7a40 	vmov.f32	s15, s0
 800a59e:	4b40      	ldr	r3, [pc, #256]	; (800a6a0 <StartMeasureTask+0x178>)
 800a5a0:	edc3 7a00 	vstr	s15, [r3]
		sprintf((char*) buffer,
				"AngAc=[%d, %d, %d]\nP=%d\nT=%d\nW=%d\n",
				(int) (gyro[0]), (int) (gyro[1]), (int) (gyro[2]),
 800a5a4:	4b39      	ldr	r3, [pc, #228]	; (800a68c <StartMeasureTask+0x164>)
 800a5a6:	edd3 7a00 	vldr	s15, [r3]
		sprintf((char*) buffer,
 800a5aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
				(int) (gyro[0]), (int) (gyro[1]), (int) (gyro[2]),
 800a5ae:	4b37      	ldr	r3, [pc, #220]	; (800a68c <StartMeasureTask+0x164>)
 800a5b0:	edd3 7a01 	vldr	s15, [r3, #4]
		sprintf((char*) buffer,
 800a5b4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
				(int) (gyro[0]), (int) (gyro[1]), (int) (gyro[2]),
 800a5b8:	4b34      	ldr	r3, [pc, #208]	; (800a68c <StartMeasureTask+0x164>)
 800a5ba:	edd3 7a02 	vldr	s15, [r3, #8]
		sprintf((char*) buffer,
 800a5be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a5c2:	ee17 2a90 	vmov	r2, s15
 800a5c6:	4b32      	ldr	r3, [pc, #200]	; (800a690 <StartMeasureTask+0x168>)
 800a5c8:	edd3 7a00 	vldr	s15, [r3]
 800a5cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a5d0:	ee17 1a90 	vmov	r1, s15
 800a5d4:	4b30      	ldr	r3, [pc, #192]	; (800a698 <StartMeasureTask+0x170>)
 800a5d6:	edd3 7a00 	vldr	s15, [r3]
 800a5da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a5de:	ee17 0a90 	vmov	r0, s15
 800a5e2:	4b2f      	ldr	r3, [pc, #188]	; (800a6a0 <StartMeasureTask+0x178>)
 800a5e4:	edd3 7a00 	vldr	s15, [r3]
 800a5e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a5ec:	ee17 3a90 	vmov	r3, s15
 800a5f0:	9303      	str	r3, [sp, #12]
 800a5f2:	9002      	str	r0, [sp, #8]
 800a5f4:	9101      	str	r1, [sp, #4]
 800a5f6:	9200      	str	r2, [sp, #0]
 800a5f8:	ee16 3a90 	vmov	r3, s13
 800a5fc:	ee17 2a10 	vmov	r2, s14
 800a600:	4928      	ldr	r1, [pc, #160]	; (800a6a4 <StartMeasureTask+0x17c>)
 800a602:	4821      	ldr	r0, [pc, #132]	; (800a688 <StartMeasureTask+0x160>)
 800a604:	f000 fe44 	bl	800b290 <siprintf>
				(int) pressure, (int) temperature, (int) work);

		if (work>10) {
 800a608:	4b25      	ldr	r3, [pc, #148]	; (800a6a0 <StartMeasureTask+0x178>)
 800a60a:	edd3 7a00 	vldr	s15, [r3]
 800a60e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a612:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a61a:	dd09      	ble.n	800a630 <StartMeasureTask+0x108>
			ringtone = 0;
 800a61c:	4b22      	ldr	r3, [pc, #136]	; (800a6a8 <StartMeasureTask+0x180>)
 800a61e:	2200      	movs	r2, #0
 800a620:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 800a622:	2201      	movs	r2, #1
 800a624:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a628:	4820      	ldr	r0, [pc, #128]	; (800a6ac <StartMeasureTask+0x184>)
 800a62a:	f7f7 fe31 	bl	8002290 <HAL_GPIO_WritePin>
 800a62e:	e008      	b.n	800a642 <StartMeasureTask+0x11a>
		} else {
			ringtone = -1;
 800a630:	4b1d      	ldr	r3, [pc, #116]	; (800a6a8 <StartMeasureTask+0x180>)
 800a632:	22ff      	movs	r2, #255	; 0xff
 800a634:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800a636:	2200      	movs	r2, #0
 800a638:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a63c:	481b      	ldr	r0, [pc, #108]	; (800a6ac <StartMeasureTask+0x184>)
 800a63e:	f7f7 fe27 	bl	8002290 <HAL_GPIO_WritePin>
		}

		if (temperature>35) {
 800a642:	4b15      	ldr	r3, [pc, #84]	; (800a698 <StartMeasureTask+0x170>)
 800a644:	edd3 7a00 	vldr	s15, [r3]
 800a648:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a6b0 <StartMeasureTask+0x188>
 800a64c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a654:	dd05      	ble.n	800a662 <StartMeasureTask+0x13a>
				HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800a656:	2200      	movs	r2, #0
 800a658:	2108      	movs	r1, #8
 800a65a:	4816      	ldr	r0, [pc, #88]	; (800a6b4 <StartMeasureTask+0x18c>)
 800a65c:	f7f7 fe18 	bl	8002290 <HAL_GPIO_WritePin>
 800a660:	e004      	b.n	800a66c <StartMeasureTask+0x144>
			} else {
				HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800a662:	2201      	movs	r2, #1
 800a664:	2108      	movs	r1, #8
 800a666:	4813      	ldr	r0, [pc, #76]	; (800a6b4 <StartMeasureTask+0x18c>)
 800a668:	f7f7 fe12 	bl	8002290 <HAL_GPIO_WritePin>
			}

		osSignalSet(transmitHandle, 0x0001);
 800a66c:	4b12      	ldr	r3, [pc, #72]	; (800a6b8 <StartMeasureTask+0x190>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2101      	movs	r1, #1
 800a672:	4618      	mov	r0, r3
 800a674:	f7fb fd50 	bl	8006118 <osSignalSet>
		osMutexRelease(dataMutexHandle);
 800a678:	4b02      	ldr	r3, [pc, #8]	; (800a684 <StartMeasureTask+0x15c>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7fb fe3d 	bl	80062fc <osMutexRelease>
		osDelay(50);
 800a682:	e755      	b.n	800a530 <StartMeasureTask+0x8>
 800a684:	20001978 	.word	0x20001978
 800a688:	200018e0 	.word	0x200018e0
 800a68c:	20001844 	.word	0x20001844
 800a690:	20001840 	.word	0x20001840
 800a694:	20000060 	.word	0x20000060
 800a698:	2000183c 	.word	0x2000183c
 800a69c:	20000074 	.word	0x20000074
 800a6a0:	20001e0c 	.word	0x20001e0c
 800a6a4:	0800bb3c 	.word	0x0800bb3c
 800a6a8:	2000005c 	.word	0x2000005c
 800a6ac:	48000400 	.word	0x48000400
 800a6b0:	420c0000 	.word	0x420c0000
 800a6b4:	48001000 	.word	0x48001000
 800a6b8:	20001850 	.word	0x20001850

0800a6bc <StartTransmitTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTransmitTask */
void StartTransmitTask(void const * argument)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTransmitTask */
	/* Infinite loop */
	for (;;) {
		osDelay(10);
 800a6c4:	200a      	movs	r0, #10
 800a6c6:	f7fb fc5c 	bl	8005f82 <osDelay>

		osSignalWait(0x0001, osWaitForever);
 800a6ca:	463b      	mov	r3, r7
 800a6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d0:	2101      	movs	r1, #1
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fb fd60 	bl	8006198 <osSignalWait>
		osMutexWait(dataMutexHandle, osWaitForever);
 800a6d8:	4b0b      	ldr	r3, [pc, #44]	; (800a708 <StartTransmitTask+0x4c>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f04f 31ff 	mov.w	r1, #4294967295
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fb fdbd 	bl	8006260 <osMutexWait>

		HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 5);
 800a6e6:	4809      	ldr	r0, [pc, #36]	; (800a70c <StartTransmitTask+0x50>)
 800a6e8:	f7f5 fdb2 	bl	8000250 <strlen>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	2305      	movs	r3, #5
 800a6f2:	4906      	ldr	r1, [pc, #24]	; (800a70c <StartTransmitTask+0x50>)
 800a6f4:	4806      	ldr	r0, [pc, #24]	; (800a710 <StartTransmitTask+0x54>)
 800a6f6:	f7fa fdd5 	bl	80052a4 <HAL_UART_Transmit>

		osMutexRelease(dataMutexHandle);
 800a6fa:	4b03      	ldr	r3, [pc, #12]	; (800a708 <StartTransmitTask+0x4c>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fb fdfc 	bl	80062fc <osMutexRelease>
		osDelay(10);
 800a704:	e7de      	b.n	800a6c4 <StartTransmitTask+0x8>
 800a706:	bf00      	nop
 800a708:	20001978 	.word	0x20001978
 800a70c:	200018e0 	.word	0x200018e0
 800a710:	20001854 	.word	0x20001854

0800a714 <StartListenTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartListenTask */
void StartListenTask(void const * argument)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af02      	add	r7, sp, #8
 800a71a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartListenTask */
	/* Infinite loop */
	for (;;) {
		osDelay(500);
 800a71c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a720:	f7fb fc2f 	bl	8005f82 <osDelay>
		//osSignalWait(0x0002, osWaitForever);
		osMutexWait(dataMutexHandle, osWaitForever);
 800a724:	4b0f      	ldr	r3, [pc, #60]	; (800a764 <StartListenTask+0x50>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f04f 31ff 	mov.w	r1, #4294967295
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7fb fd97 	bl	8006260 <osMutexWait>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sin_lookup_chord, 180,
 800a732:	2300      	movs	r3, #0
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	23b4      	movs	r3, #180	; 0xb4
 800a738:	4a0b      	ldr	r2, [pc, #44]	; (800a768 <StartListenTask+0x54>)
 800a73a:	2100      	movs	r1, #0
 800a73c:	480b      	ldr	r0, [pc, #44]	; (800a76c <StartListenTask+0x58>)
 800a73e:	f7f6 fcfb 	bl	8001138 <HAL_DAC_Start_DMA>
				DAC_ALIGN_12B_R);
		if (ringtone >= 0) {
 800a742:	4b0b      	ldr	r3, [pc, #44]	; (800a770 <StartListenTask+0x5c>)
 800a744:	f993 3000 	ldrsb.w	r3, [r3]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	db05      	blt.n	800a758 <StartListenTask+0x44>
			osTimerStart(SoundEffectTimerHandle, 250);
 800a74c:	4b09      	ldr	r3, [pc, #36]	; (800a774 <StartListenTask+0x60>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	21fa      	movs	r1, #250	; 0xfa
 800a752:	4618      	mov	r0, r3
 800a754:	f7fb fc5e 	bl	8006014 <osTimerStart>
		}

		osMutexRelease(dataMutexHandle);
 800a758:	4b02      	ldr	r3, [pc, #8]	; (800a764 <StartListenTask+0x50>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7fb fdcd 	bl	80062fc <osMutexRelease>
		osDelay(500);
 800a762:	e7db      	b.n	800a71c <StartListenTask+0x8>
 800a764:	20001978 	.word	0x20001978
 800a768:	20001ae8 	.word	0x20001ae8
 800a76c:	20001614 	.word	0x20001614
 800a770:	2000005c 	.word	0x2000005c
 800a774:	20001ae4 	.word	0x20001ae4

0800a778 <CallbackSoundEffectTimer>:
  /* USER CODE END StartListenTask */
}

/* CallbackSoundEffectTimer function */
void CallbackSoundEffectTimer(void const * argument)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackSoundEffectTimer */
	switch (note) {
 800a780:	4b28      	ldr	r3, [pc, #160]	; (800a824 <CallbackSoundEffectTimer+0xac>)
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d013      	beq.n	800a7b0 <CallbackSoundEffectTimer+0x38>
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d021      	beq.n	800a7d0 <CallbackSoundEffectTimer+0x58>
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d12f      	bne.n	800a7f0 <CallbackSoundEffectTimer+0x78>
	case 0:
		memcpy(sin_lookup_chord, sin_lookup_C6, sizeof(sin_lookup_chord));
 800a790:	4a25      	ldr	r2, [pc, #148]	; (800a828 <CallbackSoundEffectTimer+0xb0>)
 800a792:	4b26      	ldr	r3, [pc, #152]	; (800a82c <CallbackSoundEffectTimer+0xb4>)
 800a794:	4610      	mov	r0, r2
 800a796:	4619      	mov	r1, r3
 800a798:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800a79c:	461a      	mov	r2, r3
 800a79e:	f000 fd63 	bl	800b268 <memcpy>
		note += 1;
 800a7a2:	4b20      	ldr	r3, [pc, #128]	; (800a824 <CallbackSoundEffectTimer+0xac>)
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	b2da      	uxtb	r2, r3
 800a7aa:	4b1e      	ldr	r3, [pc, #120]	; (800a824 <CallbackSoundEffectTimer+0xac>)
 800a7ac:	701a      	strb	r2, [r3, #0]
		break;
 800a7ae:	e034      	b.n	800a81a <CallbackSoundEffectTimer+0xa2>
	case 1:
		memcpy(sin_lookup_chord, sin_lookup_E6, sizeof(sin_lookup_chord));
 800a7b0:	4a1d      	ldr	r2, [pc, #116]	; (800a828 <CallbackSoundEffectTimer+0xb0>)
 800a7b2:	4b1f      	ldr	r3, [pc, #124]	; (800a830 <CallbackSoundEffectTimer+0xb8>)
 800a7b4:	4610      	mov	r0, r2
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800a7bc:	461a      	mov	r2, r3
 800a7be:	f000 fd53 	bl	800b268 <memcpy>
		note += 1;
 800a7c2:	4b18      	ldr	r3, [pc, #96]	; (800a824 <CallbackSoundEffectTimer+0xac>)
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	b2da      	uxtb	r2, r3
 800a7ca:	4b16      	ldr	r3, [pc, #88]	; (800a824 <CallbackSoundEffectTimer+0xac>)
 800a7cc:	701a      	strb	r2, [r3, #0]
		break;
 800a7ce:	e024      	b.n	800a81a <CallbackSoundEffectTimer+0xa2>
	case 2:
		memcpy(sin_lookup_chord, sin_lookup_G6, sizeof(sin_lookup_chord));
 800a7d0:	4a15      	ldr	r2, [pc, #84]	; (800a828 <CallbackSoundEffectTimer+0xb0>)
 800a7d2:	4b18      	ldr	r3, [pc, #96]	; (800a834 <CallbackSoundEffectTimer+0xbc>)
 800a7d4:	4610      	mov	r0, r2
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800a7dc:	461a      	mov	r2, r3
 800a7de:	f000 fd43 	bl	800b268 <memcpy>
		note += 1;
 800a7e2:	4b10      	ldr	r3, [pc, #64]	; (800a824 <CallbackSoundEffectTimer+0xac>)
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	b2da      	uxtb	r2, r3
 800a7ea:	4b0e      	ldr	r3, [pc, #56]	; (800a824 <CallbackSoundEffectTimer+0xac>)
 800a7ec:	701a      	strb	r2, [r3, #0]
		break;
 800a7ee:	e014      	b.n	800a81a <CallbackSoundEffectTimer+0xa2>
	default:
		note = ringtone;
 800a7f0:	4b11      	ldr	r3, [pc, #68]	; (800a838 <CallbackSoundEffectTimer+0xc0>)
 800a7f2:	f993 3000 	ldrsb.w	r3, [r3]
 800a7f6:	b2da      	uxtb	r2, r3
 800a7f8:	4b0a      	ldr	r3, [pc, #40]	; (800a824 <CallbackSoundEffectTimer+0xac>)
 800a7fa:	701a      	strb	r2, [r3, #0]
		memset(sin_lookup_chord, 0, sizeof(sin_lookup_chord));
 800a7fc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800a800:	2100      	movs	r1, #0
 800a802:	4809      	ldr	r0, [pc, #36]	; (800a828 <CallbackSoundEffectTimer+0xb0>)
 800a804:	f000 fd3b 	bl	800b27e <memset>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800a808:	2100      	movs	r1, #0
 800a80a:	480c      	ldr	r0, [pc, #48]	; (800a83c <CallbackSoundEffectTimer+0xc4>)
 800a80c:	f7f6 fd52 	bl	80012b4 <HAL_DAC_Stop_DMA>
		osTimerStop(SoundEffectTimerHandle);
 800a810:	4b0b      	ldr	r3, [pc, #44]	; (800a840 <CallbackSoundEffectTimer+0xc8>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4618      	mov	r0, r3
 800a816:	f7fb fc43 	bl	80060a0 <osTimerStop>

	}

  /* USER CODE END CallbackSoundEffectTimer */
}
 800a81a:	bf00      	nop
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	200015b4 	.word	0x200015b4
 800a828:	20001ae8 	.word	0x20001ae8
 800a82c:	2000197c 	.word	0x2000197c
 800a830:	20001ca0 	.word	0x20001ca0
 800a834:	200016d4 	.word	0x200016d4
 800a838:	2000005c 	.word	0x2000005c
 800a83c:	20001614 	.word	0x20001614
 800a840:	20001ae4 	.word	0x20001ae4

0800a844 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a04      	ldr	r2, [pc, #16]	; (800a864 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d101      	bne.n	800a85a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a856:	f7f6 fb29 	bl	8000eac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a85a:	bf00      	nop
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	40001000 	.word	0x40001000

0800a868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a868:	b480      	push	{r7}
 800a86a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a86c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800a86e:	e7fe      	b.n	800a86e <Error_Handler+0x6>

0800a870 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b08a      	sub	sp, #40	; 0x28
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800a878:	4b27      	ldr	r3, [pc, #156]	; (800a918 <I2Cx_MspInit+0xa8>)
 800a87a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a87c:	4a26      	ldr	r2, [pc, #152]	; (800a918 <I2Cx_MspInit+0xa8>)
 800a87e:	f043 0302 	orr.w	r3, r3, #2
 800a882:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a884:	4b24      	ldr	r3, [pc, #144]	; (800a918 <I2Cx_MspInit+0xa8>)
 800a886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a888:	f003 0302 	and.w	r3, r3, #2
 800a88c:	613b      	str	r3, [r7, #16]
 800a88e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800a890:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a894:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800a896:	2312      	movs	r3, #18
 800a898:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800a89a:	2301      	movs	r3, #1
 800a89c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800a8a2:	2304      	movs	r3, #4
 800a8a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800a8a6:	f107 0314 	add.w	r3, r7, #20
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	481b      	ldr	r0, [pc, #108]	; (800a91c <I2Cx_MspInit+0xac>)
 800a8ae:	f7f7 fa6b 	bl	8001d88 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800a8b2:	f107 0314 	add.w	r3, r7, #20
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	4818      	ldr	r0, [pc, #96]	; (800a91c <I2Cx_MspInit+0xac>)
 800a8ba:	f7f7 fa65 	bl	8001d88 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800a8be:	4b16      	ldr	r3, [pc, #88]	; (800a918 <I2Cx_MspInit+0xa8>)
 800a8c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8c2:	4a15      	ldr	r2, [pc, #84]	; (800a918 <I2Cx_MspInit+0xa8>)
 800a8c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a8c8:	6593      	str	r3, [r2, #88]	; 0x58
 800a8ca:	4b13      	ldr	r3, [pc, #76]	; (800a918 <I2Cx_MspInit+0xa8>)
 800a8cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8d2:	60fb      	str	r3, [r7, #12]
 800a8d4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800a8d6:	4b10      	ldr	r3, [pc, #64]	; (800a918 <I2Cx_MspInit+0xa8>)
 800a8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8da:	4a0f      	ldr	r2, [pc, #60]	; (800a918 <I2Cx_MspInit+0xa8>)
 800a8dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a8e0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800a8e2:	4b0d      	ldr	r3, [pc, #52]	; (800a918 <I2Cx_MspInit+0xa8>)
 800a8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e6:	4a0c      	ldr	r2, [pc, #48]	; (800a918 <I2Cx_MspInit+0xa8>)
 800a8e8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a8ec:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	210f      	movs	r1, #15
 800a8f2:	2021      	movs	r0, #33	; 0x21
 800a8f4:	f7f6 fbd4 	bl	80010a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800a8f8:	2021      	movs	r0, #33	; 0x21
 800a8fa:	f7f6 fbed 	bl	80010d8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800a8fe:	2200      	movs	r2, #0
 800a900:	210f      	movs	r1, #15
 800a902:	2022      	movs	r0, #34	; 0x22
 800a904:	f7f6 fbcc 	bl	80010a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800a908:	2022      	movs	r0, #34	; 0x22
 800a90a:	f7f6 fbe5 	bl	80010d8 <HAL_NVIC_EnableIRQ>
}
 800a90e:	bf00      	nop
 800a910:	3728      	adds	r7, #40	; 0x28
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	40021000 	.word	0x40021000
 800a91c:	48000400 	.word	0x48000400

0800a920 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a12      	ldr	r2, [pc, #72]	; (800a974 <I2Cx_Init+0x54>)
 800a92c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a11      	ldr	r2, [pc, #68]	; (800a978 <I2Cx_Init+0x58>)
 800a932:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2201      	movs	r2, #1
 800a93e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7ff ff89 	bl	800a870 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7f7 fcd1 	bl	8002306 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800a964:	2100      	movs	r1, #0
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f7f8 f9d6 	bl	8002d18 <HAL_I2CEx_ConfigAnalogFilter>
}
 800a96c:	bf00      	nop
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	40005800 	.word	0x40005800
 800a978:	00702681 	.word	0x00702681

0800a97c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b08a      	sub	sp, #40	; 0x28
 800a980:	af04      	add	r7, sp, #16
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	4608      	mov	r0, r1
 800a986:	4611      	mov	r1, r2
 800a988:	461a      	mov	r2, r3
 800a98a:	4603      	mov	r3, r0
 800a98c:	72fb      	strb	r3, [r7, #11]
 800a98e:	460b      	mov	r3, r1
 800a990:	813b      	strh	r3, [r7, #8]
 800a992:	4613      	mov	r3, r2
 800a994:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a996:	2300      	movs	r3, #0
 800a998:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a99a:	7afb      	ldrb	r3, [r7, #11]
 800a99c:	b299      	uxth	r1, r3
 800a99e:	88f8      	ldrh	r0, [r7, #6]
 800a9a0:	893a      	ldrh	r2, [r7, #8]
 800a9a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a9a6:	9302      	str	r3, [sp, #8]
 800a9a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9aa:	9301      	str	r3, [sp, #4]
 800a9ac:	6a3b      	ldr	r3, [r7, #32]
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f7f7 fe7a 	bl	80026ac <HAL_I2C_Mem_Read>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800a9bc:	7dfb      	ldrb	r3, [r7, #23]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d004      	beq.n	800a9cc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800a9c2:	7afb      	ldrb	r3, [r7, #11]
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f000 f832 	bl	800aa30 <I2Cx_Error>
  }
  return status;
 800a9cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3718      	adds	r7, #24
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b08a      	sub	sp, #40	; 0x28
 800a9da:	af04      	add	r7, sp, #16
 800a9dc:	60f8      	str	r0, [r7, #12]
 800a9de:	4608      	mov	r0, r1
 800a9e0:	4611      	mov	r1, r2
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	72fb      	strb	r3, [r7, #11]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	813b      	strh	r3, [r7, #8]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a9f4:	7afb      	ldrb	r3, [r7, #11]
 800a9f6:	b299      	uxth	r1, r3
 800a9f8:	88f8      	ldrh	r0, [r7, #6]
 800a9fa:	893a      	ldrh	r2, [r7, #8]
 800a9fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aa00:	9302      	str	r3, [sp, #8]
 800aa02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa04:	9301      	str	r3, [sp, #4]
 800aa06:	6a3b      	ldr	r3, [r7, #32]
 800aa08:	9300      	str	r3, [sp, #0]
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f7f7 fd39 	bl	8002484 <HAL_I2C_Mem_Write>
 800aa12:	4603      	mov	r3, r0
 800aa14:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800aa16:	7dfb      	ldrb	r3, [r7, #23]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d004      	beq.n	800aa26 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800aa1c:	7afb      	ldrb	r3, [r7, #11]
 800aa1e:	4619      	mov	r1, r3
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f000 f805 	bl	800aa30 <I2Cx_Error>
  }
  return status;
 800aa26:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3718      	adds	r7, #24
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f7f7 fcf1 	bl	8002424 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f7ff ff6c 	bl	800a920 <I2Cx_Init>
}
 800aa48:	bf00      	nop
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800aa54:	4802      	ldr	r0, [pc, #8]	; (800aa60 <SENSOR_IO_Init+0x10>)
 800aa56:	f7ff ff63 	bl	800a920 <I2Cx_Init>
}
 800aa5a:	bf00      	nop
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	20001e9c 	.word	0x20001e9c

0800aa64 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af02      	add	r7, sp, #8
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	71fb      	strb	r3, [r7, #7]
 800aa6e:	460b      	mov	r3, r1
 800aa70:	71bb      	strb	r3, [r7, #6]
 800aa72:	4613      	mov	r3, r2
 800aa74:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800aa76:	79bb      	ldrb	r3, [r7, #6]
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	79f9      	ldrb	r1, [r7, #7]
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	9301      	str	r3, [sp, #4]
 800aa80:	1d7b      	adds	r3, r7, #5
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	2301      	movs	r3, #1
 800aa86:	4803      	ldr	r0, [pc, #12]	; (800aa94 <SENSOR_IO_Write+0x30>)
 800aa88:	f7ff ffa5 	bl	800a9d6 <I2Cx_WriteMultiple>
}
 800aa8c:	bf00      	nop
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	20001e9c 	.word	0x20001e9c

0800aa98 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af02      	add	r7, sp, #8
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	460a      	mov	r2, r1
 800aaa2:	71fb      	strb	r3, [r7, #7]
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800aaac:	79bb      	ldrb	r3, [r7, #6]
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	79f9      	ldrb	r1, [r7, #7]
 800aab2:	2301      	movs	r3, #1
 800aab4:	9301      	str	r3, [sp, #4]
 800aab6:	f107 030f 	add.w	r3, r7, #15
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	2301      	movs	r3, #1
 800aabe:	4804      	ldr	r0, [pc, #16]	; (800aad0 <SENSOR_IO_Read+0x38>)
 800aac0:	f7ff ff5c 	bl	800a97c <I2Cx_ReadMultiple>

  return read_value;
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	20001e9c 	.word	0x20001e9c

0800aad4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af02      	add	r7, sp, #8
 800aada:	603a      	str	r2, [r7, #0]
 800aadc:	461a      	mov	r2, r3
 800aade:	4603      	mov	r3, r0
 800aae0:	71fb      	strb	r3, [r7, #7]
 800aae2:	460b      	mov	r3, r1
 800aae4:	71bb      	strb	r3, [r7, #6]
 800aae6:	4613      	mov	r3, r2
 800aae8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800aaea:	79bb      	ldrb	r3, [r7, #6]
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	79f9      	ldrb	r1, [r7, #7]
 800aaf0:	88bb      	ldrh	r3, [r7, #4]
 800aaf2:	9301      	str	r3, [sp, #4]
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	2301      	movs	r3, #1
 800aafa:	4804      	ldr	r0, [pc, #16]	; (800ab0c <SENSOR_IO_ReadMultiple+0x38>)
 800aafc:	f7ff ff3e 	bl	800a97c <I2Cx_ReadMultiple>
 800ab00:	4603      	mov	r3, r0
 800ab02:	b29b      	uxth	r3, r3
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	20001e9c 	.word	0x20001e9c

0800ab10 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800ab16:	2301      	movs	r3, #1
 800ab18:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800ab1e:	4b1b      	ldr	r3, [pc, #108]	; (800ab8c <BSP_GYRO_Init+0x7c>)
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	4798      	blx	r3
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b6a      	cmp	r3, #106	; 0x6a
 800ab28:	d002      	beq.n	800ab30 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	73fb      	strb	r3, [r7, #15]
 800ab2e:	e028      	b.n	800ab82 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800ab30:	4b17      	ldr	r3, [pc, #92]	; (800ab90 <BSP_GYRO_Init+0x80>)
 800ab32:	4a16      	ldr	r2, [pc, #88]	; (800ab8c <BSP_GYRO_Init+0x7c>)
 800ab34:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800ab3a:	2330      	movs	r3, #48	; 0x30
 800ab3c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800ab42:	2300      	movs	r3, #0
 800ab44:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800ab46:	2340      	movs	r3, #64	; 0x40
 800ab48:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800ab4e:	230c      	movs	r3, #12
 800ab50:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800ab52:	7aba      	ldrb	r2, [r7, #10]
 800ab54:	797b      	ldrb	r3, [r7, #5]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800ab5c:	7a3b      	ldrb	r3, [r7, #8]
 800ab5e:	f043 0304 	orr.w	r3, r3, #4
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	021b      	lsls	r3, r3, #8
 800ab66:	b21a      	sxth	r2, r3
 800ab68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	b21b      	sxth	r3, r3
 800ab70:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800ab72:	4b07      	ldr	r3, [pc, #28]	; (800ab90 <BSP_GYRO_Init+0x80>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	89ba      	ldrh	r2, [r7, #12]
 800ab7a:	4610      	mov	r0, r2
 800ab7c:	4798      	blx	r3
    
    ret = GYRO_OK;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800ab82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	20000028 	.word	0x20000028
 800ab90:	200015b8 	.word	0x200015b8

0800ab94 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 800ab9c:	4b08      	ldr	r3, [pc, #32]	; (800abc0 <BSP_GYRO_GetXYZ+0x2c>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d009      	beq.n	800abb8 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 800aba4:	4b06      	ldr	r3, [pc, #24]	; (800abc0 <BSP_GYRO_GetXYZ+0x2c>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d004      	beq.n	800abb8 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800abae:	4b04      	ldr	r3, [pc, #16]	; (800abc0 <BSP_GYRO_GetXYZ+0x2c>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	4798      	blx	r3
    }
  }
}
 800abb8:	bf00      	nop
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}
 800abc0:	200015b8 	.word	0x200015b8

0800abc4 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800abca:	4b0c      	ldr	r3, [pc, #48]	; (800abfc <BSP_PSENSOR_Init+0x38>)
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	20ba      	movs	r0, #186	; 0xba
 800abd0:	4798      	blx	r3
 800abd2:	4603      	mov	r3, r0
 800abd4:	2bb1      	cmp	r3, #177	; 0xb1
 800abd6:	d002      	beq.n	800abde <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	607b      	str	r3, [r7, #4]
 800abdc:	e009      	b.n	800abf2 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800abde:	4b08      	ldr	r3, [pc, #32]	; (800ac00 <BSP_PSENSOR_Init+0x3c>)
 800abe0:	4a06      	ldr	r2, [pc, #24]	; (800abfc <BSP_PSENSOR_Init+0x38>)
 800abe2:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 800abe4:	4b06      	ldr	r3, [pc, #24]	; (800ac00 <BSP_PSENSOR_Init+0x3c>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	20ba      	movs	r0, #186	; 0xba
 800abec:	4798      	blx	r3
    ret = PSENSOR_OK;
 800abee:	2300      	movs	r3, #0
 800abf0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800abf2:	687b      	ldr	r3, [r7, #4]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3708      	adds	r7, #8
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	2000001c 	.word	0x2000001c
 800ac00:	200015bc 	.word	0x200015bc

0800ac04 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 800ac04:	b580      	push	{r7, lr}
 800ac06:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 800ac08:	4b04      	ldr	r3, [pc, #16]	; (800ac1c <BSP_PSENSOR_ReadPressure+0x18>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	20ba      	movs	r0, #186	; 0xba
 800ac10:	4798      	blx	r3
 800ac12:	eef0 7a40 	vmov.f32	s15, s0
}
 800ac16:	eeb0 0a67 	vmov.f32	s0, s15
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	200015bc 	.word	0x200015bc

0800ac20 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800ac2a:	4b09      	ldr	r3, [pc, #36]	; (800ac50 <BSP_TSENSOR_Init+0x30>)
 800ac2c:	4a09      	ldr	r2, [pc, #36]	; (800ac54 <BSP_TSENSOR_Init+0x34>)
 800ac2e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800ac30:	f7ff ff0e 	bl	800aa50 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800ac34:	4b06      	ldr	r3, [pc, #24]	; (800ac50 <BSP_TSENSOR_Init+0x30>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	20be      	movs	r0, #190	; 0xbe
 800ac3e:	4798      	blx	r3

  ret = TSENSOR_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800ac44:	79fb      	ldrb	r3, [r7, #7]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	200015c0 	.word	0x200015c0
 800ac54:	2000000c 	.word	0x2000000c

0800ac58 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800ac5c:	4b04      	ldr	r3, [pc, #16]	; (800ac70 <BSP_TSENSOR_ReadTemp+0x18>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	20be      	movs	r0, #190	; 0xbe
 800ac64:	4798      	blx	r3
 800ac66:	eef0 7a40 	vmov.f32	s15, s0
}
 800ac6a:	eeb0 0a67 	vmov.f32	s0, s15
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	200015c0 	.word	0x200015c0

0800ac74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac7a:	4b11      	ldr	r3, [pc, #68]	; (800acc0 <HAL_MspInit+0x4c>)
 800ac7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac7e:	4a10      	ldr	r2, [pc, #64]	; (800acc0 <HAL_MspInit+0x4c>)
 800ac80:	f043 0301 	orr.w	r3, r3, #1
 800ac84:	6613      	str	r3, [r2, #96]	; 0x60
 800ac86:	4b0e      	ldr	r3, [pc, #56]	; (800acc0 <HAL_MspInit+0x4c>)
 800ac88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac8a:	f003 0301 	and.w	r3, r3, #1
 800ac8e:	607b      	str	r3, [r7, #4]
 800ac90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac92:	4b0b      	ldr	r3, [pc, #44]	; (800acc0 <HAL_MspInit+0x4c>)
 800ac94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac96:	4a0a      	ldr	r2, [pc, #40]	; (800acc0 <HAL_MspInit+0x4c>)
 800ac98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac9c:	6593      	str	r3, [r2, #88]	; 0x58
 800ac9e:	4b08      	ldr	r3, [pc, #32]	; (800acc0 <HAL_MspInit+0x4c>)
 800aca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aca6:	603b      	str	r3, [r7, #0]
 800aca8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800acaa:	2200      	movs	r2, #0
 800acac:	210f      	movs	r1, #15
 800acae:	f06f 0001 	mvn.w	r0, #1
 800acb2:	f7f6 f9f5 	bl	80010a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800acb6:	bf00      	nop
 800acb8:	3708      	adds	r7, #8
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	40021000 	.word	0x40021000

0800acc4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b08a      	sub	sp, #40	; 0x28
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800accc:	f107 0314 	add.w	r3, r7, #20
 800acd0:	2200      	movs	r2, #0
 800acd2:	601a      	str	r2, [r3, #0]
 800acd4:	605a      	str	r2, [r3, #4]
 800acd6:	609a      	str	r2, [r3, #8]
 800acd8:	60da      	str	r2, [r3, #12]
 800acda:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a2f      	ldr	r2, [pc, #188]	; (800ada0 <HAL_DAC_MspInit+0xdc>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d157      	bne.n	800ad96 <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800ace6:	4b2f      	ldr	r3, [pc, #188]	; (800ada4 <HAL_DAC_MspInit+0xe0>)
 800ace8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acea:	4a2e      	ldr	r2, [pc, #184]	; (800ada4 <HAL_DAC_MspInit+0xe0>)
 800acec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800acf0:	6593      	str	r3, [r2, #88]	; 0x58
 800acf2:	4b2c      	ldr	r3, [pc, #176]	; (800ada4 <HAL_DAC_MspInit+0xe0>)
 800acf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acfa:	613b      	str	r3, [r7, #16]
 800acfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acfe:	4b29      	ldr	r3, [pc, #164]	; (800ada4 <HAL_DAC_MspInit+0xe0>)
 800ad00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad02:	4a28      	ldr	r2, [pc, #160]	; (800ada4 <HAL_DAC_MspInit+0xe0>)
 800ad04:	f043 0301 	orr.w	r3, r3, #1
 800ad08:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ad0a:	4b26      	ldr	r3, [pc, #152]	; (800ada4 <HAL_DAC_MspInit+0xe0>)
 800ad0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad0e:	f003 0301 	and.w	r3, r3, #1
 800ad12:	60fb      	str	r3, [r7, #12]
 800ad14:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800ad16:	2310      	movs	r3, #16
 800ad18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ad1a:	2303      	movs	r3, #3
 800ad1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad22:	f107 0314 	add.w	r3, r7, #20
 800ad26:	4619      	mov	r1, r3
 800ad28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad2c:	f7f7 f82c 	bl	8001d88 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800ad30:	4b1d      	ldr	r3, [pc, #116]	; (800ada8 <HAL_DAC_MspInit+0xe4>)
 800ad32:	4a1e      	ldr	r2, [pc, #120]	; (800adac <HAL_DAC_MspInit+0xe8>)
 800ad34:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800ad36:	4b1c      	ldr	r3, [pc, #112]	; (800ada8 <HAL_DAC_MspInit+0xe4>)
 800ad38:	2206      	movs	r2, #6
 800ad3a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ad3c:	4b1a      	ldr	r3, [pc, #104]	; (800ada8 <HAL_DAC_MspInit+0xe4>)
 800ad3e:	2210      	movs	r2, #16
 800ad40:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ad42:	4b19      	ldr	r3, [pc, #100]	; (800ada8 <HAL_DAC_MspInit+0xe4>)
 800ad44:	2200      	movs	r2, #0
 800ad46:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800ad48:	4b17      	ldr	r3, [pc, #92]	; (800ada8 <HAL_DAC_MspInit+0xe4>)
 800ad4a:	2280      	movs	r2, #128	; 0x80
 800ad4c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ad4e:	4b16      	ldr	r3, [pc, #88]	; (800ada8 <HAL_DAC_MspInit+0xe4>)
 800ad50:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad54:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ad56:	4b14      	ldr	r3, [pc, #80]	; (800ada8 <HAL_DAC_MspInit+0xe4>)
 800ad58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad5c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800ad5e:	4b12      	ldr	r3, [pc, #72]	; (800ada8 <HAL_DAC_MspInit+0xe4>)
 800ad60:	2220      	movs	r2, #32
 800ad62:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800ad64:	4b10      	ldr	r3, [pc, #64]	; (800ada8 <HAL_DAC_MspInit+0xe4>)
 800ad66:	2200      	movs	r2, #0
 800ad68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800ad6a:	480f      	ldr	r0, [pc, #60]	; (800ada8 <HAL_DAC_MspInit+0xe4>)
 800ad6c:	f7f6 fd3e 	bl	80017ec <HAL_DMA_Init>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800ad76:	f7ff fd77 	bl	800a868 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a0a      	ldr	r2, [pc, #40]	; (800ada8 <HAL_DAC_MspInit+0xe4>)
 800ad7e:	609a      	str	r2, [r3, #8]
 800ad80:	4a09      	ldr	r2, [pc, #36]	; (800ada8 <HAL_DAC_MspInit+0xe4>)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800ad86:	2200      	movs	r2, #0
 800ad88:	2100      	movs	r1, #0
 800ad8a:	2036      	movs	r0, #54	; 0x36
 800ad8c:	f7f6 f988 	bl	80010a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ad90:	2036      	movs	r0, #54	; 0x36
 800ad92:	f7f6 f9a1 	bl	80010d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800ad96:	bf00      	nop
 800ad98:	3728      	adds	r7, #40	; 0x28
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	40007400 	.word	0x40007400
 800ada4:	40021000 	.word	0x40021000
 800ada8:	20001674 	.word	0x20001674
 800adac:	40020008 	.word	0x40020008

0800adb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b08a      	sub	sp, #40	; 0x28
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800adb8:	f107 0314 	add.w	r3, r7, #20
 800adbc:	2200      	movs	r2, #0
 800adbe:	601a      	str	r2, [r3, #0]
 800adc0:	605a      	str	r2, [r3, #4]
 800adc2:	609a      	str	r2, [r3, #8]
 800adc4:	60da      	str	r2, [r3, #12]
 800adc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a17      	ldr	r2, [pc, #92]	; (800ae2c <HAL_I2C_MspInit+0x7c>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d128      	bne.n	800ae24 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800add2:	4b17      	ldr	r3, [pc, #92]	; (800ae30 <HAL_I2C_MspInit+0x80>)
 800add4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800add6:	4a16      	ldr	r2, [pc, #88]	; (800ae30 <HAL_I2C_MspInit+0x80>)
 800add8:	f043 0302 	orr.w	r3, r3, #2
 800addc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800adde:	4b14      	ldr	r3, [pc, #80]	; (800ae30 <HAL_I2C_MspInit+0x80>)
 800ade0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ade2:	f003 0302 	and.w	r3, r3, #2
 800ade6:	613b      	str	r3, [r7, #16]
 800ade8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800adea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800adee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800adf0:	2312      	movs	r3, #18
 800adf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800adf4:	2301      	movs	r3, #1
 800adf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adf8:	2303      	movs	r3, #3
 800adfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800adfc:	2304      	movs	r3, #4
 800adfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae00:	f107 0314 	add.w	r3, r7, #20
 800ae04:	4619      	mov	r1, r3
 800ae06:	480b      	ldr	r0, [pc, #44]	; (800ae34 <HAL_I2C_MspInit+0x84>)
 800ae08:	f7f6 ffbe 	bl	8001d88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800ae0c:	4b08      	ldr	r3, [pc, #32]	; (800ae30 <HAL_I2C_MspInit+0x80>)
 800ae0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae10:	4a07      	ldr	r2, [pc, #28]	; (800ae30 <HAL_I2C_MspInit+0x80>)
 800ae12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ae16:	6593      	str	r3, [r2, #88]	; 0x58
 800ae18:	4b05      	ldr	r3, [pc, #20]	; (800ae30 <HAL_I2C_MspInit+0x80>)
 800ae1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae20:	60fb      	str	r3, [r7, #12]
 800ae22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800ae24:	bf00      	nop
 800ae26:	3728      	adds	r7, #40	; 0x28
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	40005800 	.word	0x40005800
 800ae30:	40021000 	.word	0x40021000
 800ae34:	48000400 	.word	0x48000400

0800ae38 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a0b      	ldr	r2, [pc, #44]	; (800ae74 <HAL_I2C_MspDeInit+0x3c>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d10f      	bne.n	800ae6a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800ae4a:	4b0b      	ldr	r3, [pc, #44]	; (800ae78 <HAL_I2C_MspDeInit+0x40>)
 800ae4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae4e:	4a0a      	ldr	r2, [pc, #40]	; (800ae78 <HAL_I2C_MspDeInit+0x40>)
 800ae50:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800ae54:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800ae56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ae5a:	4808      	ldr	r0, [pc, #32]	; (800ae7c <HAL_I2C_MspDeInit+0x44>)
 800ae5c:	f7f7 f926 	bl	80020ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800ae60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ae64:	4805      	ldr	r0, [pc, #20]	; (800ae7c <HAL_I2C_MspDeInit+0x44>)
 800ae66:	f7f7 f921 	bl	80020ac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800ae6a:	bf00      	nop
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	40005800 	.word	0x40005800
 800ae78:	40021000 	.word	0x40021000
 800ae7c:	48000400 	.word	0x48000400

0800ae80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae90:	d10b      	bne.n	800aeaa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ae92:	4b09      	ldr	r3, [pc, #36]	; (800aeb8 <HAL_TIM_Base_MspInit+0x38>)
 800ae94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae96:	4a08      	ldr	r2, [pc, #32]	; (800aeb8 <HAL_TIM_Base_MspInit+0x38>)
 800ae98:	f043 0301 	orr.w	r3, r3, #1
 800ae9c:	6593      	str	r3, [r2, #88]	; 0x58
 800ae9e:	4b06      	ldr	r3, [pc, #24]	; (800aeb8 <HAL_TIM_Base_MspInit+0x38>)
 800aea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aea2:	f003 0301 	and.w	r3, r3, #1
 800aea6:	60fb      	str	r3, [r7, #12]
 800aea8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800aeaa:	bf00      	nop
 800aeac:	3714      	adds	r7, #20
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	40021000 	.word	0x40021000

0800aebc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b08a      	sub	sp, #40	; 0x28
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aec4:	f107 0314 	add.w	r3, r7, #20
 800aec8:	2200      	movs	r2, #0
 800aeca:	601a      	str	r2, [r3, #0]
 800aecc:	605a      	str	r2, [r3, #4]
 800aece:	609a      	str	r2, [r3, #8]
 800aed0:	60da      	str	r2, [r3, #12]
 800aed2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a17      	ldr	r2, [pc, #92]	; (800af38 <HAL_UART_MspInit+0x7c>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d127      	bne.n	800af2e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800aede:	4b17      	ldr	r3, [pc, #92]	; (800af3c <HAL_UART_MspInit+0x80>)
 800aee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aee2:	4a16      	ldr	r2, [pc, #88]	; (800af3c <HAL_UART_MspInit+0x80>)
 800aee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aee8:	6613      	str	r3, [r2, #96]	; 0x60
 800aeea:	4b14      	ldr	r3, [pc, #80]	; (800af3c <HAL_UART_MspInit+0x80>)
 800aeec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aef2:	613b      	str	r3, [r7, #16]
 800aef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aef6:	4b11      	ldr	r3, [pc, #68]	; (800af3c <HAL_UART_MspInit+0x80>)
 800aef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aefa:	4a10      	ldr	r2, [pc, #64]	; (800af3c <HAL_UART_MspInit+0x80>)
 800aefc:	f043 0302 	orr.w	r3, r3, #2
 800af00:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af02:	4b0e      	ldr	r3, [pc, #56]	; (800af3c <HAL_UART_MspInit+0x80>)
 800af04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af06:	f003 0302 	and.w	r3, r3, #2
 800af0a:	60fb      	str	r3, [r7, #12]
 800af0c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800af0e:	23c0      	movs	r3, #192	; 0xc0
 800af10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af12:	2302      	movs	r3, #2
 800af14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af16:	2300      	movs	r3, #0
 800af18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af1a:	2303      	movs	r3, #3
 800af1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800af1e:	2307      	movs	r3, #7
 800af20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af22:	f107 0314 	add.w	r3, r7, #20
 800af26:	4619      	mov	r1, r3
 800af28:	4805      	ldr	r0, [pc, #20]	; (800af40 <HAL_UART_MspInit+0x84>)
 800af2a:	f7f6 ff2d 	bl	8001d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800af2e:	bf00      	nop
 800af30:	3728      	adds	r7, #40	; 0x28
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	40013800 	.word	0x40013800
 800af3c:	40021000 	.word	0x40021000
 800af40:	48000400 	.word	0x48000400

0800af44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b08c      	sub	sp, #48	; 0x30
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800af4c:	2300      	movs	r3, #0
 800af4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800af54:	2200      	movs	r2, #0
 800af56:	6879      	ldr	r1, [r7, #4]
 800af58:	2036      	movs	r0, #54	; 0x36
 800af5a:	f7f6 f8a1 	bl	80010a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800af5e:	2036      	movs	r0, #54	; 0x36
 800af60:	f7f6 f8ba 	bl	80010d8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800af64:	4b1e      	ldr	r3, [pc, #120]	; (800afe0 <HAL_InitTick+0x9c>)
 800af66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af68:	4a1d      	ldr	r2, [pc, #116]	; (800afe0 <HAL_InitTick+0x9c>)
 800af6a:	f043 0310 	orr.w	r3, r3, #16
 800af6e:	6593      	str	r3, [r2, #88]	; 0x58
 800af70:	4b1b      	ldr	r3, [pc, #108]	; (800afe0 <HAL_InitTick+0x9c>)
 800af72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af74:	f003 0310 	and.w	r3, r3, #16
 800af78:	60fb      	str	r3, [r7, #12]
 800af7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800af7c:	f107 0210 	add.w	r2, r7, #16
 800af80:	f107 0314 	add.w	r3, r7, #20
 800af84:	4611      	mov	r1, r2
 800af86:	4618      	mov	r0, r3
 800af88:	f7f8 fe36 	bl	8003bf8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800af8c:	f7f8 fe08 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 800af90:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800af92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af94:	4a13      	ldr	r2, [pc, #76]	; (800afe4 <HAL_InitTick+0xa0>)
 800af96:	fba2 2303 	umull	r2, r3, r2, r3
 800af9a:	0c9b      	lsrs	r3, r3, #18
 800af9c:	3b01      	subs	r3, #1
 800af9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800afa0:	4b11      	ldr	r3, [pc, #68]	; (800afe8 <HAL_InitTick+0xa4>)
 800afa2:	4a12      	ldr	r2, [pc, #72]	; (800afec <HAL_InitTick+0xa8>)
 800afa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800afa6:	4b10      	ldr	r3, [pc, #64]	; (800afe8 <HAL_InitTick+0xa4>)
 800afa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800afac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800afae:	4a0e      	ldr	r2, [pc, #56]	; (800afe8 <HAL_InitTick+0xa4>)
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800afb4:	4b0c      	ldr	r3, [pc, #48]	; (800afe8 <HAL_InitTick+0xa4>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800afba:	4b0b      	ldr	r3, [pc, #44]	; (800afe8 <HAL_InitTick+0xa4>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800afc0:	4809      	ldr	r0, [pc, #36]	; (800afe8 <HAL_InitTick+0xa4>)
 800afc2:	f7f9 fc15 	bl	80047f0 <HAL_TIM_Base_Init>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d104      	bne.n	800afd6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800afcc:	4806      	ldr	r0, [pc, #24]	; (800afe8 <HAL_InitTick+0xa4>)
 800afce:	f7f9 fccf 	bl	8004970 <HAL_TIM_Base_Start_IT>
 800afd2:	4603      	mov	r3, r0
 800afd4:	e000      	b.n	800afd8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3730      	adds	r7, #48	; 0x30
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	40021000 	.word	0x40021000
 800afe4:	431bde83 	.word	0x431bde83
 800afe8:	20001ee8 	.word	0x20001ee8
 800afec:	40001000 	.word	0x40001000

0800aff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800aff0:	b480      	push	{r7}
 800aff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800aff4:	e7fe      	b.n	800aff4 <NMI_Handler+0x4>

0800aff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800aff6:	b480      	push	{r7}
 800aff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800affa:	e7fe      	b.n	800affa <HardFault_Handler+0x4>

0800affc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800affc:	b480      	push	{r7}
 800affe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b000:	e7fe      	b.n	800b000 <MemManage_Handler+0x4>

0800b002 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b002:	b480      	push	{r7}
 800b004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b006:	e7fe      	b.n	800b006 <BusFault_Handler+0x4>

0800b008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b008:	b480      	push	{r7}
 800b00a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b00c:	e7fe      	b.n	800b00c <UsageFault_Handler+0x4>

0800b00e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b00e:	b480      	push	{r7}
 800b010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b012:	bf00      	nop
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr

0800b01c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800b020:	4802      	ldr	r0, [pc, #8]	; (800b02c <DMA1_Channel1_IRQHandler+0x10>)
 800b022:	f7f6 fd62 	bl	8001aea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800b026:	bf00      	nop
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	20001674 	.word	0x20001674

0800b030 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800b034:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b038:	f7f7 f942 	bl	80022c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b03c:	bf00      	nop
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b044:	4803      	ldr	r0, [pc, #12]	; (800b054 <TIM6_DAC_IRQHandler+0x14>)
 800b046:	f7f9 fd03 	bl	8004a50 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800b04a:	4803      	ldr	r0, [pc, #12]	; (800b058 <TIM6_DAC_IRQHandler+0x18>)
 800b04c:	f7f6 f977 	bl	800133e <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b050:	bf00      	nop
 800b052:	bd80      	pop	{r7, pc}
 800b054:	20001ee8 	.word	0x20001ee8
 800b058:	20001614 	.word	0x20001614

0800b05c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b064:	4a14      	ldr	r2, [pc, #80]	; (800b0b8 <_sbrk+0x5c>)
 800b066:	4b15      	ldr	r3, [pc, #84]	; (800b0bc <_sbrk+0x60>)
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b070:	4b13      	ldr	r3, [pc, #76]	; (800b0c0 <_sbrk+0x64>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d102      	bne.n	800b07e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b078:	4b11      	ldr	r3, [pc, #68]	; (800b0c0 <_sbrk+0x64>)
 800b07a:	4a12      	ldr	r2, [pc, #72]	; (800b0c4 <_sbrk+0x68>)
 800b07c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b07e:	4b10      	ldr	r3, [pc, #64]	; (800b0c0 <_sbrk+0x64>)
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4413      	add	r3, r2
 800b086:	693a      	ldr	r2, [r7, #16]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d207      	bcs.n	800b09c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b08c:	f000 f8c2 	bl	800b214 <__errno>
 800b090:	4602      	mov	r2, r0
 800b092:	230c      	movs	r3, #12
 800b094:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800b096:	f04f 33ff 	mov.w	r3, #4294967295
 800b09a:	e009      	b.n	800b0b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b09c:	4b08      	ldr	r3, [pc, #32]	; (800b0c0 <_sbrk+0x64>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b0a2:	4b07      	ldr	r3, [pc, #28]	; (800b0c0 <_sbrk+0x64>)
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	4a05      	ldr	r2, [pc, #20]	; (800b0c0 <_sbrk+0x64>)
 800b0ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3718      	adds	r7, #24
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	200a0000 	.word	0x200a0000
 800b0bc:	00000400 	.word	0x00000400
 800b0c0:	200015c4 	.word	0x200015c4
 800b0c4:	20001f38 	.word	0x20001f38

0800b0c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b0cc:	4b17      	ldr	r3, [pc, #92]	; (800b12c <SystemInit+0x64>)
 800b0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d2:	4a16      	ldr	r2, [pc, #88]	; (800b12c <SystemInit+0x64>)
 800b0d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b0d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800b0dc:	4b14      	ldr	r3, [pc, #80]	; (800b130 <SystemInit+0x68>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a13      	ldr	r2, [pc, #76]	; (800b130 <SystemInit+0x68>)
 800b0e2:	f043 0301 	orr.w	r3, r3, #1
 800b0e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800b0e8:	4b11      	ldr	r3, [pc, #68]	; (800b130 <SystemInit+0x68>)
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800b0ee:	4b10      	ldr	r3, [pc, #64]	; (800b130 <SystemInit+0x68>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a0f      	ldr	r2, [pc, #60]	; (800b130 <SystemInit+0x68>)
 800b0f4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800b0f8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800b0fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800b0fe:	4b0c      	ldr	r3, [pc, #48]	; (800b130 <SystemInit+0x68>)
 800b100:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b104:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b106:	4b0a      	ldr	r3, [pc, #40]	; (800b130 <SystemInit+0x68>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a09      	ldr	r2, [pc, #36]	; (800b130 <SystemInit+0x68>)
 800b10c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b110:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800b112:	4b07      	ldr	r3, [pc, #28]	; (800b130 <SystemInit+0x68>)
 800b114:	2200      	movs	r2, #0
 800b116:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b118:	4b04      	ldr	r3, [pc, #16]	; (800b12c <SystemInit+0x64>)
 800b11a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b11e:	609a      	str	r2, [r3, #8]
#endif
}
 800b120:	bf00      	nop
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	e000ed00 	.word	0xe000ed00
 800b130:	40021000 	.word	0x40021000

0800b134 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800b134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b16c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800b138:	f7ff ffc6 	bl	800b0c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800b13c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800b13e:	e003      	b.n	800b148 <LoopCopyDataInit>

0800b140 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800b140:	4b0b      	ldr	r3, [pc, #44]	; (800b170 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800b142:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800b144:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800b146:	3104      	adds	r1, #4

0800b148 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800b148:	480a      	ldr	r0, [pc, #40]	; (800b174 <LoopForever+0xa>)
	ldr	r3, =_edata
 800b14a:	4b0b      	ldr	r3, [pc, #44]	; (800b178 <LoopForever+0xe>)
	adds	r2, r0, r1
 800b14c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800b14e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800b150:	d3f6      	bcc.n	800b140 <CopyDataInit>
	ldr	r2, =_sbss
 800b152:	4a0a      	ldr	r2, [pc, #40]	; (800b17c <LoopForever+0x12>)
	b	LoopFillZerobss
 800b154:	e002      	b.n	800b15c <LoopFillZerobss>

0800b156 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800b156:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800b158:	f842 3b04 	str.w	r3, [r2], #4

0800b15c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800b15c:	4b08      	ldr	r3, [pc, #32]	; (800b180 <LoopForever+0x16>)
	cmp	r2, r3
 800b15e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800b160:	d3f9      	bcc.n	800b156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b162:	f000 f85d 	bl	800b220 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b166:	f7fe fe47 	bl	8009df8 <main>

0800b16a <LoopForever>:

LoopForever:
    b LoopForever
 800b16a:	e7fe      	b.n	800b16a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800b16c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800b170:	0800c408 	.word	0x0800c408
	ldr	r0, =_sdata
 800b174:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800b178:	200000f0 	.word	0x200000f0
	ldr	r2, =_sbss
 800b17c:	200000f0 	.word	0x200000f0
	ldr	r3, = _ebss
 800b180:	20001f38 	.word	0x20001f38

0800b184 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b184:	e7fe      	b.n	800b184 <ADC1_IRQHandler>
	...

0800b188 <arm_sin_f32>:
 800b188:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b208 <arm_sin_f32+0x80>
 800b18c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b190:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b198:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b19c:	d504      	bpl.n	800b1a8 <arm_sin_f32+0x20>
 800b19e:	ee17 3a90 	vmov	r3, s15
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	ee07 3a90 	vmov	s15, r3
 800b1a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1ac:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800b20c <arm_sin_f32+0x84>
 800b1b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b1b4:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b1b8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b1bc:	ee17 3a90 	vmov	r3, s15
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1c6:	d21a      	bcs.n	800b1fe <arm_sin_f32+0x76>
 800b1c8:	ee07 3a90 	vmov	s15, r3
 800b1cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d0:	1c59      	adds	r1, r3, #1
 800b1d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b1d6:	4a0e      	ldr	r2, [pc, #56]	; (800b210 <arm_sin_f32+0x88>)
 800b1d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b1dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b1e0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b1e4:	ed93 7a00 	vldr	s14, [r3]
 800b1e8:	edd2 6a00 	vldr	s13, [r2]
 800b1ec:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b1f0:	ee20 0a26 	vmul.f32	s0, s0, s13
 800b1f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b1f8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b1fc:	4770      	bx	lr
 800b1fe:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b202:	2101      	movs	r1, #1
 800b204:	2300      	movs	r3, #0
 800b206:	e7e6      	b.n	800b1d6 <arm_sin_f32+0x4e>
 800b208:	3e22f983 	.word	0x3e22f983
 800b20c:	44000000 	.word	0x44000000
 800b210:	0800bbc0 	.word	0x0800bbc0

0800b214 <__errno>:
 800b214:	4b01      	ldr	r3, [pc, #4]	; (800b21c <__errno+0x8>)
 800b216:	6818      	ldr	r0, [r3, #0]
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	2000008c 	.word	0x2000008c

0800b220 <__libc_init_array>:
 800b220:	b570      	push	{r4, r5, r6, lr}
 800b222:	4e0d      	ldr	r6, [pc, #52]	; (800b258 <__libc_init_array+0x38>)
 800b224:	4c0d      	ldr	r4, [pc, #52]	; (800b25c <__libc_init_array+0x3c>)
 800b226:	1ba4      	subs	r4, r4, r6
 800b228:	10a4      	asrs	r4, r4, #2
 800b22a:	2500      	movs	r5, #0
 800b22c:	42a5      	cmp	r5, r4
 800b22e:	d109      	bne.n	800b244 <__libc_init_array+0x24>
 800b230:	4e0b      	ldr	r6, [pc, #44]	; (800b260 <__libc_init_array+0x40>)
 800b232:	4c0c      	ldr	r4, [pc, #48]	; (800b264 <__libc_init_array+0x44>)
 800b234:	f000 fc28 	bl	800ba88 <_init>
 800b238:	1ba4      	subs	r4, r4, r6
 800b23a:	10a4      	asrs	r4, r4, #2
 800b23c:	2500      	movs	r5, #0
 800b23e:	42a5      	cmp	r5, r4
 800b240:	d105      	bne.n	800b24e <__libc_init_array+0x2e>
 800b242:	bd70      	pop	{r4, r5, r6, pc}
 800b244:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b248:	4798      	blx	r3
 800b24a:	3501      	adds	r5, #1
 800b24c:	e7ee      	b.n	800b22c <__libc_init_array+0xc>
 800b24e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b252:	4798      	blx	r3
 800b254:	3501      	adds	r5, #1
 800b256:	e7f2      	b.n	800b23e <__libc_init_array+0x1e>
 800b258:	0800c400 	.word	0x0800c400
 800b25c:	0800c400 	.word	0x0800c400
 800b260:	0800c400 	.word	0x0800c400
 800b264:	0800c404 	.word	0x0800c404

0800b268 <memcpy>:
 800b268:	b510      	push	{r4, lr}
 800b26a:	1e43      	subs	r3, r0, #1
 800b26c:	440a      	add	r2, r1
 800b26e:	4291      	cmp	r1, r2
 800b270:	d100      	bne.n	800b274 <memcpy+0xc>
 800b272:	bd10      	pop	{r4, pc}
 800b274:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b278:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b27c:	e7f7      	b.n	800b26e <memcpy+0x6>

0800b27e <memset>:
 800b27e:	4402      	add	r2, r0
 800b280:	4603      	mov	r3, r0
 800b282:	4293      	cmp	r3, r2
 800b284:	d100      	bne.n	800b288 <memset+0xa>
 800b286:	4770      	bx	lr
 800b288:	f803 1b01 	strb.w	r1, [r3], #1
 800b28c:	e7f9      	b.n	800b282 <memset+0x4>
	...

0800b290 <siprintf>:
 800b290:	b40e      	push	{r1, r2, r3}
 800b292:	b500      	push	{lr}
 800b294:	b09c      	sub	sp, #112	; 0x70
 800b296:	ab1d      	add	r3, sp, #116	; 0x74
 800b298:	9002      	str	r0, [sp, #8]
 800b29a:	9006      	str	r0, [sp, #24]
 800b29c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b2a0:	4809      	ldr	r0, [pc, #36]	; (800b2c8 <siprintf+0x38>)
 800b2a2:	9107      	str	r1, [sp, #28]
 800b2a4:	9104      	str	r1, [sp, #16]
 800b2a6:	4909      	ldr	r1, [pc, #36]	; (800b2cc <siprintf+0x3c>)
 800b2a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ac:	9105      	str	r1, [sp, #20]
 800b2ae:	6800      	ldr	r0, [r0, #0]
 800b2b0:	9301      	str	r3, [sp, #4]
 800b2b2:	a902      	add	r1, sp, #8
 800b2b4:	f000 f866 	bl	800b384 <_svfiprintf_r>
 800b2b8:	9b02      	ldr	r3, [sp, #8]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	701a      	strb	r2, [r3, #0]
 800b2be:	b01c      	add	sp, #112	; 0x70
 800b2c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2c4:	b003      	add	sp, #12
 800b2c6:	4770      	bx	lr
 800b2c8:	2000008c 	.word	0x2000008c
 800b2cc:	ffff0208 	.word	0xffff0208

0800b2d0 <__ssputs_r>:
 800b2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d4:	688e      	ldr	r6, [r1, #8]
 800b2d6:	429e      	cmp	r6, r3
 800b2d8:	4682      	mov	sl, r0
 800b2da:	460c      	mov	r4, r1
 800b2dc:	4690      	mov	r8, r2
 800b2de:	4699      	mov	r9, r3
 800b2e0:	d837      	bhi.n	800b352 <__ssputs_r+0x82>
 800b2e2:	898a      	ldrh	r2, [r1, #12]
 800b2e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2e8:	d031      	beq.n	800b34e <__ssputs_r+0x7e>
 800b2ea:	6825      	ldr	r5, [r4, #0]
 800b2ec:	6909      	ldr	r1, [r1, #16]
 800b2ee:	1a6f      	subs	r7, r5, r1
 800b2f0:	6965      	ldr	r5, [r4, #20]
 800b2f2:	2302      	movs	r3, #2
 800b2f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2f8:	fb95 f5f3 	sdiv	r5, r5, r3
 800b2fc:	f109 0301 	add.w	r3, r9, #1
 800b300:	443b      	add	r3, r7
 800b302:	429d      	cmp	r5, r3
 800b304:	bf38      	it	cc
 800b306:	461d      	movcc	r5, r3
 800b308:	0553      	lsls	r3, r2, #21
 800b30a:	d530      	bpl.n	800b36e <__ssputs_r+0x9e>
 800b30c:	4629      	mov	r1, r5
 800b30e:	f000 fb21 	bl	800b954 <_malloc_r>
 800b312:	4606      	mov	r6, r0
 800b314:	b950      	cbnz	r0, 800b32c <__ssputs_r+0x5c>
 800b316:	230c      	movs	r3, #12
 800b318:	f8ca 3000 	str.w	r3, [sl]
 800b31c:	89a3      	ldrh	r3, [r4, #12]
 800b31e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b322:	81a3      	strh	r3, [r4, #12]
 800b324:	f04f 30ff 	mov.w	r0, #4294967295
 800b328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b32c:	463a      	mov	r2, r7
 800b32e:	6921      	ldr	r1, [r4, #16]
 800b330:	f7ff ff9a 	bl	800b268 <memcpy>
 800b334:	89a3      	ldrh	r3, [r4, #12]
 800b336:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b33a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b33e:	81a3      	strh	r3, [r4, #12]
 800b340:	6126      	str	r6, [r4, #16]
 800b342:	6165      	str	r5, [r4, #20]
 800b344:	443e      	add	r6, r7
 800b346:	1bed      	subs	r5, r5, r7
 800b348:	6026      	str	r6, [r4, #0]
 800b34a:	60a5      	str	r5, [r4, #8]
 800b34c:	464e      	mov	r6, r9
 800b34e:	454e      	cmp	r6, r9
 800b350:	d900      	bls.n	800b354 <__ssputs_r+0x84>
 800b352:	464e      	mov	r6, r9
 800b354:	4632      	mov	r2, r6
 800b356:	4641      	mov	r1, r8
 800b358:	6820      	ldr	r0, [r4, #0]
 800b35a:	f000 fa93 	bl	800b884 <memmove>
 800b35e:	68a3      	ldr	r3, [r4, #8]
 800b360:	1b9b      	subs	r3, r3, r6
 800b362:	60a3      	str	r3, [r4, #8]
 800b364:	6823      	ldr	r3, [r4, #0]
 800b366:	441e      	add	r6, r3
 800b368:	6026      	str	r6, [r4, #0]
 800b36a:	2000      	movs	r0, #0
 800b36c:	e7dc      	b.n	800b328 <__ssputs_r+0x58>
 800b36e:	462a      	mov	r2, r5
 800b370:	f000 fb4a 	bl	800ba08 <_realloc_r>
 800b374:	4606      	mov	r6, r0
 800b376:	2800      	cmp	r0, #0
 800b378:	d1e2      	bne.n	800b340 <__ssputs_r+0x70>
 800b37a:	6921      	ldr	r1, [r4, #16]
 800b37c:	4650      	mov	r0, sl
 800b37e:	f000 fa9b 	bl	800b8b8 <_free_r>
 800b382:	e7c8      	b.n	800b316 <__ssputs_r+0x46>

0800b384 <_svfiprintf_r>:
 800b384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b388:	461d      	mov	r5, r3
 800b38a:	898b      	ldrh	r3, [r1, #12]
 800b38c:	061f      	lsls	r7, r3, #24
 800b38e:	b09d      	sub	sp, #116	; 0x74
 800b390:	4680      	mov	r8, r0
 800b392:	460c      	mov	r4, r1
 800b394:	4616      	mov	r6, r2
 800b396:	d50f      	bpl.n	800b3b8 <_svfiprintf_r+0x34>
 800b398:	690b      	ldr	r3, [r1, #16]
 800b39a:	b96b      	cbnz	r3, 800b3b8 <_svfiprintf_r+0x34>
 800b39c:	2140      	movs	r1, #64	; 0x40
 800b39e:	f000 fad9 	bl	800b954 <_malloc_r>
 800b3a2:	6020      	str	r0, [r4, #0]
 800b3a4:	6120      	str	r0, [r4, #16]
 800b3a6:	b928      	cbnz	r0, 800b3b4 <_svfiprintf_r+0x30>
 800b3a8:	230c      	movs	r3, #12
 800b3aa:	f8c8 3000 	str.w	r3, [r8]
 800b3ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b2:	e0c8      	b.n	800b546 <_svfiprintf_r+0x1c2>
 800b3b4:	2340      	movs	r3, #64	; 0x40
 800b3b6:	6163      	str	r3, [r4, #20]
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b3bc:	2320      	movs	r3, #32
 800b3be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3c2:	2330      	movs	r3, #48	; 0x30
 800b3c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3c8:	9503      	str	r5, [sp, #12]
 800b3ca:	f04f 0b01 	mov.w	fp, #1
 800b3ce:	4637      	mov	r7, r6
 800b3d0:	463d      	mov	r5, r7
 800b3d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b3d6:	b10b      	cbz	r3, 800b3dc <_svfiprintf_r+0x58>
 800b3d8:	2b25      	cmp	r3, #37	; 0x25
 800b3da:	d13e      	bne.n	800b45a <_svfiprintf_r+0xd6>
 800b3dc:	ebb7 0a06 	subs.w	sl, r7, r6
 800b3e0:	d00b      	beq.n	800b3fa <_svfiprintf_r+0x76>
 800b3e2:	4653      	mov	r3, sl
 800b3e4:	4632      	mov	r2, r6
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	4640      	mov	r0, r8
 800b3ea:	f7ff ff71 	bl	800b2d0 <__ssputs_r>
 800b3ee:	3001      	adds	r0, #1
 800b3f0:	f000 80a4 	beq.w	800b53c <_svfiprintf_r+0x1b8>
 800b3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f6:	4453      	add	r3, sl
 800b3f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b3fa:	783b      	ldrb	r3, [r7, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f000 809d 	beq.w	800b53c <_svfiprintf_r+0x1b8>
 800b402:	2300      	movs	r3, #0
 800b404:	f04f 32ff 	mov.w	r2, #4294967295
 800b408:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b40c:	9304      	str	r3, [sp, #16]
 800b40e:	9307      	str	r3, [sp, #28]
 800b410:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b414:	931a      	str	r3, [sp, #104]	; 0x68
 800b416:	462f      	mov	r7, r5
 800b418:	2205      	movs	r2, #5
 800b41a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b41e:	4850      	ldr	r0, [pc, #320]	; (800b560 <_svfiprintf_r+0x1dc>)
 800b420:	f7f4 ff1e 	bl	8000260 <memchr>
 800b424:	9b04      	ldr	r3, [sp, #16]
 800b426:	b9d0      	cbnz	r0, 800b45e <_svfiprintf_r+0xda>
 800b428:	06d9      	lsls	r1, r3, #27
 800b42a:	bf44      	itt	mi
 800b42c:	2220      	movmi	r2, #32
 800b42e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b432:	071a      	lsls	r2, r3, #28
 800b434:	bf44      	itt	mi
 800b436:	222b      	movmi	r2, #43	; 0x2b
 800b438:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b43c:	782a      	ldrb	r2, [r5, #0]
 800b43e:	2a2a      	cmp	r2, #42	; 0x2a
 800b440:	d015      	beq.n	800b46e <_svfiprintf_r+0xea>
 800b442:	9a07      	ldr	r2, [sp, #28]
 800b444:	462f      	mov	r7, r5
 800b446:	2000      	movs	r0, #0
 800b448:	250a      	movs	r5, #10
 800b44a:	4639      	mov	r1, r7
 800b44c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b450:	3b30      	subs	r3, #48	; 0x30
 800b452:	2b09      	cmp	r3, #9
 800b454:	d94d      	bls.n	800b4f2 <_svfiprintf_r+0x16e>
 800b456:	b1b8      	cbz	r0, 800b488 <_svfiprintf_r+0x104>
 800b458:	e00f      	b.n	800b47a <_svfiprintf_r+0xf6>
 800b45a:	462f      	mov	r7, r5
 800b45c:	e7b8      	b.n	800b3d0 <_svfiprintf_r+0x4c>
 800b45e:	4a40      	ldr	r2, [pc, #256]	; (800b560 <_svfiprintf_r+0x1dc>)
 800b460:	1a80      	subs	r0, r0, r2
 800b462:	fa0b f000 	lsl.w	r0, fp, r0
 800b466:	4318      	orrs	r0, r3
 800b468:	9004      	str	r0, [sp, #16]
 800b46a:	463d      	mov	r5, r7
 800b46c:	e7d3      	b.n	800b416 <_svfiprintf_r+0x92>
 800b46e:	9a03      	ldr	r2, [sp, #12]
 800b470:	1d11      	adds	r1, r2, #4
 800b472:	6812      	ldr	r2, [r2, #0]
 800b474:	9103      	str	r1, [sp, #12]
 800b476:	2a00      	cmp	r2, #0
 800b478:	db01      	blt.n	800b47e <_svfiprintf_r+0xfa>
 800b47a:	9207      	str	r2, [sp, #28]
 800b47c:	e004      	b.n	800b488 <_svfiprintf_r+0x104>
 800b47e:	4252      	negs	r2, r2
 800b480:	f043 0302 	orr.w	r3, r3, #2
 800b484:	9207      	str	r2, [sp, #28]
 800b486:	9304      	str	r3, [sp, #16]
 800b488:	783b      	ldrb	r3, [r7, #0]
 800b48a:	2b2e      	cmp	r3, #46	; 0x2e
 800b48c:	d10c      	bne.n	800b4a8 <_svfiprintf_r+0x124>
 800b48e:	787b      	ldrb	r3, [r7, #1]
 800b490:	2b2a      	cmp	r3, #42	; 0x2a
 800b492:	d133      	bne.n	800b4fc <_svfiprintf_r+0x178>
 800b494:	9b03      	ldr	r3, [sp, #12]
 800b496:	1d1a      	adds	r2, r3, #4
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	9203      	str	r2, [sp, #12]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	bfb8      	it	lt
 800b4a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4a4:	3702      	adds	r7, #2
 800b4a6:	9305      	str	r3, [sp, #20]
 800b4a8:	4d2e      	ldr	r5, [pc, #184]	; (800b564 <_svfiprintf_r+0x1e0>)
 800b4aa:	7839      	ldrb	r1, [r7, #0]
 800b4ac:	2203      	movs	r2, #3
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	f7f4 fed6 	bl	8000260 <memchr>
 800b4b4:	b138      	cbz	r0, 800b4c6 <_svfiprintf_r+0x142>
 800b4b6:	2340      	movs	r3, #64	; 0x40
 800b4b8:	1b40      	subs	r0, r0, r5
 800b4ba:	fa03 f000 	lsl.w	r0, r3, r0
 800b4be:	9b04      	ldr	r3, [sp, #16]
 800b4c0:	4303      	orrs	r3, r0
 800b4c2:	3701      	adds	r7, #1
 800b4c4:	9304      	str	r3, [sp, #16]
 800b4c6:	7839      	ldrb	r1, [r7, #0]
 800b4c8:	4827      	ldr	r0, [pc, #156]	; (800b568 <_svfiprintf_r+0x1e4>)
 800b4ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4ce:	2206      	movs	r2, #6
 800b4d0:	1c7e      	adds	r6, r7, #1
 800b4d2:	f7f4 fec5 	bl	8000260 <memchr>
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	d038      	beq.n	800b54c <_svfiprintf_r+0x1c8>
 800b4da:	4b24      	ldr	r3, [pc, #144]	; (800b56c <_svfiprintf_r+0x1e8>)
 800b4dc:	bb13      	cbnz	r3, 800b524 <_svfiprintf_r+0x1a0>
 800b4de:	9b03      	ldr	r3, [sp, #12]
 800b4e0:	3307      	adds	r3, #7
 800b4e2:	f023 0307 	bic.w	r3, r3, #7
 800b4e6:	3308      	adds	r3, #8
 800b4e8:	9303      	str	r3, [sp, #12]
 800b4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ec:	444b      	add	r3, r9
 800b4ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b4f0:	e76d      	b.n	800b3ce <_svfiprintf_r+0x4a>
 800b4f2:	fb05 3202 	mla	r2, r5, r2, r3
 800b4f6:	2001      	movs	r0, #1
 800b4f8:	460f      	mov	r7, r1
 800b4fa:	e7a6      	b.n	800b44a <_svfiprintf_r+0xc6>
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	3701      	adds	r7, #1
 800b500:	9305      	str	r3, [sp, #20]
 800b502:	4619      	mov	r1, r3
 800b504:	250a      	movs	r5, #10
 800b506:	4638      	mov	r0, r7
 800b508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b50c:	3a30      	subs	r2, #48	; 0x30
 800b50e:	2a09      	cmp	r2, #9
 800b510:	d903      	bls.n	800b51a <_svfiprintf_r+0x196>
 800b512:	2b00      	cmp	r3, #0
 800b514:	d0c8      	beq.n	800b4a8 <_svfiprintf_r+0x124>
 800b516:	9105      	str	r1, [sp, #20]
 800b518:	e7c6      	b.n	800b4a8 <_svfiprintf_r+0x124>
 800b51a:	fb05 2101 	mla	r1, r5, r1, r2
 800b51e:	2301      	movs	r3, #1
 800b520:	4607      	mov	r7, r0
 800b522:	e7f0      	b.n	800b506 <_svfiprintf_r+0x182>
 800b524:	ab03      	add	r3, sp, #12
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	4622      	mov	r2, r4
 800b52a:	4b11      	ldr	r3, [pc, #68]	; (800b570 <_svfiprintf_r+0x1ec>)
 800b52c:	a904      	add	r1, sp, #16
 800b52e:	4640      	mov	r0, r8
 800b530:	f3af 8000 	nop.w
 800b534:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b538:	4681      	mov	r9, r0
 800b53a:	d1d6      	bne.n	800b4ea <_svfiprintf_r+0x166>
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	065b      	lsls	r3, r3, #25
 800b540:	f53f af35 	bmi.w	800b3ae <_svfiprintf_r+0x2a>
 800b544:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b546:	b01d      	add	sp, #116	; 0x74
 800b548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b54c:	ab03      	add	r3, sp, #12
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	4622      	mov	r2, r4
 800b552:	4b07      	ldr	r3, [pc, #28]	; (800b570 <_svfiprintf_r+0x1ec>)
 800b554:	a904      	add	r1, sp, #16
 800b556:	4640      	mov	r0, r8
 800b558:	f000 f882 	bl	800b660 <_printf_i>
 800b55c:	e7ea      	b.n	800b534 <_svfiprintf_r+0x1b0>
 800b55e:	bf00      	nop
 800b560:	0800c3c4 	.word	0x0800c3c4
 800b564:	0800c3ca 	.word	0x0800c3ca
 800b568:	0800c3ce 	.word	0x0800c3ce
 800b56c:	00000000 	.word	0x00000000
 800b570:	0800b2d1 	.word	0x0800b2d1

0800b574 <_printf_common>:
 800b574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b578:	4691      	mov	r9, r2
 800b57a:	461f      	mov	r7, r3
 800b57c:	688a      	ldr	r2, [r1, #8]
 800b57e:	690b      	ldr	r3, [r1, #16]
 800b580:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b584:	4293      	cmp	r3, r2
 800b586:	bfb8      	it	lt
 800b588:	4613      	movlt	r3, r2
 800b58a:	f8c9 3000 	str.w	r3, [r9]
 800b58e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b592:	4606      	mov	r6, r0
 800b594:	460c      	mov	r4, r1
 800b596:	b112      	cbz	r2, 800b59e <_printf_common+0x2a>
 800b598:	3301      	adds	r3, #1
 800b59a:	f8c9 3000 	str.w	r3, [r9]
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	0699      	lsls	r1, r3, #26
 800b5a2:	bf42      	ittt	mi
 800b5a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b5a8:	3302      	addmi	r3, #2
 800b5aa:	f8c9 3000 	strmi.w	r3, [r9]
 800b5ae:	6825      	ldr	r5, [r4, #0]
 800b5b0:	f015 0506 	ands.w	r5, r5, #6
 800b5b4:	d107      	bne.n	800b5c6 <_printf_common+0x52>
 800b5b6:	f104 0a19 	add.w	sl, r4, #25
 800b5ba:	68e3      	ldr	r3, [r4, #12]
 800b5bc:	f8d9 2000 	ldr.w	r2, [r9]
 800b5c0:	1a9b      	subs	r3, r3, r2
 800b5c2:	42ab      	cmp	r3, r5
 800b5c4:	dc28      	bgt.n	800b618 <_printf_common+0xa4>
 800b5c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b5ca:	6822      	ldr	r2, [r4, #0]
 800b5cc:	3300      	adds	r3, #0
 800b5ce:	bf18      	it	ne
 800b5d0:	2301      	movne	r3, #1
 800b5d2:	0692      	lsls	r2, r2, #26
 800b5d4:	d42d      	bmi.n	800b632 <_printf_common+0xbe>
 800b5d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5da:	4639      	mov	r1, r7
 800b5dc:	4630      	mov	r0, r6
 800b5de:	47c0      	blx	r8
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	d020      	beq.n	800b626 <_printf_common+0xb2>
 800b5e4:	6823      	ldr	r3, [r4, #0]
 800b5e6:	68e5      	ldr	r5, [r4, #12]
 800b5e8:	f8d9 2000 	ldr.w	r2, [r9]
 800b5ec:	f003 0306 	and.w	r3, r3, #6
 800b5f0:	2b04      	cmp	r3, #4
 800b5f2:	bf08      	it	eq
 800b5f4:	1aad      	subeq	r5, r5, r2
 800b5f6:	68a3      	ldr	r3, [r4, #8]
 800b5f8:	6922      	ldr	r2, [r4, #16]
 800b5fa:	bf0c      	ite	eq
 800b5fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b600:	2500      	movne	r5, #0
 800b602:	4293      	cmp	r3, r2
 800b604:	bfc4      	itt	gt
 800b606:	1a9b      	subgt	r3, r3, r2
 800b608:	18ed      	addgt	r5, r5, r3
 800b60a:	f04f 0900 	mov.w	r9, #0
 800b60e:	341a      	adds	r4, #26
 800b610:	454d      	cmp	r5, r9
 800b612:	d11a      	bne.n	800b64a <_printf_common+0xd6>
 800b614:	2000      	movs	r0, #0
 800b616:	e008      	b.n	800b62a <_printf_common+0xb6>
 800b618:	2301      	movs	r3, #1
 800b61a:	4652      	mov	r2, sl
 800b61c:	4639      	mov	r1, r7
 800b61e:	4630      	mov	r0, r6
 800b620:	47c0      	blx	r8
 800b622:	3001      	adds	r0, #1
 800b624:	d103      	bne.n	800b62e <_printf_common+0xba>
 800b626:	f04f 30ff 	mov.w	r0, #4294967295
 800b62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b62e:	3501      	adds	r5, #1
 800b630:	e7c3      	b.n	800b5ba <_printf_common+0x46>
 800b632:	18e1      	adds	r1, r4, r3
 800b634:	1c5a      	adds	r2, r3, #1
 800b636:	2030      	movs	r0, #48	; 0x30
 800b638:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b63c:	4422      	add	r2, r4
 800b63e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b642:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b646:	3302      	adds	r3, #2
 800b648:	e7c5      	b.n	800b5d6 <_printf_common+0x62>
 800b64a:	2301      	movs	r3, #1
 800b64c:	4622      	mov	r2, r4
 800b64e:	4639      	mov	r1, r7
 800b650:	4630      	mov	r0, r6
 800b652:	47c0      	blx	r8
 800b654:	3001      	adds	r0, #1
 800b656:	d0e6      	beq.n	800b626 <_printf_common+0xb2>
 800b658:	f109 0901 	add.w	r9, r9, #1
 800b65c:	e7d8      	b.n	800b610 <_printf_common+0x9c>
	...

0800b660 <_printf_i>:
 800b660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b664:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b668:	460c      	mov	r4, r1
 800b66a:	7e09      	ldrb	r1, [r1, #24]
 800b66c:	b085      	sub	sp, #20
 800b66e:	296e      	cmp	r1, #110	; 0x6e
 800b670:	4617      	mov	r7, r2
 800b672:	4606      	mov	r6, r0
 800b674:	4698      	mov	r8, r3
 800b676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b678:	f000 80b3 	beq.w	800b7e2 <_printf_i+0x182>
 800b67c:	d822      	bhi.n	800b6c4 <_printf_i+0x64>
 800b67e:	2963      	cmp	r1, #99	; 0x63
 800b680:	d036      	beq.n	800b6f0 <_printf_i+0x90>
 800b682:	d80a      	bhi.n	800b69a <_printf_i+0x3a>
 800b684:	2900      	cmp	r1, #0
 800b686:	f000 80b9 	beq.w	800b7fc <_printf_i+0x19c>
 800b68a:	2958      	cmp	r1, #88	; 0x58
 800b68c:	f000 8083 	beq.w	800b796 <_printf_i+0x136>
 800b690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b694:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b698:	e032      	b.n	800b700 <_printf_i+0xa0>
 800b69a:	2964      	cmp	r1, #100	; 0x64
 800b69c:	d001      	beq.n	800b6a2 <_printf_i+0x42>
 800b69e:	2969      	cmp	r1, #105	; 0x69
 800b6a0:	d1f6      	bne.n	800b690 <_printf_i+0x30>
 800b6a2:	6820      	ldr	r0, [r4, #0]
 800b6a4:	6813      	ldr	r3, [r2, #0]
 800b6a6:	0605      	lsls	r5, r0, #24
 800b6a8:	f103 0104 	add.w	r1, r3, #4
 800b6ac:	d52a      	bpl.n	800b704 <_printf_i+0xa4>
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	6011      	str	r1, [r2, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	da03      	bge.n	800b6be <_printf_i+0x5e>
 800b6b6:	222d      	movs	r2, #45	; 0x2d
 800b6b8:	425b      	negs	r3, r3
 800b6ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b6be:	486f      	ldr	r0, [pc, #444]	; (800b87c <_printf_i+0x21c>)
 800b6c0:	220a      	movs	r2, #10
 800b6c2:	e039      	b.n	800b738 <_printf_i+0xd8>
 800b6c4:	2973      	cmp	r1, #115	; 0x73
 800b6c6:	f000 809d 	beq.w	800b804 <_printf_i+0x1a4>
 800b6ca:	d808      	bhi.n	800b6de <_printf_i+0x7e>
 800b6cc:	296f      	cmp	r1, #111	; 0x6f
 800b6ce:	d020      	beq.n	800b712 <_printf_i+0xb2>
 800b6d0:	2970      	cmp	r1, #112	; 0x70
 800b6d2:	d1dd      	bne.n	800b690 <_printf_i+0x30>
 800b6d4:	6823      	ldr	r3, [r4, #0]
 800b6d6:	f043 0320 	orr.w	r3, r3, #32
 800b6da:	6023      	str	r3, [r4, #0]
 800b6dc:	e003      	b.n	800b6e6 <_printf_i+0x86>
 800b6de:	2975      	cmp	r1, #117	; 0x75
 800b6e0:	d017      	beq.n	800b712 <_printf_i+0xb2>
 800b6e2:	2978      	cmp	r1, #120	; 0x78
 800b6e4:	d1d4      	bne.n	800b690 <_printf_i+0x30>
 800b6e6:	2378      	movs	r3, #120	; 0x78
 800b6e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6ec:	4864      	ldr	r0, [pc, #400]	; (800b880 <_printf_i+0x220>)
 800b6ee:	e055      	b.n	800b79c <_printf_i+0x13c>
 800b6f0:	6813      	ldr	r3, [r2, #0]
 800b6f2:	1d19      	adds	r1, r3, #4
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	6011      	str	r1, [r2, #0]
 800b6f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b700:	2301      	movs	r3, #1
 800b702:	e08c      	b.n	800b81e <_printf_i+0x1be>
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	6011      	str	r1, [r2, #0]
 800b708:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b70c:	bf18      	it	ne
 800b70e:	b21b      	sxthne	r3, r3
 800b710:	e7cf      	b.n	800b6b2 <_printf_i+0x52>
 800b712:	6813      	ldr	r3, [r2, #0]
 800b714:	6825      	ldr	r5, [r4, #0]
 800b716:	1d18      	adds	r0, r3, #4
 800b718:	6010      	str	r0, [r2, #0]
 800b71a:	0628      	lsls	r0, r5, #24
 800b71c:	d501      	bpl.n	800b722 <_printf_i+0xc2>
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	e002      	b.n	800b728 <_printf_i+0xc8>
 800b722:	0668      	lsls	r0, r5, #25
 800b724:	d5fb      	bpl.n	800b71e <_printf_i+0xbe>
 800b726:	881b      	ldrh	r3, [r3, #0]
 800b728:	4854      	ldr	r0, [pc, #336]	; (800b87c <_printf_i+0x21c>)
 800b72a:	296f      	cmp	r1, #111	; 0x6f
 800b72c:	bf14      	ite	ne
 800b72e:	220a      	movne	r2, #10
 800b730:	2208      	moveq	r2, #8
 800b732:	2100      	movs	r1, #0
 800b734:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b738:	6865      	ldr	r5, [r4, #4]
 800b73a:	60a5      	str	r5, [r4, #8]
 800b73c:	2d00      	cmp	r5, #0
 800b73e:	f2c0 8095 	blt.w	800b86c <_printf_i+0x20c>
 800b742:	6821      	ldr	r1, [r4, #0]
 800b744:	f021 0104 	bic.w	r1, r1, #4
 800b748:	6021      	str	r1, [r4, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d13d      	bne.n	800b7ca <_printf_i+0x16a>
 800b74e:	2d00      	cmp	r5, #0
 800b750:	f040 808e 	bne.w	800b870 <_printf_i+0x210>
 800b754:	4665      	mov	r5, ip
 800b756:	2a08      	cmp	r2, #8
 800b758:	d10b      	bne.n	800b772 <_printf_i+0x112>
 800b75a:	6823      	ldr	r3, [r4, #0]
 800b75c:	07db      	lsls	r3, r3, #31
 800b75e:	d508      	bpl.n	800b772 <_printf_i+0x112>
 800b760:	6923      	ldr	r3, [r4, #16]
 800b762:	6862      	ldr	r2, [r4, #4]
 800b764:	429a      	cmp	r2, r3
 800b766:	bfde      	ittt	le
 800b768:	2330      	movle	r3, #48	; 0x30
 800b76a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b76e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b772:	ebac 0305 	sub.w	r3, ip, r5
 800b776:	6123      	str	r3, [r4, #16]
 800b778:	f8cd 8000 	str.w	r8, [sp]
 800b77c:	463b      	mov	r3, r7
 800b77e:	aa03      	add	r2, sp, #12
 800b780:	4621      	mov	r1, r4
 800b782:	4630      	mov	r0, r6
 800b784:	f7ff fef6 	bl	800b574 <_printf_common>
 800b788:	3001      	adds	r0, #1
 800b78a:	d14d      	bne.n	800b828 <_printf_i+0x1c8>
 800b78c:	f04f 30ff 	mov.w	r0, #4294967295
 800b790:	b005      	add	sp, #20
 800b792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b796:	4839      	ldr	r0, [pc, #228]	; (800b87c <_printf_i+0x21c>)
 800b798:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b79c:	6813      	ldr	r3, [r2, #0]
 800b79e:	6821      	ldr	r1, [r4, #0]
 800b7a0:	1d1d      	adds	r5, r3, #4
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	6015      	str	r5, [r2, #0]
 800b7a6:	060a      	lsls	r2, r1, #24
 800b7a8:	d50b      	bpl.n	800b7c2 <_printf_i+0x162>
 800b7aa:	07ca      	lsls	r2, r1, #31
 800b7ac:	bf44      	itt	mi
 800b7ae:	f041 0120 	orrmi.w	r1, r1, #32
 800b7b2:	6021      	strmi	r1, [r4, #0]
 800b7b4:	b91b      	cbnz	r3, 800b7be <_printf_i+0x15e>
 800b7b6:	6822      	ldr	r2, [r4, #0]
 800b7b8:	f022 0220 	bic.w	r2, r2, #32
 800b7bc:	6022      	str	r2, [r4, #0]
 800b7be:	2210      	movs	r2, #16
 800b7c0:	e7b7      	b.n	800b732 <_printf_i+0xd2>
 800b7c2:	064d      	lsls	r5, r1, #25
 800b7c4:	bf48      	it	mi
 800b7c6:	b29b      	uxthmi	r3, r3
 800b7c8:	e7ef      	b.n	800b7aa <_printf_i+0x14a>
 800b7ca:	4665      	mov	r5, ip
 800b7cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7d0:	fb02 3311 	mls	r3, r2, r1, r3
 800b7d4:	5cc3      	ldrb	r3, [r0, r3]
 800b7d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b7da:	460b      	mov	r3, r1
 800b7dc:	2900      	cmp	r1, #0
 800b7de:	d1f5      	bne.n	800b7cc <_printf_i+0x16c>
 800b7e0:	e7b9      	b.n	800b756 <_printf_i+0xf6>
 800b7e2:	6813      	ldr	r3, [r2, #0]
 800b7e4:	6825      	ldr	r5, [r4, #0]
 800b7e6:	6961      	ldr	r1, [r4, #20]
 800b7e8:	1d18      	adds	r0, r3, #4
 800b7ea:	6010      	str	r0, [r2, #0]
 800b7ec:	0628      	lsls	r0, r5, #24
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	d501      	bpl.n	800b7f6 <_printf_i+0x196>
 800b7f2:	6019      	str	r1, [r3, #0]
 800b7f4:	e002      	b.n	800b7fc <_printf_i+0x19c>
 800b7f6:	066a      	lsls	r2, r5, #25
 800b7f8:	d5fb      	bpl.n	800b7f2 <_printf_i+0x192>
 800b7fa:	8019      	strh	r1, [r3, #0]
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	6123      	str	r3, [r4, #16]
 800b800:	4665      	mov	r5, ip
 800b802:	e7b9      	b.n	800b778 <_printf_i+0x118>
 800b804:	6813      	ldr	r3, [r2, #0]
 800b806:	1d19      	adds	r1, r3, #4
 800b808:	6011      	str	r1, [r2, #0]
 800b80a:	681d      	ldr	r5, [r3, #0]
 800b80c:	6862      	ldr	r2, [r4, #4]
 800b80e:	2100      	movs	r1, #0
 800b810:	4628      	mov	r0, r5
 800b812:	f7f4 fd25 	bl	8000260 <memchr>
 800b816:	b108      	cbz	r0, 800b81c <_printf_i+0x1bc>
 800b818:	1b40      	subs	r0, r0, r5
 800b81a:	6060      	str	r0, [r4, #4]
 800b81c:	6863      	ldr	r3, [r4, #4]
 800b81e:	6123      	str	r3, [r4, #16]
 800b820:	2300      	movs	r3, #0
 800b822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b826:	e7a7      	b.n	800b778 <_printf_i+0x118>
 800b828:	6923      	ldr	r3, [r4, #16]
 800b82a:	462a      	mov	r2, r5
 800b82c:	4639      	mov	r1, r7
 800b82e:	4630      	mov	r0, r6
 800b830:	47c0      	blx	r8
 800b832:	3001      	adds	r0, #1
 800b834:	d0aa      	beq.n	800b78c <_printf_i+0x12c>
 800b836:	6823      	ldr	r3, [r4, #0]
 800b838:	079b      	lsls	r3, r3, #30
 800b83a:	d413      	bmi.n	800b864 <_printf_i+0x204>
 800b83c:	68e0      	ldr	r0, [r4, #12]
 800b83e:	9b03      	ldr	r3, [sp, #12]
 800b840:	4298      	cmp	r0, r3
 800b842:	bfb8      	it	lt
 800b844:	4618      	movlt	r0, r3
 800b846:	e7a3      	b.n	800b790 <_printf_i+0x130>
 800b848:	2301      	movs	r3, #1
 800b84a:	464a      	mov	r2, r9
 800b84c:	4639      	mov	r1, r7
 800b84e:	4630      	mov	r0, r6
 800b850:	47c0      	blx	r8
 800b852:	3001      	adds	r0, #1
 800b854:	d09a      	beq.n	800b78c <_printf_i+0x12c>
 800b856:	3501      	adds	r5, #1
 800b858:	68e3      	ldr	r3, [r4, #12]
 800b85a:	9a03      	ldr	r2, [sp, #12]
 800b85c:	1a9b      	subs	r3, r3, r2
 800b85e:	42ab      	cmp	r3, r5
 800b860:	dcf2      	bgt.n	800b848 <_printf_i+0x1e8>
 800b862:	e7eb      	b.n	800b83c <_printf_i+0x1dc>
 800b864:	2500      	movs	r5, #0
 800b866:	f104 0919 	add.w	r9, r4, #25
 800b86a:	e7f5      	b.n	800b858 <_printf_i+0x1f8>
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1ac      	bne.n	800b7ca <_printf_i+0x16a>
 800b870:	7803      	ldrb	r3, [r0, #0]
 800b872:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b876:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b87a:	e76c      	b.n	800b756 <_printf_i+0xf6>
 800b87c:	0800c3d5 	.word	0x0800c3d5
 800b880:	0800c3e6 	.word	0x0800c3e6

0800b884 <memmove>:
 800b884:	4288      	cmp	r0, r1
 800b886:	b510      	push	{r4, lr}
 800b888:	eb01 0302 	add.w	r3, r1, r2
 800b88c:	d807      	bhi.n	800b89e <memmove+0x1a>
 800b88e:	1e42      	subs	r2, r0, #1
 800b890:	4299      	cmp	r1, r3
 800b892:	d00a      	beq.n	800b8aa <memmove+0x26>
 800b894:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b898:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b89c:	e7f8      	b.n	800b890 <memmove+0xc>
 800b89e:	4283      	cmp	r3, r0
 800b8a0:	d9f5      	bls.n	800b88e <memmove+0xa>
 800b8a2:	1881      	adds	r1, r0, r2
 800b8a4:	1ad2      	subs	r2, r2, r3
 800b8a6:	42d3      	cmn	r3, r2
 800b8a8:	d100      	bne.n	800b8ac <memmove+0x28>
 800b8aa:	bd10      	pop	{r4, pc}
 800b8ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8b0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b8b4:	e7f7      	b.n	800b8a6 <memmove+0x22>
	...

0800b8b8 <_free_r>:
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	4605      	mov	r5, r0
 800b8bc:	2900      	cmp	r1, #0
 800b8be:	d045      	beq.n	800b94c <_free_r+0x94>
 800b8c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8c4:	1f0c      	subs	r4, r1, #4
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	bfb8      	it	lt
 800b8ca:	18e4      	addlt	r4, r4, r3
 800b8cc:	f000 f8d2 	bl	800ba74 <__malloc_lock>
 800b8d0:	4a1f      	ldr	r2, [pc, #124]	; (800b950 <_free_r+0x98>)
 800b8d2:	6813      	ldr	r3, [r2, #0]
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	b933      	cbnz	r3, 800b8e6 <_free_r+0x2e>
 800b8d8:	6063      	str	r3, [r4, #4]
 800b8da:	6014      	str	r4, [r2, #0]
 800b8dc:	4628      	mov	r0, r5
 800b8de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8e2:	f000 b8c8 	b.w	800ba76 <__malloc_unlock>
 800b8e6:	42a3      	cmp	r3, r4
 800b8e8:	d90c      	bls.n	800b904 <_free_r+0x4c>
 800b8ea:	6821      	ldr	r1, [r4, #0]
 800b8ec:	1862      	adds	r2, r4, r1
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	bf04      	itt	eq
 800b8f2:	681a      	ldreq	r2, [r3, #0]
 800b8f4:	685b      	ldreq	r3, [r3, #4]
 800b8f6:	6063      	str	r3, [r4, #4]
 800b8f8:	bf04      	itt	eq
 800b8fa:	1852      	addeq	r2, r2, r1
 800b8fc:	6022      	streq	r2, [r4, #0]
 800b8fe:	6004      	str	r4, [r0, #0]
 800b900:	e7ec      	b.n	800b8dc <_free_r+0x24>
 800b902:	4613      	mov	r3, r2
 800b904:	685a      	ldr	r2, [r3, #4]
 800b906:	b10a      	cbz	r2, 800b90c <_free_r+0x54>
 800b908:	42a2      	cmp	r2, r4
 800b90a:	d9fa      	bls.n	800b902 <_free_r+0x4a>
 800b90c:	6819      	ldr	r1, [r3, #0]
 800b90e:	1858      	adds	r0, r3, r1
 800b910:	42a0      	cmp	r0, r4
 800b912:	d10b      	bne.n	800b92c <_free_r+0x74>
 800b914:	6820      	ldr	r0, [r4, #0]
 800b916:	4401      	add	r1, r0
 800b918:	1858      	adds	r0, r3, r1
 800b91a:	4282      	cmp	r2, r0
 800b91c:	6019      	str	r1, [r3, #0]
 800b91e:	d1dd      	bne.n	800b8dc <_free_r+0x24>
 800b920:	6810      	ldr	r0, [r2, #0]
 800b922:	6852      	ldr	r2, [r2, #4]
 800b924:	605a      	str	r2, [r3, #4]
 800b926:	4401      	add	r1, r0
 800b928:	6019      	str	r1, [r3, #0]
 800b92a:	e7d7      	b.n	800b8dc <_free_r+0x24>
 800b92c:	d902      	bls.n	800b934 <_free_r+0x7c>
 800b92e:	230c      	movs	r3, #12
 800b930:	602b      	str	r3, [r5, #0]
 800b932:	e7d3      	b.n	800b8dc <_free_r+0x24>
 800b934:	6820      	ldr	r0, [r4, #0]
 800b936:	1821      	adds	r1, r4, r0
 800b938:	428a      	cmp	r2, r1
 800b93a:	bf04      	itt	eq
 800b93c:	6811      	ldreq	r1, [r2, #0]
 800b93e:	6852      	ldreq	r2, [r2, #4]
 800b940:	6062      	str	r2, [r4, #4]
 800b942:	bf04      	itt	eq
 800b944:	1809      	addeq	r1, r1, r0
 800b946:	6021      	streq	r1, [r4, #0]
 800b948:	605c      	str	r4, [r3, #4]
 800b94a:	e7c7      	b.n	800b8dc <_free_r+0x24>
 800b94c:	bd38      	pop	{r3, r4, r5, pc}
 800b94e:	bf00      	nop
 800b950:	200015c8 	.word	0x200015c8

0800b954 <_malloc_r>:
 800b954:	b570      	push	{r4, r5, r6, lr}
 800b956:	1ccd      	adds	r5, r1, #3
 800b958:	f025 0503 	bic.w	r5, r5, #3
 800b95c:	3508      	adds	r5, #8
 800b95e:	2d0c      	cmp	r5, #12
 800b960:	bf38      	it	cc
 800b962:	250c      	movcc	r5, #12
 800b964:	2d00      	cmp	r5, #0
 800b966:	4606      	mov	r6, r0
 800b968:	db01      	blt.n	800b96e <_malloc_r+0x1a>
 800b96a:	42a9      	cmp	r1, r5
 800b96c:	d903      	bls.n	800b976 <_malloc_r+0x22>
 800b96e:	230c      	movs	r3, #12
 800b970:	6033      	str	r3, [r6, #0]
 800b972:	2000      	movs	r0, #0
 800b974:	bd70      	pop	{r4, r5, r6, pc}
 800b976:	f000 f87d 	bl	800ba74 <__malloc_lock>
 800b97a:	4a21      	ldr	r2, [pc, #132]	; (800ba00 <_malloc_r+0xac>)
 800b97c:	6814      	ldr	r4, [r2, #0]
 800b97e:	4621      	mov	r1, r4
 800b980:	b991      	cbnz	r1, 800b9a8 <_malloc_r+0x54>
 800b982:	4c20      	ldr	r4, [pc, #128]	; (800ba04 <_malloc_r+0xb0>)
 800b984:	6823      	ldr	r3, [r4, #0]
 800b986:	b91b      	cbnz	r3, 800b990 <_malloc_r+0x3c>
 800b988:	4630      	mov	r0, r6
 800b98a:	f000 f863 	bl	800ba54 <_sbrk_r>
 800b98e:	6020      	str	r0, [r4, #0]
 800b990:	4629      	mov	r1, r5
 800b992:	4630      	mov	r0, r6
 800b994:	f000 f85e 	bl	800ba54 <_sbrk_r>
 800b998:	1c43      	adds	r3, r0, #1
 800b99a:	d124      	bne.n	800b9e6 <_malloc_r+0x92>
 800b99c:	230c      	movs	r3, #12
 800b99e:	6033      	str	r3, [r6, #0]
 800b9a0:	4630      	mov	r0, r6
 800b9a2:	f000 f868 	bl	800ba76 <__malloc_unlock>
 800b9a6:	e7e4      	b.n	800b972 <_malloc_r+0x1e>
 800b9a8:	680b      	ldr	r3, [r1, #0]
 800b9aa:	1b5b      	subs	r3, r3, r5
 800b9ac:	d418      	bmi.n	800b9e0 <_malloc_r+0x8c>
 800b9ae:	2b0b      	cmp	r3, #11
 800b9b0:	d90f      	bls.n	800b9d2 <_malloc_r+0x7e>
 800b9b2:	600b      	str	r3, [r1, #0]
 800b9b4:	50cd      	str	r5, [r1, r3]
 800b9b6:	18cc      	adds	r4, r1, r3
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	f000 f85c 	bl	800ba76 <__malloc_unlock>
 800b9be:	f104 000b 	add.w	r0, r4, #11
 800b9c2:	1d23      	adds	r3, r4, #4
 800b9c4:	f020 0007 	bic.w	r0, r0, #7
 800b9c8:	1ac3      	subs	r3, r0, r3
 800b9ca:	d0d3      	beq.n	800b974 <_malloc_r+0x20>
 800b9cc:	425a      	negs	r2, r3
 800b9ce:	50e2      	str	r2, [r4, r3]
 800b9d0:	e7d0      	b.n	800b974 <_malloc_r+0x20>
 800b9d2:	428c      	cmp	r4, r1
 800b9d4:	684b      	ldr	r3, [r1, #4]
 800b9d6:	bf16      	itet	ne
 800b9d8:	6063      	strne	r3, [r4, #4]
 800b9da:	6013      	streq	r3, [r2, #0]
 800b9dc:	460c      	movne	r4, r1
 800b9de:	e7eb      	b.n	800b9b8 <_malloc_r+0x64>
 800b9e0:	460c      	mov	r4, r1
 800b9e2:	6849      	ldr	r1, [r1, #4]
 800b9e4:	e7cc      	b.n	800b980 <_malloc_r+0x2c>
 800b9e6:	1cc4      	adds	r4, r0, #3
 800b9e8:	f024 0403 	bic.w	r4, r4, #3
 800b9ec:	42a0      	cmp	r0, r4
 800b9ee:	d005      	beq.n	800b9fc <_malloc_r+0xa8>
 800b9f0:	1a21      	subs	r1, r4, r0
 800b9f2:	4630      	mov	r0, r6
 800b9f4:	f000 f82e 	bl	800ba54 <_sbrk_r>
 800b9f8:	3001      	adds	r0, #1
 800b9fa:	d0cf      	beq.n	800b99c <_malloc_r+0x48>
 800b9fc:	6025      	str	r5, [r4, #0]
 800b9fe:	e7db      	b.n	800b9b8 <_malloc_r+0x64>
 800ba00:	200015c8 	.word	0x200015c8
 800ba04:	200015cc 	.word	0x200015cc

0800ba08 <_realloc_r>:
 800ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0a:	4607      	mov	r7, r0
 800ba0c:	4614      	mov	r4, r2
 800ba0e:	460e      	mov	r6, r1
 800ba10:	b921      	cbnz	r1, 800ba1c <_realloc_r+0x14>
 800ba12:	4611      	mov	r1, r2
 800ba14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ba18:	f7ff bf9c 	b.w	800b954 <_malloc_r>
 800ba1c:	b922      	cbnz	r2, 800ba28 <_realloc_r+0x20>
 800ba1e:	f7ff ff4b 	bl	800b8b8 <_free_r>
 800ba22:	4625      	mov	r5, r4
 800ba24:	4628      	mov	r0, r5
 800ba26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba28:	f000 f826 	bl	800ba78 <_malloc_usable_size_r>
 800ba2c:	42a0      	cmp	r0, r4
 800ba2e:	d20f      	bcs.n	800ba50 <_realloc_r+0x48>
 800ba30:	4621      	mov	r1, r4
 800ba32:	4638      	mov	r0, r7
 800ba34:	f7ff ff8e 	bl	800b954 <_malloc_r>
 800ba38:	4605      	mov	r5, r0
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d0f2      	beq.n	800ba24 <_realloc_r+0x1c>
 800ba3e:	4631      	mov	r1, r6
 800ba40:	4622      	mov	r2, r4
 800ba42:	f7ff fc11 	bl	800b268 <memcpy>
 800ba46:	4631      	mov	r1, r6
 800ba48:	4638      	mov	r0, r7
 800ba4a:	f7ff ff35 	bl	800b8b8 <_free_r>
 800ba4e:	e7e9      	b.n	800ba24 <_realloc_r+0x1c>
 800ba50:	4635      	mov	r5, r6
 800ba52:	e7e7      	b.n	800ba24 <_realloc_r+0x1c>

0800ba54 <_sbrk_r>:
 800ba54:	b538      	push	{r3, r4, r5, lr}
 800ba56:	4c06      	ldr	r4, [pc, #24]	; (800ba70 <_sbrk_r+0x1c>)
 800ba58:	2300      	movs	r3, #0
 800ba5a:	4605      	mov	r5, r0
 800ba5c:	4608      	mov	r0, r1
 800ba5e:	6023      	str	r3, [r4, #0]
 800ba60:	f7ff fafc 	bl	800b05c <_sbrk>
 800ba64:	1c43      	adds	r3, r0, #1
 800ba66:	d102      	bne.n	800ba6e <_sbrk_r+0x1a>
 800ba68:	6823      	ldr	r3, [r4, #0]
 800ba6a:	b103      	cbz	r3, 800ba6e <_sbrk_r+0x1a>
 800ba6c:	602b      	str	r3, [r5, #0]
 800ba6e:	bd38      	pop	{r3, r4, r5, pc}
 800ba70:	20001f34 	.word	0x20001f34

0800ba74 <__malloc_lock>:
 800ba74:	4770      	bx	lr

0800ba76 <__malloc_unlock>:
 800ba76:	4770      	bx	lr

0800ba78 <_malloc_usable_size_r>:
 800ba78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba7c:	1f18      	subs	r0, r3, #4
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	bfbc      	itt	lt
 800ba82:	580b      	ldrlt	r3, [r1, r0]
 800ba84:	18c0      	addlt	r0, r0, r3
 800ba86:	4770      	bx	lr

0800ba88 <_init>:
 800ba88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba8a:	bf00      	nop
 800ba8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba8e:	bc08      	pop	{r3}
 800ba90:	469e      	mov	lr, r3
 800ba92:	4770      	bx	lr

0800ba94 <_fini>:
 800ba94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba96:	bf00      	nop
 800ba98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba9a:	bc08      	pop	{r3}
 800ba9c:	469e      	mov	lr, r3
 800ba9e:	4770      	bx	lr
