
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c13c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  0800c300  0800c300  0001c300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c530  0800c530  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c530  0800c530  0001c530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c538  0800c538  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c538  0800c538  0001c538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c53c  0800c53c  0001c53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  0800c540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017f8  2000013c  0800c67c  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001934  0800c67c  00021934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024d66  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000047bd  00000000  00000000  00044ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c88  00000000  00000000  00049690  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a30  00000000  00000000  0004b318  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000304cf  00000000  00000000  0004cd48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018d6c  00000000  00000000  0007d217  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011e664  00000000  00000000  00095f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b45e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c34  00000000  00000000  001b4664  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000013c 	.word	0x2000013c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c2e4 	.word	0x0800c2e4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000140 	.word	0x20000140
 80001fc:	0800c2e4 	.word	0x0800c2e4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	f000 f8ff 	bl	80010d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f009 fc01 	bl	800a6e0 <HAL_InitTick>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d002      	beq.n	8000eea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	71fb      	strb	r3, [r7, #7]
 8000ee8:	e001      	b.n	8000eee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eea:	f009 fb01 	bl	800a4f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eee:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000004 	.word	0x20000004
 8000f1c:	20001628 	.word	0x20001628

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20001628 	.word	0x20001628

08000f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff ffee 	bl	8000f20 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_Delay+0x40>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5e:	bf00      	nop
 8000f60:	f7ff ffde 	bl	8000f20 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000004 	.word	0x20000004

08000f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <__NVIC_GetPriorityGrouping+0x18>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	f003 0307 	and.w	r3, r3, #7
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db0b      	blt.n	800100a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	f003 021f 	and.w	r2, r3, #31
 8000ff8:	4907      	ldr	r1, [pc, #28]	; (8001018 <__NVIC_EnableIRQ+0x38>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	095b      	lsrs	r3, r3, #5
 8001000:	2001      	movs	r0, #1
 8001002:	fa00 f202 	lsl.w	r2, r0, r2
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000e100 	.word	0xe000e100

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ff4c 	bl	8000f7c <__NVIC_SetPriorityGrouping>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010fe:	f7ff ff61 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 8001102:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	68b9      	ldr	r1, [r7, #8]
 8001108:	6978      	ldr	r0, [r7, #20]
 800110a:	f7ff ffb1 	bl	8001070 <NVIC_EncodePriority>
 800110e:	4602      	mov	r2, r0
 8001110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001114:	4611      	mov	r1, r2
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff80 	bl	800101c <__NVIC_SetPriority>
}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff54 	bl	8000fe0 <__NVIC_EnableIRQ>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114e:	e166      	b.n	800141e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2101      	movs	r1, #1
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	4013      	ands	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 8158 	beq.w	8001418 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d00b      	beq.n	8001188 <HAL_GPIO_Init+0x48>
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d007      	beq.n	8001188 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800117c:	2b11      	cmp	r3, #17
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b12      	cmp	r3, #18
 8001186:	d130      	bne.n	80011ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011be:	2201      	movs	r2, #1
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	f003 0201 	and.w	r2, r3, #1
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0xea>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b12      	cmp	r3, #18
 8001228:	d123      	bne.n	8001272 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	220f      	movs	r2, #15
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	691a      	ldr	r2, [r3, #16]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	6939      	ldr	r1, [r7, #16]
 800126e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	2203      	movs	r2, #3
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0203 	and.w	r2, r3, #3
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 80b2 	beq.w	8001418 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b4:	4b61      	ldr	r3, [pc, #388]	; (800143c <HAL_GPIO_Init+0x2fc>)
 80012b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b8:	4a60      	ldr	r2, [pc, #384]	; (800143c <HAL_GPIO_Init+0x2fc>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6613      	str	r3, [r2, #96]	; 0x60
 80012c0:	4b5e      	ldr	r3, [pc, #376]	; (800143c <HAL_GPIO_Init+0x2fc>)
 80012c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012cc:	4a5c      	ldr	r2, [pc, #368]	; (8001440 <HAL_GPIO_Init+0x300>)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012f6:	d02b      	beq.n	8001350 <HAL_GPIO_Init+0x210>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a52      	ldr	r2, [pc, #328]	; (8001444 <HAL_GPIO_Init+0x304>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d025      	beq.n	800134c <HAL_GPIO_Init+0x20c>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a51      	ldr	r2, [pc, #324]	; (8001448 <HAL_GPIO_Init+0x308>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d01f      	beq.n	8001348 <HAL_GPIO_Init+0x208>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a50      	ldr	r2, [pc, #320]	; (800144c <HAL_GPIO_Init+0x30c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d019      	beq.n	8001344 <HAL_GPIO_Init+0x204>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a4f      	ldr	r2, [pc, #316]	; (8001450 <HAL_GPIO_Init+0x310>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d013      	beq.n	8001340 <HAL_GPIO_Init+0x200>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a4e      	ldr	r2, [pc, #312]	; (8001454 <HAL_GPIO_Init+0x314>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d00d      	beq.n	800133c <HAL_GPIO_Init+0x1fc>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a4d      	ldr	r2, [pc, #308]	; (8001458 <HAL_GPIO_Init+0x318>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d007      	beq.n	8001338 <HAL_GPIO_Init+0x1f8>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a4c      	ldr	r2, [pc, #304]	; (800145c <HAL_GPIO_Init+0x31c>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d101      	bne.n	8001334 <HAL_GPIO_Init+0x1f4>
 8001330:	2307      	movs	r3, #7
 8001332:	e00e      	b.n	8001352 <HAL_GPIO_Init+0x212>
 8001334:	2308      	movs	r3, #8
 8001336:	e00c      	b.n	8001352 <HAL_GPIO_Init+0x212>
 8001338:	2306      	movs	r3, #6
 800133a:	e00a      	b.n	8001352 <HAL_GPIO_Init+0x212>
 800133c:	2305      	movs	r3, #5
 800133e:	e008      	b.n	8001352 <HAL_GPIO_Init+0x212>
 8001340:	2304      	movs	r3, #4
 8001342:	e006      	b.n	8001352 <HAL_GPIO_Init+0x212>
 8001344:	2303      	movs	r3, #3
 8001346:	e004      	b.n	8001352 <HAL_GPIO_Init+0x212>
 8001348:	2302      	movs	r3, #2
 800134a:	e002      	b.n	8001352 <HAL_GPIO_Init+0x212>
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <HAL_GPIO_Init+0x212>
 8001350:	2300      	movs	r3, #0
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	f002 0203 	and.w	r2, r2, #3
 8001358:	0092      	lsls	r2, r2, #2
 800135a:	4093      	lsls	r3, r2
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001362:	4937      	ldr	r1, [pc, #220]	; (8001440 <HAL_GPIO_Init+0x300>)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	3302      	adds	r3, #2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001370:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <HAL_GPIO_Init+0x320>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001394:	4a32      	ldr	r2, [pc, #200]	; (8001460 <HAL_GPIO_Init+0x320>)
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800139a:	4b31      	ldr	r3, [pc, #196]	; (8001460 <HAL_GPIO_Init+0x320>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013be:	4a28      	ldr	r2, [pc, #160]	; (8001460 <HAL_GPIO_Init+0x320>)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013c4:	4b26      	ldr	r3, [pc, #152]	; (8001460 <HAL_GPIO_Init+0x320>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013e8:	4a1d      	ldr	r2, [pc, #116]	; (8001460 <HAL_GPIO_Init+0x320>)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_GPIO_Init+0x320>)
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001412:	4a13      	ldr	r2, [pc, #76]	; (8001460 <HAL_GPIO_Init+0x320>)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	3301      	adds	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	fa22 f303 	lsr.w	r3, r2, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	f47f ae91 	bne.w	8001150 <HAL_GPIO_Init+0x10>
  }
}
 800142e:	bf00      	nop
 8001430:	371c      	adds	r7, #28
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000
 8001440:	40010000 	.word	0x40010000
 8001444:	48000400 	.word	0x48000400
 8001448:	48000800 	.word	0x48000800
 800144c:	48000c00 	.word	0x48000c00
 8001450:	48001000 	.word	0x48001000
 8001454:	48001400 	.word	0x48001400
 8001458:	48001800 	.word	0x48001800
 800145c:	48001c00 	.word	0x48001c00
 8001460:	40010400 	.word	0x40010400

08001464 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001472:	e0c9      	b.n	8001608 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001474:	2201      	movs	r2, #1
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80bc 	beq.w	8001602 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800148a:	4a66      	ldr	r2, [pc, #408]	; (8001624 <HAL_GPIO_DeInit+0x1c0>)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	220f      	movs	r2, #15
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	4013      	ands	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014b2:	d02b      	beq.n	800150c <HAL_GPIO_DeInit+0xa8>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a5c      	ldr	r2, [pc, #368]	; (8001628 <HAL_GPIO_DeInit+0x1c4>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d025      	beq.n	8001508 <HAL_GPIO_DeInit+0xa4>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a5b      	ldr	r2, [pc, #364]	; (800162c <HAL_GPIO_DeInit+0x1c8>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d01f      	beq.n	8001504 <HAL_GPIO_DeInit+0xa0>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a5a      	ldr	r2, [pc, #360]	; (8001630 <HAL_GPIO_DeInit+0x1cc>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d019      	beq.n	8001500 <HAL_GPIO_DeInit+0x9c>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a59      	ldr	r2, [pc, #356]	; (8001634 <HAL_GPIO_DeInit+0x1d0>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d013      	beq.n	80014fc <HAL_GPIO_DeInit+0x98>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a58      	ldr	r2, [pc, #352]	; (8001638 <HAL_GPIO_DeInit+0x1d4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d00d      	beq.n	80014f8 <HAL_GPIO_DeInit+0x94>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a57      	ldr	r2, [pc, #348]	; (800163c <HAL_GPIO_DeInit+0x1d8>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d007      	beq.n	80014f4 <HAL_GPIO_DeInit+0x90>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a56      	ldr	r2, [pc, #344]	; (8001640 <HAL_GPIO_DeInit+0x1dc>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d101      	bne.n	80014f0 <HAL_GPIO_DeInit+0x8c>
 80014ec:	2307      	movs	r3, #7
 80014ee:	e00e      	b.n	800150e <HAL_GPIO_DeInit+0xaa>
 80014f0:	2308      	movs	r3, #8
 80014f2:	e00c      	b.n	800150e <HAL_GPIO_DeInit+0xaa>
 80014f4:	2306      	movs	r3, #6
 80014f6:	e00a      	b.n	800150e <HAL_GPIO_DeInit+0xaa>
 80014f8:	2305      	movs	r3, #5
 80014fa:	e008      	b.n	800150e <HAL_GPIO_DeInit+0xaa>
 80014fc:	2304      	movs	r3, #4
 80014fe:	e006      	b.n	800150e <HAL_GPIO_DeInit+0xaa>
 8001500:	2303      	movs	r3, #3
 8001502:	e004      	b.n	800150e <HAL_GPIO_DeInit+0xaa>
 8001504:	2302      	movs	r3, #2
 8001506:	e002      	b.n	800150e <HAL_GPIO_DeInit+0xaa>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <HAL_GPIO_DeInit+0xaa>
 800150c:	2300      	movs	r3, #0
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	f002 0203 	and.w	r2, r2, #3
 8001514:	0092      	lsls	r2, r2, #2
 8001516:	4093      	lsls	r3, r2
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	429a      	cmp	r2, r3
 800151c:	d132      	bne.n	8001584 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800151e:	4b49      	ldr	r3, [pc, #292]	; (8001644 <HAL_GPIO_DeInit+0x1e0>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	4947      	ldr	r1, [pc, #284]	; (8001644 <HAL_GPIO_DeInit+0x1e0>)
 8001528:	4013      	ands	r3, r2
 800152a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800152c:	4b45      	ldr	r3, [pc, #276]	; (8001644 <HAL_GPIO_DeInit+0x1e0>)
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	43db      	mvns	r3, r3
 8001534:	4943      	ldr	r1, [pc, #268]	; (8001644 <HAL_GPIO_DeInit+0x1e0>)
 8001536:	4013      	ands	r3, r2
 8001538:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800153a:	4b42      	ldr	r3, [pc, #264]	; (8001644 <HAL_GPIO_DeInit+0x1e0>)
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	4940      	ldr	r1, [pc, #256]	; (8001644 <HAL_GPIO_DeInit+0x1e0>)
 8001544:	4013      	ands	r3, r2
 8001546:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001548:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <HAL_GPIO_DeInit+0x1e0>)
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	493c      	ldr	r1, [pc, #240]	; (8001644 <HAL_GPIO_DeInit+0x1e0>)
 8001552:	4013      	ands	r3, r2
 8001554:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	220f      	movs	r2, #15
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001566:	4a2f      	ldr	r2, [pc, #188]	; (8001624 <HAL_GPIO_DeInit+0x1c0>)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43da      	mvns	r2, r3
 8001576:	482b      	ldr	r0, [pc, #172]	; (8001624 <HAL_GPIO_DeInit+0x1c0>)
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	400a      	ands	r2, r1
 800157e:	3302      	adds	r3, #2
 8001580:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	2103      	movs	r1, #3
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	08da      	lsrs	r2, r3, #3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3208      	adds	r2, #8
 80015a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	220f      	movs	r2, #15
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	08d2      	lsrs	r2, r2, #3
 80015b8:	4019      	ands	r1, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3208      	adds	r2, #8
 80015be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2103      	movs	r1, #3
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	401a      	ands	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	2101      	movs	r1, #1
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	401a      	ands	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	2103      	movs	r1, #3
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	401a      	ands	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	f47f af2f 	bne.w	8001474 <HAL_GPIO_DeInit+0x10>
  }
}
 8001616:	bf00      	nop
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40010000 	.word	0x40010000
 8001628:	48000400 	.word	0x48000400
 800162c:	48000800 	.word	0x48000800
 8001630:	48000c00 	.word	0x48000c00
 8001634:	48001000 	.word	0x48001000
 8001638:	48001400 	.word	0x48001400
 800163c:	48001800 	.word	0x48001800
 8001640:	48001c00 	.word	0x48001c00
 8001644:	40010400 	.word	0x40010400

08001648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	807b      	strh	r3, [r7, #2]
 8001654:	4613      	mov	r3, r2
 8001656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001658:	787b      	ldrb	r3, [r7, #1]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800165e:	887a      	ldrh	r2, [r7, #2]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001664:	e002      	b.n	800166c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001666:	887a      	ldrh	r2, [r7, #2]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4013      	ands	r3, r2
 8001690:	041a      	lsls	r2, r3, #16
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	43d9      	mvns	r1, r3
 8001696:	887b      	ldrh	r3, [r7, #2]
 8001698:	400b      	ands	r3, r1
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	619a      	str	r2, [r3, #24]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	4013      	ands	r3, r2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d006      	beq.n	80016d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016c2:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f008 faa8 	bl	8009c20 <HAL_GPIO_EXTI_Callback>
  }
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40010400 	.word	0x40010400

080016dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e081      	b.n	80017f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d106      	bne.n	8001708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f008 ff1c 	bl	800a540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2224      	movs	r2, #36	; 0x24
 800170c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0201 	bic.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800172c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800173c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d107      	bne.n	8001756 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	e006      	b.n	8001764 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001762:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d104      	bne.n	8001776 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001774:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001788:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001798:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691a      	ldr	r2, [r3, #16]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	ea42 0103 	orr.w	r1, r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	021a      	lsls	r2, r3, #8
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69d9      	ldr	r1, [r3, #28]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1a      	ldr	r2, [r3, #32]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0201 	orr.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2220      	movs	r2, #32
 80017de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e021      	b.n	8001850 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2224      	movs	r2, #36	; 0x24
 8001810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f008 fecf 	bl	800a5c8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af02      	add	r7, sp, #8
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	4608      	mov	r0, r1
 8001862:	4611      	mov	r1, r2
 8001864:	461a      	mov	r2, r3
 8001866:	4603      	mov	r3, r0
 8001868:	817b      	strh	r3, [r7, #10]
 800186a:	460b      	mov	r3, r1
 800186c:	813b      	strh	r3, [r7, #8]
 800186e:	4613      	mov	r3, r2
 8001870:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b20      	cmp	r3, #32
 800187c:	f040 80f9 	bne.w	8001a72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <HAL_I2C_Mem_Write+0x34>
 8001886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001892:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0ed      	b.n	8001a74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <HAL_I2C_Mem_Write+0x4e>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e0e6      	b.n	8001a74 <HAL_I2C_Mem_Write+0x21c>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018ae:	f7ff fb37 	bl	8000f20 <HAL_GetTick>
 80018b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2319      	movs	r3, #25
 80018ba:	2201      	movs	r2, #1
 80018bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 fac3 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0d1      	b.n	8001a74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2221      	movs	r2, #33	; 0x21
 80018d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2240      	movs	r2, #64	; 0x40
 80018dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6a3a      	ldr	r2, [r7, #32]
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80018f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018f8:	88f8      	ldrh	r0, [r7, #6]
 80018fa:	893a      	ldrh	r2, [r7, #8]
 80018fc:	8979      	ldrh	r1, [r7, #10]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	4603      	mov	r3, r0
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 f9d3 	bl	8001cb4 <I2C_RequestMemoryWrite>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0a9      	b.n	8001a74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001924:	b29b      	uxth	r3, r3
 8001926:	2bff      	cmp	r3, #255	; 0xff
 8001928:	d90e      	bls.n	8001948 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	22ff      	movs	r2, #255	; 0xff
 800192e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001934:	b2da      	uxtb	r2, r3
 8001936:	8979      	ldrh	r1, [r7, #10]
 8001938:	2300      	movs	r3, #0
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 fba5 	bl	8002090 <I2C_TransferConfig>
 8001946:	e00f      	b.n	8001968 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001956:	b2da      	uxtb	r2, r3
 8001958:	8979      	ldrh	r1, [r7, #10]
 800195a:	2300      	movs	r3, #0
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 fb94 	bl	8002090 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 faad 	bl	8001ecc <I2C_WaitOnTXISFlagUntilTimeout>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e07b      	b.n	8001a74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001996:	b29b      	uxth	r3, r3
 8001998:	3b01      	subs	r3, #1
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d034      	beq.n	8001a20 <HAL_I2C_Mem_Write+0x1c8>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d130      	bne.n	8001a20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c4:	2200      	movs	r2, #0
 80019c6:	2180      	movs	r1, #128	; 0x80
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 fa3f 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e04d      	b.n	8001a74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019dc:	b29b      	uxth	r3, r3
 80019de:	2bff      	cmp	r3, #255	; 0xff
 80019e0:	d90e      	bls.n	8001a00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	22ff      	movs	r2, #255	; 0xff
 80019e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	8979      	ldrh	r1, [r7, #10]
 80019f0:	2300      	movs	r3, #0
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 fb49 	bl	8002090 <I2C_TransferConfig>
 80019fe:	e00f      	b.n	8001a20 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	8979      	ldrh	r1, [r7, #10]
 8001a12:	2300      	movs	r3, #0
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 fb38 	bl	8002090 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d19e      	bne.n	8001968 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 fa8c 	bl	8001f4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e01a      	b.n	8001a74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2220      	movs	r2, #32
 8001a44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6859      	ldr	r1, [r3, #4]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_I2C_Mem_Write+0x224>)
 8001a52:	400b      	ands	r3, r1
 8001a54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2220      	movs	r2, #32
 8001a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001a72:	2302      	movs	r3, #2
  }
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	fe00e800 	.word	0xfe00e800

08001a80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	4608      	mov	r0, r1
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4603      	mov	r3, r0
 8001a90:	817b      	strh	r3, [r7, #10]
 8001a92:	460b      	mov	r3, r1
 8001a94:	813b      	strh	r3, [r7, #8]
 8001a96:	4613      	mov	r3, r2
 8001a98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b20      	cmp	r3, #32
 8001aa4:	f040 80fd 	bne.w	8001ca2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <HAL_I2C_Mem_Read+0x34>
 8001aae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d105      	bne.n	8001ac0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0f1      	b.n	8001ca4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_I2C_Mem_Read+0x4e>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e0ea      	b.n	8001ca4 <HAL_I2C_Mem_Read+0x224>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ad6:	f7ff fa23 	bl	8000f20 <HAL_GetTick>
 8001ada:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2319      	movs	r3, #25
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f9af 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0d5      	b.n	8001ca4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2222      	movs	r2, #34	; 0x22
 8001afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2240      	movs	r2, #64	; 0x40
 8001b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a3a      	ldr	r2, [r7, #32]
 8001b12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b20:	88f8      	ldrh	r0, [r7, #6]
 8001b22:	893a      	ldrh	r2, [r7, #8]
 8001b24:	8979      	ldrh	r1, [r7, #10]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	4603      	mov	r3, r0
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 f913 	bl	8001d5c <I2C_RequestMemoryRead>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0ad      	b.n	8001ca4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	2bff      	cmp	r3, #255	; 0xff
 8001b50:	d90e      	bls.n	8001b70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	22ff      	movs	r2, #255	; 0xff
 8001b56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	8979      	ldrh	r1, [r7, #10]
 8001b60:	4b52      	ldr	r3, [pc, #328]	; (8001cac <HAL_I2C_Mem_Read+0x22c>)
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 fa91 	bl	8002090 <I2C_TransferConfig>
 8001b6e:	e00f      	b.n	8001b90 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	8979      	ldrh	r1, [r7, #10]
 8001b82:	4b4a      	ldr	r3, [pc, #296]	; (8001cac <HAL_I2C_Mem_Read+0x22c>)
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 fa80 	bl	8002090 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b96:	2200      	movs	r2, #0
 8001b98:	2104      	movs	r1, #4
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f956 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e07c      	b.n	8001ca4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d034      	beq.n	8001c50 <HAL_I2C_Mem_Read+0x1d0>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d130      	bne.n	8001c50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2180      	movs	r1, #128	; 0x80
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f000 f927 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e04d      	b.n	8001ca4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	2bff      	cmp	r3, #255	; 0xff
 8001c10:	d90e      	bls.n	8001c30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	22ff      	movs	r2, #255	; 0xff
 8001c16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	8979      	ldrh	r1, [r7, #10]
 8001c20:	2300      	movs	r3, #0
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 fa31 	bl	8002090 <I2C_TransferConfig>
 8001c2e:	e00f      	b.n	8001c50 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	8979      	ldrh	r1, [r7, #10]
 8001c42:	2300      	movs	r3, #0
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 fa20 	bl	8002090 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d19a      	bne.n	8001b90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 f974 	bl	8001f4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e01a      	b.n	8001ca4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2220      	movs	r2, #32
 8001c74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_I2C_Mem_Read+0x230>)
 8001c82:	400b      	ands	r3, r1
 8001c84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e000      	b.n	8001ca4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001ca2:	2302      	movs	r3, #2
  }
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	80002400 	.word	0x80002400
 8001cb0:	fe00e800 	.word	0xfe00e800

08001cb4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	4608      	mov	r0, r1
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	817b      	strh	r3, [r7, #10]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	813b      	strh	r3, [r7, #8]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	8979      	ldrh	r1, [r7, #10]
 8001cd4:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <I2C_RequestMemoryWrite+0xa4>)
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f9d7 	bl	8002090 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	69b9      	ldr	r1, [r7, #24]
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f8f0 	bl	8001ecc <I2C_WaitOnTXISFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e02c      	b.n	8001d50 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d105      	bne.n	8001d08 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cfc:	893b      	ldrh	r3, [r7, #8]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	629a      	str	r2, [r3, #40]	; 0x28
 8001d06:	e015      	b.n	8001d34 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d08:	893b      	ldrh	r3, [r7, #8]
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d16:	69fa      	ldr	r2, [r7, #28]
 8001d18:	69b9      	ldr	r1, [r7, #24]
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 f8d6 	bl	8001ecc <I2C_WaitOnTXISFlagUntilTimeout>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e012      	b.n	8001d50 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d2a:	893b      	ldrh	r3, [r7, #8]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2180      	movs	r1, #128	; 0x80
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f884 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	80002000 	.word	0x80002000

08001d5c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	4608      	mov	r0, r1
 8001d66:	4611      	mov	r1, r2
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	817b      	strh	r3, [r7, #10]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	813b      	strh	r3, [r7, #8]
 8001d72:	4613      	mov	r3, r2
 8001d74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	8979      	ldrh	r1, [r7, #10]
 8001d7c:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <I2C_RequestMemoryRead+0xa4>)
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	2300      	movs	r3, #0
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 f984 	bl	8002090 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	69b9      	ldr	r1, [r7, #24]
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f89d 	bl	8001ecc <I2C_WaitOnTXISFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e02c      	b.n	8001df6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d105      	bne.n	8001dae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001da2:	893b      	ldrh	r3, [r7, #8]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28
 8001dac:	e015      	b.n	8001dda <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001dae:	893b      	ldrh	r3, [r7, #8]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dbc:	69fa      	ldr	r2, [r7, #28]
 8001dbe:	69b9      	ldr	r1, [r7, #24]
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f883 	bl	8001ecc <I2C_WaitOnTXISFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e012      	b.n	8001df6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dd0:	893b      	ldrh	r3, [r7, #8]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	2200      	movs	r2, #0
 8001de2:	2140      	movs	r1, #64	; 0x40
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 f831 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	80002000 	.word	0x80002000

08001e04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d103      	bne.n	8001e22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d007      	beq.n	8001e40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	619a      	str	r2, [r3, #24]
  }
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e5c:	e022      	b.n	8001ea4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e64:	d01e      	beq.n	8001ea4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e66:	f7ff f85b 	bl	8000f20 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d302      	bcc.n	8001e7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d113      	bne.n	8001ea4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e80:	f043 0220 	orr.w	r2, r3, #32
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e00f      	b.n	8001ec4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699a      	ldr	r2, [r3, #24]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	4013      	ands	r3, r2
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d0cd      	beq.n	8001e5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ed8:	e02c      	b.n	8001f34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 f870 	bl	8001fc4 <I2C_IsAcknowledgeFailed>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e02a      	b.n	8001f44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d01e      	beq.n	8001f34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ef6:	f7ff f813 	bl	8000f20 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d302      	bcc.n	8001f0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d113      	bne.n	8001f34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	f043 0220 	orr.w	r2, r3, #32
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e007      	b.n	8001f44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d1cb      	bne.n	8001eda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f58:	e028      	b.n	8001fac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 f830 	bl	8001fc4 <I2C_IsAcknowledgeFailed>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e026      	b.n	8001fbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6e:	f7fe ffd7 	bl	8000f20 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d302      	bcc.n	8001f84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d113      	bne.n	8001fac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f88:	f043 0220 	orr.w	r2, r3, #32
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e007      	b.n	8001fbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	d1cf      	bne.n	8001f5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	2b10      	cmp	r3, #16
 8001fdc:	d151      	bne.n	8002082 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fde:	e022      	b.n	8002026 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe6:	d01e      	beq.n	8002026 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe8:	f7fe ff9a 	bl	8000f20 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d302      	bcc.n	8001ffe <I2C_IsAcknowledgeFailed+0x3a>
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d113      	bne.n	8002026 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	f043 0220 	orr.w	r2, r3, #32
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e02e      	b.n	8002084 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b20      	cmp	r3, #32
 8002032:	d1d5      	bne.n	8001fe0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2210      	movs	r2, #16
 800203a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2220      	movs	r2, #32
 8002042:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f7ff fedd 	bl	8001e04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6859      	ldr	r1, [r3, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b0d      	ldr	r3, [pc, #52]	; (800208c <I2C_IsAcknowledgeFailed+0xc8>)
 8002056:	400b      	ands	r3, r1
 8002058:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f043 0204 	orr.w	r2, r3, #4
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	fe00e800 	.word	0xfe00e800

08002090 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	460b      	mov	r3, r1
 800209c:	817b      	strh	r3, [r7, #10]
 800209e:	4613      	mov	r3, r2
 80020a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	0d5b      	lsrs	r3, r3, #21
 80020ac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80020b0:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <I2C_TransferConfig+0x58>)
 80020b2:	430b      	orrs	r3, r1
 80020b4:	43db      	mvns	r3, r3
 80020b6:	ea02 0103 	and.w	r1, r2, r3
 80020ba:	897b      	ldrh	r3, [r7, #10]
 80020bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020c0:	7a7b      	ldrb	r3, [r7, #9]
 80020c2:	041b      	lsls	r3, r3, #16
 80020c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	431a      	orrs	r2, r3
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	03ff63ff 	.word	0x03ff63ff

080020ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b20      	cmp	r3, #32
 8002100:	d138      	bne.n	8002174 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800210c:	2302      	movs	r3, #2
 800210e:	e032      	b.n	8002176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2224      	movs	r2, #36	; 0x24
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800213e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6819      	ldr	r1, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	e000      	b.n	8002176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002174:	2302      	movs	r3, #2
  }
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b20      	cmp	r3, #32
 8002196:	d139      	bne.n	800220c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e033      	b.n	800220e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2224      	movs	r2, #36	; 0x24
 80021b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0201 	bic.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0201 	orr.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	e000      	b.n	800220e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800220c:	2302      	movs	r3, #2
  }
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222c:	d102      	bne.n	8002234 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800222e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002232:	e00b      	b.n	800224c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002242:	d102      	bne.n	800224a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002244:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002248:	e000      	b.n	800224c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800224a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40007000 	.word	0x40007000

0800225c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d141      	bne.n	80022ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800226a:	4b4b      	ldr	r3, [pc, #300]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002276:	d131      	bne.n	80022dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002278:	4b47      	ldr	r3, [pc, #284]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800227e:	4a46      	ldr	r2, [pc, #280]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002284:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002288:	4b43      	ldr	r3, [pc, #268]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002290:	4a41      	ldr	r2, [pc, #260]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002296:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002298:	4b40      	ldr	r3, [pc, #256]	; (800239c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2232      	movs	r2, #50	; 0x32
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	4a3f      	ldr	r2, [pc, #252]	; (80023a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	0c9b      	lsrs	r3, r3, #18
 80022aa:	3301      	adds	r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ae:	e002      	b.n	80022b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022b6:	4b38      	ldr	r3, [pc, #224]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c2:	d102      	bne.n	80022ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f2      	bne.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022ca:	4b33      	ldr	r3, [pc, #204]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d6:	d158      	bne.n	800238a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e057      	b.n	800238c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022dc:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022e2:	4a2d      	ldr	r2, [pc, #180]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022ec:	e04d      	b.n	800238a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022f4:	d141      	bne.n	800237a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022f6:	4b28      	ldr	r3, [pc, #160]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002302:	d131      	bne.n	8002368 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002304:	4b24      	ldr	r3, [pc, #144]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800230a:	4a23      	ldr	r2, [pc, #140]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002310:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002314:	4b20      	ldr	r3, [pc, #128]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800231c:	4a1e      	ldr	r2, [pc, #120]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002322:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2232      	movs	r2, #50	; 0x32
 800232a:	fb02 f303 	mul.w	r3, r2, r3
 800232e:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002330:	fba2 2303 	umull	r2, r3, r2, r3
 8002334:	0c9b      	lsrs	r3, r3, #18
 8002336:	3301      	adds	r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800233a:	e002      	b.n	8002342 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3b01      	subs	r3, #1
 8002340:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800234e:	d102      	bne.n	8002356 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f2      	bne.n	800233c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002362:	d112      	bne.n	800238a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e011      	b.n	800238c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002374:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002378:	e007      	b.n	800238a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800237a:	4b07      	ldr	r3, [pc, #28]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002382:	4a05      	ldr	r2, [pc, #20]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002384:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002388:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	40007000 	.word	0x40007000
 800239c:	200000d0 	.word	0x200000d0
 80023a0:	431bde83 	.word	0x431bde83

080023a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d102      	bne.n	80023b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	f000 bc16 	b.w	8002be4 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b8:	4ba0      	ldr	r3, [pc, #640]	; (800263c <HAL_RCC_OscConfig+0x298>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023c2:	4b9e      	ldr	r3, [pc, #632]	; (800263c <HAL_RCC_OscConfig+0x298>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80e4 	beq.w	80025a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d007      	beq.n	80023f0 <HAL_RCC_OscConfig+0x4c>
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2b0c      	cmp	r3, #12
 80023e4:	f040 808b 	bne.w	80024fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	f040 8087 	bne.w	80024fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023f0:	4b92      	ldr	r3, [pc, #584]	; (800263c <HAL_RCC_OscConfig+0x298>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_OscConfig+0x64>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e3ed      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1a      	ldr	r2, [r3, #32]
 800240c:	4b8b      	ldr	r3, [pc, #556]	; (800263c <HAL_RCC_OscConfig+0x298>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b00      	cmp	r3, #0
 8002416:	d004      	beq.n	8002422 <HAL_RCC_OscConfig+0x7e>
 8002418:	4b88      	ldr	r3, [pc, #544]	; (800263c <HAL_RCC_OscConfig+0x298>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002420:	e005      	b.n	800242e <HAL_RCC_OscConfig+0x8a>
 8002422:	4b86      	ldr	r3, [pc, #536]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800242e:	4293      	cmp	r3, r2
 8002430:	d223      	bcs.n	800247a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4618      	mov	r0, r3
 8002438:	f000 fdfa 	bl	8003030 <RCC_SetFlashLatencyFromMSIRange>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e3ce      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002446:	4b7d      	ldr	r3, [pc, #500]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a7c      	ldr	r2, [pc, #496]	; (800263c <HAL_RCC_OscConfig+0x298>)
 800244c:	f043 0308 	orr.w	r3, r3, #8
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b7a      	ldr	r3, [pc, #488]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4977      	ldr	r1, [pc, #476]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002464:	4b75      	ldr	r3, [pc, #468]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	4972      	ldr	r1, [pc, #456]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]
 8002478:	e025      	b.n	80024c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800247a:	4b70      	ldr	r3, [pc, #448]	; (800263c <HAL_RCC_OscConfig+0x298>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a6f      	ldr	r2, [pc, #444]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002480:	f043 0308 	orr.w	r3, r3, #8
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b6d      	ldr	r3, [pc, #436]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	496a      	ldr	r1, [pc, #424]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002498:	4b68      	ldr	r3, [pc, #416]	; (800263c <HAL_RCC_OscConfig+0x298>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	4965      	ldr	r1, [pc, #404]	; (800263c <HAL_RCC_OscConfig+0x298>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fdba 	bl	8003030 <RCC_SetFlashLatencyFromMSIRange>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e38e      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024c6:	f000 fcbf 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 80024ca:	4601      	mov	r1, r0
 80024cc:	4b5b      	ldr	r3, [pc, #364]	; (800263c <HAL_RCC_OscConfig+0x298>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	4a5a      	ldr	r2, [pc, #360]	; (8002640 <HAL_RCC_OscConfig+0x29c>)
 80024d8:	5cd3      	ldrb	r3, [r2, r3]
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	fa21 f303 	lsr.w	r3, r1, r3
 80024e2:	4a58      	ldr	r2, [pc, #352]	; (8002644 <HAL_RCC_OscConfig+0x2a0>)
 80024e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024e6:	4b58      	ldr	r3, [pc, #352]	; (8002648 <HAL_RCC_OscConfig+0x2a4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f008 f8f8 	bl	800a6e0 <HAL_InitTick>
 80024f0:	4603      	mov	r3, r0
 80024f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d052      	beq.n	80025a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	e372      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d032      	beq.n	800256c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002506:	4b4d      	ldr	r3, [pc, #308]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a4c      	ldr	r2, [pc, #304]	; (800263c <HAL_RCC_OscConfig+0x298>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002512:	f7fe fd05 	bl	8000f20 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800251a:	f7fe fd01 	bl	8000f20 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e35b      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800252c:	4b43      	ldr	r3, [pc, #268]	; (800263c <HAL_RCC_OscConfig+0x298>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002538:	4b40      	ldr	r3, [pc, #256]	; (800263c <HAL_RCC_OscConfig+0x298>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a3f      	ldr	r2, [pc, #252]	; (800263c <HAL_RCC_OscConfig+0x298>)
 800253e:	f043 0308 	orr.w	r3, r3, #8
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b3d      	ldr	r3, [pc, #244]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	493a      	ldr	r1, [pc, #232]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002556:	4b39      	ldr	r3, [pc, #228]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	4935      	ldr	r1, [pc, #212]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]
 800256a:	e01a      	b.n	80025a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800256c:	4b33      	ldr	r3, [pc, #204]	; (800263c <HAL_RCC_OscConfig+0x298>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a32      	ldr	r2, [pc, #200]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002578:	f7fe fcd2 	bl	8000f20 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002580:	f7fe fcce 	bl	8000f20 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e328      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002592:	4b2a      	ldr	r3, [pc, #168]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x1dc>
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d073      	beq.n	8002696 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_OscConfig+0x21c>
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	d10e      	bne.n	80025d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d10b      	bne.n	80025d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c0:	4b1e      	ldr	r3, [pc, #120]	; (800263c <HAL_RCC_OscConfig+0x298>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d063      	beq.n	8002694 <HAL_RCC_OscConfig+0x2f0>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d15f      	bne.n	8002694 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e305      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e0:	d106      	bne.n	80025f0 <HAL_RCC_OscConfig+0x24c>
 80025e2:	4b16      	ldr	r3, [pc, #88]	; (800263c <HAL_RCC_OscConfig+0x298>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a15      	ldr	r2, [pc, #84]	; (800263c <HAL_RCC_OscConfig+0x298>)
 80025e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e01d      	b.n	800262c <HAL_RCC_OscConfig+0x288>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025f8:	d10c      	bne.n	8002614 <HAL_RCC_OscConfig+0x270>
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <HAL_RCC_OscConfig+0x298>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a0f      	ldr	r2, [pc, #60]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	4b0d      	ldr	r3, [pc, #52]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a0c      	ldr	r2, [pc, #48]	; (800263c <HAL_RCC_OscConfig+0x298>)
 800260c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e00b      	b.n	800262c <HAL_RCC_OscConfig+0x288>
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a08      	ldr	r2, [pc, #32]	; (800263c <HAL_RCC_OscConfig+0x298>)
 800261a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a05      	ldr	r2, [pc, #20]	; (800263c <HAL_RCC_OscConfig+0x298>)
 8002626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800262a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01b      	beq.n	800266c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fe fc74 	bl	8000f20 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800263a:	e010      	b.n	800265e <HAL_RCC_OscConfig+0x2ba>
 800263c:	40021000 	.word	0x40021000
 8002640:	0800c470 	.word	0x0800c470
 8002644:	200000d0 	.word	0x200000d0
 8002648:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800264c:	f7fe fc68 	bl	8000f20 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e2c2      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800265e:	4baf      	ldr	r3, [pc, #700]	; (800291c <HAL_RCC_OscConfig+0x578>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x2a8>
 800266a:	e014      	b.n	8002696 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe fc58 	bl	8000f20 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002674:	f7fe fc54 	bl	8000f20 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e2ae      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002686:	4ba5      	ldr	r3, [pc, #660]	; (800291c <HAL_RCC_OscConfig+0x578>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x2d0>
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d060      	beq.n	8002764 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_OscConfig+0x310>
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	2b0c      	cmp	r3, #12
 80026ac:	d119      	bne.n	80026e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d116      	bne.n	80026e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b4:	4b99      	ldr	r3, [pc, #612]	; (800291c <HAL_RCC_OscConfig+0x578>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_OscConfig+0x328>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e28b      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026cc:	4b93      	ldr	r3, [pc, #588]	; (800291c <HAL_RCC_OscConfig+0x578>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	061b      	lsls	r3, r3, #24
 80026da:	4990      	ldr	r1, [pc, #576]	; (800291c <HAL_RCC_OscConfig+0x578>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e0:	e040      	b.n	8002764 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d023      	beq.n	8002732 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ea:	4b8c      	ldr	r3, [pc, #560]	; (800291c <HAL_RCC_OscConfig+0x578>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a8b      	ldr	r2, [pc, #556]	; (800291c <HAL_RCC_OscConfig+0x578>)
 80026f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f6:	f7fe fc13 	bl	8000f20 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fe:	f7fe fc0f 	bl	8000f20 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e269      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002710:	4b82      	ldr	r3, [pc, #520]	; (800291c <HAL_RCC_OscConfig+0x578>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271c:	4b7f      	ldr	r3, [pc, #508]	; (800291c <HAL_RCC_OscConfig+0x578>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	061b      	lsls	r3, r3, #24
 800272a:	497c      	ldr	r1, [pc, #496]	; (800291c <HAL_RCC_OscConfig+0x578>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
 8002730:	e018      	b.n	8002764 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002732:	4b7a      	ldr	r3, [pc, #488]	; (800291c <HAL_RCC_OscConfig+0x578>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a79      	ldr	r2, [pc, #484]	; (800291c <HAL_RCC_OscConfig+0x578>)
 8002738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800273c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273e:	f7fe fbef 	bl	8000f20 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002746:	f7fe fbeb 	bl	8000f20 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e245      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002758:	4b70      	ldr	r3, [pc, #448]	; (800291c <HAL_RCC_OscConfig+0x578>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f0      	bne.n	8002746 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d03c      	beq.n	80027ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01c      	beq.n	80027b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002778:	4b68      	ldr	r3, [pc, #416]	; (800291c <HAL_RCC_OscConfig+0x578>)
 800277a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800277e:	4a67      	ldr	r2, [pc, #412]	; (800291c <HAL_RCC_OscConfig+0x578>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7fe fbca 	bl	8000f20 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002790:	f7fe fbc6 	bl	8000f20 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e220      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027a2:	4b5e      	ldr	r3, [pc, #376]	; (800291c <HAL_RCC_OscConfig+0x578>)
 80027a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0ef      	beq.n	8002790 <HAL_RCC_OscConfig+0x3ec>
 80027b0:	e01b      	b.n	80027ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b2:	4b5a      	ldr	r3, [pc, #360]	; (800291c <HAL_RCC_OscConfig+0x578>)
 80027b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b8:	4a58      	ldr	r2, [pc, #352]	; (800291c <HAL_RCC_OscConfig+0x578>)
 80027ba:	f023 0301 	bic.w	r3, r3, #1
 80027be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c2:	f7fe fbad 	bl	8000f20 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ca:	f7fe fba9 	bl	8000f20 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e203      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027dc:	4b4f      	ldr	r3, [pc, #316]	; (800291c <HAL_RCC_OscConfig+0x578>)
 80027de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1ef      	bne.n	80027ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 80a6 	beq.w	8002944 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f8:	2300      	movs	r3, #0
 80027fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027fc:	4b47      	ldr	r3, [pc, #284]	; (800291c <HAL_RCC_OscConfig+0x578>)
 80027fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10d      	bne.n	8002824 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002808:	4b44      	ldr	r3, [pc, #272]	; (800291c <HAL_RCC_OscConfig+0x578>)
 800280a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280c:	4a43      	ldr	r2, [pc, #268]	; (800291c <HAL_RCC_OscConfig+0x578>)
 800280e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002812:	6593      	str	r3, [r2, #88]	; 0x58
 8002814:	4b41      	ldr	r3, [pc, #260]	; (800291c <HAL_RCC_OscConfig+0x578>)
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002820:	2301      	movs	r3, #1
 8002822:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002824:	4b3e      	ldr	r3, [pc, #248]	; (8002920 <HAL_RCC_OscConfig+0x57c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d118      	bne.n	8002862 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002830:	4b3b      	ldr	r3, [pc, #236]	; (8002920 <HAL_RCC_OscConfig+0x57c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a3a      	ldr	r2, [pc, #232]	; (8002920 <HAL_RCC_OscConfig+0x57c>)
 8002836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283c:	f7fe fb70 	bl	8000f20 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002844:	f7fe fb6c 	bl	8000f20 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e1c6      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002856:	4b32      	ldr	r3, [pc, #200]	; (8002920 <HAL_RCC_OscConfig+0x57c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d108      	bne.n	800287c <HAL_RCC_OscConfig+0x4d8>
 800286a:	4b2c      	ldr	r3, [pc, #176]	; (800291c <HAL_RCC_OscConfig+0x578>)
 800286c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002870:	4a2a      	ldr	r2, [pc, #168]	; (800291c <HAL_RCC_OscConfig+0x578>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800287a:	e024      	b.n	80028c6 <HAL_RCC_OscConfig+0x522>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b05      	cmp	r3, #5
 8002882:	d110      	bne.n	80028a6 <HAL_RCC_OscConfig+0x502>
 8002884:	4b25      	ldr	r3, [pc, #148]	; (800291c <HAL_RCC_OscConfig+0x578>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	4a24      	ldr	r2, [pc, #144]	; (800291c <HAL_RCC_OscConfig+0x578>)
 800288c:	f043 0304 	orr.w	r3, r3, #4
 8002890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002894:	4b21      	ldr	r3, [pc, #132]	; (800291c <HAL_RCC_OscConfig+0x578>)
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289a:	4a20      	ldr	r2, [pc, #128]	; (800291c <HAL_RCC_OscConfig+0x578>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028a4:	e00f      	b.n	80028c6 <HAL_RCC_OscConfig+0x522>
 80028a6:	4b1d      	ldr	r3, [pc, #116]	; (800291c <HAL_RCC_OscConfig+0x578>)
 80028a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ac:	4a1b      	ldr	r2, [pc, #108]	; (800291c <HAL_RCC_OscConfig+0x578>)
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028b6:	4b19      	ldr	r3, [pc, #100]	; (800291c <HAL_RCC_OscConfig+0x578>)
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028bc:	4a17      	ldr	r2, [pc, #92]	; (800291c <HAL_RCC_OscConfig+0x578>)
 80028be:	f023 0304 	bic.w	r3, r3, #4
 80028c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d016      	beq.n	80028fc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ce:	f7fe fb27 	bl	8000f20 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7fe fb23 	bl	8000f20 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e17b      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_OscConfig+0x578>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0ed      	beq.n	80028d6 <HAL_RCC_OscConfig+0x532>
 80028fa:	e01a      	b.n	8002932 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fc:	f7fe fb10 	bl	8000f20 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002902:	e00f      	b.n	8002924 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002904:	f7fe fb0c 	bl	8000f20 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d906      	bls.n	8002924 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e164      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002924:	4ba8      	ldr	r3, [pc, #672]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1e8      	bne.n	8002904 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002932:	7ffb      	ldrb	r3, [r7, #31]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d105      	bne.n	8002944 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002938:	4ba3      	ldr	r3, [pc, #652]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293c:	4aa2      	ldr	r2, [pc, #648]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 800293e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002942:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b00      	cmp	r3, #0
 800294e:	d03c      	beq.n	80029ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01c      	beq.n	8002992 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002958:	4b9b      	ldr	r3, [pc, #620]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 800295a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800295e:	4a9a      	ldr	r2, [pc, #616]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7fe fada 	bl	8000f20 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002970:	f7fe fad6 	bl	8000f20 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e130      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002982:	4b91      	ldr	r3, [pc, #580]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002984:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0ef      	beq.n	8002970 <HAL_RCC_OscConfig+0x5cc>
 8002990:	e01b      	b.n	80029ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002992:	4b8d      	ldr	r3, [pc, #564]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002994:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002998:	4a8b      	ldr	r2, [pc, #556]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 800299a:	f023 0301 	bic.w	r3, r3, #1
 800299e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a2:	f7fe fabd 	bl	8000f20 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029aa:	f7fe fab9 	bl	8000f20 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e113      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029bc:	4b82      	ldr	r3, [pc, #520]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 80029be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1ef      	bne.n	80029aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 8107 	beq.w	8002be2 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d8:	2b02      	cmp	r3, #2
 80029da:	f040 80cb 	bne.w	8002b74 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029de:	4b7a      	ldr	r3, [pc, #488]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f003 0203 	and.w	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d12c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fc:	3b01      	subs	r3, #1
 80029fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d123      	bne.n	8002a4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d11b      	bne.n	8002a4c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d113      	bne.n	8002a4c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2e:	085b      	lsrs	r3, r3, #1
 8002a30:	3b01      	subs	r3, #1
 8002a32:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d109      	bne.n	8002a4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	085b      	lsrs	r3, r3, #1
 8002a44:	3b01      	subs	r3, #1
 8002a46:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d06d      	beq.n	8002b28 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	2b0c      	cmp	r3, #12
 8002a50:	d068      	beq.n	8002b24 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a52:	4b5d      	ldr	r3, [pc, #372]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d105      	bne.n	8002a6a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a5e:	4b5a      	ldr	r3, [pc, #360]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0ba      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a6e:	4b56      	ldr	r3, [pc, #344]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a55      	ldr	r2, [pc, #340]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002a74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a78:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a7a:	f7fe fa51 	bl	8000f20 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a82:	f7fe fa4d 	bl	8000f20 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e0a7      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a94:	4b4c      	ldr	r3, [pc, #304]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f0      	bne.n	8002a82 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa0:	4b49      	ldr	r3, [pc, #292]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	4b49      	ldr	r3, [pc, #292]	; (8002bcc <HAL_RCC_OscConfig+0x828>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ab0:	3a01      	subs	r2, #1
 8002ab2:	0112      	lsls	r2, r2, #4
 8002ab4:	4311      	orrs	r1, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002aba:	0212      	lsls	r2, r2, #8
 8002abc:	4311      	orrs	r1, r2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ac2:	0852      	lsrs	r2, r2, #1
 8002ac4:	3a01      	subs	r2, #1
 8002ac6:	0552      	lsls	r2, r2, #21
 8002ac8:	4311      	orrs	r1, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ace:	0852      	lsrs	r2, r2, #1
 8002ad0:	3a01      	subs	r2, #1
 8002ad2:	0652      	lsls	r2, r2, #25
 8002ad4:	4311      	orrs	r1, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ada:	06d2      	lsls	r2, r2, #27
 8002adc:	430a      	orrs	r2, r1
 8002ade:	493a      	ldr	r1, [pc, #232]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ae4:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a37      	ldr	r2, [pc, #220]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002af0:	4b35      	ldr	r3, [pc, #212]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a34      	ldr	r2, [pc, #208]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002afc:	f7fe fa10 	bl	8000f20 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fe fa0c 	bl	8000f20 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e066      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b16:	4b2c      	ldr	r3, [pc, #176]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b22:	e05e      	b.n	8002be2 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e05d      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b28:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d156      	bne.n	8002be2 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b34:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a23      	ldr	r2, [pc, #140]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b40:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4a20      	ldr	r2, [pc, #128]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b4c:	f7fe f9e8 	bl	8000f20 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b54:	f7fe f9e4 	bl	8000f20 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e03e      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b66:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x7b0>
 8002b72:	e036      	b.n	8002be2 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2b0c      	cmp	r3, #12
 8002b78:	d031      	beq.n	8002bde <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7a:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b84:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d105      	bne.n	8002b9e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b92:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	4a0c      	ldr	r2, [pc, #48]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002b98:	f023 0303 	bic.w	r3, r3, #3
 8002b9c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <HAL_RCC_OscConfig+0x824>)
 8002ba4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bae:	f7fe f9b7 	bl	8000f20 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb4:	e00c      	b.n	8002bd0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb6:	f7fe f9b3 	bl	8000f20 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d905      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e00d      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_RCC_OscConfig+0x848>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1ec      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x812>
 8002bdc:	e001      	b.n	8002be2 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3720      	adds	r7, #32
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000

08002bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e10f      	b.n	8002e28 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c08:	4b89      	ldr	r3, [pc, #548]	; (8002e30 <HAL_RCC_ClockConfig+0x240>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d910      	bls.n	8002c38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b86      	ldr	r3, [pc, #536]	; (8002e30 <HAL_RCC_ClockConfig+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 020f 	bic.w	r2, r3, #15
 8002c1e:	4984      	ldr	r1, [pc, #528]	; (8002e30 <HAL_RCC_ClockConfig+0x240>)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c26:	4b82      	ldr	r3, [pc, #520]	; (8002e30 <HAL_RCC_ClockConfig+0x240>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0f7      	b.n	8002e28 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8089 	beq.w	8002d58 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d133      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4e:	4b79      	ldr	r3, [pc, #484]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e0e4      	b.n	8002e28 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002c5e:	f000 fa41 	bl	80030e4 <RCC_GetSysClockFreqFromPLLSource>
 8002c62:	4602      	mov	r2, r0
 8002c64:	4b74      	ldr	r3, [pc, #464]	; (8002e38 <HAL_RCC_ClockConfig+0x248>)
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d955      	bls.n	8002d16 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c6a:	4b72      	ldr	r3, [pc, #456]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c76:	4b6f      	ldr	r3, [pc, #444]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c7e:	4a6d      	ldr	r2, [pc, #436]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	e044      	b.n	8002d16 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d03e      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x126>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d13a      	bne.n	8002d16 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ca0:	4b64      	ldr	r3, [pc, #400]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ca8:	4a62      	ldr	r2, [pc, #392]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	e02f      	b.n	8002d16 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cbe:	4b5d      	ldr	r3, [pc, #372]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d115      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0ac      	b.n	8002e28 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cd6:	4b57      	ldr	r3, [pc, #348]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e0a0      	b.n	8002e28 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce6:	4b53      	ldr	r3, [pc, #332]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e098      	b.n	8002e28 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002cf6:	f000 f8a7 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	4b4e      	ldr	r3, [pc, #312]	; (8002e38 <HAL_RCC_ClockConfig+0x248>)
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d909      	bls.n	8002d16 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d02:	4b4c      	ldr	r3, [pc, #304]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d0a:	4a4a      	ldr	r2, [pc, #296]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d10:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d16:	4b47      	ldr	r3, [pc, #284]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f023 0203 	bic.w	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	4944      	ldr	r1, [pc, #272]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d28:	f7fe f8fa 	bl	8000f20 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d30:	f7fe f8f6 	bl	8000f20 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e070      	b.n	8002e28 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	4b3b      	ldr	r3, [pc, #236]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 020c 	and.w	r2, r3, #12
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d1eb      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d009      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d64:	4b33      	ldr	r3, [pc, #204]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4930      	ldr	r1, [pc, #192]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b80      	cmp	r3, #128	; 0x80
 8002d7c:	d105      	bne.n	8002d8a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d7e:	4b2d      	ldr	r3, [pc, #180]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	4a2c      	ldr	r2, [pc, #176]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d88:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d8a:	4b29      	ldr	r3, [pc, #164]	; (8002e30 <HAL_RCC_ClockConfig+0x240>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d210      	bcs.n	8002dba <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d98:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <HAL_RCC_ClockConfig+0x240>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f023 020f 	bic.w	r2, r3, #15
 8002da0:	4923      	ldr	r1, [pc, #140]	; (8002e30 <HAL_RCC_ClockConfig+0x240>)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da8:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <HAL_RCC_ClockConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d001      	beq.n	8002dba <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e036      	b.n	8002e28 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	4918      	ldr	r1, [pc, #96]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d009      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002de4:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4910      	ldr	r1, [pc, #64]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002df8:	f000 f826 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8002dfc:	4601      	mov	r1, r0
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	4a0c      	ldr	r2, [pc, #48]	; (8002e3c <HAL_RCC_ClockConfig+0x24c>)
 8002e0a:	5cd3      	ldrb	r3, [r2, r3]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	fa21 f303 	lsr.w	r3, r1, r3
 8002e14:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <HAL_RCC_ClockConfig+0x250>)
 8002e16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e18:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <HAL_RCC_ClockConfig+0x254>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f007 fc5f 	bl	800a6e0 <HAL_InitTick>
 8002e22:	4603      	mov	r3, r0
 8002e24:	73fb      	strb	r3, [r7, #15]

  return status;
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40022000 	.word	0x40022000
 8002e34:	40021000 	.word	0x40021000
 8002e38:	04c4b400 	.word	0x04c4b400
 8002e3c:	0800c470 	.word	0x0800c470
 8002e40:	200000d0 	.word	0x200000d0
 8002e44:	20000000 	.word	0x20000000

08002e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b089      	sub	sp, #36	; 0x24
 8002e4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e56:	4b3d      	ldr	r3, [pc, #244]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e60:	4b3a      	ldr	r3, [pc, #232]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0x34>
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2b0c      	cmp	r3, #12
 8002e74:	d121      	bne.n	8002eba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d11e      	bne.n	8002eba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e7c:	4b33      	ldr	r3, [pc, #204]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d107      	bne.n	8002e98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e88:	4b30      	ldr	r3, [pc, #192]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e8e:	0a1b      	lsrs	r3, r3, #8
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	e005      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e98:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ea4:	4a2a      	ldr	r2, [pc, #168]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10d      	bne.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d102      	bne.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ec0:	4b24      	ldr	r3, [pc, #144]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ec2:	61bb      	str	r3, [r7, #24]
 8002ec4:	e004      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ecc:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ece:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	2b0c      	cmp	r3, #12
 8002ed4:	d133      	bne.n	8002f3e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d002      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0xa4>
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d003      	beq.n	8002ef2 <HAL_RCC_GetSysClockFreq+0xaa>
 8002eea:	e005      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002eee:	617b      	str	r3, [r7, #20]
      break;
 8002ef0:	e005      	b.n	8002efe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ef2:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ef4:	617b      	str	r3, [r7, #20]
      break;
 8002ef6:	e002      	b.n	8002efe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	617b      	str	r3, [r7, #20]
      break;
 8002efc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002efe:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	3301      	adds	r3, #1
 8002f0a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	fb02 f203 	mul.w	r2, r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f22:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	0e5b      	lsrs	r3, r3, #25
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	3301      	adds	r3, #1
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f3e:	69bb      	ldr	r3, [r7, #24]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3724      	adds	r7, #36	; 0x24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	0800c488 	.word	0x0800c488
 8002f54:	00f42400 	.word	0x00f42400
 8002f58:	007a1200 	.word	0x007a1200

08002f5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f62:	681b      	ldr	r3, [r3, #0]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	200000d0 	.word	0x200000d0

08002f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f78:	f7ff fff0 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 8002f7c:	4601      	mov	r1, r0
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	0a1b      	lsrs	r3, r3, #8
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	4a04      	ldr	r2, [pc, #16]	; (8002f9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f8a:	5cd3      	ldrb	r3, [r2, r3]
 8002f8c:	f003 031f 	and.w	r3, r3, #31
 8002f90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	0800c480 	.word	0x0800c480

08002fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fa4:	f7ff ffda 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 8002fa8:	4601      	mov	r1, r0
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	0adb      	lsrs	r3, r3, #11
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fb6:	5cd3      	ldrb	r3, [r2, r3]
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	0800c480 	.word	0x0800c480

08002fcc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	220f      	movs	r2, #15
 8002fda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002fdc:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_RCC_GetClockConfig+0x5c>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0203 	and.w	r2, r3, #3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002fe8:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <HAL_RCC_GetClockConfig+0x5c>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <HAL_RCC_GetClockConfig+0x5c>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <HAL_RCC_GetClockConfig+0x5c>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	08db      	lsrs	r3, r3, #3
 8003006:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800300e:	4b07      	ldr	r3, [pc, #28]	; (800302c <HAL_RCC_GetClockConfig+0x60>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 020f 	and.w	r2, r3, #15
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	601a      	str	r2, [r3, #0]
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40021000 	.word	0x40021000
 800302c:	40022000 	.word	0x40022000

08003030 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003038:	2300      	movs	r3, #0
 800303a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800303e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003048:	f7ff f8e8 	bl	800221c <HAL_PWREx_GetVoltageRange>
 800304c:	6178      	str	r0, [r7, #20]
 800304e:	e014      	b.n	800307a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003050:	4b22      	ldr	r3, [pc, #136]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	4a21      	ldr	r2, [pc, #132]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305a:	6593      	str	r3, [r2, #88]	; 0x58
 800305c:	4b1f      	ldr	r3, [pc, #124]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003068:	f7ff f8d8 	bl	800221c <HAL_PWREx_GetVoltageRange>
 800306c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800306e:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003072:	4a1a      	ldr	r2, [pc, #104]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003078:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003080:	d10b      	bne.n	800309a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b80      	cmp	r3, #128	; 0x80
 8003086:	d913      	bls.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2ba0      	cmp	r3, #160	; 0xa0
 800308c:	d902      	bls.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800308e:	2302      	movs	r3, #2
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	e00d      	b.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003094:	2301      	movs	r3, #1
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	e00a      	b.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b7f      	cmp	r3, #127	; 0x7f
 800309e:	d902      	bls.n	80030a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80030a0:	2302      	movs	r3, #2
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	e004      	b.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b70      	cmp	r3, #112	; 0x70
 80030aa:	d101      	bne.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030ac:	2301      	movs	r3, #1
 80030ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 020f 	bic.w	r2, r3, #15
 80030b8:	4909      	ldr	r1, [pc, #36]	; (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d001      	beq.n	80030d2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40022000 	.word	0x40022000

080030e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80030ee:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d118      	bne.n	800312c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030fa:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d107      	bne.n	8003116 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003106:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800310c:	0a1b      	lsrs	r3, r3, #8
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	e005      	b.n	8003122 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003116:	4b23      	ldr	r3, [pc, #140]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003122:	4a21      	ldr	r2, [pc, #132]	; (80031a8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d002      	beq.n	8003142 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800313c:	2b03      	cmp	r3, #3
 800313e:	d003      	beq.n	8003148 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003140:	e005      	b.n	800314e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003142:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003144:	613b      	str	r3, [r7, #16]
    break;
 8003146:	e005      	b.n	8003154 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800314a:	613b      	str	r3, [r7, #16]
    break;
 800314c:	e002      	b.n	8003154 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	613b      	str	r3, [r7, #16]
    break;
 8003152:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003154:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	3301      	adds	r3, #1
 8003160:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	fb02 f203 	mul.w	r2, r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	fbb2 f3f3 	udiv	r3, r2, r3
 8003178:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800317a:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	0e5b      	lsrs	r3, r3, #25
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	3301      	adds	r3, #1
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003192:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003194:	683b      	ldr	r3, [r7, #0]
}
 8003196:	4618      	mov	r0, r3
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	0800c488 	.word	0x0800c488
 80031ac:	00f42400 	.word	0x00f42400
 80031b0:	007a1200 	.word	0x007a1200

080031b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031bc:	2300      	movs	r3, #0
 80031be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031c0:	2300      	movs	r3, #0
 80031c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d03d      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d00b      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80031d8:	2b40      	cmp	r3, #64	; 0x40
 80031da:	d804      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00e      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d015      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80031e4:	e01d      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80031e6:	2b60      	cmp	r3, #96	; 0x60
 80031e8:	d01e      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031ea:	2b80      	cmp	r3, #128	; 0x80
 80031ec:	d01c      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031ee:	e018      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031f0:	4b86      	ldr	r3, [pc, #536]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4a85      	ldr	r2, [pc, #532]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031fc:	e015      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3304      	adds	r3, #4
 8003202:	2100      	movs	r1, #0
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fafd 	bl	8003804 <RCCEx_PLLSAI1_Config>
 800320a:	4603      	mov	r3, r0
 800320c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800320e:	e00c      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3320      	adds	r3, #32
 8003214:	2100      	movs	r1, #0
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fbe4 	bl	80039e4 <RCCEx_PLLSAI2_Config>
 800321c:	4603      	mov	r3, r0
 800321e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003220:	e003      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	74fb      	strb	r3, [r7, #19]
      break;
 8003226:	e000      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800322a:	7cfb      	ldrb	r3, [r7, #19]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10b      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003230:	4b76      	ldr	r3, [pc, #472]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003232:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003236:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800323e:	4973      	ldr	r1, [pc, #460]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003246:	e001      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003248:	7cfb      	ldrb	r3, [r7, #19]
 800324a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d042      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003260:	d00f      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003266:	d805      	bhi.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003268:	2b00      	cmp	r3, #0
 800326a:	d011      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800326c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003270:	d017      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003272:	e01f      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003274:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003278:	d01f      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800327a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327e:	d01c      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003280:	e018      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003282:	4b62      	ldr	r3, [pc, #392]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	4a61      	ldr	r2, [pc, #388]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800328e:	e015      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3304      	adds	r3, #4
 8003294:	2100      	movs	r1, #0
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fab4 	bl	8003804 <RCCEx_PLLSAI1_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032a0:	e00c      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3320      	adds	r3, #32
 80032a6:	2100      	movs	r1, #0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fb9b 	bl	80039e4 <RCCEx_PLLSAI2_Config>
 80032ae:	4603      	mov	r3, r0
 80032b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032b2:	e003      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	74fb      	strb	r3, [r7, #19]
      break;
 80032b8:	e000      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80032ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032bc:	7cfb      	ldrb	r3, [r7, #19]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032c2:	4b52      	ldr	r3, [pc, #328]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	494e      	ldr	r1, [pc, #312]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80032d8:	e001      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032da:	7cfb      	ldrb	r3, [r7, #19]
 80032dc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 809f 	beq.w	800342a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ec:	2300      	movs	r3, #0
 80032ee:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032f0:	4b46      	ldr	r3, [pc, #280]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003300:	2300      	movs	r3, #0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00d      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	4b41      	ldr	r3, [pc, #260]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	4a40      	ldr	r2, [pc, #256]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800330c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003310:	6593      	str	r3, [r2, #88]	; 0x58
 8003312:	4b3e      	ldr	r3, [pc, #248]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331e:	2301      	movs	r3, #1
 8003320:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003322:	4b3b      	ldr	r3, [pc, #236]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a3a      	ldr	r2, [pc, #232]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800332e:	f7fd fdf7 	bl	8000f20 <HAL_GetTick>
 8003332:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003334:	e009      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003336:	f7fd fdf3 	bl	8000f20 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d902      	bls.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	74fb      	strb	r3, [r7, #19]
        break;
 8003348:	e005      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800334a:	4b31      	ldr	r3, [pc, #196]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0ef      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003356:	7cfb      	ldrb	r3, [r7, #19]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d15b      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800335c:	4b2b      	ldr	r3, [pc, #172]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003366:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d01f      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	429a      	cmp	r2, r3
 8003378:	d019      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800337a:	4b24      	ldr	r3, [pc, #144]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003384:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003386:	4b21      	ldr	r3, [pc, #132]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338c:	4a1f      	ldr	r2, [pc, #124]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800338e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003396:	4b1d      	ldr	r3, [pc, #116]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339c:	4a1b      	ldr	r2, [pc, #108]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800339e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033a6:	4a19      	ldr	r2, [pc, #100]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d016      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fd fdb2 	bl	8000f20 <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033be:	e00b      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fd fdae 	bl	8000f20 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d902      	bls.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	74fb      	strb	r3, [r7, #19]
            break;
 80033d6:	e006      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0ec      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80033e6:	7cfb      	ldrb	r3, [r7, #19]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10c      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ec:	4b07      	ldr	r3, [pc, #28]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fc:	4903      	ldr	r1, [pc, #12]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003404:	e008      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003406:	7cfb      	ldrb	r3, [r7, #19]
 8003408:	74bb      	strb	r3, [r7, #18]
 800340a:	e005      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800340c:	40021000 	.word	0x40021000
 8003410:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003418:	7c7b      	ldrb	r3, [r7, #17]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d105      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800341e:	4ba0      	ldr	r3, [pc, #640]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003422:	4a9f      	ldr	r2, [pc, #636]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003428:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003436:	4b9a      	ldr	r3, [pc, #616]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343c:	f023 0203 	bic.w	r2, r3, #3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	4996      	ldr	r1, [pc, #600]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003458:	4b91      	ldr	r3, [pc, #580]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345e:	f023 020c 	bic.w	r2, r3, #12
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	498e      	ldr	r1, [pc, #568]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800347a:	4b89      	ldr	r3, [pc, #548]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003480:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	4985      	ldr	r1, [pc, #532]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800349c:	4b80      	ldr	r3, [pc, #512]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034aa:	497d      	ldr	r1, [pc, #500]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034be:	4b78      	ldr	r3, [pc, #480]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034cc:	4974      	ldr	r1, [pc, #464]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034e0:	4b6f      	ldr	r3, [pc, #444]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ee:	496c      	ldr	r1, [pc, #432]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003502:	4b67      	ldr	r3, [pc, #412]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003508:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003510:	4963      	ldr	r1, [pc, #396]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003524:	4b5e      	ldr	r3, [pc, #376]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003532:	495b      	ldr	r1, [pc, #364]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003546:	4b56      	ldr	r3, [pc, #344]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	4952      	ldr	r1, [pc, #328]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003568:	4b4d      	ldr	r3, [pc, #308]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003576:	494a      	ldr	r1, [pc, #296]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800358a:	4b45      	ldr	r3, [pc, #276]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003590:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003598:	4941      	ldr	r1, [pc, #260]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035ac:	4b3c      	ldr	r3, [pc, #240]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035b2:	f023 0203 	bic.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ba:	4939      	ldr	r1, [pc, #228]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d028      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ce:	4b34      	ldr	r3, [pc, #208]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035dc:	4930      	ldr	r1, [pc, #192]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ec:	d106      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ee:	4b2c      	ldr	r3, [pc, #176]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	4a2b      	ldr	r2, [pc, #172]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035f8:	60d3      	str	r3, [r2, #12]
 80035fa:	e011      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003604:	d10c      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3304      	adds	r3, #4
 800360a:	2101      	movs	r1, #1
 800360c:	4618      	mov	r0, r3
 800360e:	f000 f8f9 	bl	8003804 <RCCEx_PLLSAI1_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003616:	7cfb      	ldrb	r3, [r7, #19]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 800361c:	7cfb      	ldrb	r3, [r7, #19]
 800361e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d04d      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003634:	d108      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003636:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003638:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800363c:	4a18      	ldr	r2, [pc, #96]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003642:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003646:	e012      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003648:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800364e:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003650:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003654:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003666:	490e      	ldr	r1, [pc, #56]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003672:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003676:	d106      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003678:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4a08      	ldr	r2, [pc, #32]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003682:	60d3      	str	r3, [r2, #12]
 8003684:	e020      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800368a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800368e:	d109      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003690:	4b03      	ldr	r3, [pc, #12]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	4a02      	ldr	r2, [pc, #8]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369a:	60d3      	str	r3, [r2, #12]
 800369c:	e014      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3304      	adds	r3, #4
 80036b2:	2101      	movs	r1, #1
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 f8a5 	bl	8003804 <RCCEx_PLLSAI1_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d028      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036d4:	4b4a      	ldr	r3, [pc, #296]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036e2:	4947      	ldr	r1, [pc, #284]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f2:	d106      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f4:	4b42      	ldr	r3, [pc, #264]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4a41      	ldr	r2, [pc, #260]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036fe:	60d3      	str	r3, [r2, #12]
 8003700:	e011      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003706:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800370a:	d10c      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	2101      	movs	r1, #1
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f876 	bl	8003804 <RCCEx_PLLSAI1_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003722:	7cfb      	ldrb	r3, [r7, #19]
 8003724:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d01e      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003732:	4b33      	ldr	r3, [pc, #204]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003738:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003742:	492f      	ldr	r1, [pc, #188]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003754:	d10c      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3304      	adds	r3, #4
 800375a:	2102      	movs	r1, #2
 800375c:	4618      	mov	r0, r3
 800375e:	f000 f851 	bl	8003804 <RCCEx_PLLSAI1_Config>
 8003762:	4603      	mov	r3, r0
 8003764:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003766:	7cfb      	ldrb	r3, [r7, #19]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00b      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800377c:	4b20      	ldr	r3, [pc, #128]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800377e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003782:	f023 0204 	bic.w	r2, r3, #4
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800378c:	491c      	ldr	r1, [pc, #112]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00b      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037a0:	4b17      	ldr	r3, [pc, #92]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037a6:	f023 0218 	bic.w	r2, r3, #24
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	4913      	ldr	r1, [pc, #76]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d017      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80037c4:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d4:	490a      	ldr	r1, [pc, #40]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037e6:	d105      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4a04      	ldr	r2, [pc, #16]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000

08003804 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003812:	4b70      	ldr	r3, [pc, #448]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00e      	beq.n	800383c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800381e:	4b6d      	ldr	r3, [pc, #436]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f003 0203 	and.w	r2, r3, #3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d103      	bne.n	8003836 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
       ||
 8003832:	2b00      	cmp	r3, #0
 8003834:	d13f      	bne.n	80038b6 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	73fb      	strb	r3, [r7, #15]
 800383a:	e03c      	b.n	80038b6 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d00c      	beq.n	800385e <RCCEx_PLLSAI1_Config+0x5a>
 8003844:	2b03      	cmp	r3, #3
 8003846:	d013      	beq.n	8003870 <RCCEx_PLLSAI1_Config+0x6c>
 8003848:	2b01      	cmp	r3, #1
 800384a:	d120      	bne.n	800388e <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800384c:	4b61      	ldr	r3, [pc, #388]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d11d      	bne.n	8003894 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800385c:	e01a      	b.n	8003894 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800385e:	4b5d      	ldr	r3, [pc, #372]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003866:	2b00      	cmp	r3, #0
 8003868:	d116      	bne.n	8003898 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386e:	e013      	b.n	8003898 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003870:	4b58      	ldr	r3, [pc, #352]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10f      	bne.n	800389c <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800387c:	4b55      	ldr	r3, [pc, #340]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d109      	bne.n	800389c <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800388c:	e006      	b.n	800389c <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	73fb      	strb	r3, [r7, #15]
      break;
 8003892:	e004      	b.n	800389e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003894:	bf00      	nop
 8003896:	e002      	b.n	800389e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003898:	bf00      	nop
 800389a:	e000      	b.n	800389e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800389c:	bf00      	nop
    }

    if(status == HAL_OK)
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d108      	bne.n	80038b6 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80038a4:	4b4b      	ldr	r3, [pc, #300]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f023 0203 	bic.w	r2, r3, #3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4948      	ldr	r1, [pc, #288]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f040 8086 	bne.w	80039ca <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038be:	4b45      	ldr	r3, [pc, #276]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a44      	ldr	r2, [pc, #272]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80038c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ca:	f7fd fb29 	bl	8000f20 <HAL_GetTick>
 80038ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038d0:	e009      	b.n	80038e6 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038d2:	f7fd fb25 	bl	8000f20 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d902      	bls.n	80038e6 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	73fb      	strb	r3, [r7, #15]
        break;
 80038e4:	e005      	b.n	80038f2 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038e6:	4b3b      	ldr	r3, [pc, #236]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1ef      	bne.n	80038d2 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d168      	bne.n	80039ca <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d113      	bne.n	8003926 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038fe:	4b35      	ldr	r3, [pc, #212]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	4b35      	ldr	r3, [pc, #212]	; (80039d8 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003904:	4013      	ands	r3, r2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6892      	ldr	r2, [r2, #8]
 800390a:	0211      	lsls	r1, r2, #8
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	68d2      	ldr	r2, [r2, #12]
 8003910:	06d2      	lsls	r2, r2, #27
 8003912:	4311      	orrs	r1, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6852      	ldr	r2, [r2, #4]
 8003918:	3a01      	subs	r2, #1
 800391a:	0112      	lsls	r2, r2, #4
 800391c:	430a      	orrs	r2, r1
 800391e:	492d      	ldr	r1, [pc, #180]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003920:	4313      	orrs	r3, r2
 8003922:	610b      	str	r3, [r1, #16]
 8003924:	e02d      	b.n	8003982 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d115      	bne.n	8003958 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800392c:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	4b2a      	ldr	r3, [pc, #168]	; (80039dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003932:	4013      	ands	r3, r2
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6892      	ldr	r2, [r2, #8]
 8003938:	0211      	lsls	r1, r2, #8
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6912      	ldr	r2, [r2, #16]
 800393e:	0852      	lsrs	r2, r2, #1
 8003940:	3a01      	subs	r2, #1
 8003942:	0552      	lsls	r2, r2, #21
 8003944:	4311      	orrs	r1, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6852      	ldr	r2, [r2, #4]
 800394a:	3a01      	subs	r2, #1
 800394c:	0112      	lsls	r2, r2, #4
 800394e:	430a      	orrs	r2, r1
 8003950:	4920      	ldr	r1, [pc, #128]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003952:	4313      	orrs	r3, r2
 8003954:	610b      	str	r3, [r1, #16]
 8003956:	e014      	b.n	8003982 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003958:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800395e:	4013      	ands	r3, r2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6892      	ldr	r2, [r2, #8]
 8003964:	0211      	lsls	r1, r2, #8
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6952      	ldr	r2, [r2, #20]
 800396a:	0852      	lsrs	r2, r2, #1
 800396c:	3a01      	subs	r2, #1
 800396e:	0652      	lsls	r2, r2, #25
 8003970:	4311      	orrs	r1, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6852      	ldr	r2, [r2, #4]
 8003976:	3a01      	subs	r2, #1
 8003978:	0112      	lsls	r2, r2, #4
 800397a:	430a      	orrs	r2, r1
 800397c:	4915      	ldr	r1, [pc, #84]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800397e:	4313      	orrs	r3, r2
 8003980:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003982:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a13      	ldr	r2, [pc, #76]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003988:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800398c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fd fac7 	bl	8000f20 <HAL_GetTick>
 8003992:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003994:	e009      	b.n	80039aa <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003996:	f7fd fac3 	bl	8000f20 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d902      	bls.n	80039aa <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	73fb      	strb	r3, [r7, #15]
          break;
 80039a8:	e005      	b.n	80039b6 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039aa:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0ef      	beq.n	8003996 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d106      	bne.n	80039ca <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	4903      	ldr	r1, [pc, #12]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40021000 	.word	0x40021000
 80039d8:	07ff800f 	.word	0x07ff800f
 80039dc:	ff9f800f 	.word	0xff9f800f
 80039e0:	f9ff800f 	.word	0xf9ff800f

080039e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039f2:	4b70      	ldr	r3, [pc, #448]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00e      	beq.n	8003a1c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039fe:	4b6d      	ldr	r3, [pc, #436]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f003 0203 	and.w	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d103      	bne.n	8003a16 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
       ||
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d13f      	bne.n	8003a96 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
 8003a1a:	e03c      	b.n	8003a96 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d00c      	beq.n	8003a3e <RCCEx_PLLSAI2_Config+0x5a>
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d013      	beq.n	8003a50 <RCCEx_PLLSAI2_Config+0x6c>
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d120      	bne.n	8003a6e <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a2c:	4b61      	ldr	r3, [pc, #388]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d11d      	bne.n	8003a74 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a3c:	e01a      	b.n	8003a74 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a3e:	4b5d      	ldr	r3, [pc, #372]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d116      	bne.n	8003a78 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4e:	e013      	b.n	8003a78 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a50:	4b58      	ldr	r3, [pc, #352]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10f      	bne.n	8003a7c <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a5c:	4b55      	ldr	r3, [pc, #340]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a6c:	e006      	b.n	8003a7c <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
      break;
 8003a72:	e004      	b.n	8003a7e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003a74:	bf00      	nop
 8003a76:	e002      	b.n	8003a7e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003a78:	bf00      	nop
 8003a7a:	e000      	b.n	8003a7e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003a7c:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d108      	bne.n	8003a96 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003a84:	4b4b      	ldr	r3, [pc, #300]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f023 0203 	bic.w	r2, r3, #3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4948      	ldr	r1, [pc, #288]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f040 8086 	bne.w	8003baa <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a9e:	4b45      	ldr	r3, [pc, #276]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a44      	ldr	r2, [pc, #272]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aaa:	f7fd fa39 	bl	8000f20 <HAL_GetTick>
 8003aae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ab0:	e009      	b.n	8003ac6 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ab2:	f7fd fa35 	bl	8000f20 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d902      	bls.n	8003ac6 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	73fb      	strb	r3, [r7, #15]
        break;
 8003ac4:	e005      	b.n	8003ad2 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ac6:	4b3b      	ldr	r3, [pc, #236]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1ef      	bne.n	8003ab2 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d168      	bne.n	8003baa <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d113      	bne.n	8003b06 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ade:	4b35      	ldr	r3, [pc, #212]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ae0:	695a      	ldr	r2, [r3, #20]
 8003ae2:	4b35      	ldr	r3, [pc, #212]	; (8003bb8 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6892      	ldr	r2, [r2, #8]
 8003aea:	0211      	lsls	r1, r2, #8
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68d2      	ldr	r2, [r2, #12]
 8003af0:	06d2      	lsls	r2, r2, #27
 8003af2:	4311      	orrs	r1, r2
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6852      	ldr	r2, [r2, #4]
 8003af8:	3a01      	subs	r2, #1
 8003afa:	0112      	lsls	r2, r2, #4
 8003afc:	430a      	orrs	r2, r1
 8003afe:	492d      	ldr	r1, [pc, #180]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	614b      	str	r3, [r1, #20]
 8003b04:	e02d      	b.n	8003b62 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d115      	bne.n	8003b38 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b0c:	4b29      	ldr	r3, [pc, #164]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	4b2a      	ldr	r3, [pc, #168]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6892      	ldr	r2, [r2, #8]
 8003b18:	0211      	lsls	r1, r2, #8
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6912      	ldr	r2, [r2, #16]
 8003b1e:	0852      	lsrs	r2, r2, #1
 8003b20:	3a01      	subs	r2, #1
 8003b22:	0552      	lsls	r2, r2, #21
 8003b24:	4311      	orrs	r1, r2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6852      	ldr	r2, [r2, #4]
 8003b2a:	3a01      	subs	r2, #1
 8003b2c:	0112      	lsls	r2, r2, #4
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	4920      	ldr	r1, [pc, #128]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	614b      	str	r3, [r1, #20]
 8003b36:	e014      	b.n	8003b62 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b38:	4b1e      	ldr	r3, [pc, #120]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b3a:	695a      	ldr	r2, [r3, #20]
 8003b3c:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6892      	ldr	r2, [r2, #8]
 8003b44:	0211      	lsls	r1, r2, #8
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6952      	ldr	r2, [r2, #20]
 8003b4a:	0852      	lsrs	r2, r2, #1
 8003b4c:	3a01      	subs	r2, #1
 8003b4e:	0652      	lsls	r2, r2, #25
 8003b50:	4311      	orrs	r1, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6852      	ldr	r2, [r2, #4]
 8003b56:	3a01      	subs	r2, #1
 8003b58:	0112      	lsls	r2, r2, #4
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	4915      	ldr	r1, [pc, #84]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b62:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a13      	ldr	r2, [pc, #76]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6e:	f7fd f9d7 	bl	8000f20 <HAL_GetTick>
 8003b72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b74:	e009      	b.n	8003b8a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b76:	f7fd f9d3 	bl	8000f20 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d902      	bls.n	8003b8a <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	73fb      	strb	r3, [r7, #15]
          break;
 8003b88:	e005      	b.n	8003b96 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0ef      	beq.n	8003b76 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	4903      	ldr	r1, [pc, #12]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	07ff800f 	.word	0x07ff800f
 8003bbc:	ff9f800f 	.word	0xff9f800f
 8003bc0:	f9ff800f 	.word	0xf9ff800f

08003bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e049      	b.n	8003c6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f006 fd10 	bl	800a610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	4619      	mov	r1, r3
 8003c02:	4610      	mov	r0, r2
 8003c04:	f000 faa6 	bl	8004154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d001      	beq.n	8003c8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e04f      	b.n	8003d2c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a23      	ldr	r2, [pc, #140]	; (8003d38 <HAL_TIM_Base_Start_IT+0xc4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d01d      	beq.n	8003cea <HAL_TIM_Base_Start_IT+0x76>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb6:	d018      	beq.n	8003cea <HAL_TIM_Base_Start_IT+0x76>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1f      	ldr	r2, [pc, #124]	; (8003d3c <HAL_TIM_Base_Start_IT+0xc8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <HAL_TIM_Base_Start_IT+0x76>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1e      	ldr	r2, [pc, #120]	; (8003d40 <HAL_TIM_Base_Start_IT+0xcc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00e      	beq.n	8003cea <HAL_TIM_Base_Start_IT+0x76>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d009      	beq.n	8003cea <HAL_TIM_Base_Start_IT+0x76>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1b      	ldr	r2, [pc, #108]	; (8003d48 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d004      	beq.n	8003cea <HAL_TIM_Base_Start_IT+0x76>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a19      	ldr	r2, [pc, #100]	; (8003d4c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d115      	bne.n	8003d16 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	4b17      	ldr	r3, [pc, #92]	; (8003d50 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2b06      	cmp	r3, #6
 8003cfa:	d015      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0xb4>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d02:	d011      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d14:	e008      	b.n	8003d28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0201 	orr.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	e000      	b.n	8003d2a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	40000800 	.word	0x40000800
 8003d44:	40000c00 	.word	0x40000c00
 8003d48:	40013400 	.word	0x40013400
 8003d4c:	40014000 	.word	0x40014000
 8003d50:	00010007 	.word	0x00010007

08003d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d122      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d11b      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0202 	mvn.w	r2, #2
 8003d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f9be 	bl	8004118 <HAL_TIM_IC_CaptureCallback>
 8003d9c:	e005      	b.n	8003daa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f9b0 	bl	8004104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f9c1 	bl	800412c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d122      	bne.n	8003e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d11b      	bne.n	8003e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0204 	mvn.w	r2, #4
 8003dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f994 	bl	8004118 <HAL_TIM_IC_CaptureCallback>
 8003df0:	e005      	b.n	8003dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f986 	bl	8004104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f997 	bl	800412c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d122      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d11b      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0208 	mvn.w	r2, #8
 8003e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f96a 	bl	8004118 <HAL_TIM_IC_CaptureCallback>
 8003e44:	e005      	b.n	8003e52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f95c 	bl	8004104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f96d 	bl	800412c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d122      	bne.n	8003eac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d11b      	bne.n	8003eac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0210 	mvn.w	r2, #16
 8003e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2208      	movs	r2, #8
 8003e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f940 	bl	8004118 <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f932 	bl	8004104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f943 	bl	800412c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d107      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0201 	mvn.w	r2, #1
 8003ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f006 f820 	bl	8009f18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b80      	cmp	r3, #128	; 0x80
 8003ee4:	d10e      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef0:	2b80      	cmp	r3, #128	; 0x80
 8003ef2:	d107      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 faee 	bl	80044e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f12:	d10e      	bne.n	8003f32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b80      	cmp	r3, #128	; 0x80
 8003f20:	d107      	bne.n	8003f32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 fae1 	bl	80044f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d10e      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b40      	cmp	r3, #64	; 0x40
 8003f4c:	d107      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f8f1 	bl	8004140 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d10e      	bne.n	8003f8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d107      	bne.n	8003f8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f06f 0220 	mvn.w	r2, #32
 8003f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 faa1 	bl	80044cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_TIM_ConfigClockSource+0x18>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e0a8      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x16a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fcc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fd4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b40      	cmp	r3, #64	; 0x40
 8003fe4:	d067      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0x124>
 8003fe6:	2b40      	cmp	r3, #64	; 0x40
 8003fe8:	d80b      	bhi.n	8004002 <HAL_TIM_ConfigClockSource+0x70>
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	d073      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0x144>
 8003fee:	2b10      	cmp	r3, #16
 8003ff0:	d802      	bhi.n	8003ff8 <HAL_TIM_ConfigClockSource+0x66>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d06f      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ff6:	e078      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d06c      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0x144>
 8003ffc:	2b30      	cmp	r3, #48	; 0x30
 8003ffe:	d06a      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004000:	e073      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004002:	2b70      	cmp	r3, #112	; 0x70
 8004004:	d00d      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x90>
 8004006:	2b70      	cmp	r3, #112	; 0x70
 8004008:	d804      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x82>
 800400a:	2b50      	cmp	r3, #80	; 0x50
 800400c:	d033      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0xe4>
 800400e:	2b60      	cmp	r3, #96	; 0x60
 8004010:	d041      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004012:	e06a      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004018:	d066      	beq.n	80040e8 <HAL_TIM_ConfigClockSource+0x156>
 800401a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800401e:	d017      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004020:	e063      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	6899      	ldr	r1, [r3, #8]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f000 f9a3 	bl	800437c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004044:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	609a      	str	r2, [r3, #8]
      break;
 800404e:	e04c      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	6899      	ldr	r1, [r3, #8]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f000 f98c 	bl	800437c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004072:	609a      	str	r2, [r3, #8]
      break;
 8004074:	e039      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	6859      	ldr	r1, [r3, #4]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	461a      	mov	r2, r3
 8004084:	f000 f900 	bl	8004288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2150      	movs	r1, #80	; 0x50
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f959 	bl	8004346 <TIM_ITRx_SetConfig>
      break;
 8004094:	e029      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6859      	ldr	r1, [r3, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	461a      	mov	r2, r3
 80040a4:	f000 f91f 	bl	80042e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2160      	movs	r1, #96	; 0x60
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f949 	bl	8004346 <TIM_ITRx_SetConfig>
      break;
 80040b4:	e019      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6859      	ldr	r1, [r3, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	461a      	mov	r2, r3
 80040c4:	f000 f8e0 	bl	8004288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2140      	movs	r1, #64	; 0x40
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 f939 	bl	8004346 <TIM_ITRx_SetConfig>
      break;
 80040d4:	e009      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4619      	mov	r1, r3
 80040e0:	4610      	mov	r0, r2
 80040e2:	f000 f930 	bl	8004346 <TIM_ITRx_SetConfig>
        break;
 80040e6:	e000      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x158>
      break;
 80040e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a40      	ldr	r2, [pc, #256]	; (8004268 <TIM_Base_SetConfig+0x114>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d013      	beq.n	8004194 <TIM_Base_SetConfig+0x40>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004172:	d00f      	beq.n	8004194 <TIM_Base_SetConfig+0x40>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a3d      	ldr	r2, [pc, #244]	; (800426c <TIM_Base_SetConfig+0x118>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00b      	beq.n	8004194 <TIM_Base_SetConfig+0x40>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a3c      	ldr	r2, [pc, #240]	; (8004270 <TIM_Base_SetConfig+0x11c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d007      	beq.n	8004194 <TIM_Base_SetConfig+0x40>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a3b      	ldr	r2, [pc, #236]	; (8004274 <TIM_Base_SetConfig+0x120>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d003      	beq.n	8004194 <TIM_Base_SetConfig+0x40>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a3a      	ldr	r2, [pc, #232]	; (8004278 <TIM_Base_SetConfig+0x124>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d108      	bne.n	80041a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a2f      	ldr	r2, [pc, #188]	; (8004268 <TIM_Base_SetConfig+0x114>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01f      	beq.n	80041ee <TIM_Base_SetConfig+0x9a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b4:	d01b      	beq.n	80041ee <TIM_Base_SetConfig+0x9a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2c      	ldr	r2, [pc, #176]	; (800426c <TIM_Base_SetConfig+0x118>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d017      	beq.n	80041ee <TIM_Base_SetConfig+0x9a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a2b      	ldr	r2, [pc, #172]	; (8004270 <TIM_Base_SetConfig+0x11c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d013      	beq.n	80041ee <TIM_Base_SetConfig+0x9a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a2a      	ldr	r2, [pc, #168]	; (8004274 <TIM_Base_SetConfig+0x120>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00f      	beq.n	80041ee <TIM_Base_SetConfig+0x9a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a29      	ldr	r2, [pc, #164]	; (8004278 <TIM_Base_SetConfig+0x124>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00b      	beq.n	80041ee <TIM_Base_SetConfig+0x9a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a28      	ldr	r2, [pc, #160]	; (800427c <TIM_Base_SetConfig+0x128>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d007      	beq.n	80041ee <TIM_Base_SetConfig+0x9a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a27      	ldr	r2, [pc, #156]	; (8004280 <TIM_Base_SetConfig+0x12c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d003      	beq.n	80041ee <TIM_Base_SetConfig+0x9a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a26      	ldr	r2, [pc, #152]	; (8004284 <TIM_Base_SetConfig+0x130>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d108      	bne.n	8004200 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a10      	ldr	r2, [pc, #64]	; (8004268 <TIM_Base_SetConfig+0x114>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00f      	beq.n	800424c <TIM_Base_SetConfig+0xf8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a12      	ldr	r2, [pc, #72]	; (8004278 <TIM_Base_SetConfig+0x124>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d00b      	beq.n	800424c <TIM_Base_SetConfig+0xf8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a11      	ldr	r2, [pc, #68]	; (800427c <TIM_Base_SetConfig+0x128>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d007      	beq.n	800424c <TIM_Base_SetConfig+0xf8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a10      	ldr	r2, [pc, #64]	; (8004280 <TIM_Base_SetConfig+0x12c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d003      	beq.n	800424c <TIM_Base_SetConfig+0xf8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a0f      	ldr	r2, [pc, #60]	; (8004284 <TIM_Base_SetConfig+0x130>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d103      	bne.n	8004254 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	615a      	str	r2, [r3, #20]
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40012c00 	.word	0x40012c00
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800
 8004274:	40000c00 	.word	0x40000c00
 8004278:	40013400 	.word	0x40013400
 800427c:	40014000 	.word	0x40014000
 8004280:	40014400 	.word	0x40014400
 8004284:	40014800 	.word	0x40014800

08004288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	f023 0201 	bic.w	r2, r3, #1
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f023 030a 	bic.w	r3, r3, #10
 80042c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	621a      	str	r2, [r3, #32]
}
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b087      	sub	sp, #28
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	f023 0210 	bic.w	r2, r3, #16
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004310:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	031b      	lsls	r3, r3, #12
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4313      	orrs	r3, r2
 800431a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004322:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	621a      	str	r2, [r3, #32]
}
 800433a:	bf00      	nop
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004346:	b480      	push	{r7}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	f043 0307 	orr.w	r3, r3, #7
 8004368:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	609a      	str	r2, [r3, #8]
}
 8004370:	bf00      	nop
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004396:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	021a      	lsls	r2, r3, #8
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	431a      	orrs	r2, r3
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	609a      	str	r2, [r3, #8]
}
 80043b0:	bf00      	nop
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e068      	b.n	80044a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a2e      	ldr	r2, [pc, #184]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d004      	beq.n	8004408 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a2d      	ldr	r2, [pc, #180]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d108      	bne.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800440e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004420:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1e      	ldr	r2, [pc, #120]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d01d      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004446:	d018      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1b      	ldr	r2, [pc, #108]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1a      	ldr	r2, [pc, #104]	; (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00e      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a18      	ldr	r2, [pc, #96]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d009      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d004      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a14      	ldr	r2, [pc, #80]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d10c      	bne.n	8004494 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004480:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	4313      	orrs	r3, r2
 800448a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40012c00 	.word	0x40012c00
 80044b8:	40013400 	.word	0x40013400
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40014000 	.word	0x40014000

080044cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e042      	b.n	80045a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004520:	2b00      	cmp	r3, #0
 8004522:	d106      	bne.n	8004532 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f006 f893 	bl	800a658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2224      	movs	r2, #36	; 0x24
 8004536:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0201 	bic.w	r2, r2, #1
 8004548:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f8c4 	bl	80046d8 <UART_SetConfig>
 8004550:	4603      	mov	r3, r0
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e022      	b.n	80045a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fb8a 	bl	8004c7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004576:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004586:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 fc11 	bl	8004dc0 <UART_CheckIdleState>
 800459e:	4603      	mov	r3, r0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	; 0x28
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	4613      	mov	r3, r2
 80045b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045be:	2b20      	cmp	r3, #32
 80045c0:	f040 8084 	bne.w	80046cc <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_UART_Transmit+0x28>
 80045ca:	88fb      	ldrh	r3, [r7, #6]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e07c      	b.n	80046ce <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_UART_Transmit+0x3a>
 80045de:	2302      	movs	r3, #2
 80045e0:	e075      	b.n	80046ce <HAL_UART_Transmit+0x126>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2221      	movs	r2, #33	; 0x21
 80045f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80045fa:	f7fc fc91 	bl	8000f20 <HAL_GetTick>
 80045fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	88fa      	ldrh	r2, [r7, #6]
 8004604:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	88fa      	ldrh	r2, [r7, #6]
 800460c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004618:	d108      	bne.n	800462c <HAL_UART_Transmit+0x84>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d104      	bne.n	800462c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	e003      	b.n	8004634 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004630:	2300      	movs	r3, #0
 8004632:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800463c:	e02d      	b.n	800469a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2200      	movs	r2, #0
 8004646:	2180      	movs	r1, #128	; 0x80
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 fc01 	bl	8004e50 <UART_WaitOnFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e03a      	b.n	80046ce <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10b      	bne.n	8004676 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	881a      	ldrh	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800466a:	b292      	uxth	r2, r2
 800466c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	3302      	adds	r3, #2
 8004672:	61bb      	str	r3, [r7, #24]
 8004674:	e008      	b.n	8004688 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	781a      	ldrb	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	b292      	uxth	r2, r2
 8004680:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	3301      	adds	r3, #1
 8004686:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1cb      	bne.n	800463e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2200      	movs	r2, #0
 80046ae:	2140      	movs	r1, #64	; 0x40
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fbcd 	bl	8004e50 <UART_WaitOnFlagUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e006      	b.n	80046ce <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e000      	b.n	80046ce <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80046cc:	2302      	movs	r3, #2
  }
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3720      	adds	r7, #32
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80046dc:	b088      	sub	sp, #32
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	4313      	orrs	r3, r2
 8004706:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	4bb1      	ldr	r3, [pc, #708]	; (80049d4 <UART_SetConfig+0x2fc>)
 8004710:	4013      	ands	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	69f9      	ldr	r1, [r7, #28]
 8004718:	430b      	orrs	r3, r1
 800471a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4aa6      	ldr	r2, [pc, #664]	; (80049d8 <UART_SetConfig+0x300>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d004      	beq.n	800474c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	4313      	orrs	r3, r2
 800474a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004756:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6812      	ldr	r2, [r2, #0]
 800475e:	69f9      	ldr	r1, [r7, #28]
 8004760:	430b      	orrs	r3, r1
 8004762:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	f023 010f 	bic.w	r1, r3, #15
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a97      	ldr	r2, [pc, #604]	; (80049dc <UART_SetConfig+0x304>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d121      	bne.n	80047c8 <UART_SetConfig+0xf0>
 8004784:	4b96      	ldr	r3, [pc, #600]	; (80049e0 <UART_SetConfig+0x308>)
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	2b03      	cmp	r3, #3
 8004790:	d816      	bhi.n	80047c0 <UART_SetConfig+0xe8>
 8004792:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <UART_SetConfig+0xc0>)
 8004794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004798:	080047a9 	.word	0x080047a9
 800479c:	080047b5 	.word	0x080047b5
 80047a0:	080047af 	.word	0x080047af
 80047a4:	080047bb 	.word	0x080047bb
 80047a8:	2301      	movs	r3, #1
 80047aa:	76fb      	strb	r3, [r7, #27]
 80047ac:	e0e8      	b.n	8004980 <UART_SetConfig+0x2a8>
 80047ae:	2302      	movs	r3, #2
 80047b0:	76fb      	strb	r3, [r7, #27]
 80047b2:	e0e5      	b.n	8004980 <UART_SetConfig+0x2a8>
 80047b4:	2304      	movs	r3, #4
 80047b6:	76fb      	strb	r3, [r7, #27]
 80047b8:	e0e2      	b.n	8004980 <UART_SetConfig+0x2a8>
 80047ba:	2308      	movs	r3, #8
 80047bc:	76fb      	strb	r3, [r7, #27]
 80047be:	e0df      	b.n	8004980 <UART_SetConfig+0x2a8>
 80047c0:	2310      	movs	r3, #16
 80047c2:	76fb      	strb	r3, [r7, #27]
 80047c4:	bf00      	nop
 80047c6:	e0db      	b.n	8004980 <UART_SetConfig+0x2a8>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a85      	ldr	r2, [pc, #532]	; (80049e4 <UART_SetConfig+0x30c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d134      	bne.n	800483c <UART_SetConfig+0x164>
 80047d2:	4b83      	ldr	r3, [pc, #524]	; (80049e0 <UART_SetConfig+0x308>)
 80047d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d8:	f003 030c 	and.w	r3, r3, #12
 80047dc:	2b0c      	cmp	r3, #12
 80047de:	d829      	bhi.n	8004834 <UART_SetConfig+0x15c>
 80047e0:	a201      	add	r2, pc, #4	; (adr r2, 80047e8 <UART_SetConfig+0x110>)
 80047e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e6:	bf00      	nop
 80047e8:	0800481d 	.word	0x0800481d
 80047ec:	08004835 	.word	0x08004835
 80047f0:	08004835 	.word	0x08004835
 80047f4:	08004835 	.word	0x08004835
 80047f8:	08004829 	.word	0x08004829
 80047fc:	08004835 	.word	0x08004835
 8004800:	08004835 	.word	0x08004835
 8004804:	08004835 	.word	0x08004835
 8004808:	08004823 	.word	0x08004823
 800480c:	08004835 	.word	0x08004835
 8004810:	08004835 	.word	0x08004835
 8004814:	08004835 	.word	0x08004835
 8004818:	0800482f 	.word	0x0800482f
 800481c:	2300      	movs	r3, #0
 800481e:	76fb      	strb	r3, [r7, #27]
 8004820:	e0ae      	b.n	8004980 <UART_SetConfig+0x2a8>
 8004822:	2302      	movs	r3, #2
 8004824:	76fb      	strb	r3, [r7, #27]
 8004826:	e0ab      	b.n	8004980 <UART_SetConfig+0x2a8>
 8004828:	2304      	movs	r3, #4
 800482a:	76fb      	strb	r3, [r7, #27]
 800482c:	e0a8      	b.n	8004980 <UART_SetConfig+0x2a8>
 800482e:	2308      	movs	r3, #8
 8004830:	76fb      	strb	r3, [r7, #27]
 8004832:	e0a5      	b.n	8004980 <UART_SetConfig+0x2a8>
 8004834:	2310      	movs	r3, #16
 8004836:	76fb      	strb	r3, [r7, #27]
 8004838:	bf00      	nop
 800483a:	e0a1      	b.n	8004980 <UART_SetConfig+0x2a8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a69      	ldr	r2, [pc, #420]	; (80049e8 <UART_SetConfig+0x310>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d120      	bne.n	8004888 <UART_SetConfig+0x1b0>
 8004846:	4b66      	ldr	r3, [pc, #408]	; (80049e0 <UART_SetConfig+0x308>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004850:	2b10      	cmp	r3, #16
 8004852:	d00f      	beq.n	8004874 <UART_SetConfig+0x19c>
 8004854:	2b10      	cmp	r3, #16
 8004856:	d802      	bhi.n	800485e <UART_SetConfig+0x186>
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <UART_SetConfig+0x190>
 800485c:	e010      	b.n	8004880 <UART_SetConfig+0x1a8>
 800485e:	2b20      	cmp	r3, #32
 8004860:	d005      	beq.n	800486e <UART_SetConfig+0x196>
 8004862:	2b30      	cmp	r3, #48	; 0x30
 8004864:	d009      	beq.n	800487a <UART_SetConfig+0x1a2>
 8004866:	e00b      	b.n	8004880 <UART_SetConfig+0x1a8>
 8004868:	2300      	movs	r3, #0
 800486a:	76fb      	strb	r3, [r7, #27]
 800486c:	e088      	b.n	8004980 <UART_SetConfig+0x2a8>
 800486e:	2302      	movs	r3, #2
 8004870:	76fb      	strb	r3, [r7, #27]
 8004872:	e085      	b.n	8004980 <UART_SetConfig+0x2a8>
 8004874:	2304      	movs	r3, #4
 8004876:	76fb      	strb	r3, [r7, #27]
 8004878:	e082      	b.n	8004980 <UART_SetConfig+0x2a8>
 800487a:	2308      	movs	r3, #8
 800487c:	76fb      	strb	r3, [r7, #27]
 800487e:	e07f      	b.n	8004980 <UART_SetConfig+0x2a8>
 8004880:	2310      	movs	r3, #16
 8004882:	76fb      	strb	r3, [r7, #27]
 8004884:	bf00      	nop
 8004886:	e07b      	b.n	8004980 <UART_SetConfig+0x2a8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a57      	ldr	r2, [pc, #348]	; (80049ec <UART_SetConfig+0x314>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d120      	bne.n	80048d4 <UART_SetConfig+0x1fc>
 8004892:	4b53      	ldr	r3, [pc, #332]	; (80049e0 <UART_SetConfig+0x308>)
 8004894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004898:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800489c:	2b40      	cmp	r3, #64	; 0x40
 800489e:	d00f      	beq.n	80048c0 <UART_SetConfig+0x1e8>
 80048a0:	2b40      	cmp	r3, #64	; 0x40
 80048a2:	d802      	bhi.n	80048aa <UART_SetConfig+0x1d2>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <UART_SetConfig+0x1dc>
 80048a8:	e010      	b.n	80048cc <UART_SetConfig+0x1f4>
 80048aa:	2b80      	cmp	r3, #128	; 0x80
 80048ac:	d005      	beq.n	80048ba <UART_SetConfig+0x1e2>
 80048ae:	2bc0      	cmp	r3, #192	; 0xc0
 80048b0:	d009      	beq.n	80048c6 <UART_SetConfig+0x1ee>
 80048b2:	e00b      	b.n	80048cc <UART_SetConfig+0x1f4>
 80048b4:	2300      	movs	r3, #0
 80048b6:	76fb      	strb	r3, [r7, #27]
 80048b8:	e062      	b.n	8004980 <UART_SetConfig+0x2a8>
 80048ba:	2302      	movs	r3, #2
 80048bc:	76fb      	strb	r3, [r7, #27]
 80048be:	e05f      	b.n	8004980 <UART_SetConfig+0x2a8>
 80048c0:	2304      	movs	r3, #4
 80048c2:	76fb      	strb	r3, [r7, #27]
 80048c4:	e05c      	b.n	8004980 <UART_SetConfig+0x2a8>
 80048c6:	2308      	movs	r3, #8
 80048c8:	76fb      	strb	r3, [r7, #27]
 80048ca:	e059      	b.n	8004980 <UART_SetConfig+0x2a8>
 80048cc:	2310      	movs	r3, #16
 80048ce:	76fb      	strb	r3, [r7, #27]
 80048d0:	bf00      	nop
 80048d2:	e055      	b.n	8004980 <UART_SetConfig+0x2a8>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a45      	ldr	r2, [pc, #276]	; (80049f0 <UART_SetConfig+0x318>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d124      	bne.n	8004928 <UART_SetConfig+0x250>
 80048de:	4b40      	ldr	r3, [pc, #256]	; (80049e0 <UART_SetConfig+0x308>)
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ec:	d012      	beq.n	8004914 <UART_SetConfig+0x23c>
 80048ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048f2:	d802      	bhi.n	80048fa <UART_SetConfig+0x222>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d007      	beq.n	8004908 <UART_SetConfig+0x230>
 80048f8:	e012      	b.n	8004920 <UART_SetConfig+0x248>
 80048fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048fe:	d006      	beq.n	800490e <UART_SetConfig+0x236>
 8004900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004904:	d009      	beq.n	800491a <UART_SetConfig+0x242>
 8004906:	e00b      	b.n	8004920 <UART_SetConfig+0x248>
 8004908:	2300      	movs	r3, #0
 800490a:	76fb      	strb	r3, [r7, #27]
 800490c:	e038      	b.n	8004980 <UART_SetConfig+0x2a8>
 800490e:	2302      	movs	r3, #2
 8004910:	76fb      	strb	r3, [r7, #27]
 8004912:	e035      	b.n	8004980 <UART_SetConfig+0x2a8>
 8004914:	2304      	movs	r3, #4
 8004916:	76fb      	strb	r3, [r7, #27]
 8004918:	e032      	b.n	8004980 <UART_SetConfig+0x2a8>
 800491a:	2308      	movs	r3, #8
 800491c:	76fb      	strb	r3, [r7, #27]
 800491e:	e02f      	b.n	8004980 <UART_SetConfig+0x2a8>
 8004920:	2310      	movs	r3, #16
 8004922:	76fb      	strb	r3, [r7, #27]
 8004924:	bf00      	nop
 8004926:	e02b      	b.n	8004980 <UART_SetConfig+0x2a8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a2a      	ldr	r2, [pc, #168]	; (80049d8 <UART_SetConfig+0x300>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d124      	bne.n	800497c <UART_SetConfig+0x2a4>
 8004932:	4b2b      	ldr	r3, [pc, #172]	; (80049e0 <UART_SetConfig+0x308>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800493c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004940:	d012      	beq.n	8004968 <UART_SetConfig+0x290>
 8004942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004946:	d802      	bhi.n	800494e <UART_SetConfig+0x276>
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <UART_SetConfig+0x284>
 800494c:	e012      	b.n	8004974 <UART_SetConfig+0x29c>
 800494e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004952:	d006      	beq.n	8004962 <UART_SetConfig+0x28a>
 8004954:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004958:	d009      	beq.n	800496e <UART_SetConfig+0x296>
 800495a:	e00b      	b.n	8004974 <UART_SetConfig+0x29c>
 800495c:	2300      	movs	r3, #0
 800495e:	76fb      	strb	r3, [r7, #27]
 8004960:	e00e      	b.n	8004980 <UART_SetConfig+0x2a8>
 8004962:	2302      	movs	r3, #2
 8004964:	76fb      	strb	r3, [r7, #27]
 8004966:	e00b      	b.n	8004980 <UART_SetConfig+0x2a8>
 8004968:	2304      	movs	r3, #4
 800496a:	76fb      	strb	r3, [r7, #27]
 800496c:	e008      	b.n	8004980 <UART_SetConfig+0x2a8>
 800496e:	2308      	movs	r3, #8
 8004970:	76fb      	strb	r3, [r7, #27]
 8004972:	e005      	b.n	8004980 <UART_SetConfig+0x2a8>
 8004974:	2310      	movs	r3, #16
 8004976:	76fb      	strb	r3, [r7, #27]
 8004978:	bf00      	nop
 800497a:	e001      	b.n	8004980 <UART_SetConfig+0x2a8>
 800497c:	2310      	movs	r3, #16
 800497e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a14      	ldr	r2, [pc, #80]	; (80049d8 <UART_SetConfig+0x300>)
 8004986:	4293      	cmp	r3, r2
 8004988:	f040 80a1 	bne.w	8004ace <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800498c:	7efb      	ldrb	r3, [r7, #27]
 800498e:	2b08      	cmp	r3, #8
 8004990:	d836      	bhi.n	8004a00 <UART_SetConfig+0x328>
 8004992:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <UART_SetConfig+0x2c0>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049bd 	.word	0x080049bd
 800499c:	08004a01 	.word	0x08004a01
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	08004a01 	.word	0x08004a01
 80049a8:	080049cb 	.word	0x080049cb
 80049ac:	08004a01 	.word	0x08004a01
 80049b0:	08004a01 	.word	0x08004a01
 80049b4:	08004a01 	.word	0x08004a01
 80049b8:	080049f9 	.word	0x080049f9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049bc:	f7fe fada 	bl	8002f74 <HAL_RCC_GetPCLK1Freq>
 80049c0:	6178      	str	r0, [r7, #20]
        break;
 80049c2:	e022      	b.n	8004a0a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c4:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <UART_SetConfig+0x31c>)
 80049c6:	617b      	str	r3, [r7, #20]
        break;
 80049c8:	e01f      	b.n	8004a0a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ca:	f7fe fa3d 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 80049ce:	6178      	str	r0, [r7, #20]
        break;
 80049d0:	e01b      	b.n	8004a0a <UART_SetConfig+0x332>
 80049d2:	bf00      	nop
 80049d4:	cfff69f3 	.word	0xcfff69f3
 80049d8:	40008000 	.word	0x40008000
 80049dc:	40013800 	.word	0x40013800
 80049e0:	40021000 	.word	0x40021000
 80049e4:	40004400 	.word	0x40004400
 80049e8:	40004800 	.word	0x40004800
 80049ec:	40004c00 	.word	0x40004c00
 80049f0:	40005000 	.word	0x40005000
 80049f4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049fc:	617b      	str	r3, [r7, #20]
        break;
 80049fe:	e004      	b.n	8004a0a <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	76bb      	strb	r3, [r7, #26]
        break;
 8004a08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 811d 	beq.w	8004c4c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	4a97      	ldr	r2, [pc, #604]	; (8004c74 <UART_SetConfig+0x59c>)
 8004a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a24:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	4413      	add	r3, r2
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d305      	bcc.n	8004a42 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d902      	bls.n	8004a48 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	76bb      	strb	r3, [r7, #26]
 8004a46:	e101      	b.n	8004c4c <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f04f 0100 	mov.w	r1, #0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	4a87      	ldr	r2, [pc, #540]	; (8004c74 <UART_SetConfig+0x59c>)
 8004a56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	f04f 0400 	mov.w	r4, #0
 8004a60:	461a      	mov	r2, r3
 8004a62:	4623      	mov	r3, r4
 8004a64:	f7fc f8b0 	bl	8000bc8 <__aeabi_uldivmod>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4622      	mov	r2, r4
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	f04f 0400 	mov.w	r4, #0
 8004a78:	0214      	lsls	r4, r2, #8
 8004a7a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004a7e:	020b      	lsls	r3, r1, #8
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6852      	ldr	r2, [r2, #4]
 8004a84:	0852      	lsrs	r2, r2, #1
 8004a86:	4611      	mov	r1, r2
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	eb13 0b01 	adds.w	fp, r3, r1
 8004a90:	eb44 0c02 	adc.w	ip, r4, r2
 8004a94:	4658      	mov	r0, fp
 8004a96:	4661      	mov	r1, ip
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f04f 0400 	mov.w	r4, #0
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4623      	mov	r3, r4
 8004aa4:	f7fc f890 	bl	8000bc8 <__aeabi_uldivmod>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	460c      	mov	r4, r1
 8004aac:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ab4:	d308      	bcc.n	8004ac8 <UART_SetConfig+0x3f0>
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004abc:	d204      	bcs.n	8004ac8 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	e0c1      	b.n	8004c4c <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	76bb      	strb	r3, [r7, #26]
 8004acc:	e0be      	b.n	8004c4c <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad6:	d164      	bne.n	8004ba2 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8004ad8:	7efb      	ldrb	r3, [r7, #27]
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d827      	bhi.n	8004b2e <UART_SetConfig+0x456>
 8004ade:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <UART_SetConfig+0x40c>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004b09 	.word	0x08004b09
 8004ae8:	08004b11 	.word	0x08004b11
 8004aec:	08004b19 	.word	0x08004b19
 8004af0:	08004b2f 	.word	0x08004b2f
 8004af4:	08004b1f 	.word	0x08004b1f
 8004af8:	08004b2f 	.word	0x08004b2f
 8004afc:	08004b2f 	.word	0x08004b2f
 8004b00:	08004b2f 	.word	0x08004b2f
 8004b04:	08004b27 	.word	0x08004b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b08:	f7fe fa34 	bl	8002f74 <HAL_RCC_GetPCLK1Freq>
 8004b0c:	6178      	str	r0, [r7, #20]
        break;
 8004b0e:	e013      	b.n	8004b38 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b10:	f7fe fa46 	bl	8002fa0 <HAL_RCC_GetPCLK2Freq>
 8004b14:	6178      	str	r0, [r7, #20]
        break;
 8004b16:	e00f      	b.n	8004b38 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b18:	4b57      	ldr	r3, [pc, #348]	; (8004c78 <UART_SetConfig+0x5a0>)
 8004b1a:	617b      	str	r3, [r7, #20]
        break;
 8004b1c:	e00c      	b.n	8004b38 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b1e:	f7fe f993 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8004b22:	6178      	str	r0, [r7, #20]
        break;
 8004b24:	e008      	b.n	8004b38 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2a:	617b      	str	r3, [r7, #20]
        break;
 8004b2c:	e004      	b.n	8004b38 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	76bb      	strb	r3, [r7, #26]
        break;
 8004b36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 8086 	beq.w	8004c4c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	4a4b      	ldr	r2, [pc, #300]	; (8004c74 <UART_SetConfig+0x59c>)
 8004b46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b52:	005a      	lsls	r2, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	085b      	lsrs	r3, r3, #1
 8004b5a:	441a      	add	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	2b0f      	cmp	r3, #15
 8004b6c:	d916      	bls.n	8004b9c <UART_SetConfig+0x4c4>
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b74:	d212      	bcs.n	8004b9c <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f023 030f 	bic.w	r3, r3, #15
 8004b7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	085b      	lsrs	r3, r3, #1
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	89fb      	ldrh	r3, [r7, #14]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	89fa      	ldrh	r2, [r7, #14]
 8004b98:	60da      	str	r2, [r3, #12]
 8004b9a:	e057      	b.n	8004c4c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	76bb      	strb	r3, [r7, #26]
 8004ba0:	e054      	b.n	8004c4c <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ba2:	7efb      	ldrb	r3, [r7, #27]
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d828      	bhi.n	8004bfa <UART_SetConfig+0x522>
 8004ba8:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <UART_SetConfig+0x4d8>)
 8004baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bae:	bf00      	nop
 8004bb0:	08004bd5 	.word	0x08004bd5
 8004bb4:	08004bdd 	.word	0x08004bdd
 8004bb8:	08004be5 	.word	0x08004be5
 8004bbc:	08004bfb 	.word	0x08004bfb
 8004bc0:	08004beb 	.word	0x08004beb
 8004bc4:	08004bfb 	.word	0x08004bfb
 8004bc8:	08004bfb 	.word	0x08004bfb
 8004bcc:	08004bfb 	.word	0x08004bfb
 8004bd0:	08004bf3 	.word	0x08004bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd4:	f7fe f9ce 	bl	8002f74 <HAL_RCC_GetPCLK1Freq>
 8004bd8:	6178      	str	r0, [r7, #20]
        break;
 8004bda:	e013      	b.n	8004c04 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bdc:	f7fe f9e0 	bl	8002fa0 <HAL_RCC_GetPCLK2Freq>
 8004be0:	6178      	str	r0, [r7, #20]
        break;
 8004be2:	e00f      	b.n	8004c04 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be4:	4b24      	ldr	r3, [pc, #144]	; (8004c78 <UART_SetConfig+0x5a0>)
 8004be6:	617b      	str	r3, [r7, #20]
        break;
 8004be8:	e00c      	b.n	8004c04 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bea:	f7fe f92d 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8004bee:	6178      	str	r0, [r7, #20]
        break;
 8004bf0:	e008      	b.n	8004c04 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf6:	617b      	str	r3, [r7, #20]
        break;
 8004bf8:	e004      	b.n	8004c04 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	76bb      	strb	r3, [r7, #26]
        break;
 8004c02:	bf00      	nop
    }

    if (pclk != 0U)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d020      	beq.n	8004c4c <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	4a19      	ldr	r2, [pc, #100]	; (8004c74 <UART_SetConfig+0x59c>)
 8004c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c14:	461a      	mov	r2, r3
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	441a      	add	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	2b0f      	cmp	r3, #15
 8004c34:	d908      	bls.n	8004c48 <UART_SetConfig+0x570>
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3c:	d204      	bcs.n	8004c48 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	60da      	str	r2, [r3, #12]
 8004c46:	e001      	b.n	8004c4c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004c68:	7ebb      	ldrb	r3, [r7, #26]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3720      	adds	r7, #32
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004c74:	0800c458 	.word	0x0800c458
 8004c78:	00f42400 	.word	0x00f42400

08004c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01a      	beq.n	8004d92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d7a:	d10a      	bne.n	8004d92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	605a      	str	r2, [r3, #4]
  }
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004dd0:	f7fc f8a6 	bl	8000f20 <HAL_GetTick>
 8004dd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d10e      	bne.n	8004e02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f82c 	bl	8004e50 <UART_WaitOnFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e022      	b.n	8004e48 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d10e      	bne.n	8004e2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f816 	bl	8004e50 <UART_WaitOnFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e00c      	b.n	8004e48 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e60:	e062      	b.n	8004f28 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e68:	d05e      	beq.n	8004f28 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6a:	f7fc f859 	bl	8000f20 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d302      	bcc.n	8004e80 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d11d      	bne.n	8004ebc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e8e:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0201 	bic.w	r2, r2, #1
 8004e9e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e045      	b.n	8004f48 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d02e      	beq.n	8004f28 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed8:	d126      	bne.n	8004f28 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ee2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ef2:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0201 	bic.w	r2, r2, #1
 8004f02:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e00f      	b.n	8004f48 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	69da      	ldr	r2, [r3, #28]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	4013      	ands	r3, r2
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d08d      	beq.n	8004e62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_UARTEx_DisableFifoMode+0x16>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e027      	b.n	8004fb6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2224      	movs	r2, #36	; 0x24
 8004f72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0201 	bic.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e02d      	b.n	8005036 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2224      	movs	r2, #36	; 0x24
 8004fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0201 	bic.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f850 	bl	80050bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2220      	movs	r2, #32
 8005028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005052:	2302      	movs	r3, #2
 8005054:	e02d      	b.n	80050b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2224      	movs	r2, #36	; 0x24
 8005062:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0201 	bic.w	r2, r2, #1
 800507c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f812 	bl	80050bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80050bc:	b480      	push	{r7}
 80050be:	b089      	sub	sp, #36	; 0x24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80050c4:	4a2f      	ldr	r2, [pc, #188]	; (8005184 <UARTEx_SetNbDataToProcess+0xc8>)
 80050c6:	f107 0314 	add.w	r3, r7, #20
 80050ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050ce:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80050d2:	4a2d      	ldr	r2, [pc, #180]	; (8005188 <UARTEx_SetNbDataToProcess+0xcc>)
 80050d4:	f107 030c 	add.w	r3, r7, #12
 80050d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050dc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d108      	bne.n	80050fa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80050f8:	e03d      	b.n	8005176 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80050fa:	2308      	movs	r3, #8
 80050fc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80050fe:	2308      	movs	r3, #8
 8005100:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	0e5b      	lsrs	r3, r3, #25
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	0f5b      	lsrs	r3, r3, #29
 800511a:	b2db      	uxtb	r3, r3
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005122:	7fbb      	ldrb	r3, [r7, #30]
 8005124:	7f3a      	ldrb	r2, [r7, #28]
 8005126:	f107 0120 	add.w	r1, r7, #32
 800512a:	440a      	add	r2, r1
 800512c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005130:	fb02 f303 	mul.w	r3, r2, r3
 8005134:	7f3a      	ldrb	r2, [r7, #28]
 8005136:	f107 0120 	add.w	r1, r7, #32
 800513a:	440a      	add	r2, r1
 800513c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005140:	fb93 f3f2 	sdiv	r3, r3, r2
 8005144:	b29a      	uxth	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800514c:	7ffb      	ldrb	r3, [r7, #31]
 800514e:	7f7a      	ldrb	r2, [r7, #29]
 8005150:	f107 0120 	add.w	r1, r7, #32
 8005154:	440a      	add	r2, r1
 8005156:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800515a:	fb02 f303 	mul.w	r3, r2, r3
 800515e:	7f7a      	ldrb	r2, [r7, #29]
 8005160:	f107 0120 	add.w	r1, r7, #32
 8005164:	440a      	add	r2, r1
 8005166:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800516a:	fb93 f3f2 	sdiv	r3, r3, r2
 800516e:	b29a      	uxth	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005176:	bf00      	nop
 8005178:	3724      	adds	r7, #36	; 0x24
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	0800c300 	.word	0x0800c300
 8005188:	0800c308 	.word	0x0800c308

0800518c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800519a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800519e:	2b84      	cmp	r3, #132	; 0x84
 80051a0:	d005      	beq.n	80051ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80051a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4413      	add	r3, r2
 80051aa:	3303      	adds	r3, #3
 80051ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80051ae:	68fb      	ldr	r3, [r7, #12]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051c2:	f3ef 8305 	mrs	r3, IPSR
 80051c6:	607b      	str	r3, [r7, #4]
  return(result);
 80051c8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	bf14      	ite	ne
 80051ce:	2301      	movne	r3, #1
 80051d0:	2300      	moveq	r3, #0
 80051d2:	b2db      	uxtb	r3, r3
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80051e4:	f001 fbe6 	bl	80069b4 <vTaskStartScheduler>
  
  return osOK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	bd80      	pop	{r7, pc}

080051ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80051ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051f0:	b089      	sub	sp, #36	; 0x24
 80051f2:	af04      	add	r7, sp, #16
 80051f4:	6078      	str	r0, [r7, #4]
 80051f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d020      	beq.n	8005242 <osThreadCreate+0x54>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01c      	beq.n	8005242 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685c      	ldr	r4, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681d      	ldr	r5, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691e      	ldr	r6, [r3, #16]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff ffb6 	bl	800518c <makeFreeRtosPriority>
 8005220:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800522a:	9202      	str	r2, [sp, #8]
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	9100      	str	r1, [sp, #0]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	4632      	mov	r2, r6
 8005234:	4629      	mov	r1, r5
 8005236:	4620      	mov	r0, r4
 8005238:	f001 f9f8 	bl	800662c <xTaskCreateStatic>
 800523c:	4603      	mov	r3, r0
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	e01c      	b.n	800527c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685c      	ldr	r4, [r3, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800524e:	b29e      	uxth	r6, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff ff98 	bl	800518c <makeFreeRtosPriority>
 800525c:	4602      	mov	r2, r0
 800525e:	f107 030c 	add.w	r3, r7, #12
 8005262:	9301      	str	r3, [sp, #4]
 8005264:	9200      	str	r2, [sp, #0]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	4632      	mov	r2, r6
 800526a:	4629      	mov	r1, r5
 800526c:	4620      	mov	r0, r4
 800526e:	f001 fa37 	bl	80066e0 <xTaskCreate>
 8005272:	4603      	mov	r3, r0
 8005274:	2b01      	cmp	r3, #1
 8005276:	d001      	beq.n	800527c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005278:	2300      	movs	r3, #0
 800527a:	e000      	b.n	800527e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800527c:	68fb      	ldr	r3, [r7, #12]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005286 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b084      	sub	sp, #16
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <osDelay+0x16>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	e000      	b.n	800529e <osDelay+0x18>
 800529c:	2301      	movs	r3, #1
 800529e:	4618      	mov	r0, r3
 80052a0:	f001 fb54 	bl	800694c <vTaskDelay>
  
  return osOK;
 80052a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	460b      	mov	r3, r1
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d013      	beq.n	80052ee <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80052c6:	7afb      	ldrb	r3, [r7, #11]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d101      	bne.n	80052d0 <osTimerCreate+0x20>
 80052cc:	2101      	movs	r1, #1
 80052ce:	e000      	b.n	80052d2 <osTimerCreate+0x22>
 80052d0:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80052da:	9201      	str	r2, [sp, #4]
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	460a      	mov	r2, r1
 80052e2:	2101      	movs	r1, #1
 80052e4:	480b      	ldr	r0, [pc, #44]	; (8005314 <osTimerCreate+0x64>)
 80052e6:	f002 fc1a 	bl	8007b1e <xTimerCreateStatic>
 80052ea:	4603      	mov	r3, r0
 80052ec:	e00e      	b.n	800530c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80052ee:	7afb      	ldrb	r3, [r7, #11]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <osTimerCreate+0x48>
 80052f4:	2201      	movs	r2, #1
 80052f6:	e000      	b.n	80052fa <osTimerCreate+0x4a>
 80052f8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2101      	movs	r1, #1
 8005304:	4803      	ldr	r0, [pc, #12]	; (8005314 <osTimerCreate+0x64>)
 8005306:	f002 fbe9 	bl	8007adc <xTimerCreate>
 800530a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	0800c310 	.word	0x0800c310

08005318 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af02      	add	r7, sp, #8
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800532a:	f7ff ff47 	bl	80051bc <inHandlerMode>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01c      	beq.n	800536e <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8005334:	6839      	ldr	r1, [r7, #0]
 8005336:	f107 0208 	add.w	r2, r7, #8
 800533a:	f107 030c 	add.w	r3, r7, #12
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	4613      	mov	r3, r2
 8005342:	2201      	movs	r2, #1
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f002 fa43 	bl	80077d0 <xTaskGenericNotifyFromISR>
 800534a:	4603      	mov	r3, r0
 800534c:	2b01      	cmp	r3, #1
 800534e:	d002      	beq.n	8005356 <osSignalSet+0x3e>
      return 0x80000000;
 8005350:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005354:	e019      	b.n	800538a <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d015      	beq.n	8005388 <osSignalSet+0x70>
 800535c:	4b0d      	ldr	r3, [pc, #52]	; (8005394 <osSignalSet+0x7c>)
 800535e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	e00c      	b.n	8005388 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800536e:	6839      	ldr	r1, [r7, #0]
 8005370:	f107 0308 	add.w	r3, r7, #8
 8005374:	2201      	movs	r2, #1
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f002 f978 	bl	800766c <xTaskGenericNotify>
 800537c:	4603      	mov	r3, r0
 800537e:	2b01      	cmp	r3, #1
 8005380:	d002      	beq.n	8005388 <osSignalSet+0x70>
    return 0x80000000;
 8005382:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005386:	e000      	b.n	800538a <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8005388:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	e000ed04 	.word	0xe000ed04

08005398 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8005398:	b590      	push	{r4, r7, lr}
 800539a:	b089      	sub	sp, #36	; 0x24
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b2:	d103      	bne.n	80053bc <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80053b4:	f04f 33ff 	mov.w	r3, #4294967295
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	e009      	b.n	80053d0 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d006      	beq.n	80053d0 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <osSignalWait+0x38>
      ticks = 1;
 80053cc:	2301      	movs	r3, #1
 80053ce:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80053d0:	f7ff fef4 	bl	80051bc <inHandlerMode>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80053da:	2382      	movs	r3, #130	; 0x82
 80053dc:	613b      	str	r3, [r7, #16]
 80053de:	e01b      	b.n	8005418 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	f107 0310 	add.w	r3, r7, #16
 80053e6:	1d1a      	adds	r2, r3, #4
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	2000      	movs	r0, #0
 80053ec:	f002 f8e4 	bl	80075b8 <xTaskNotifyWait>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d008      	beq.n	8005408 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d102      	bne.n	8005402 <osSignalWait+0x6a>
 80053fc:	2300      	movs	r3, #0
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	e00a      	b.n	8005418 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8005402:	2340      	movs	r3, #64	; 0x40
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	e007      	b.n	8005418 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2b00      	cmp	r3, #0
 800540c:	da02      	bge.n	8005414 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800540e:	2386      	movs	r3, #134	; 0x86
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	e001      	b.n	8005418 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8005414:	2308      	movs	r3, #8
 8005416:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	461c      	mov	r4, r3
 800541c:	f107 0310 	add.w	r3, r7, #16
 8005420:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005424:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	3724      	adds	r7, #36	; 0x24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd90      	pop	{r4, r7, pc}

08005430 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	4619      	mov	r1, r3
 8005446:	2001      	movs	r0, #1
 8005448:	f000 fad7 	bl	80059fa <xQueueCreateMutexStatic>
 800544c:	4603      	mov	r3, r0
 800544e:	e003      	b.n	8005458 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005450:	2001      	movs	r0, #1
 8005452:	f000 faba 	bl	80059ca <xQueueCreateMutex>
 8005456:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800546a:	2300      	movs	r3, #0
 800546c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <osMutexWait+0x18>
    return osErrorParameter;
 8005474:	2380      	movs	r3, #128	; 0x80
 8005476:	e03a      	b.n	80054ee <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005482:	d103      	bne.n	800548c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005484:	f04f 33ff 	mov.w	r3, #4294967295
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	e009      	b.n	80054a0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d006      	beq.n	80054a0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <osMutexWait+0x40>
      ticks = 1;
 800549c:	2301      	movs	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80054a0:	f7ff fe8c 	bl	80051bc <inHandlerMode>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d017      	beq.n	80054da <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80054aa:	f107 0308 	add.w	r3, r7, #8
 80054ae:	461a      	mov	r2, r3
 80054b0:	2100      	movs	r1, #0
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 feb8 	bl	8006228 <xQueueReceiveFromISR>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d001      	beq.n	80054c2 <osMutexWait+0x62>
      return osErrorOS;
 80054be:	23ff      	movs	r3, #255	; 0xff
 80054c0:	e015      	b.n	80054ee <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d011      	beq.n	80054ec <osMutexWait+0x8c>
 80054c8:	4b0b      	ldr	r3, [pc, #44]	; (80054f8 <osMutexWait+0x98>)
 80054ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	e008      	b.n	80054ec <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80054da:	68f9      	ldr	r1, [r7, #12]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fd9b 	bl	8006018 <xQueueSemaphoreTake>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d001      	beq.n	80054ec <osMutexWait+0x8c>
    return osErrorOS;
 80054e8:	23ff      	movs	r3, #255	; 0xff
 80054ea:	e000      	b.n	80054ee <osMutexWait+0x8e>
  }
  
  return osOK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	e000ed04 	.word	0xe000ed04

080054fc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005508:	2300      	movs	r3, #0
 800550a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800550c:	f7ff fe56 	bl	80051bc <inHandlerMode>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d016      	beq.n	8005544 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005516:	f107 0308 	add.w	r3, r7, #8
 800551a:	4619      	mov	r1, r3
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fc15 	bl	8005d4c <xQueueGiveFromISR>
 8005522:	4603      	mov	r3, r0
 8005524:	2b01      	cmp	r3, #1
 8005526:	d001      	beq.n	800552c <osMutexRelease+0x30>
      return osErrorOS;
 8005528:	23ff      	movs	r3, #255	; 0xff
 800552a:	e017      	b.n	800555c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d013      	beq.n	800555a <osMutexRelease+0x5e>
 8005532:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <osMutexRelease+0x68>)
 8005534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	e00a      	b.n	800555a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005544:	2300      	movs	r3, #0
 8005546:	2200      	movs	r2, #0
 8005548:	2100      	movs	r1, #0
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fa70 	bl	8005a30 <xQueueGenericSend>
 8005550:	4603      	mov	r3, r0
 8005552:	2b01      	cmp	r3, #1
 8005554:	d001      	beq.n	800555a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005556:	23ff      	movs	r3, #255	; 0xff
 8005558:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800555a:	68fb      	ldr	r3, [r7, #12]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	e000ed04 	.word	0xe000ed04

08005568 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005568:	b590      	push	{r4, r7, lr}
 800556a:	b085      	sub	sp, #20
 800556c:	af02      	add	r7, sp, #8
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d012      	beq.n	80055a0 <osMessageCreate+0x38>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00e      	beq.n	80055a0 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6859      	ldr	r1, [r3, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68dc      	ldr	r4, [r3, #12]
 8005592:	2300      	movs	r3, #0
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	4623      	mov	r3, r4
 8005598:	f000 f92c 	bl	80057f4 <xQueueGenericCreateStatic>
 800559c:	4603      	mov	r3, r0
 800559e:	e008      	b.n	80055b2 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	4619      	mov	r1, r3
 80055ac:	f000 f995 	bl	80058da <xQueueGenericCreate>
 80055b0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd90      	pop	{r4, r7, pc}

080055ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f103 0208 	add.w	r2, r3, #8
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f04f 32ff 	mov.w	r2, #4294967295
 80055d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f103 0208 	add.w	r2, r3, #8
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f103 0208 	add.w	r2, r3, #8
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	601a      	str	r2, [r3, #0]
}
 8005650:	bf00      	nop
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005672:	d103      	bne.n	800567c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	e00c      	b.n	8005696 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3308      	adds	r3, #8
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e002      	b.n	800568a <vListInsert+0x2e>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	429a      	cmp	r2, r3
 8005694:	d2f6      	bcs.n	8005684 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	601a      	str	r2, [r3, #0]
}
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6892      	ldr	r2, [r2, #8]
 80056e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6852      	ldr	r2, [r2, #4]
 80056ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d103      	bne.n	8005702 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	1e5a      	subs	r2, r3, #1
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d109      	bne.n	800574c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	60bb      	str	r3, [r7, #8]
 800574a:	e7fe      	b.n	800574a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800574c:	f002 fe6e 	bl	800842c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005758:	68f9      	ldr	r1, [r7, #12]
 800575a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800575c:	fb01 f303 	mul.w	r3, r1, r3
 8005760:	441a      	add	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577c:	3b01      	subs	r3, #1
 800577e:	68f9      	ldr	r1, [r7, #12]
 8005780:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005782:	fb01 f303 	mul.w	r3, r1, r3
 8005786:	441a      	add	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	22ff      	movs	r2, #255	; 0xff
 8005790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	22ff      	movs	r2, #255	; 0xff
 8005798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d114      	bne.n	80057cc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d01a      	beq.n	80057e0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3310      	adds	r3, #16
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 fb7e 	bl	8006eb0 <xTaskRemoveFromEventList>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d012      	beq.n	80057e0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80057ba:	4b0d      	ldr	r3, [pc, #52]	; (80057f0 <xQueueGenericReset+0xcc>)
 80057bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	e009      	b.n	80057e0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3310      	adds	r3, #16
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff fef2 	bl	80055ba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3324      	adds	r3, #36	; 0x24
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff feed 	bl	80055ba <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057e0:	f002 fe52 	bl	8008488 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057e4:	2301      	movs	r3, #1
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	e000ed04 	.word	0xe000ed04

080057f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08e      	sub	sp, #56	; 0x38
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
 8005800:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d109      	bne.n	800581c <xQueueGenericCreateStatic+0x28>
 8005808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	62bb      	str	r3, [r7, #40]	; 0x28
 800581a:	e7fe      	b.n	800581a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <xQueueGenericCreateStatic+0x42>
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
 8005834:	e7fe      	b.n	8005834 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <xQueueGenericCreateStatic+0x4e>
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <xQueueGenericCreateStatic+0x52>
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <xQueueGenericCreateStatic+0x54>
 8005846:	2300      	movs	r3, #0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d109      	bne.n	8005860 <xQueueGenericCreateStatic+0x6c>
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	623b      	str	r3, [r7, #32]
 800585e:	e7fe      	b.n	800585e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d102      	bne.n	800586c <xQueueGenericCreateStatic+0x78>
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <xQueueGenericCreateStatic+0x7c>
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <xQueueGenericCreateStatic+0x7e>
 8005870:	2300      	movs	r3, #0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d109      	bne.n	800588a <xQueueGenericCreateStatic+0x96>
 8005876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	61fb      	str	r3, [r7, #28]
 8005888:	e7fe      	b.n	8005888 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800588a:	2348      	movs	r3, #72	; 0x48
 800588c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b48      	cmp	r3, #72	; 0x48
 8005892:	d009      	beq.n	80058a8 <xQueueGenericCreateStatic+0xb4>
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	61bb      	str	r3, [r7, #24]
 80058a6:	e7fe      	b.n	80058a6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80058a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00d      	beq.n	80058d0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058bc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80058c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	4613      	mov	r3, r2
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f844 	bl	8005958 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3730      	adds	r7, #48	; 0x30
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b08a      	sub	sp, #40	; 0x28
 80058de:	af02      	add	r7, sp, #8
 80058e0:	60f8      	str	r0, [r7, #12]
 80058e2:	60b9      	str	r1, [r7, #8]
 80058e4:	4613      	mov	r3, r2
 80058e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d109      	bne.n	8005902 <xQueueGenericCreate+0x28>
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	613b      	str	r3, [r7, #16]
 8005900:	e7fe      	b.n	8005900 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d102      	bne.n	800590e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005908:	2300      	movs	r3, #0
 800590a:	61fb      	str	r3, [r7, #28]
 800590c:	e004      	b.n	8005918 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	fb02 f303 	mul.w	r3, r2, r3
 8005916:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	3348      	adds	r3, #72	; 0x48
 800591c:	4618      	mov	r0, r3
 800591e:	f002 fe9f 	bl	8008660 <pvPortMalloc>
 8005922:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d011      	beq.n	800594e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	3348      	adds	r3, #72	; 0x48
 8005932:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800593c:	79fa      	ldrb	r2, [r7, #7]
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	4613      	mov	r3, r2
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f805 	bl	8005958 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800594e:	69bb      	ldr	r3, [r7, #24]
	}
 8005950:	4618      	mov	r0, r3
 8005952:	3720      	adds	r7, #32
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d103      	bne.n	8005974 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	e002      	b.n	800597a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005986:	2101      	movs	r1, #1
 8005988:	69b8      	ldr	r0, [r7, #24]
 800598a:	f7ff fecb 	bl	8005724 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800598e:	bf00      	nop
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005996:	b580      	push	{r7, lr}
 8005998:	b082      	sub	sp, #8
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00e      	beq.n	80059c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80059b6:	2300      	movs	r3, #0
 80059b8:	2200      	movs	r2, #0
 80059ba:	2100      	movs	r1, #0
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f837 	bl	8005a30 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b086      	sub	sp, #24
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	4603      	mov	r3, r0
 80059d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80059d4:	2301      	movs	r3, #1
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	2300      	movs	r3, #0
 80059da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	461a      	mov	r2, r3
 80059e0:	6939      	ldr	r1, [r7, #16]
 80059e2:	6978      	ldr	r0, [r7, #20]
 80059e4:	f7ff ff79 	bl	80058da <xQueueGenericCreate>
 80059e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f7ff ffd3 	bl	8005996 <prvInitialiseMutex>

		return xNewQueue;
 80059f0:	68fb      	ldr	r3, [r7, #12]
	}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b088      	sub	sp, #32
 80059fe:	af02      	add	r7, sp, #8
 8005a00:	4603      	mov	r3, r0
 8005a02:	6039      	str	r1, [r7, #0]
 8005a04:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005a06:	2301      	movs	r3, #1
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2200      	movs	r2, #0
 8005a16:	6939      	ldr	r1, [r7, #16]
 8005a18:	6978      	ldr	r0, [r7, #20]
 8005a1a:	f7ff feeb 	bl	80057f4 <xQueueGenericCreateStatic>
 8005a1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f7ff ffb8 	bl	8005996 <prvInitialiseMutex>

		return xNewQueue;
 8005a26:	68fb      	ldr	r3, [r7, #12]
	}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08e      	sub	sp, #56	; 0x38
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d109      	bne.n	8005a60 <xQueueGenericSend+0x30>
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a5e:	e7fe      	b.n	8005a5e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d103      	bne.n	8005a6e <xQueueGenericSend+0x3e>
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <xQueueGenericSend+0x42>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <xQueueGenericSend+0x44>
 8005a72:	2300      	movs	r3, #0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d109      	bne.n	8005a8c <xQueueGenericSend+0x5c>
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8a:	e7fe      	b.n	8005a8a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d103      	bne.n	8005a9a <xQueueGenericSend+0x6a>
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <xQueueGenericSend+0x6e>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e000      	b.n	8005aa0 <xQueueGenericSend+0x70>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d109      	bne.n	8005ab8 <xQueueGenericSend+0x88>
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	623b      	str	r3, [r7, #32]
 8005ab6:	e7fe      	b.n	8005ab6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ab8:	f001 fbb0 	bl	800721c <xTaskGetSchedulerState>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d102      	bne.n	8005ac8 <xQueueGenericSend+0x98>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <xQueueGenericSend+0x9c>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <xQueueGenericSend+0x9e>
 8005acc:	2300      	movs	r3, #0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <xQueueGenericSend+0xb6>
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	61fb      	str	r3, [r7, #28]
 8005ae4:	e7fe      	b.n	8005ae4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ae6:	f002 fca1 	bl	800842c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d302      	bcc.n	8005afc <xQueueGenericSend+0xcc>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d129      	bne.n	8005b50 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b02:	f000 fc26 	bl	8006352 <prvCopyDataToQueue>
 8005b06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d010      	beq.n	8005b32 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b12:	3324      	adds	r3, #36	; 0x24
 8005b14:	4618      	mov	r0, r3
 8005b16:	f001 f9cb 	bl	8006eb0 <xTaskRemoveFromEventList>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d013      	beq.n	8005b48 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b20:	4b3f      	ldr	r3, [pc, #252]	; (8005c20 <xQueueGenericSend+0x1f0>)
 8005b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	e00a      	b.n	8005b48 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d007      	beq.n	8005b48 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b38:	4b39      	ldr	r3, [pc, #228]	; (8005c20 <xQueueGenericSend+0x1f0>)
 8005b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b48:	f002 fc9e 	bl	8008488 <vPortExitCritical>
				return pdPASS;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e063      	b.n	8005c18 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d103      	bne.n	8005b5e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b56:	f002 fc97 	bl	8008488 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e05c      	b.n	8005c18 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d106      	bne.n	8005b72 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b64:	f107 0314 	add.w	r3, r7, #20
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f001 fa03 	bl	8006f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b72:	f002 fc89 	bl	8008488 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b76:	f000 ff81 	bl	8006a7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b7a:	f002 fc57 	bl	800842c <vPortEnterCritical>
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b84:	b25b      	sxtb	r3, r3
 8005b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8a:	d103      	bne.n	8005b94 <xQueueGenericSend+0x164>
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b9a:	b25b      	sxtb	r3, r3
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d103      	bne.n	8005baa <xQueueGenericSend+0x17a>
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005baa:	f002 fc6d 	bl	8008488 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bae:	1d3a      	adds	r2, r7, #4
 8005bb0:	f107 0314 	add.w	r3, r7, #20
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f001 f9f2 	bl	8006fa0 <xTaskCheckForTimeOut>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d124      	bne.n	8005c0c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005bc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bc4:	f000 fcbd 	bl	8006542 <prvIsQueueFull>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d018      	beq.n	8005c00 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	3310      	adds	r3, #16
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f001 f91c 	bl	8006e14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bde:	f000 fc48 	bl	8006472 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005be2:	f000 ff59 	bl	8006a98 <xTaskResumeAll>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f47f af7c 	bne.w	8005ae6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005bee:	4b0c      	ldr	r3, [pc, #48]	; (8005c20 <xQueueGenericSend+0x1f0>)
 8005bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	e772      	b.n	8005ae6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c02:	f000 fc36 	bl	8006472 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c06:	f000 ff47 	bl	8006a98 <xTaskResumeAll>
 8005c0a:	e76c      	b.n	8005ae6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c0e:	f000 fc30 	bl	8006472 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c12:	f000 ff41 	bl	8006a98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3738      	adds	r7, #56	; 0x38
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	e000ed04 	.word	0xe000ed04

08005c24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08e      	sub	sp, #56	; 0x38
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d109      	bne.n	8005c50 <xQueueGenericSendFromISR+0x2c>
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c4e:	e7fe      	b.n	8005c4e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d103      	bne.n	8005c5e <xQueueGenericSendFromISR+0x3a>
 8005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <xQueueGenericSendFromISR+0x3e>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <xQueueGenericSendFromISR+0x40>
 8005c62:	2300      	movs	r3, #0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d109      	bne.n	8005c7c <xQueueGenericSendFromISR+0x58>
 8005c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	623b      	str	r3, [r7, #32]
 8005c7a:	e7fe      	b.n	8005c7a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d103      	bne.n	8005c8a <xQueueGenericSendFromISR+0x66>
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <xQueueGenericSendFromISR+0x6a>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <xQueueGenericSendFromISR+0x6c>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d109      	bne.n	8005ca8 <xQueueGenericSendFromISR+0x84>
 8005c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	61fb      	str	r3, [r7, #28]
 8005ca6:	e7fe      	b.n	8005ca6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ca8:	f002 fc9c 	bl	80085e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005cac:	f3ef 8211 	mrs	r2, BASEPRI
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	61ba      	str	r2, [r7, #24]
 8005cc2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005cc4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d302      	bcc.n	8005cda <xQueueGenericSendFromISR+0xb6>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d12c      	bne.n	8005d34 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	68b9      	ldr	r1, [r7, #8]
 8005ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cea:	f000 fb32 	bl	8006352 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005cee:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf6:	d112      	bne.n	8005d1e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d016      	beq.n	8005d2e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d02:	3324      	adds	r3, #36	; 0x24
 8005d04:	4618      	mov	r0, r3
 8005d06:	f001 f8d3 	bl	8006eb0 <xTaskRemoveFromEventList>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00e      	beq.n	8005d2e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00b      	beq.n	8005d2e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	e007      	b.n	8005d2e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d22:	3301      	adds	r3, #1
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	b25a      	sxtb	r2, r3
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005d32:	e001      	b.n	8005d38 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d34:	2300      	movs	r3, #0
 8005d36:	637b      	str	r3, [r7, #52]	; 0x34
 8005d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3738      	adds	r7, #56	; 0x38
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08e      	sub	sp, #56	; 0x38
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d109      	bne.n	8005d74 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	623b      	str	r3, [r7, #32]
 8005d72:	e7fe      	b.n	8005d72 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d009      	beq.n	8005d90 <xQueueGiveFromISR+0x44>
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	61fb      	str	r3, [r7, #28]
 8005d8e:	e7fe      	b.n	8005d8e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d103      	bne.n	8005da0 <xQueueGiveFromISR+0x54>
 8005d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <xQueueGiveFromISR+0x58>
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <xQueueGiveFromISR+0x5a>
 8005da4:	2300      	movs	r3, #0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d109      	bne.n	8005dbe <xQueueGiveFromISR+0x72>
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	61bb      	str	r3, [r7, #24]
 8005dbc:	e7fe      	b.n	8005dbc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dbe:	f002 fc11 	bl	80085e4 <vPortValidateInterruptPriority>
	__asm volatile
 8005dc2:	f3ef 8211 	mrs	r2, BASEPRI
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	617a      	str	r2, [r7, #20]
 8005dd8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005dda:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d22b      	bcs.n	8005e46 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e08:	d112      	bne.n	8005e30 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d016      	beq.n	8005e40 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	3324      	adds	r3, #36	; 0x24
 8005e16:	4618      	mov	r0, r3
 8005e18:	f001 f84a 	bl	8006eb0 <xTaskRemoveFromEventList>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00e      	beq.n	8005e40 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00b      	beq.n	8005e40 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	e007      	b.n	8005e40 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e34:	3301      	adds	r3, #1
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	b25a      	sxtb	r2, r3
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e40:	2301      	movs	r3, #1
 8005e42:	637b      	str	r3, [r7, #52]	; 0x34
 8005e44:	e001      	b.n	8005e4a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	637b      	str	r3, [r7, #52]	; 0x34
 8005e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3738      	adds	r7, #56	; 0x38
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08c      	sub	sp, #48	; 0x30
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d109      	bne.n	8005e8e <xQueueReceive+0x2e>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	623b      	str	r3, [r7, #32]
 8005e8c:	e7fe      	b.n	8005e8c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d103      	bne.n	8005e9c <xQueueReceive+0x3c>
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <xQueueReceive+0x40>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e000      	b.n	8005ea2 <xQueueReceive+0x42>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d109      	bne.n	8005eba <xQueueReceive+0x5a>
 8005ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	61fb      	str	r3, [r7, #28]
 8005eb8:	e7fe      	b.n	8005eb8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005eba:	f001 f9af 	bl	800721c <xTaskGetSchedulerState>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d102      	bne.n	8005eca <xQueueReceive+0x6a>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <xQueueReceive+0x6e>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e000      	b.n	8005ed0 <xQueueReceive+0x70>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d109      	bne.n	8005ee8 <xQueueReceive+0x88>
 8005ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	61bb      	str	r3, [r7, #24]
 8005ee6:	e7fe      	b.n	8005ee6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ee8:	f002 faa0 	bl	800842c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01f      	beq.n	8005f38 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ef8:	68b9      	ldr	r1, [r7, #8]
 8005efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005efc:	f000 fa93 	bl	8006426 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	1e5a      	subs	r2, r3, #1
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00f      	beq.n	8005f30 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	3310      	adds	r3, #16
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 ffcb 	bl	8006eb0 <xTaskRemoveFromEventList>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f20:	4b3c      	ldr	r3, [pc, #240]	; (8006014 <xQueueReceive+0x1b4>)
 8005f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f30:	f002 faaa 	bl	8008488 <vPortExitCritical>
				return pdPASS;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e069      	b.n	800600c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d103      	bne.n	8005f46 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f3e:	f002 faa3 	bl	8008488 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f42:	2300      	movs	r3, #0
 8005f44:	e062      	b.n	800600c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d106      	bne.n	8005f5a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f4c:	f107 0310 	add.w	r3, r7, #16
 8005f50:	4618      	mov	r0, r3
 8005f52:	f001 f80f 	bl	8006f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f56:	2301      	movs	r3, #1
 8005f58:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f5a:	f002 fa95 	bl	8008488 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f5e:	f000 fd8d 	bl	8006a7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f62:	f002 fa63 	bl	800842c <vPortEnterCritical>
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f6c:	b25b      	sxtb	r3, r3
 8005f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f72:	d103      	bne.n	8005f7c <xQueueReceive+0x11c>
 8005f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f82:	b25b      	sxtb	r3, r3
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f88:	d103      	bne.n	8005f92 <xQueueReceive+0x132>
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f92:	f002 fa79 	bl	8008488 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f96:	1d3a      	adds	r2, r7, #4
 8005f98:	f107 0310 	add.w	r3, r7, #16
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 fffe 	bl	8006fa0 <xTaskCheckForTimeOut>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d123      	bne.n	8005ff2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fac:	f000 fab3 	bl	8006516 <prvIsQueueEmpty>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d017      	beq.n	8005fe6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	3324      	adds	r3, #36	; 0x24
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 ff28 	bl	8006e14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fc6:	f000 fa54 	bl	8006472 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fca:	f000 fd65 	bl	8006a98 <xTaskResumeAll>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d189      	bne.n	8005ee8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005fd4:	4b0f      	ldr	r3, [pc, #60]	; (8006014 <xQueueReceive+0x1b4>)
 8005fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	e780      	b.n	8005ee8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fe8:	f000 fa43 	bl	8006472 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fec:	f000 fd54 	bl	8006a98 <xTaskResumeAll>
 8005ff0:	e77a      	b.n	8005ee8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ff4:	f000 fa3d 	bl	8006472 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ff8:	f000 fd4e 	bl	8006a98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ffe:	f000 fa8a 	bl	8006516 <prvIsQueueEmpty>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	f43f af6f 	beq.w	8005ee8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800600a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800600c:	4618      	mov	r0, r3
 800600e:	3730      	adds	r7, #48	; 0x30
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	e000ed04 	.word	0xe000ed04

08006018 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08e      	sub	sp, #56	; 0x38
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006022:	2300      	movs	r3, #0
 8006024:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800602a:	2300      	movs	r3, #0
 800602c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800602e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006030:	2b00      	cmp	r3, #0
 8006032:	d109      	bne.n	8006048 <xQueueSemaphoreTake+0x30>
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	623b      	str	r3, [r7, #32]
 8006046:	e7fe      	b.n	8006046 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d009      	beq.n	8006064 <xQueueSemaphoreTake+0x4c>
 8006050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006054:	f383 8811 	msr	BASEPRI, r3
 8006058:	f3bf 8f6f 	isb	sy
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	61fb      	str	r3, [r7, #28]
 8006062:	e7fe      	b.n	8006062 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006064:	f001 f8da 	bl	800721c <xTaskGetSchedulerState>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d102      	bne.n	8006074 <xQueueSemaphoreTake+0x5c>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <xQueueSemaphoreTake+0x60>
 8006074:	2301      	movs	r3, #1
 8006076:	e000      	b.n	800607a <xQueueSemaphoreTake+0x62>
 8006078:	2300      	movs	r3, #0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d109      	bne.n	8006092 <xQueueSemaphoreTake+0x7a>
 800607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	61bb      	str	r3, [r7, #24]
 8006090:	e7fe      	b.n	8006090 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006092:	f002 f9cb 	bl	800842c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d024      	beq.n	80060ec <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80060a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a4:	1e5a      	subs	r2, r3, #1
 80060a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d104      	bne.n	80060bc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80060b2:	f001 fa6d 	bl	8007590 <pvTaskIncrementMutexHeldCount>
 80060b6:	4602      	mov	r2, r0
 80060b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00f      	beq.n	80060e4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c6:	3310      	adds	r3, #16
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 fef1 	bl	8006eb0 <xTaskRemoveFromEventList>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d007      	beq.n	80060e4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060d4:	4b53      	ldr	r3, [pc, #332]	; (8006224 <xQueueSemaphoreTake+0x20c>)
 80060d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060e4:	f002 f9d0 	bl	8008488 <vPortExitCritical>
				return pdPASS;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e096      	b.n	800621a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d110      	bne.n	8006114 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d009      	beq.n	800610c <xQueueSemaphoreTake+0xf4>
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	e7fe      	b.n	800610a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800610c:	f002 f9bc 	bl	8008488 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006110:	2300      	movs	r3, #0
 8006112:	e082      	b.n	800621a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800611a:	f107 030c 	add.w	r3, r7, #12
 800611e:	4618      	mov	r0, r3
 8006120:	f000 ff28 	bl	8006f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006124:	2301      	movs	r3, #1
 8006126:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006128:	f002 f9ae 	bl	8008488 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800612c:	f000 fca6 	bl	8006a7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006130:	f002 f97c 	bl	800842c <vPortEnterCritical>
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800613a:	b25b      	sxtb	r3, r3
 800613c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006140:	d103      	bne.n	800614a <xQueueSemaphoreTake+0x132>
 8006142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006150:	b25b      	sxtb	r3, r3
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d103      	bne.n	8006160 <xQueueSemaphoreTake+0x148>
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006160:	f002 f992 	bl	8008488 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006164:	463a      	mov	r2, r7
 8006166:	f107 030c 	add.w	r3, r7, #12
 800616a:	4611      	mov	r1, r2
 800616c:	4618      	mov	r0, r3
 800616e:	f000 ff17 	bl	8006fa0 <xTaskCheckForTimeOut>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d132      	bne.n	80061de <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800617a:	f000 f9cc 	bl	8006516 <prvIsQueueEmpty>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d026      	beq.n	80061d2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d109      	bne.n	80061a0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800618c:	f002 f94e 	bl	800842c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	4618      	mov	r0, r3
 8006196:	f001 f85f 	bl	8007258 <xTaskPriorityInherit>
 800619a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800619c:	f002 f974 	bl	8008488 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	3324      	adds	r3, #36	; 0x24
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	4611      	mov	r1, r2
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fe33 	bl	8006e14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061b0:	f000 f95f 	bl	8006472 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061b4:	f000 fc70 	bl	8006a98 <xTaskResumeAll>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f47f af69 	bne.w	8006092 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80061c0:	4b18      	ldr	r3, [pc, #96]	; (8006224 <xQueueSemaphoreTake+0x20c>)
 80061c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	e75f      	b.n	8006092 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80061d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061d4:	f000 f94d 	bl	8006472 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061d8:	f000 fc5e 	bl	8006a98 <xTaskResumeAll>
 80061dc:	e759      	b.n	8006092 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80061de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061e0:	f000 f947 	bl	8006472 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061e4:	f000 fc58 	bl	8006a98 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061ea:	f000 f994 	bl	8006516 <prvIsQueueEmpty>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f43f af4e 	beq.w	8006092 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00d      	beq.n	8006218 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80061fc:	f002 f916 	bl	800842c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006200:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006202:	f000 f88e 	bl	8006322 <prvGetDisinheritPriorityAfterTimeout>
 8006206:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800620e:	4618      	mov	r0, r3
 8006210:	f001 f926 	bl	8007460 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006214:	f002 f938 	bl	8008488 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006218:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800621a:	4618      	mov	r0, r3
 800621c:	3738      	adds	r7, #56	; 0x38
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	e000ed04 	.word	0xe000ed04

08006228 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08e      	sub	sp, #56	; 0x38
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	2b00      	cmp	r3, #0
 800623c:	d109      	bne.n	8006252 <xQueueReceiveFromISR+0x2a>
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	623b      	str	r3, [r7, #32]
 8006250:	e7fe      	b.n	8006250 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d103      	bne.n	8006260 <xQueueReceiveFromISR+0x38>
 8006258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <xQueueReceiveFromISR+0x3c>
 8006260:	2301      	movs	r3, #1
 8006262:	e000      	b.n	8006266 <xQueueReceiveFromISR+0x3e>
 8006264:	2300      	movs	r3, #0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d109      	bne.n	800627e <xQueueReceiveFromISR+0x56>
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	61fb      	str	r3, [r7, #28]
 800627c:	e7fe      	b.n	800627c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800627e:	f002 f9b1 	bl	80085e4 <vPortValidateInterruptPriority>
	__asm volatile
 8006282:	f3ef 8211 	mrs	r2, BASEPRI
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	61ba      	str	r2, [r7, #24]
 8006298:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800629a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800629c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d02f      	beq.n	800630a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062b4:	68b9      	ldr	r1, [r7, #8]
 80062b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062b8:	f000 f8b5 	bl	8006426 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	1e5a      	subs	r2, r3, #1
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80062c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80062c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062cc:	d112      	bne.n	80062f4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d016      	beq.n	8006304 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	3310      	adds	r3, #16
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 fde8 	bl	8006eb0 <xTaskRemoveFromEventList>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00e      	beq.n	8006304 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00b      	beq.n	8006304 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	e007      	b.n	8006304 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80062f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062f8:	3301      	adds	r3, #1
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	b25a      	sxtb	r2, r3
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006304:	2301      	movs	r3, #1
 8006306:	637b      	str	r3, [r7, #52]	; 0x34
 8006308:	e001      	b.n	800630e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800630a:	2300      	movs	r3, #0
 800630c:	637b      	str	r3, [r7, #52]	; 0x34
 800630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006310:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800631a:	4618      	mov	r0, r3
 800631c:	3738      	adds	r7, #56	; 0x38
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006322:	b480      	push	{r7}
 8006324:	b085      	sub	sp, #20
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	2b00      	cmp	r3, #0
 8006330:	d006      	beq.n	8006340 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f1c3 0307 	rsb	r3, r3, #7
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	e001      	b.n	8006344 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006340:	2300      	movs	r3, #0
 8006342:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006344:	68fb      	ldr	r3, [r7, #12]
	}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b086      	sub	sp, #24
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006366:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10d      	bne.n	800638c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d14d      	bne.n	8006414 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	4618      	mov	r0, r3
 800637e:	f000 ffeb 	bl	8007358 <xTaskPriorityDisinherit>
 8006382:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	609a      	str	r2, [r3, #8]
 800638a:	e043      	b.n	8006414 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d119      	bne.n	80063c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6858      	ldr	r0, [r3, #4]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	461a      	mov	r2, r3
 800639c:	68b9      	ldr	r1, [r7, #8]
 800639e:	f004 fae7 	bl	800a970 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	441a      	add	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d32b      	bcc.n	8006414 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	605a      	str	r2, [r3, #4]
 80063c4:	e026      	b.n	8006414 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	68d8      	ldr	r0, [r3, #12]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	461a      	mov	r2, r3
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	f004 facd 	bl	800a970 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	425b      	negs	r3, r3
 80063e0:	441a      	add	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d207      	bcs.n	8006402 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	425b      	negs	r3, r3
 80063fc:	441a      	add	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b02      	cmp	r3, #2
 8006406:	d105      	bne.n	8006414 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	3b01      	subs	r3, #1
 8006412:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800641c:	697b      	ldr	r3, [r7, #20]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b082      	sub	sp, #8
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	2b00      	cmp	r3, #0
 8006436:	d018      	beq.n	800646a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68da      	ldr	r2, [r3, #12]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006440:	441a      	add	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	429a      	cmp	r2, r3
 8006450:	d303      	bcc.n	800645a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68d9      	ldr	r1, [r3, #12]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	461a      	mov	r2, r3
 8006464:	6838      	ldr	r0, [r7, #0]
 8006466:	f004 fa83 	bl	800a970 <memcpy>
	}
}
 800646a:	bf00      	nop
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800647a:	f001 ffd7 	bl	800842c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006484:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006486:	e011      	b.n	80064ac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	2b00      	cmp	r3, #0
 800648e:	d012      	beq.n	80064b6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3324      	adds	r3, #36	; 0x24
 8006494:	4618      	mov	r0, r3
 8006496:	f000 fd0b 	bl	8006eb0 <xTaskRemoveFromEventList>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064a0:	f000 fdde 	bl	8007060 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	dce9      	bgt.n	8006488 <prvUnlockQueue+0x16>
 80064b4:	e000      	b.n	80064b8 <prvUnlockQueue+0x46>
					break;
 80064b6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	22ff      	movs	r2, #255	; 0xff
 80064bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80064c0:	f001 ffe2 	bl	8008488 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064c4:	f001 ffb2 	bl	800842c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064ce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064d0:	e011      	b.n	80064f6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d012      	beq.n	8006500 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3310      	adds	r3, #16
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fce6 	bl	8006eb0 <xTaskRemoveFromEventList>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064ea:	f000 fdb9 	bl	8007060 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064ee:	7bbb      	ldrb	r3, [r7, #14]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	dce9      	bgt.n	80064d2 <prvUnlockQueue+0x60>
 80064fe:	e000      	b.n	8006502 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006500:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	22ff      	movs	r2, #255	; 0xff
 8006506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800650a:	f001 ffbd 	bl	8008488 <vPortExitCritical>
}
 800650e:	bf00      	nop
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800651e:	f001 ff85 	bl	800842c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006526:	2b00      	cmp	r3, #0
 8006528:	d102      	bne.n	8006530 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800652a:	2301      	movs	r3, #1
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	e001      	b.n	8006534 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006534:	f001 ffa8 	bl	8008488 <vPortExitCritical>

	return xReturn;
 8006538:	68fb      	ldr	r3, [r7, #12]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800654a:	f001 ff6f 	bl	800842c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006556:	429a      	cmp	r2, r3
 8006558:	d102      	bne.n	8006560 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800655a:	2301      	movs	r3, #1
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	e001      	b.n	8006564 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006560:	2300      	movs	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006564:	f001 ff90 	bl	8008488 <vPortExitCritical>

	return xReturn;
 8006568:	68fb      	ldr	r3, [r7, #12]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]
 8006582:	e014      	b.n	80065ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006584:	4a0e      	ldr	r2, [pc, #56]	; (80065c0 <vQueueAddToRegistry+0x4c>)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10b      	bne.n	80065a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006590:	490b      	ldr	r1, [pc, #44]	; (80065c0 <vQueueAddToRegistry+0x4c>)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800659a:	4a09      	ldr	r2, [pc, #36]	; (80065c0 <vQueueAddToRegistry+0x4c>)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	4413      	add	r3, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065a6:	e005      	b.n	80065b4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3301      	adds	r3, #1
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b07      	cmp	r3, #7
 80065b2:	d9e7      	bls.n	8006584 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065b4:	bf00      	nop
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	2000162c 	.word	0x2000162c

080065c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065d4:	f001 ff2a 	bl	800842c <vPortEnterCritical>
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065de:	b25b      	sxtb	r3, r3
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e4:	d103      	bne.n	80065ee <vQueueWaitForMessageRestricted+0x2a>
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065f4:	b25b      	sxtb	r3, r3
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fa:	d103      	bne.n	8006604 <vQueueWaitForMessageRestricted+0x40>
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006604:	f001 ff40 	bl	8008488 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660c:	2b00      	cmp	r3, #0
 800660e:	d106      	bne.n	800661e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	3324      	adds	r3, #36	; 0x24
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	68b9      	ldr	r1, [r7, #8]
 8006618:	4618      	mov	r0, r3
 800661a:	f000 fc1f 	bl	8006e5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800661e:	6978      	ldr	r0, [r7, #20]
 8006620:	f7ff ff27 	bl	8006472 <prvUnlockQueue>
	}
 8006624:	bf00      	nop
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08e      	sub	sp, #56	; 0x38
 8006630:	af04      	add	r7, sp, #16
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800663a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663c:	2b00      	cmp	r3, #0
 800663e:	d109      	bne.n	8006654 <xTaskCreateStatic+0x28>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	623b      	str	r3, [r7, #32]
 8006652:	e7fe      	b.n	8006652 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006656:	2b00      	cmp	r3, #0
 8006658:	d109      	bne.n	800666e <xTaskCreateStatic+0x42>
 800665a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	61fb      	str	r3, [r7, #28]
 800666c:	e7fe      	b.n	800666c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800666e:	2354      	movs	r3, #84	; 0x54
 8006670:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	2b54      	cmp	r3, #84	; 0x54
 8006676:	d009      	beq.n	800668c <xTaskCreateStatic+0x60>
 8006678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	61bb      	str	r3, [r7, #24]
 800668a:	e7fe      	b.n	800668a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800668c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	2b00      	cmp	r3, #0
 8006692:	d01e      	beq.n	80066d2 <xTaskCreateStatic+0xa6>
 8006694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01b      	beq.n	80066d2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066ac:	2300      	movs	r3, #0
 80066ae:	9303      	str	r3, [sp, #12]
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	9302      	str	r3, [sp, #8]
 80066b4:	f107 0314 	add.w	r3, r7, #20
 80066b8:	9301      	str	r3, [sp, #4]
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	68b9      	ldr	r1, [r7, #8]
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 f850 	bl	800676a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066cc:	f000 f8d4 	bl	8006878 <prvAddNewTaskToReadyList>
 80066d0:	e001      	b.n	80066d6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066d6:	697b      	ldr	r3, [r7, #20]
	}
 80066d8:	4618      	mov	r0, r3
 80066da:	3728      	adds	r7, #40	; 0x28
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b08c      	sub	sp, #48	; 0x30
 80066e4:	af04      	add	r7, sp, #16
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	4613      	mov	r3, r2
 80066ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066f0:	88fb      	ldrh	r3, [r7, #6]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4618      	mov	r0, r3
 80066f6:	f001 ffb3 	bl	8008660 <pvPortMalloc>
 80066fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00e      	beq.n	8006720 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006702:	2054      	movs	r0, #84	; 0x54
 8006704:	f001 ffac 	bl	8008660 <pvPortMalloc>
 8006708:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	631a      	str	r2, [r3, #48]	; 0x30
 8006716:	e005      	b.n	8006724 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006718:	6978      	ldr	r0, [r7, #20]
 800671a:	f002 f863 	bl	80087e4 <vPortFree>
 800671e:	e001      	b.n	8006724 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006720:	2300      	movs	r3, #0
 8006722:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d017      	beq.n	800675a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006732:	88fa      	ldrh	r2, [r7, #6]
 8006734:	2300      	movs	r3, #0
 8006736:	9303      	str	r3, [sp, #12]
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	9302      	str	r3, [sp, #8]
 800673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673e:	9301      	str	r3, [sp, #4]
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 f80e 	bl	800676a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800674e:	69f8      	ldr	r0, [r7, #28]
 8006750:	f000 f892 	bl	8006878 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006754:	2301      	movs	r3, #1
 8006756:	61bb      	str	r3, [r7, #24]
 8006758:	e002      	b.n	8006760 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800675a:	f04f 33ff 	mov.w	r3, #4294967295
 800675e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006760:	69bb      	ldr	r3, [r7, #24]
	}
 8006762:	4618      	mov	r0, r3
 8006764:	3720      	adds	r7, #32
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b088      	sub	sp, #32
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	607a      	str	r2, [r7, #4]
 8006776:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006782:	3b01      	subs	r3, #1
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	f023 0307 	bic.w	r3, r3, #7
 8006790:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	2b00      	cmp	r3, #0
 800679a:	d009      	beq.n	80067b0 <prvInitialiseNewTask+0x46>
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	617b      	str	r3, [r7, #20]
 80067ae:	e7fe      	b.n	80067ae <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d01f      	beq.n	80067f6 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067b6:	2300      	movs	r3, #0
 80067b8:	61fb      	str	r3, [r7, #28]
 80067ba:	e012      	b.n	80067e2 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	4413      	add	r3, r2
 80067c2:	7819      	ldrb	r1, [r3, #0]
 80067c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	4413      	add	r3, r2
 80067ca:	3334      	adds	r3, #52	; 0x34
 80067cc:	460a      	mov	r2, r1
 80067ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	4413      	add	r3, r2
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d006      	beq.n	80067ea <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	3301      	adds	r3, #1
 80067e0:	61fb      	str	r3, [r7, #28]
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	2b0f      	cmp	r3, #15
 80067e6:	d9e9      	bls.n	80067bc <prvInitialiseNewTask+0x52>
 80067e8:	e000      	b.n	80067ec <prvInitialiseNewTask+0x82>
			{
				break;
 80067ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067f4:	e003      	b.n	80067fe <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006800:	2b06      	cmp	r3, #6
 8006802:	d901      	bls.n	8006808 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006804:	2306      	movs	r3, #6
 8006806:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800680c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006812:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006816:	2200      	movs	r2, #0
 8006818:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	3304      	adds	r3, #4
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe feeb 	bl	80055fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006826:	3318      	adds	r3, #24
 8006828:	4618      	mov	r0, r3
 800682a:	f7fe fee6 	bl	80055fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006832:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006836:	f1c3 0207 	rsb	r2, r3, #7
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006842:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006846:	2200      	movs	r2, #0
 8006848:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	68f9      	ldr	r1, [r7, #12]
 8006856:	69b8      	ldr	r0, [r7, #24]
 8006858:	f001 fcbe 	bl	80081d8 <pxPortInitialiseStack>
 800685c:	4602      	mov	r2, r0
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800686c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800686e:	bf00      	nop
 8006870:	3720      	adds	r7, #32
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006880:	f001 fdd4 	bl	800842c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006884:	4b2a      	ldr	r3, [pc, #168]	; (8006930 <prvAddNewTaskToReadyList+0xb8>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	3301      	adds	r3, #1
 800688a:	4a29      	ldr	r2, [pc, #164]	; (8006930 <prvAddNewTaskToReadyList+0xb8>)
 800688c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800688e:	4b29      	ldr	r3, [pc, #164]	; (8006934 <prvAddNewTaskToReadyList+0xbc>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d109      	bne.n	80068aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006896:	4a27      	ldr	r2, [pc, #156]	; (8006934 <prvAddNewTaskToReadyList+0xbc>)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800689c:	4b24      	ldr	r3, [pc, #144]	; (8006930 <prvAddNewTaskToReadyList+0xb8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d110      	bne.n	80068c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068a4:	f000 fc00 	bl	80070a8 <prvInitialiseTaskLists>
 80068a8:	e00d      	b.n	80068c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068aa:	4b23      	ldr	r3, [pc, #140]	; (8006938 <prvAddNewTaskToReadyList+0xc0>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d109      	bne.n	80068c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068b2:	4b20      	ldr	r3, [pc, #128]	; (8006934 <prvAddNewTaskToReadyList+0xbc>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068bc:	429a      	cmp	r2, r3
 80068be:	d802      	bhi.n	80068c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068c0:	4a1c      	ldr	r2, [pc, #112]	; (8006934 <prvAddNewTaskToReadyList+0xbc>)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068c6:	4b1d      	ldr	r3, [pc, #116]	; (800693c <prvAddNewTaskToReadyList+0xc4>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3301      	adds	r3, #1
 80068cc:	4a1b      	ldr	r2, [pc, #108]	; (800693c <prvAddNewTaskToReadyList+0xc4>)
 80068ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	2201      	movs	r2, #1
 80068d6:	409a      	lsls	r2, r3
 80068d8:	4b19      	ldr	r3, [pc, #100]	; (8006940 <prvAddNewTaskToReadyList+0xc8>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4313      	orrs	r3, r2
 80068de:	4a18      	ldr	r2, [pc, #96]	; (8006940 <prvAddNewTaskToReadyList+0xc8>)
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e6:	4613      	mov	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4a15      	ldr	r2, [pc, #84]	; (8006944 <prvAddNewTaskToReadyList+0xcc>)
 80068f0:	441a      	add	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3304      	adds	r3, #4
 80068f6:	4619      	mov	r1, r3
 80068f8:	4610      	mov	r0, r2
 80068fa:	f7fe fe8b 	bl	8005614 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068fe:	f001 fdc3 	bl	8008488 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006902:	4b0d      	ldr	r3, [pc, #52]	; (8006938 <prvAddNewTaskToReadyList+0xc0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00e      	beq.n	8006928 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800690a:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <prvAddNewTaskToReadyList+0xbc>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	429a      	cmp	r2, r3
 8006916:	d207      	bcs.n	8006928 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006918:	4b0b      	ldr	r3, [pc, #44]	; (8006948 <prvAddNewTaskToReadyList+0xd0>)
 800691a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006928:	bf00      	nop
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	20000258 	.word	0x20000258
 8006934:	20000158 	.word	0x20000158
 8006938:	20000264 	.word	0x20000264
 800693c:	20000274 	.word	0x20000274
 8006940:	20000260 	.word	0x20000260
 8006944:	2000015c 	.word	0x2000015c
 8006948:	e000ed04 	.word	0xe000ed04

0800694c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006954:	2300      	movs	r3, #0
 8006956:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d016      	beq.n	800698c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800695e:	4b13      	ldr	r3, [pc, #76]	; (80069ac <vTaskDelay+0x60>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d009      	beq.n	800697a <vTaskDelay+0x2e>
 8006966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	60bb      	str	r3, [r7, #8]
 8006978:	e7fe      	b.n	8006978 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800697a:	f000 f87f 	bl	8006a7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800697e:	2100      	movs	r1, #0
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fffd 	bl	8007980 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006986:	f000 f887 	bl	8006a98 <xTaskResumeAll>
 800698a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d107      	bne.n	80069a2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006992:	4b07      	ldr	r3, [pc, #28]	; (80069b0 <vTaskDelay+0x64>)
 8006994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	20000280 	.word	0x20000280
 80069b0:	e000ed04 	.word	0xe000ed04

080069b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08a      	sub	sp, #40	; 0x28
 80069b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069c2:	463a      	mov	r2, r7
 80069c4:	1d39      	adds	r1, r7, #4
 80069c6:	f107 0308 	add.w	r3, r7, #8
 80069ca:	4618      	mov	r0, r3
 80069cc:	f002 f81e 	bl	8008a0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	9202      	str	r2, [sp, #8]
 80069d8:	9301      	str	r3, [sp, #4]
 80069da:	2300      	movs	r3, #0
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	2300      	movs	r3, #0
 80069e0:	460a      	mov	r2, r1
 80069e2:	4920      	ldr	r1, [pc, #128]	; (8006a64 <vTaskStartScheduler+0xb0>)
 80069e4:	4820      	ldr	r0, [pc, #128]	; (8006a68 <vTaskStartScheduler+0xb4>)
 80069e6:	f7ff fe21 	bl	800662c <xTaskCreateStatic>
 80069ea:	4602      	mov	r2, r0
 80069ec:	4b1f      	ldr	r3, [pc, #124]	; (8006a6c <vTaskStartScheduler+0xb8>)
 80069ee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069f0:	4b1e      	ldr	r3, [pc, #120]	; (8006a6c <vTaskStartScheduler+0xb8>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069f8:	2301      	movs	r3, #1
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	e001      	b.n	8006a02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d102      	bne.n	8006a0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a08:	f001 f820 	bl	8007a4c <xTimerCreateTimerTask>
 8006a0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d115      	bne.n	8006a40 <vTaskStartScheduler+0x8c>
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a26:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <vTaskStartScheduler+0xbc>)
 8006a28:	f04f 32ff 	mov.w	r2, #4294967295
 8006a2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a2e:	4b11      	ldr	r3, [pc, #68]	; (8006a74 <vTaskStartScheduler+0xc0>)
 8006a30:	2201      	movs	r2, #1
 8006a32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a34:	4b10      	ldr	r3, [pc, #64]	; (8006a78 <vTaskStartScheduler+0xc4>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a3a:	f001 fc59 	bl	80082f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a3e:	e00d      	b.n	8006a5c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a46:	d109      	bne.n	8006a5c <vTaskStartScheduler+0xa8>
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	e7fe      	b.n	8006a5a <vTaskStartScheduler+0xa6>
}
 8006a5c:	bf00      	nop
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	0800c314 	.word	0x0800c314
 8006a68:	08007079 	.word	0x08007079
 8006a6c:	2000027c 	.word	0x2000027c
 8006a70:	20000278 	.word	0x20000278
 8006a74:	20000264 	.word	0x20000264
 8006a78:	2000025c 	.word	0x2000025c

08006a7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006a80:	4b04      	ldr	r3, [pc, #16]	; (8006a94 <vTaskSuspendAll+0x18>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3301      	adds	r3, #1
 8006a86:	4a03      	ldr	r2, [pc, #12]	; (8006a94 <vTaskSuspendAll+0x18>)
 8006a88:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006a8a:	bf00      	nop
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	20000280 	.word	0x20000280

08006a98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006aa6:	4b41      	ldr	r3, [pc, #260]	; (8006bac <xTaskResumeAll+0x114>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d109      	bne.n	8006ac2 <xTaskResumeAll+0x2a>
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	603b      	str	r3, [r7, #0]
 8006ac0:	e7fe      	b.n	8006ac0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ac2:	f001 fcb3 	bl	800842c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ac6:	4b39      	ldr	r3, [pc, #228]	; (8006bac <xTaskResumeAll+0x114>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	4a37      	ldr	r2, [pc, #220]	; (8006bac <xTaskResumeAll+0x114>)
 8006ace:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ad0:	4b36      	ldr	r3, [pc, #216]	; (8006bac <xTaskResumeAll+0x114>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d161      	bne.n	8006b9c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ad8:	4b35      	ldr	r3, [pc, #212]	; (8006bb0 <xTaskResumeAll+0x118>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d05d      	beq.n	8006b9c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ae0:	e02e      	b.n	8006b40 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ae2:	4b34      	ldr	r3, [pc, #208]	; (8006bb4 <xTaskResumeAll+0x11c>)
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3318      	adds	r3, #24
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fe fded 	bl	80056ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3304      	adds	r3, #4
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fe fde8 	bl	80056ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b02:	2201      	movs	r2, #1
 8006b04:	409a      	lsls	r2, r3
 8006b06:	4b2c      	ldr	r3, [pc, #176]	; (8006bb8 <xTaskResumeAll+0x120>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	4a2a      	ldr	r2, [pc, #168]	; (8006bb8 <xTaskResumeAll+0x120>)
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4a27      	ldr	r2, [pc, #156]	; (8006bbc <xTaskResumeAll+0x124>)
 8006b1e:	441a      	add	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f7fe fd74 	bl	8005614 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b30:	4b23      	ldr	r3, [pc, #140]	; (8006bc0 <xTaskResumeAll+0x128>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d302      	bcc.n	8006b40 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006b3a:	4b22      	ldr	r3, [pc, #136]	; (8006bc4 <xTaskResumeAll+0x12c>)
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b40:	4b1c      	ldr	r3, [pc, #112]	; (8006bb4 <xTaskResumeAll+0x11c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1cc      	bne.n	8006ae2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b4e:	f000 fb45 	bl	80071dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b52:	4b1d      	ldr	r3, [pc, #116]	; (8006bc8 <xTaskResumeAll+0x130>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d010      	beq.n	8006b80 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b5e:	f000 f847 	bl	8006bf0 <xTaskIncrementTick>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d002      	beq.n	8006b6e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006b68:	4b16      	ldr	r3, [pc, #88]	; (8006bc4 <xTaskResumeAll+0x12c>)
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	3b01      	subs	r3, #1
 8006b72:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1f1      	bne.n	8006b5e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006b7a:	4b13      	ldr	r3, [pc, #76]	; (8006bc8 <xTaskResumeAll+0x130>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b80:	4b10      	ldr	r3, [pc, #64]	; (8006bc4 <xTaskResumeAll+0x12c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d009      	beq.n	8006b9c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b8c:	4b0f      	ldr	r3, [pc, #60]	; (8006bcc <xTaskResumeAll+0x134>)
 8006b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b9c:	f001 fc74 	bl	8008488 <vPortExitCritical>

	return xAlreadyYielded;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000280 	.word	0x20000280
 8006bb0:	20000258 	.word	0x20000258
 8006bb4:	20000218 	.word	0x20000218
 8006bb8:	20000260 	.word	0x20000260
 8006bbc:	2000015c 	.word	0x2000015c
 8006bc0:	20000158 	.word	0x20000158
 8006bc4:	2000026c 	.word	0x2000026c
 8006bc8:	20000268 	.word	0x20000268
 8006bcc:	e000ed04 	.word	0xe000ed04

08006bd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006bd6:	4b05      	ldr	r3, [pc, #20]	; (8006bec <xTaskGetTickCount+0x1c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006bdc:	687b      	ldr	r3, [r7, #4]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	2000025c 	.word	0x2000025c

08006bf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bfa:	4b4e      	ldr	r3, [pc, #312]	; (8006d34 <xTaskIncrementTick+0x144>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f040 8087 	bne.w	8006d12 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c04:	4b4c      	ldr	r3, [pc, #304]	; (8006d38 <xTaskIncrementTick+0x148>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c0c:	4a4a      	ldr	r2, [pc, #296]	; (8006d38 <xTaskIncrementTick+0x148>)
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d11f      	bne.n	8006c58 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c18:	4b48      	ldr	r3, [pc, #288]	; (8006d3c <xTaskIncrementTick+0x14c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d009      	beq.n	8006c36 <xTaskIncrementTick+0x46>
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	e7fe      	b.n	8006c34 <xTaskIncrementTick+0x44>
 8006c36:	4b41      	ldr	r3, [pc, #260]	; (8006d3c <xTaskIncrementTick+0x14c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	4b40      	ldr	r3, [pc, #256]	; (8006d40 <xTaskIncrementTick+0x150>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a3e      	ldr	r2, [pc, #248]	; (8006d3c <xTaskIncrementTick+0x14c>)
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	4a3e      	ldr	r2, [pc, #248]	; (8006d40 <xTaskIncrementTick+0x150>)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6013      	str	r3, [r2, #0]
 8006c4a:	4b3e      	ldr	r3, [pc, #248]	; (8006d44 <xTaskIncrementTick+0x154>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	4a3c      	ldr	r2, [pc, #240]	; (8006d44 <xTaskIncrementTick+0x154>)
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	f000 fac2 	bl	80071dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c58:	4b3b      	ldr	r3, [pc, #236]	; (8006d48 <xTaskIncrementTick+0x158>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d348      	bcc.n	8006cf4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c62:	4b36      	ldr	r3, [pc, #216]	; (8006d3c <xTaskIncrementTick+0x14c>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d104      	bne.n	8006c76 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c6c:	4b36      	ldr	r3, [pc, #216]	; (8006d48 <xTaskIncrementTick+0x158>)
 8006c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c72:	601a      	str	r2, [r3, #0]
					break;
 8006c74:	e03e      	b.n	8006cf4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c76:	4b31      	ldr	r3, [pc, #196]	; (8006d3c <xTaskIncrementTick+0x14c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d203      	bcs.n	8006c96 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c8e:	4a2e      	ldr	r2, [pc, #184]	; (8006d48 <xTaskIncrementTick+0x158>)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c94:	e02e      	b.n	8006cf4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fd17 	bl	80056ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d004      	beq.n	8006cb2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	3318      	adds	r3, #24
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fe fd0e 	bl	80056ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	409a      	lsls	r2, r3
 8006cba:	4b24      	ldr	r3, [pc, #144]	; (8006d4c <xTaskIncrementTick+0x15c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	4a22      	ldr	r2, [pc, #136]	; (8006d4c <xTaskIncrementTick+0x15c>)
 8006cc2:	6013      	str	r3, [r2, #0]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc8:	4613      	mov	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4a1f      	ldr	r2, [pc, #124]	; (8006d50 <xTaskIncrementTick+0x160>)
 8006cd2:	441a      	add	r2, r3
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	4619      	mov	r1, r3
 8006cda:	4610      	mov	r0, r2
 8006cdc:	f7fe fc9a 	bl	8005614 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce4:	4b1b      	ldr	r3, [pc, #108]	; (8006d54 <xTaskIncrementTick+0x164>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d3b9      	bcc.n	8006c62 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cf2:	e7b6      	b.n	8006c62 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cf4:	4b17      	ldr	r3, [pc, #92]	; (8006d54 <xTaskIncrementTick+0x164>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfa:	4915      	ldr	r1, [pc, #84]	; (8006d50 <xTaskIncrementTick+0x160>)
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	440b      	add	r3, r1
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d907      	bls.n	8006d1c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	e004      	b.n	8006d1c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006d12:	4b11      	ldr	r3, [pc, #68]	; (8006d58 <xTaskIncrementTick+0x168>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3301      	adds	r3, #1
 8006d18:	4a0f      	ldr	r2, [pc, #60]	; (8006d58 <xTaskIncrementTick+0x168>)
 8006d1a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006d1c:	4b0f      	ldr	r3, [pc, #60]	; (8006d5c <xTaskIncrementTick+0x16c>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006d24:	2301      	movs	r3, #1
 8006d26:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006d28:	697b      	ldr	r3, [r7, #20]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3718      	adds	r7, #24
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	20000280 	.word	0x20000280
 8006d38:	2000025c 	.word	0x2000025c
 8006d3c:	20000210 	.word	0x20000210
 8006d40:	20000214 	.word	0x20000214
 8006d44:	20000270 	.word	0x20000270
 8006d48:	20000278 	.word	0x20000278
 8006d4c:	20000260 	.word	0x20000260
 8006d50:	2000015c 	.word	0x2000015c
 8006d54:	20000158 	.word	0x20000158
 8006d58:	20000268 	.word	0x20000268
 8006d5c:	2000026c 	.word	0x2000026c

08006d60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d66:	4b26      	ldr	r3, [pc, #152]	; (8006e00 <vTaskSwitchContext+0xa0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d6e:	4b25      	ldr	r3, [pc, #148]	; (8006e04 <vTaskSwitchContext+0xa4>)
 8006d70:	2201      	movs	r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d74:	e03e      	b.n	8006df4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006d76:	4b23      	ldr	r3, [pc, #140]	; (8006e04 <vTaskSwitchContext+0xa4>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d7c:	4b22      	ldr	r3, [pc, #136]	; (8006e08 <vTaskSwitchContext+0xa8>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	fab3 f383 	clz	r3, r3
 8006d88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006d8a:	7afb      	ldrb	r3, [r7, #11]
 8006d8c:	f1c3 031f 	rsb	r3, r3, #31
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	491e      	ldr	r1, [pc, #120]	; (8006e0c <vTaskSwitchContext+0xac>)
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d109      	bne.n	8006dba <vTaskSwitchContext+0x5a>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	607b      	str	r3, [r7, #4]
 8006db8:	e7fe      	b.n	8006db8 <vTaskSwitchContext+0x58>
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4a11      	ldr	r2, [pc, #68]	; (8006e0c <vTaskSwitchContext+0xac>)
 8006dc6:	4413      	add	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	605a      	str	r2, [r3, #4]
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	3308      	adds	r3, #8
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d104      	bne.n	8006dea <vTaskSwitchContext+0x8a>
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	605a      	str	r2, [r3, #4]
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	4a07      	ldr	r2, [pc, #28]	; (8006e10 <vTaskSwitchContext+0xb0>)
 8006df2:	6013      	str	r3, [r2, #0]
}
 8006df4:	bf00      	nop
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	20000280 	.word	0x20000280
 8006e04:	2000026c 	.word	0x2000026c
 8006e08:	20000260 	.word	0x20000260
 8006e0c:	2000015c 	.word	0x2000015c
 8006e10:	20000158 	.word	0x20000158

08006e14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d109      	bne.n	8006e38 <vTaskPlaceOnEventList+0x24>
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	e7fe      	b.n	8006e36 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e38:	4b07      	ldr	r3, [pc, #28]	; (8006e58 <vTaskPlaceOnEventList+0x44>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3318      	adds	r3, #24
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7fe fc0b 	bl	800565c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e46:	2101      	movs	r1, #1
 8006e48:	6838      	ldr	r0, [r7, #0]
 8006e4a:	f000 fd99 	bl	8007980 <prvAddCurrentTaskToDelayedList>
}
 8006e4e:	bf00      	nop
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20000158 	.word	0x20000158

08006e5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d109      	bne.n	8006e82 <vTaskPlaceOnEventListRestricted+0x26>
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	e7fe      	b.n	8006e80 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e82:	4b0a      	ldr	r3, [pc, #40]	; (8006eac <vTaskPlaceOnEventListRestricted+0x50>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3318      	adds	r3, #24
 8006e88:	4619      	mov	r1, r3
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f7fe fbc2 	bl	8005614 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d002      	beq.n	8006e9c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006e96:	f04f 33ff 	mov.w	r3, #4294967295
 8006e9a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e9c:	6879      	ldr	r1, [r7, #4]
 8006e9e:	68b8      	ldr	r0, [r7, #8]
 8006ea0:	f000 fd6e 	bl	8007980 <prvAddCurrentTaskToDelayedList>
	}
 8006ea4:	bf00      	nop
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	20000158 	.word	0x20000158

08006eb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d109      	bne.n	8006eda <xTaskRemoveFromEventList+0x2a>
 8006ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	e7fe      	b.n	8006ed8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	3318      	adds	r3, #24
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe fbf5 	bl	80056ce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ee4:	4b1d      	ldr	r3, [pc, #116]	; (8006f5c <xTaskRemoveFromEventList+0xac>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d11c      	bne.n	8006f26 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	3304      	adds	r3, #4
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7fe fbec 	bl	80056ce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efa:	2201      	movs	r2, #1
 8006efc:	409a      	lsls	r2, r3
 8006efe:	4b18      	ldr	r3, [pc, #96]	; (8006f60 <xTaskRemoveFromEventList+0xb0>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	4a16      	ldr	r2, [pc, #88]	; (8006f60 <xTaskRemoveFromEventList+0xb0>)
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4a13      	ldr	r2, [pc, #76]	; (8006f64 <xTaskRemoveFromEventList+0xb4>)
 8006f16:	441a      	add	r2, r3
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	4610      	mov	r0, r2
 8006f20:	f7fe fb78 	bl	8005614 <vListInsertEnd>
 8006f24:	e005      	b.n	8006f32 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	3318      	adds	r3, #24
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	480e      	ldr	r0, [pc, #56]	; (8006f68 <xTaskRemoveFromEventList+0xb8>)
 8006f2e:	f7fe fb71 	bl	8005614 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f36:	4b0d      	ldr	r3, [pc, #52]	; (8006f6c <xTaskRemoveFromEventList+0xbc>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d905      	bls.n	8006f4c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f40:	2301      	movs	r3, #1
 8006f42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f44:	4b0a      	ldr	r3, [pc, #40]	; (8006f70 <xTaskRemoveFromEventList+0xc0>)
 8006f46:	2201      	movs	r2, #1
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	e001      	b.n	8006f50 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f50:	697b      	ldr	r3, [r7, #20]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000280 	.word	0x20000280
 8006f60:	20000260 	.word	0x20000260
 8006f64:	2000015c 	.word	0x2000015c
 8006f68:	20000218 	.word	0x20000218
 8006f6c:	20000158 	.word	0x20000158
 8006f70:	2000026c 	.word	0x2000026c

08006f74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f7c:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <vTaskInternalSetTimeOutState+0x24>)
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f84:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <vTaskInternalSetTimeOutState+0x28>)
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	605a      	str	r2, [r3, #4]
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	20000270 	.word	0x20000270
 8006f9c:	2000025c 	.word	0x2000025c

08006fa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b088      	sub	sp, #32
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d109      	bne.n	8006fc4 <xTaskCheckForTimeOut+0x24>
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	613b      	str	r3, [r7, #16]
 8006fc2:	e7fe      	b.n	8006fc2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d109      	bne.n	8006fde <xTaskCheckForTimeOut+0x3e>
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	e7fe      	b.n	8006fdc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006fde:	f001 fa25 	bl	800842c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006fe2:	4b1d      	ldr	r3, [pc, #116]	; (8007058 <xTaskCheckForTimeOut+0xb8>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffa:	d102      	bne.n	8007002 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	61fb      	str	r3, [r7, #28]
 8007000:	e023      	b.n	800704a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	4b15      	ldr	r3, [pc, #84]	; (800705c <xTaskCheckForTimeOut+0xbc>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d007      	beq.n	800701e <xTaskCheckForTimeOut+0x7e>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	69ba      	ldr	r2, [r7, #24]
 8007014:	429a      	cmp	r2, r3
 8007016:	d302      	bcc.n	800701e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007018:	2301      	movs	r3, #1
 800701a:	61fb      	str	r3, [r7, #28]
 800701c:	e015      	b.n	800704a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	429a      	cmp	r2, r3
 8007026:	d20b      	bcs.n	8007040 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	1ad2      	subs	r2, r2, r3
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff ff9d 	bl	8006f74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800703a:	2300      	movs	r3, #0
 800703c:	61fb      	str	r3, [r7, #28]
 800703e:	e004      	b.n	800704a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	2200      	movs	r2, #0
 8007044:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007046:	2301      	movs	r3, #1
 8007048:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800704a:	f001 fa1d 	bl	8008488 <vPortExitCritical>

	return xReturn;
 800704e:	69fb      	ldr	r3, [r7, #28]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3720      	adds	r7, #32
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	2000025c 	.word	0x2000025c
 800705c:	20000270 	.word	0x20000270

08007060 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007064:	4b03      	ldr	r3, [pc, #12]	; (8007074 <vTaskMissedYield+0x14>)
 8007066:	2201      	movs	r2, #1
 8007068:	601a      	str	r2, [r3, #0]
}
 800706a:	bf00      	nop
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	2000026c 	.word	0x2000026c

08007078 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007080:	f000 f852 	bl	8007128 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007084:	4b06      	ldr	r3, [pc, #24]	; (80070a0 <prvIdleTask+0x28>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d9f9      	bls.n	8007080 <prvIdleTask+0x8>
			{
				taskYIELD();
 800708c:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <prvIdleTask+0x2c>)
 800708e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800709c:	e7f0      	b.n	8007080 <prvIdleTask+0x8>
 800709e:	bf00      	nop
 80070a0:	2000015c 	.word	0x2000015c
 80070a4:	e000ed04 	.word	0xe000ed04

080070a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070ae:	2300      	movs	r3, #0
 80070b0:	607b      	str	r3, [r7, #4]
 80070b2:	e00c      	b.n	80070ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4a12      	ldr	r2, [pc, #72]	; (8007108 <prvInitialiseTaskLists+0x60>)
 80070c0:	4413      	add	r3, r2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fa79 	bl	80055ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3301      	adds	r3, #1
 80070cc:	607b      	str	r3, [r7, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b06      	cmp	r3, #6
 80070d2:	d9ef      	bls.n	80070b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80070d4:	480d      	ldr	r0, [pc, #52]	; (800710c <prvInitialiseTaskLists+0x64>)
 80070d6:	f7fe fa70 	bl	80055ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80070da:	480d      	ldr	r0, [pc, #52]	; (8007110 <prvInitialiseTaskLists+0x68>)
 80070dc:	f7fe fa6d 	bl	80055ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80070e0:	480c      	ldr	r0, [pc, #48]	; (8007114 <prvInitialiseTaskLists+0x6c>)
 80070e2:	f7fe fa6a 	bl	80055ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070e6:	480c      	ldr	r0, [pc, #48]	; (8007118 <prvInitialiseTaskLists+0x70>)
 80070e8:	f7fe fa67 	bl	80055ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070ec:	480b      	ldr	r0, [pc, #44]	; (800711c <prvInitialiseTaskLists+0x74>)
 80070ee:	f7fe fa64 	bl	80055ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070f2:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <prvInitialiseTaskLists+0x78>)
 80070f4:	4a05      	ldr	r2, [pc, #20]	; (800710c <prvInitialiseTaskLists+0x64>)
 80070f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070f8:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <prvInitialiseTaskLists+0x7c>)
 80070fa:	4a05      	ldr	r2, [pc, #20]	; (8007110 <prvInitialiseTaskLists+0x68>)
 80070fc:	601a      	str	r2, [r3, #0]
}
 80070fe:	bf00      	nop
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	2000015c 	.word	0x2000015c
 800710c:	200001e8 	.word	0x200001e8
 8007110:	200001fc 	.word	0x200001fc
 8007114:	20000218 	.word	0x20000218
 8007118:	2000022c 	.word	0x2000022c
 800711c:	20000244 	.word	0x20000244
 8007120:	20000210 	.word	0x20000210
 8007124:	20000214 	.word	0x20000214

08007128 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800712e:	e019      	b.n	8007164 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007130:	f001 f97c 	bl	800842c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007134:	4b0f      	ldr	r3, [pc, #60]	; (8007174 <prvCheckTasksWaitingTermination+0x4c>)
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3304      	adds	r3, #4
 8007140:	4618      	mov	r0, r3
 8007142:	f7fe fac4 	bl	80056ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007146:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <prvCheckTasksWaitingTermination+0x50>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3b01      	subs	r3, #1
 800714c:	4a0a      	ldr	r2, [pc, #40]	; (8007178 <prvCheckTasksWaitingTermination+0x50>)
 800714e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007150:	4b0a      	ldr	r3, [pc, #40]	; (800717c <prvCheckTasksWaitingTermination+0x54>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3b01      	subs	r3, #1
 8007156:	4a09      	ldr	r2, [pc, #36]	; (800717c <prvCheckTasksWaitingTermination+0x54>)
 8007158:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800715a:	f001 f995 	bl	8008488 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f80e 	bl	8007180 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007164:	4b05      	ldr	r3, [pc, #20]	; (800717c <prvCheckTasksWaitingTermination+0x54>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e1      	bne.n	8007130 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800716c:	bf00      	nop
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	2000022c 	.word	0x2000022c
 8007178:	20000258 	.word	0x20000258
 800717c:	20000240 	.word	0x20000240

08007180 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800718e:	2b00      	cmp	r3, #0
 8007190:	d108      	bne.n	80071a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007196:	4618      	mov	r0, r3
 8007198:	f001 fb24 	bl	80087e4 <vPortFree>
				vPortFree( pxTCB );
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f001 fb21 	bl	80087e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80071a2:	e017      	b.n	80071d4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d103      	bne.n	80071b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 fb18 	bl	80087e4 <vPortFree>
	}
 80071b4:	e00e      	b.n	80071d4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d009      	beq.n	80071d4 <prvDeleteTCB+0x54>
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	60fb      	str	r3, [r7, #12]
 80071d2:	e7fe      	b.n	80071d2 <prvDeleteTCB+0x52>
	}
 80071d4:	bf00      	nop
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071e2:	4b0c      	ldr	r3, [pc, #48]	; (8007214 <prvResetNextTaskUnblockTime+0x38>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d104      	bne.n	80071f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071ec:	4b0a      	ldr	r3, [pc, #40]	; (8007218 <prvResetNextTaskUnblockTime+0x3c>)
 80071ee:	f04f 32ff 	mov.w	r2, #4294967295
 80071f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80071f4:	e008      	b.n	8007208 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071f6:	4b07      	ldr	r3, [pc, #28]	; (8007214 <prvResetNextTaskUnblockTime+0x38>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	4a04      	ldr	r2, [pc, #16]	; (8007218 <prvResetNextTaskUnblockTime+0x3c>)
 8007206:	6013      	str	r3, [r2, #0]
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	20000210 	.word	0x20000210
 8007218:	20000278 	.word	0x20000278

0800721c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007222:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <xTaskGetSchedulerState+0x34>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d102      	bne.n	8007230 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800722a:	2301      	movs	r3, #1
 800722c:	607b      	str	r3, [r7, #4]
 800722e:	e008      	b.n	8007242 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007230:	4b08      	ldr	r3, [pc, #32]	; (8007254 <xTaskGetSchedulerState+0x38>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d102      	bne.n	800723e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007238:	2302      	movs	r3, #2
 800723a:	607b      	str	r3, [r7, #4]
 800723c:	e001      	b.n	8007242 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800723e:	2300      	movs	r3, #0
 8007240:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007242:	687b      	ldr	r3, [r7, #4]
	}
 8007244:	4618      	mov	r0, r3
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	20000264 	.word	0x20000264
 8007254:	20000280 	.word	0x20000280

08007258 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d069      	beq.n	8007342 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007272:	4b36      	ldr	r3, [pc, #216]	; (800734c <xTaskPriorityInherit+0xf4>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007278:	429a      	cmp	r2, r3
 800727a:	d259      	bcs.n	8007330 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	2b00      	cmp	r3, #0
 8007282:	db06      	blt.n	8007292 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007284:	4b31      	ldr	r3, [pc, #196]	; (800734c <xTaskPriorityInherit+0xf4>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728a:	f1c3 0207 	rsb	r2, r3, #7
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	6959      	ldr	r1, [r3, #20]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800729a:	4613      	mov	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4a2b      	ldr	r2, [pc, #172]	; (8007350 <xTaskPriorityInherit+0xf8>)
 80072a4:	4413      	add	r3, r2
 80072a6:	4299      	cmp	r1, r3
 80072a8:	d13a      	bne.n	8007320 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	3304      	adds	r3, #4
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fe fa0d 	bl	80056ce <uxListRemove>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d115      	bne.n	80072e6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072be:	4924      	ldr	r1, [pc, #144]	; (8007350 <xTaskPriorityInherit+0xf8>)
 80072c0:	4613      	mov	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	440b      	add	r3, r1
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10a      	bne.n	80072e6 <xTaskPriorityInherit+0x8e>
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d4:	2201      	movs	r2, #1
 80072d6:	fa02 f303 	lsl.w	r3, r2, r3
 80072da:	43da      	mvns	r2, r3
 80072dc:	4b1d      	ldr	r3, [pc, #116]	; (8007354 <xTaskPriorityInherit+0xfc>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4013      	ands	r3, r2
 80072e2:	4a1c      	ldr	r2, [pc, #112]	; (8007354 <xTaskPriorityInherit+0xfc>)
 80072e4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80072e6:	4b19      	ldr	r3, [pc, #100]	; (800734c <xTaskPriorityInherit+0xf4>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f4:	2201      	movs	r2, #1
 80072f6:	409a      	lsls	r2, r3
 80072f8:	4b16      	ldr	r3, [pc, #88]	; (8007354 <xTaskPriorityInherit+0xfc>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	4a15      	ldr	r2, [pc, #84]	; (8007354 <xTaskPriorityInherit+0xfc>)
 8007300:	6013      	str	r3, [r2, #0]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007306:	4613      	mov	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4a10      	ldr	r2, [pc, #64]	; (8007350 <xTaskPriorityInherit+0xf8>)
 8007310:	441a      	add	r2, r3
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	3304      	adds	r3, #4
 8007316:	4619      	mov	r1, r3
 8007318:	4610      	mov	r0, r2
 800731a:	f7fe f97b 	bl	8005614 <vListInsertEnd>
 800731e:	e004      	b.n	800732a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007320:	4b0a      	ldr	r3, [pc, #40]	; (800734c <xTaskPriorityInherit+0xf4>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800732a:	2301      	movs	r3, #1
 800732c:	60fb      	str	r3, [r7, #12]
 800732e:	e008      	b.n	8007342 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007334:	4b05      	ldr	r3, [pc, #20]	; (800734c <xTaskPriorityInherit+0xf4>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733a:	429a      	cmp	r2, r3
 800733c:	d201      	bcs.n	8007342 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800733e:	2301      	movs	r3, #1
 8007340:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007342:	68fb      	ldr	r3, [r7, #12]
	}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	20000158 	.word	0x20000158
 8007350:	2000015c 	.word	0x2000015c
 8007354:	20000260 	.word	0x20000260

08007358 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007364:	2300      	movs	r3, #0
 8007366:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d06c      	beq.n	8007448 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800736e:	4b39      	ldr	r3, [pc, #228]	; (8007454 <xTaskPriorityDisinherit+0xfc>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	429a      	cmp	r2, r3
 8007376:	d009      	beq.n	800738c <xTaskPriorityDisinherit+0x34>
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	e7fe      	b.n	800738a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007390:	2b00      	cmp	r3, #0
 8007392:	d109      	bne.n	80073a8 <xTaskPriorityDisinherit+0x50>
 8007394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	60bb      	str	r3, [r7, #8]
 80073a6:	e7fe      	b.n	80073a6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ac:	1e5a      	subs	r2, r3, #1
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d044      	beq.n	8007448 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d140      	bne.n	8007448 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	3304      	adds	r3, #4
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fe f97f 	bl	80056ce <uxListRemove>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d115      	bne.n	8007402 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073da:	491f      	ldr	r1, [pc, #124]	; (8007458 <xTaskPriorityDisinherit+0x100>)
 80073dc:	4613      	mov	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	440b      	add	r3, r1
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10a      	bne.n	8007402 <xTaskPriorityDisinherit+0xaa>
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f0:	2201      	movs	r2, #1
 80073f2:	fa02 f303 	lsl.w	r3, r2, r3
 80073f6:	43da      	mvns	r2, r3
 80073f8:	4b18      	ldr	r3, [pc, #96]	; (800745c <xTaskPriorityDisinherit+0x104>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4013      	ands	r3, r2
 80073fe:	4a17      	ldr	r2, [pc, #92]	; (800745c <xTaskPriorityDisinherit+0x104>)
 8007400:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740e:	f1c3 0207 	rsb	r2, r3, #7
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741a:	2201      	movs	r2, #1
 800741c:	409a      	lsls	r2, r3
 800741e:	4b0f      	ldr	r3, [pc, #60]	; (800745c <xTaskPriorityDisinherit+0x104>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4313      	orrs	r3, r2
 8007424:	4a0d      	ldr	r2, [pc, #52]	; (800745c <xTaskPriorityDisinherit+0x104>)
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4a08      	ldr	r2, [pc, #32]	; (8007458 <xTaskPriorityDisinherit+0x100>)
 8007436:	441a      	add	r2, r3
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	3304      	adds	r3, #4
 800743c:	4619      	mov	r1, r3
 800743e:	4610      	mov	r0, r2
 8007440:	f7fe f8e8 	bl	8005614 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007444:	2301      	movs	r3, #1
 8007446:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007448:	697b      	ldr	r3, [r7, #20]
	}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	20000158 	.word	0x20000158
 8007458:	2000015c 	.word	0x2000015c
 800745c:	20000260 	.word	0x20000260

08007460 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007460:	b580      	push	{r7, lr}
 8007462:	b088      	sub	sp, #32
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800746e:	2301      	movs	r3, #1
 8007470:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 8081 	beq.w	800757c <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800747e:	2b00      	cmp	r3, #0
 8007480:	d109      	bne.n	8007496 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	60fb      	str	r3, [r7, #12]
 8007494:	e7fe      	b.n	8007494 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	429a      	cmp	r2, r3
 800749e:	d902      	bls.n	80074a6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	61fb      	str	r3, [r7, #28]
 80074a4:	e002      	b.n	80074ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	69fa      	ldr	r2, [r7, #28]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d062      	beq.n	800757c <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d15d      	bne.n	800757c <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80074c0:	4b30      	ldr	r3, [pc, #192]	; (8007584 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d109      	bne.n	80074de <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	60bb      	str	r3, [r7, #8]
 80074dc:	e7fe      	b.n	80074dc <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	69fa      	ldr	r2, [r7, #28]
 80074e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	db04      	blt.n	80074fc <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	f1c3 0207 	rsb	r2, r3, #7
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	6959      	ldr	r1, [r3, #20]
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	4613      	mov	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4a1f      	ldr	r2, [pc, #124]	; (8007588 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800750c:	4413      	add	r3, r2
 800750e:	4299      	cmp	r1, r3
 8007510:	d134      	bne.n	800757c <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	3304      	adds	r3, #4
 8007516:	4618      	mov	r0, r3
 8007518:	f7fe f8d9 	bl	80056ce <uxListRemove>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d115      	bne.n	800754e <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007526:	4918      	ldr	r1, [pc, #96]	; (8007588 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007528:	4613      	mov	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	440b      	add	r3, r1
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10a      	bne.n	800754e <vTaskPriorityDisinheritAfterTimeout+0xee>
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	2201      	movs	r2, #1
 800753e:	fa02 f303 	lsl.w	r3, r2, r3
 8007542:	43da      	mvns	r2, r3
 8007544:	4b11      	ldr	r3, [pc, #68]	; (800758c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4013      	ands	r3, r2
 800754a:	4a10      	ldr	r2, [pc, #64]	; (800758c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800754c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007552:	2201      	movs	r2, #1
 8007554:	409a      	lsls	r2, r3
 8007556:	4b0d      	ldr	r3, [pc, #52]	; (800758c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4313      	orrs	r3, r2
 800755c:	4a0b      	ldr	r2, [pc, #44]	; (800758c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800755e:	6013      	str	r3, [r2, #0]
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007564:	4613      	mov	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4a06      	ldr	r2, [pc, #24]	; (8007588 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800756e:	441a      	add	r2, r3
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	3304      	adds	r3, #4
 8007574:	4619      	mov	r1, r3
 8007576:	4610      	mov	r0, r2
 8007578:	f7fe f84c 	bl	8005614 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800757c:	bf00      	nop
 800757e:	3720      	adds	r7, #32
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20000158 	.word	0x20000158
 8007588:	2000015c 	.word	0x2000015c
 800758c:	20000260 	.word	0x20000260

08007590 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007594:	4b07      	ldr	r3, [pc, #28]	; (80075b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d004      	beq.n	80075a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800759c:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075a2:	3201      	adds	r2, #1
 80075a4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80075a6:	4b03      	ldr	r3, [pc, #12]	; (80075b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80075a8:	681b      	ldr	r3, [r3, #0]
	}
 80075aa:	4618      	mov	r0, r3
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	20000158 	.word	0x20000158

080075b8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80075c6:	f000 ff31 	bl	800842c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80075ca:	4b26      	ldr	r3, [pc, #152]	; (8007664 <xTaskNotifyWait+0xac>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d01a      	beq.n	800760e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80075d8:	4b22      	ldr	r3, [pc, #136]	; (8007664 <xTaskNotifyWait+0xac>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	43d2      	mvns	r2, r2
 80075e2:	400a      	ands	r2, r1
 80075e4:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80075e6:	4b1f      	ldr	r3, [pc, #124]	; (8007664 <xTaskNotifyWait+0xac>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00b      	beq.n	800760e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80075f6:	2101      	movs	r1, #1
 80075f8:	6838      	ldr	r0, [r7, #0]
 80075fa:	f000 f9c1 	bl	8007980 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80075fe:	4b1a      	ldr	r3, [pc, #104]	; (8007668 <xTaskNotifyWait+0xb0>)
 8007600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800760e:	f000 ff3b 	bl	8008488 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007612:	f000 ff0b 	bl	800842c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d004      	beq.n	8007626 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800761c:	4b11      	ldr	r3, [pc, #68]	; (8007664 <xTaskNotifyWait+0xac>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007626:	4b0f      	ldr	r3, [pc, #60]	; (8007664 <xTaskNotifyWait+0xac>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b02      	cmp	r3, #2
 8007632:	d002      	beq.n	800763a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007634:	2300      	movs	r3, #0
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	e008      	b.n	800764c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800763a:	4b0a      	ldr	r3, [pc, #40]	; (8007664 <xTaskNotifyWait+0xac>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	43d2      	mvns	r2, r2
 8007644:	400a      	ands	r2, r1
 8007646:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8007648:	2301      	movs	r3, #1
 800764a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800764c:	4b05      	ldr	r3, [pc, #20]	; (8007664 <xTaskNotifyWait+0xac>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8007656:	f000 ff17 	bl	8008488 <vPortExitCritical>

		return xReturn;
 800765a:	697b      	ldr	r3, [r7, #20]
	}
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	20000158 	.word	0x20000158
 8007668:	e000ed04 	.word	0xe000ed04

0800766c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08a      	sub	sp, #40	; 0x28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	603b      	str	r3, [r7, #0]
 8007678:	4613      	mov	r3, r2
 800767a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800767c:	2301      	movs	r3, #1
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d109      	bne.n	800769a <xTaskGenericNotify+0x2e>
 8007686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	61bb      	str	r3, [r7, #24]
 8007698:	e7fe      	b.n	8007698 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800769e:	f000 fec5 	bl	800842c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80076b6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80076c0:	79fb      	ldrb	r3, [r7, #7]
 80076c2:	2b04      	cmp	r3, #4
 80076c4:	d827      	bhi.n	8007716 <xTaskGenericNotify+0xaa>
 80076c6:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <xTaskGenericNotify+0x60>)
 80076c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076cc:	08007735 	.word	0x08007735
 80076d0:	080076e1 	.word	0x080076e1
 80076d4:	080076ef 	.word	0x080076ef
 80076d8:	080076fb 	.word	0x080076fb
 80076dc:	08007703 	.word	0x08007703
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	431a      	orrs	r2, r3
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80076ec:	e025      	b.n	800773a <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80076ee:	6a3b      	ldr	r3, [r7, #32]
 80076f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80076f8:	e01f      	b.n	800773a <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007700:	e01b      	b.n	800773a <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007702:	7ffb      	ldrb	r3, [r7, #31]
 8007704:	2b02      	cmp	r3, #2
 8007706:	d003      	beq.n	8007710 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800770e:	e014      	b.n	800773a <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8007710:	2300      	movs	r3, #0
 8007712:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8007714:	e011      	b.n	800773a <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771e:	d00b      	beq.n	8007738 <xTaskGenericNotify+0xcc>
 8007720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	e7fe      	b.n	8007732 <xTaskGenericNotify+0xc6>
					break;
 8007734:	bf00      	nop
 8007736:	e000      	b.n	800773a <xTaskGenericNotify+0xce>

					break;
 8007738:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800773a:	7ffb      	ldrb	r3, [r7, #31]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d138      	bne.n	80077b2 <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	3304      	adds	r3, #4
 8007744:	4618      	mov	r0, r3
 8007746:	f7fd ffc2 	bl	80056ce <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774e:	2201      	movs	r2, #1
 8007750:	409a      	lsls	r2, r3
 8007752:	4b1b      	ldr	r3, [pc, #108]	; (80077c0 <xTaskGenericNotify+0x154>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4313      	orrs	r3, r2
 8007758:	4a19      	ldr	r2, [pc, #100]	; (80077c0 <xTaskGenericNotify+0x154>)
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007760:	4613      	mov	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4a16      	ldr	r2, [pc, #88]	; (80077c4 <xTaskGenericNotify+0x158>)
 800776a:	441a      	add	r2, r3
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	3304      	adds	r3, #4
 8007770:	4619      	mov	r1, r3
 8007772:	4610      	mov	r0, r2
 8007774:	f7fd ff4e 	bl	8005614 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777c:	2b00      	cmp	r3, #0
 800777e:	d009      	beq.n	8007794 <xTaskGenericNotify+0x128>
 8007780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	613b      	str	r3, [r7, #16]
 8007792:	e7fe      	b.n	8007792 <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007798:	4b0b      	ldr	r3, [pc, #44]	; (80077c8 <xTaskGenericNotify+0x15c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779e:	429a      	cmp	r2, r3
 80077a0:	d907      	bls.n	80077b2 <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80077a2:	4b0a      	ldr	r3, [pc, #40]	; (80077cc <xTaskGenericNotify+0x160>)
 80077a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80077b2:	f000 fe69 	bl	8008488 <vPortExitCritical>

		return xReturn;
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3728      	adds	r7, #40	; 0x28
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	20000260 	.word	0x20000260
 80077c4:	2000015c 	.word	0x2000015c
 80077c8:	20000158 	.word	0x20000158
 80077cc:	e000ed04 	.word	0xe000ed04

080077d0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b08e      	sub	sp, #56	; 0x38
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	603b      	str	r3, [r7, #0]
 80077dc:	4613      	mov	r3, r2
 80077de:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80077e0:	2301      	movs	r3, #1
 80077e2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d109      	bne.n	80077fe <xTaskGenericNotifyFromISR+0x2e>
 80077ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	627b      	str	r3, [r7, #36]	; 0x24
 80077fc:	e7fe      	b.n	80077fc <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077fe:	f000 fef1 	bl	80085e4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8007806:	f3ef 8211 	mrs	r2, BASEPRI
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	623a      	str	r2, [r7, #32]
 800781c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800781e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007820:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	2202      	movs	r2, #2
 800783e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8007842:	79fb      	ldrb	r3, [r7, #7]
 8007844:	2b04      	cmp	r3, #4
 8007846:	d829      	bhi.n	800789c <xTaskGenericNotifyFromISR+0xcc>
 8007848:	a201      	add	r2, pc, #4	; (adr r2, 8007850 <xTaskGenericNotifyFromISR+0x80>)
 800784a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784e:	bf00      	nop
 8007850:	080078bb 	.word	0x080078bb
 8007854:	08007865 	.word	0x08007865
 8007858:	08007873 	.word	0x08007873
 800785c:	0800787f 	.word	0x0800787f
 8007860:	08007887 	.word	0x08007887
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	431a      	orrs	r2, r3
 800786c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007870:	e026      	b.n	80078c0 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800787c:	e020      	b.n	80078c0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007884:	e01c      	b.n	80078c0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007886:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800788a:	2b02      	cmp	r3, #2
 800788c:	d003      	beq.n	8007896 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800788e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007894:	e014      	b.n	80078c0 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8007896:	2300      	movs	r3, #0
 8007898:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800789a:	e011      	b.n	80078c0 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800789c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a4:	d00b      	beq.n	80078be <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 80078a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	61bb      	str	r3, [r7, #24]
 80078b8:	e7fe      	b.n	80078b8 <xTaskGenericNotifyFromISR+0xe8>
					break;
 80078ba:	bf00      	nop
 80078bc:	e000      	b.n	80078c0 <xTaskGenericNotifyFromISR+0xf0>
					break;
 80078be:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80078c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d144      	bne.n	8007952 <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80078c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d009      	beq.n	80078e4 <xTaskGenericNotifyFromISR+0x114>
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	617b      	str	r3, [r7, #20]
 80078e2:	e7fe      	b.n	80078e2 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078e4:	4b20      	ldr	r3, [pc, #128]	; (8007968 <xTaskGenericNotifyFromISR+0x198>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d11c      	bne.n	8007926 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	3304      	adds	r3, #4
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fd feec 	bl	80056ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fa:	2201      	movs	r2, #1
 80078fc:	409a      	lsls	r2, r3
 80078fe:	4b1b      	ldr	r3, [pc, #108]	; (800796c <xTaskGenericNotifyFromISR+0x19c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4313      	orrs	r3, r2
 8007904:	4a19      	ldr	r2, [pc, #100]	; (800796c <xTaskGenericNotifyFromISR+0x19c>)
 8007906:	6013      	str	r3, [r2, #0]
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790c:	4613      	mov	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4a16      	ldr	r2, [pc, #88]	; (8007970 <xTaskGenericNotifyFromISR+0x1a0>)
 8007916:	441a      	add	r2, r3
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	3304      	adds	r3, #4
 800791c:	4619      	mov	r1, r3
 800791e:	4610      	mov	r0, r2
 8007920:	f7fd fe78 	bl	8005614 <vListInsertEnd>
 8007924:	e005      	b.n	8007932 <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007928:	3318      	adds	r3, #24
 800792a:	4619      	mov	r1, r3
 800792c:	4811      	ldr	r0, [pc, #68]	; (8007974 <xTaskGenericNotifyFromISR+0x1a4>)
 800792e:	f7fd fe71 	bl	8005614 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007936:	4b10      	ldr	r3, [pc, #64]	; (8007978 <xTaskGenericNotifyFromISR+0x1a8>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793c:	429a      	cmp	r2, r3
 800793e:	d908      	bls.n	8007952 <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007948:	2201      	movs	r2, #1
 800794a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800794c:	4b0b      	ldr	r3, [pc, #44]	; (800797c <xTaskGenericNotifyFromISR+0x1ac>)
 800794e:	2201      	movs	r2, #1
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007954:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800795c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800795e:	4618      	mov	r0, r3
 8007960:	3738      	adds	r7, #56	; 0x38
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	20000280 	.word	0x20000280
 800796c:	20000260 	.word	0x20000260
 8007970:	2000015c 	.word	0x2000015c
 8007974:	20000218 	.word	0x20000218
 8007978:	20000158 	.word	0x20000158
 800797c:	2000026c 	.word	0x2000026c

08007980 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800798a:	4b29      	ldr	r3, [pc, #164]	; (8007a30 <prvAddCurrentTaskToDelayedList+0xb0>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007990:	4b28      	ldr	r3, [pc, #160]	; (8007a34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3304      	adds	r3, #4
 8007996:	4618      	mov	r0, r3
 8007998:	f7fd fe99 	bl	80056ce <uxListRemove>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10b      	bne.n	80079ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80079a2:	4b24      	ldr	r3, [pc, #144]	; (8007a34 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a8:	2201      	movs	r2, #1
 80079aa:	fa02 f303 	lsl.w	r3, r2, r3
 80079ae:	43da      	mvns	r2, r3
 80079b0:	4b21      	ldr	r3, [pc, #132]	; (8007a38 <prvAddCurrentTaskToDelayedList+0xb8>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4013      	ands	r3, r2
 80079b6:	4a20      	ldr	r2, [pc, #128]	; (8007a38 <prvAddCurrentTaskToDelayedList+0xb8>)
 80079b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c0:	d10a      	bne.n	80079d8 <prvAddCurrentTaskToDelayedList+0x58>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d007      	beq.n	80079d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079c8:	4b1a      	ldr	r3, [pc, #104]	; (8007a34 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3304      	adds	r3, #4
 80079ce:	4619      	mov	r1, r3
 80079d0:	481a      	ldr	r0, [pc, #104]	; (8007a3c <prvAddCurrentTaskToDelayedList+0xbc>)
 80079d2:	f7fd fe1f 	bl	8005614 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079d6:	e026      	b.n	8007a26 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4413      	add	r3, r2
 80079de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079e0:	4b14      	ldr	r3, [pc, #80]	; (8007a34 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d209      	bcs.n	8007a04 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079f0:	4b13      	ldr	r3, [pc, #76]	; (8007a40 <prvAddCurrentTaskToDelayedList+0xc0>)
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	4b0f      	ldr	r3, [pc, #60]	; (8007a34 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	3304      	adds	r3, #4
 80079fa:	4619      	mov	r1, r3
 80079fc:	4610      	mov	r0, r2
 80079fe:	f7fd fe2d 	bl	800565c <vListInsert>
}
 8007a02:	e010      	b.n	8007a26 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a04:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	4b0a      	ldr	r3, [pc, #40]	; (8007a34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	4619      	mov	r1, r3
 8007a10:	4610      	mov	r0, r2
 8007a12:	f7fd fe23 	bl	800565c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a16:	4b0c      	ldr	r3, [pc, #48]	; (8007a48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d202      	bcs.n	8007a26 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007a20:	4a09      	ldr	r2, [pc, #36]	; (8007a48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	6013      	str	r3, [r2, #0]
}
 8007a26:	bf00      	nop
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	2000025c 	.word	0x2000025c
 8007a34:	20000158 	.word	0x20000158
 8007a38:	20000260 	.word	0x20000260
 8007a3c:	20000244 	.word	0x20000244
 8007a40:	20000214 	.word	0x20000214
 8007a44:	20000210 	.word	0x20000210
 8007a48:	20000278 	.word	0x20000278

08007a4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08a      	sub	sp, #40	; 0x28
 8007a50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a56:	f000 fb7f 	bl	8008158 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a5a:	4b1c      	ldr	r3, [pc, #112]	; (8007acc <xTimerCreateTimerTask+0x80>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d021      	beq.n	8007aa6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a6a:	1d3a      	adds	r2, r7, #4
 8007a6c:	f107 0108 	add.w	r1, r7, #8
 8007a70:	f107 030c 	add.w	r3, r7, #12
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 ffe3 	bl	8008a40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a7a:	6879      	ldr	r1, [r7, #4]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	9202      	str	r2, [sp, #8]
 8007a82:	9301      	str	r3, [sp, #4]
 8007a84:	2302      	movs	r3, #2
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	2300      	movs	r3, #0
 8007a8a:	460a      	mov	r2, r1
 8007a8c:	4910      	ldr	r1, [pc, #64]	; (8007ad0 <xTimerCreateTimerTask+0x84>)
 8007a8e:	4811      	ldr	r0, [pc, #68]	; (8007ad4 <xTimerCreateTimerTask+0x88>)
 8007a90:	f7fe fdcc 	bl	800662c <xTaskCreateStatic>
 8007a94:	4602      	mov	r2, r0
 8007a96:	4b10      	ldr	r3, [pc, #64]	; (8007ad8 <xTimerCreateTimerTask+0x8c>)
 8007a98:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a9a:	4b0f      	ldr	r3, [pc, #60]	; (8007ad8 <xTimerCreateTimerTask+0x8c>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d109      	bne.n	8007ac0 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	613b      	str	r3, [r7, #16]
 8007abe:	e7fe      	b.n	8007abe <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007ac0:	697b      	ldr	r3, [r7, #20]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3718      	adds	r7, #24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	200002b4 	.word	0x200002b4
 8007ad0:	0800c31c 	.word	0x0800c31c
 8007ad4:	08007d3d 	.word	0x08007d3d
 8007ad8:	200002b8 	.word	0x200002b8

08007adc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
 8007ae8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007aea:	2028      	movs	r0, #40	; 0x28
 8007aec:	f000 fdb8 	bl	8008660 <pvPortMalloc>
 8007af0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00d      	beq.n	8007b14 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	9301      	str	r3, [sp, #4]
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	68b9      	ldr	r1, [r7, #8]
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 f841 	bl	8007b96 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007b14:	697b      	ldr	r3, [r7, #20]
	}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b08a      	sub	sp, #40	; 0x28
 8007b22:	af02      	add	r7, sp, #8
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	60b9      	str	r1, [r7, #8]
 8007b28:	607a      	str	r2, [r7, #4]
 8007b2a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007b2c:	2328      	movs	r3, #40	; 0x28
 8007b2e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	2b28      	cmp	r3, #40	; 0x28
 8007b34:	d009      	beq.n	8007b4a <xTimerCreateStatic+0x2c>
 8007b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	61bb      	str	r3, [r7, #24]
 8007b48:	e7fe      	b.n	8007b48 <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007b4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d109      	bne.n	8007b66 <xTimerCreateStatic+0x48>
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	e7fe      	b.n	8007b64 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b68:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00d      	beq.n	8007b8c <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	9301      	str	r3, [sp, #4]
 8007b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	68b9      	ldr	r1, [r7, #8]
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 f805 	bl	8007b96 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007b8c:	69fb      	ldr	r3, [r7, #28]
	}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3720      	adds	r7, #32
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b086      	sub	sp, #24
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	607a      	str	r2, [r7, #4]
 8007ba2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d109      	bne.n	8007bbe <prvInitialiseNewTimer+0x28>
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	e7fe      	b.n	8007bbc <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d01e      	beq.n	8007c02 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007bc4:	f000 fac8 	bl	8008158 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	6a3a      	ldr	r2, [r7, #32]
 8007bde:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	3304      	adds	r3, #4
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7fd fd08 	bl	80055fa <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d008      	beq.n	8007c02 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bf6:	f043 0304 	orr.w	r3, r3, #4
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007c02:	bf00      	nop
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08a      	sub	sp, #40	; 0x28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
 8007c18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d109      	bne.n	8007c38 <xTimerGenericCommand+0x2c>
 8007c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	623b      	str	r3, [r7, #32]
 8007c36:	e7fe      	b.n	8007c36 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c38:	4b19      	ldr	r3, [pc, #100]	; (8007ca0 <xTimerGenericCommand+0x94>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d02a      	beq.n	8007c96 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b05      	cmp	r3, #5
 8007c50:	dc18      	bgt.n	8007c84 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c52:	f7ff fae3 	bl	800721c <xTaskGetSchedulerState>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d109      	bne.n	8007c70 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c5c:	4b10      	ldr	r3, [pc, #64]	; (8007ca0 <xTimerGenericCommand+0x94>)
 8007c5e:	6818      	ldr	r0, [r3, #0]
 8007c60:	f107 0114 	add.w	r1, r7, #20
 8007c64:	2300      	movs	r3, #0
 8007c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c68:	f7fd fee2 	bl	8005a30 <xQueueGenericSend>
 8007c6c:	6278      	str	r0, [r7, #36]	; 0x24
 8007c6e:	e012      	b.n	8007c96 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c70:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <xTimerGenericCommand+0x94>)
 8007c72:	6818      	ldr	r0, [r3, #0]
 8007c74:	f107 0114 	add.w	r1, r7, #20
 8007c78:	2300      	movs	r3, #0
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f7fd fed8 	bl	8005a30 <xQueueGenericSend>
 8007c80:	6278      	str	r0, [r7, #36]	; 0x24
 8007c82:	e008      	b.n	8007c96 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c84:	4b06      	ldr	r3, [pc, #24]	; (8007ca0 <xTimerGenericCommand+0x94>)
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	f107 0114 	add.w	r1, r7, #20
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	f7fd ffc8 	bl	8005c24 <xQueueGenericSendFromISR>
 8007c94:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3728      	adds	r7, #40	; 0x28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	200002b4 	.word	0x200002b4

08007ca4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cae:	4b22      	ldr	r3, [pc, #136]	; (8007d38 <prvProcessExpiredTimer+0x94>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	3304      	adds	r3, #4
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fd fd06 	bl	80056ce <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007cc8:	f003 0304 	and.w	r3, r3, #4
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d021      	beq.n	8007d14 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	699a      	ldr	r2, [r3, #24]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	18d1      	adds	r1, r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	6978      	ldr	r0, [r7, #20]
 8007cde:	f000 f8d1 	bl	8007e84 <prvInsertTimerInActiveList>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d01e      	beq.n	8007d26 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ce8:	2300      	movs	r3, #0
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	2300      	movs	r3, #0
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	6978      	ldr	r0, [r7, #20]
 8007cf4:	f7ff ff8a 	bl	8007c0c <xTimerGenericCommand>
 8007cf8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d112      	bne.n	8007d26 <prvProcessExpiredTimer+0x82>
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	60fb      	str	r3, [r7, #12]
 8007d12:	e7fe      	b.n	8007d12 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d1a:	f023 0301 	bic.w	r3, r3, #1
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	6978      	ldr	r0, [r7, #20]
 8007d2c:	4798      	blx	r3
}
 8007d2e:	bf00      	nop
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	200002ac 	.word	0x200002ac

08007d3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d44:	f107 0308 	add.w	r3, r7, #8
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 f857 	bl	8007dfc <prvGetNextExpireTime>
 8007d4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	4619      	mov	r1, r3
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f803 	bl	8007d60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d5a:	f000 f8d5 	bl	8007f08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d5e:	e7f1      	b.n	8007d44 <prvTimerTask+0x8>

08007d60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d6a:	f7fe fe87 	bl	8006a7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d6e:	f107 0308 	add.w	r3, r7, #8
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 f866 	bl	8007e44 <prvSampleTimeNow>
 8007d78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d130      	bne.n	8007de2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10a      	bne.n	8007d9c <prvProcessTimerOrBlockTask+0x3c>
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d806      	bhi.n	8007d9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d8e:	f7fe fe83 	bl	8006a98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d92:	68f9      	ldr	r1, [r7, #12]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7ff ff85 	bl	8007ca4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d9a:	e024      	b.n	8007de6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d008      	beq.n	8007db4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007da2:	4b13      	ldr	r3, [pc, #76]	; (8007df0 <prvProcessTimerOrBlockTask+0x90>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <prvProcessTimerOrBlockTask+0x50>
 8007dac:	2301      	movs	r3, #1
 8007dae:	e000      	b.n	8007db2 <prvProcessTimerOrBlockTask+0x52>
 8007db0:	2300      	movs	r3, #0
 8007db2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007db4:	4b0f      	ldr	r3, [pc, #60]	; (8007df4 <prvProcessTimerOrBlockTask+0x94>)
 8007db6:	6818      	ldr	r0, [r3, #0]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	f7fe fbff 	bl	80065c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007dc6:	f7fe fe67 	bl	8006a98 <xTaskResumeAll>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10a      	bne.n	8007de6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007dd0:	4b09      	ldr	r3, [pc, #36]	; (8007df8 <prvProcessTimerOrBlockTask+0x98>)
 8007dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	f3bf 8f6f 	isb	sy
}
 8007de0:	e001      	b.n	8007de6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007de2:	f7fe fe59 	bl	8006a98 <xTaskResumeAll>
}
 8007de6:	bf00      	nop
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	200002b0 	.word	0x200002b0
 8007df4:	200002b4 	.word	0x200002b4
 8007df8:	e000ed04 	.word	0xe000ed04

08007dfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e04:	4b0e      	ldr	r3, [pc, #56]	; (8007e40 <prvGetNextExpireTime+0x44>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <prvGetNextExpireTime+0x16>
 8007e0e:	2201      	movs	r2, #1
 8007e10:	e000      	b.n	8007e14 <prvGetNextExpireTime+0x18>
 8007e12:	2200      	movs	r2, #0
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d105      	bne.n	8007e2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e20:	4b07      	ldr	r3, [pc, #28]	; (8007e40 <prvGetNextExpireTime+0x44>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	60fb      	str	r3, [r7, #12]
 8007e2a:	e001      	b.n	8007e30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e30:	68fb      	ldr	r3, [r7, #12]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	200002ac 	.word	0x200002ac

08007e44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e4c:	f7fe fec0 	bl	8006bd0 <xTaskGetTickCount>
 8007e50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e52:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <prvSampleTimeNow+0x3c>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d205      	bcs.n	8007e68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e5c:	f000 f918 	bl	8008090 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	e002      	b.n	8007e6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e6e:	4a04      	ldr	r2, [pc, #16]	; (8007e80 <prvSampleTimeNow+0x3c>)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e74:	68fb      	ldr	r3, [r7, #12]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	200002bc 	.word	0x200002bc

08007e84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
 8007e90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e92:	2300      	movs	r3, #0
 8007e94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d812      	bhi.n	8007ed0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	1ad2      	subs	r2, r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d302      	bcc.n	8007ebe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	617b      	str	r3, [r7, #20]
 8007ebc:	e01b      	b.n	8007ef6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ebe:	4b10      	ldr	r3, [pc, #64]	; (8007f00 <prvInsertTimerInActiveList+0x7c>)
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	4610      	mov	r0, r2
 8007eca:	f7fd fbc7 	bl	800565c <vListInsert>
 8007ece:	e012      	b.n	8007ef6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d206      	bcs.n	8007ee6 <prvInsertTimerInActiveList+0x62>
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d302      	bcc.n	8007ee6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	617b      	str	r3, [r7, #20]
 8007ee4:	e007      	b.n	8007ef6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ee6:	4b07      	ldr	r3, [pc, #28]	; (8007f04 <prvInsertTimerInActiveList+0x80>)
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	3304      	adds	r3, #4
 8007eee:	4619      	mov	r1, r3
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	f7fd fbb3 	bl	800565c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ef6:	697b      	ldr	r3, [r7, #20]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	200002b0 	.word	0x200002b0
 8007f04:	200002ac 	.word	0x200002ac

08007f08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08c      	sub	sp, #48	; 0x30
 8007f0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f0e:	e0ac      	b.n	800806a <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f2c0 80a8 	blt.w	8008068 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d004      	beq.n	8007f2e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	3304      	adds	r3, #4
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fd fbd0 	bl	80056ce <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f2e:	1d3b      	adds	r3, r7, #4
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7ff ff87 	bl	8007e44 <prvSampleTimeNow>
 8007f36:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2b09      	cmp	r3, #9
 8007f3c:	f200 8095 	bhi.w	800806a <prvProcessReceivedCommands+0x162>
 8007f40:	a201      	add	r2, pc, #4	; (adr r2, 8007f48 <prvProcessReceivedCommands+0x40>)
 8007f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f46:	bf00      	nop
 8007f48:	08007f71 	.word	0x08007f71
 8007f4c:	08007f71 	.word	0x08007f71
 8007f50:	08007f71 	.word	0x08007f71
 8007f54:	08007fe3 	.word	0x08007fe3
 8007f58:	08007ff7 	.word	0x08007ff7
 8007f5c:	0800803f 	.word	0x0800803f
 8007f60:	08007f71 	.word	0x08007f71
 8007f64:	08007f71 	.word	0x08007f71
 8007f68:	08007fe3 	.word	0x08007fe3
 8007f6c:	08007ff7 	.word	0x08007ff7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f76:	f043 0301 	orr.w	r3, r3, #1
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	18d1      	adds	r1, r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a3a      	ldr	r2, [r7, #32]
 8007f8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f90:	f7ff ff78 	bl	8007e84 <prvInsertTimerInActiveList>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d067      	beq.n	800806a <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fa0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fa8:	f003 0304 	and.w	r3, r3, #4
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d05c      	beq.n	800806a <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	441a      	add	r2, r3
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fc2:	f7ff fe23 	bl	8007c0c <xTimerGenericCommand>
 8007fc6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d14d      	bne.n	800806a <prvProcessReceivedCommands+0x162>
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	61bb      	str	r3, [r7, #24]
 8007fe0:	e7fe      	b.n	8007fe0 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fe8:	f023 0301 	bic.w	r3, r3, #1
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8007ff4:	e039      	b.n	800806a <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ffc:	f043 0301 	orr.w	r3, r3, #1
 8008000:	b2da      	uxtb	r2, r3
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d109      	bne.n	800802a <prvProcessReceivedCommands+0x122>
 8008016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	617b      	str	r3, [r7, #20]
 8008028:	e7fe      	b.n	8008028 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	699a      	ldr	r2, [r3, #24]
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	18d1      	adds	r1, r2, r3
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	6a3a      	ldr	r2, [r7, #32]
 8008036:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008038:	f7ff ff24 	bl	8007e84 <prvInsertTimerInActiveList>
					break;
 800803c:	e015      	b.n	800806a <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b00      	cmp	r3, #0
 800804a:	d103      	bne.n	8008054 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800804c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800804e:	f000 fbc9 	bl	80087e4 <vPortFree>
 8008052:	e00a      	b.n	800806a <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800805a:	f023 0301 	bic.w	r3, r3, #1
 800805e:	b2da      	uxtb	r2, r3
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008066:	e000      	b.n	800806a <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008068:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800806a:	4b08      	ldr	r3, [pc, #32]	; (800808c <prvProcessReceivedCommands+0x184>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f107 0108 	add.w	r1, r7, #8
 8008072:	2200      	movs	r2, #0
 8008074:	4618      	mov	r0, r3
 8008076:	f7fd fef3 	bl	8005e60 <xQueueReceive>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	f47f af47 	bne.w	8007f10 <prvProcessReceivedCommands+0x8>
	}
}
 8008082:	bf00      	nop
 8008084:	3728      	adds	r7, #40	; 0x28
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	200002b4 	.word	0x200002b4

08008090 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008096:	e047      	b.n	8008128 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008098:	4b2d      	ldr	r3, [pc, #180]	; (8008150 <prvSwitchTimerLists+0xc0>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080a2:	4b2b      	ldr	r3, [pc, #172]	; (8008150 <prvSwitchTimerLists+0xc0>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	3304      	adds	r3, #4
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fd fb0c 	bl	80056ce <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d02d      	beq.n	8008128 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	4413      	add	r3, r2
 80080d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d90e      	bls.n	80080fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080ea:	4b19      	ldr	r3, [pc, #100]	; (8008150 <prvSwitchTimerLists+0xc0>)
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3304      	adds	r3, #4
 80080f2:	4619      	mov	r1, r3
 80080f4:	4610      	mov	r0, r2
 80080f6:	f7fd fab1 	bl	800565c <vListInsert>
 80080fa:	e015      	b.n	8008128 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080fc:	2300      	movs	r3, #0
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	2300      	movs	r3, #0
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	2100      	movs	r1, #0
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f7ff fd80 	bl	8007c0c <xTimerGenericCommand>
 800810c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d109      	bne.n	8008128 <prvSwitchTimerLists+0x98>
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	603b      	str	r3, [r7, #0]
 8008126:	e7fe      	b.n	8008126 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008128:	4b09      	ldr	r3, [pc, #36]	; (8008150 <prvSwitchTimerLists+0xc0>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1b2      	bne.n	8008098 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008132:	4b07      	ldr	r3, [pc, #28]	; (8008150 <prvSwitchTimerLists+0xc0>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008138:	4b06      	ldr	r3, [pc, #24]	; (8008154 <prvSwitchTimerLists+0xc4>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a04      	ldr	r2, [pc, #16]	; (8008150 <prvSwitchTimerLists+0xc0>)
 800813e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008140:	4a04      	ldr	r2, [pc, #16]	; (8008154 <prvSwitchTimerLists+0xc4>)
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	6013      	str	r3, [r2, #0]
}
 8008146:	bf00      	nop
 8008148:	3718      	adds	r7, #24
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	200002ac 	.word	0x200002ac
 8008154:	200002b0 	.word	0x200002b0

08008158 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800815e:	f000 f965 	bl	800842c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008162:	4b15      	ldr	r3, [pc, #84]	; (80081b8 <prvCheckForValidListAndQueue+0x60>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d120      	bne.n	80081ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800816a:	4814      	ldr	r0, [pc, #80]	; (80081bc <prvCheckForValidListAndQueue+0x64>)
 800816c:	f7fd fa25 	bl	80055ba <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008170:	4813      	ldr	r0, [pc, #76]	; (80081c0 <prvCheckForValidListAndQueue+0x68>)
 8008172:	f7fd fa22 	bl	80055ba <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008176:	4b13      	ldr	r3, [pc, #76]	; (80081c4 <prvCheckForValidListAndQueue+0x6c>)
 8008178:	4a10      	ldr	r2, [pc, #64]	; (80081bc <prvCheckForValidListAndQueue+0x64>)
 800817a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800817c:	4b12      	ldr	r3, [pc, #72]	; (80081c8 <prvCheckForValidListAndQueue+0x70>)
 800817e:	4a10      	ldr	r2, [pc, #64]	; (80081c0 <prvCheckForValidListAndQueue+0x68>)
 8008180:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008182:	2300      	movs	r3, #0
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	4b11      	ldr	r3, [pc, #68]	; (80081cc <prvCheckForValidListAndQueue+0x74>)
 8008188:	4a11      	ldr	r2, [pc, #68]	; (80081d0 <prvCheckForValidListAndQueue+0x78>)
 800818a:	210c      	movs	r1, #12
 800818c:	200a      	movs	r0, #10
 800818e:	f7fd fb31 	bl	80057f4 <xQueueGenericCreateStatic>
 8008192:	4602      	mov	r2, r0
 8008194:	4b08      	ldr	r3, [pc, #32]	; (80081b8 <prvCheckForValidListAndQueue+0x60>)
 8008196:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008198:	4b07      	ldr	r3, [pc, #28]	; (80081b8 <prvCheckForValidListAndQueue+0x60>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80081a0:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <prvCheckForValidListAndQueue+0x60>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	490b      	ldr	r1, [pc, #44]	; (80081d4 <prvCheckForValidListAndQueue+0x7c>)
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fe f9e4 	bl	8006574 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081ac:	f000 f96c 	bl	8008488 <vPortExitCritical>
}
 80081b0:	bf00      	nop
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	200002b4 	.word	0x200002b4
 80081bc:	20000284 	.word	0x20000284
 80081c0:	20000298 	.word	0x20000298
 80081c4:	200002ac 	.word	0x200002ac
 80081c8:	200002b0 	.word	0x200002b0
 80081cc:	20000338 	.word	0x20000338
 80081d0:	200002c0 	.word	0x200002c0
 80081d4:	0800c324 	.word	0x0800c324

080081d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	3b04      	subs	r3, #4
 80081e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3b04      	subs	r3, #4
 80081f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f023 0201 	bic.w	r2, r3, #1
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3b04      	subs	r3, #4
 8008206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008208:	4a0c      	ldr	r2, [pc, #48]	; (800823c <pxPortInitialiseStack+0x64>)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3b14      	subs	r3, #20
 8008212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3b04      	subs	r3, #4
 800821e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f06f 0202 	mvn.w	r2, #2
 8008226:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	3b20      	subs	r3, #32
 800822c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800822e:	68fb      	ldr	r3, [r7, #12]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	08008241 	.word	0x08008241

08008240 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008246:	2300      	movs	r3, #0
 8008248:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800824a:	4b11      	ldr	r3, [pc, #68]	; (8008290 <prvTaskExitError+0x50>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008252:	d009      	beq.n	8008268 <prvTaskExitError+0x28>
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	60fb      	str	r3, [r7, #12]
 8008266:	e7fe      	b.n	8008266 <prvTaskExitError+0x26>
 8008268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800827a:	bf00      	nop
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d0fc      	beq.n	800827c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008282:	bf00      	nop
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	20000008 	.word	0x20000008
	...

080082a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082a0:	4b07      	ldr	r3, [pc, #28]	; (80082c0 <pxCurrentTCBConst2>)
 80082a2:	6819      	ldr	r1, [r3, #0]
 80082a4:	6808      	ldr	r0, [r1, #0]
 80082a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082aa:	f380 8809 	msr	PSP, r0
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f04f 0000 	mov.w	r0, #0
 80082b6:	f380 8811 	msr	BASEPRI, r0
 80082ba:	4770      	bx	lr
 80082bc:	f3af 8000 	nop.w

080082c0 <pxCurrentTCBConst2>:
 80082c0:	20000158 	.word	0x20000158
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop

080082c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80082c8:	4808      	ldr	r0, [pc, #32]	; (80082ec <prvPortStartFirstTask+0x24>)
 80082ca:	6800      	ldr	r0, [r0, #0]
 80082cc:	6800      	ldr	r0, [r0, #0]
 80082ce:	f380 8808 	msr	MSP, r0
 80082d2:	f04f 0000 	mov.w	r0, #0
 80082d6:	f380 8814 	msr	CONTROL, r0
 80082da:	b662      	cpsie	i
 80082dc:	b661      	cpsie	f
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	df00      	svc	0
 80082e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082ea:	bf00      	nop
 80082ec:	e000ed08 	.word	0xe000ed08

080082f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80082f6:	4b44      	ldr	r3, [pc, #272]	; (8008408 <xPortStartScheduler+0x118>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a44      	ldr	r2, [pc, #272]	; (800840c <xPortStartScheduler+0x11c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d109      	bne.n	8008314 <xPortStartScheduler+0x24>
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	613b      	str	r3, [r7, #16]
 8008312:	e7fe      	b.n	8008312 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008314:	4b3c      	ldr	r3, [pc, #240]	; (8008408 <xPortStartScheduler+0x118>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a3d      	ldr	r2, [pc, #244]	; (8008410 <xPortStartScheduler+0x120>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d109      	bne.n	8008332 <xPortStartScheduler+0x42>
 800831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	e7fe      	b.n	8008330 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008332:	4b38      	ldr	r3, [pc, #224]	; (8008414 <xPortStartScheduler+0x124>)
 8008334:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	b2db      	uxtb	r3, r3
 800833c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	22ff      	movs	r2, #255	; 0xff
 8008342:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	b2db      	uxtb	r3, r3
 800834a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800834c:	78fb      	ldrb	r3, [r7, #3]
 800834e:	b2db      	uxtb	r3, r3
 8008350:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008354:	b2da      	uxtb	r2, r3
 8008356:	4b30      	ldr	r3, [pc, #192]	; (8008418 <xPortStartScheduler+0x128>)
 8008358:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800835a:	4b30      	ldr	r3, [pc, #192]	; (800841c <xPortStartScheduler+0x12c>)
 800835c:	2207      	movs	r2, #7
 800835e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008360:	e009      	b.n	8008376 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008362:	4b2e      	ldr	r3, [pc, #184]	; (800841c <xPortStartScheduler+0x12c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3b01      	subs	r3, #1
 8008368:	4a2c      	ldr	r2, [pc, #176]	; (800841c <xPortStartScheduler+0x12c>)
 800836a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800836c:	78fb      	ldrb	r3, [r7, #3]
 800836e:	b2db      	uxtb	r3, r3
 8008370:	005b      	lsls	r3, r3, #1
 8008372:	b2db      	uxtb	r3, r3
 8008374:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008376:	78fb      	ldrb	r3, [r7, #3]
 8008378:	b2db      	uxtb	r3, r3
 800837a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800837e:	2b80      	cmp	r3, #128	; 0x80
 8008380:	d0ef      	beq.n	8008362 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008382:	4b26      	ldr	r3, [pc, #152]	; (800841c <xPortStartScheduler+0x12c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f1c3 0307 	rsb	r3, r3, #7
 800838a:	2b04      	cmp	r3, #4
 800838c:	d009      	beq.n	80083a2 <xPortStartScheduler+0xb2>
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	60bb      	str	r3, [r7, #8]
 80083a0:	e7fe      	b.n	80083a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80083a2:	4b1e      	ldr	r3, [pc, #120]	; (800841c <xPortStartScheduler+0x12c>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	021b      	lsls	r3, r3, #8
 80083a8:	4a1c      	ldr	r2, [pc, #112]	; (800841c <xPortStartScheduler+0x12c>)
 80083aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80083ac:	4b1b      	ldr	r3, [pc, #108]	; (800841c <xPortStartScheduler+0x12c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083b4:	4a19      	ldr	r2, [pc, #100]	; (800841c <xPortStartScheduler+0x12c>)
 80083b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80083c0:	4b17      	ldr	r3, [pc, #92]	; (8008420 <xPortStartScheduler+0x130>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a16      	ldr	r2, [pc, #88]	; (8008420 <xPortStartScheduler+0x130>)
 80083c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80083ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80083cc:	4b14      	ldr	r3, [pc, #80]	; (8008420 <xPortStartScheduler+0x130>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a13      	ldr	r2, [pc, #76]	; (8008420 <xPortStartScheduler+0x130>)
 80083d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80083d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80083d8:	f000 f8d6 	bl	8008588 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80083dc:	4b11      	ldr	r3, [pc, #68]	; (8008424 <xPortStartScheduler+0x134>)
 80083de:	2200      	movs	r2, #0
 80083e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80083e2:	f000 f8f5 	bl	80085d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80083e6:	4b10      	ldr	r3, [pc, #64]	; (8008428 <xPortStartScheduler+0x138>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a0f      	ldr	r2, [pc, #60]	; (8008428 <xPortStartScheduler+0x138>)
 80083ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80083f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083f2:	f7ff ff69 	bl	80082c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083f6:	f7fe fcb3 	bl	8006d60 <vTaskSwitchContext>
	prvTaskExitError();
 80083fa:	f7ff ff21 	bl	8008240 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3718      	adds	r7, #24
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	e000ed00 	.word	0xe000ed00
 800840c:	410fc271 	.word	0x410fc271
 8008410:	410fc270 	.word	0x410fc270
 8008414:	e000e400 	.word	0xe000e400
 8008418:	20000380 	.word	0x20000380
 800841c:	20000384 	.word	0x20000384
 8008420:	e000ed20 	.word	0xe000ed20
 8008424:	20000008 	.word	0x20000008
 8008428:	e000ef34 	.word	0xe000ef34

0800842c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008444:	4b0e      	ldr	r3, [pc, #56]	; (8008480 <vPortEnterCritical+0x54>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3301      	adds	r3, #1
 800844a:	4a0d      	ldr	r2, [pc, #52]	; (8008480 <vPortEnterCritical+0x54>)
 800844c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800844e:	4b0c      	ldr	r3, [pc, #48]	; (8008480 <vPortEnterCritical+0x54>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d10e      	bne.n	8008474 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008456:	4b0b      	ldr	r3, [pc, #44]	; (8008484 <vPortEnterCritical+0x58>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b00      	cmp	r3, #0
 800845e:	d009      	beq.n	8008474 <vPortEnterCritical+0x48>
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	603b      	str	r3, [r7, #0]
 8008472:	e7fe      	b.n	8008472 <vPortEnterCritical+0x46>
	}
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	20000008 	.word	0x20000008
 8008484:	e000ed04 	.word	0xe000ed04

08008488 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800848e:	4b11      	ldr	r3, [pc, #68]	; (80084d4 <vPortExitCritical+0x4c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d109      	bne.n	80084aa <vPortExitCritical+0x22>
 8008496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	607b      	str	r3, [r7, #4]
 80084a8:	e7fe      	b.n	80084a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80084aa:	4b0a      	ldr	r3, [pc, #40]	; (80084d4 <vPortExitCritical+0x4c>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3b01      	subs	r3, #1
 80084b0:	4a08      	ldr	r2, [pc, #32]	; (80084d4 <vPortExitCritical+0x4c>)
 80084b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80084b4:	4b07      	ldr	r3, [pc, #28]	; (80084d4 <vPortExitCritical+0x4c>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d104      	bne.n	80084c6 <vPortExitCritical+0x3e>
 80084bc:	2300      	movs	r3, #0
 80084be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80084c6:	bf00      	nop
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	20000008 	.word	0x20000008
	...

080084e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084e0:	f3ef 8009 	mrs	r0, PSP
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	4b15      	ldr	r3, [pc, #84]	; (8008540 <pxCurrentTCBConst>)
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	f01e 0f10 	tst.w	lr, #16
 80084f0:	bf08      	it	eq
 80084f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80084f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fa:	6010      	str	r0, [r2, #0]
 80084fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008500:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008504:	f380 8811 	msr	BASEPRI, r0
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f7fe fc26 	bl	8006d60 <vTaskSwitchContext>
 8008514:	f04f 0000 	mov.w	r0, #0
 8008518:	f380 8811 	msr	BASEPRI, r0
 800851c:	bc09      	pop	{r0, r3}
 800851e:	6819      	ldr	r1, [r3, #0]
 8008520:	6808      	ldr	r0, [r1, #0]
 8008522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008526:	f01e 0f10 	tst.w	lr, #16
 800852a:	bf08      	it	eq
 800852c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008530:	f380 8809 	msr	PSP, r0
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	f3af 8000 	nop.w

08008540 <pxCurrentTCBConst>:
 8008540:	20000158 	.word	0x20000158
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008544:	bf00      	nop
 8008546:	bf00      	nop

08008548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008560:	f7fe fb46 	bl	8006bf0 <xTaskIncrementTick>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d003      	beq.n	8008572 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800856a:	4b06      	ldr	r3, [pc, #24]	; (8008584 <SysTick_Handler+0x3c>)
 800856c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008570:	601a      	str	r2, [r3, #0]
 8008572:	2300      	movs	r3, #0
 8008574:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800857c:	bf00      	nop
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	e000ed04 	.word	0xe000ed04

08008588 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008588:	b480      	push	{r7}
 800858a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800858c:	4b0b      	ldr	r3, [pc, #44]	; (80085bc <vPortSetupTimerInterrupt+0x34>)
 800858e:	2200      	movs	r2, #0
 8008590:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008592:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <vPortSetupTimerInterrupt+0x38>)
 8008594:	2200      	movs	r2, #0
 8008596:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008598:	4b0a      	ldr	r3, [pc, #40]	; (80085c4 <vPortSetupTimerInterrupt+0x3c>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a0a      	ldr	r2, [pc, #40]	; (80085c8 <vPortSetupTimerInterrupt+0x40>)
 800859e:	fba2 2303 	umull	r2, r3, r2, r3
 80085a2:	099b      	lsrs	r3, r3, #6
 80085a4:	4a09      	ldr	r2, [pc, #36]	; (80085cc <vPortSetupTimerInterrupt+0x44>)
 80085a6:	3b01      	subs	r3, #1
 80085a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80085aa:	4b04      	ldr	r3, [pc, #16]	; (80085bc <vPortSetupTimerInterrupt+0x34>)
 80085ac:	2207      	movs	r2, #7
 80085ae:	601a      	str	r2, [r3, #0]
}
 80085b0:	bf00      	nop
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	e000e010 	.word	0xe000e010
 80085c0:	e000e018 	.word	0xe000e018
 80085c4:	200000d0 	.word	0x200000d0
 80085c8:	10624dd3 	.word	0x10624dd3
 80085cc:	e000e014 	.word	0xe000e014

080085d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80085d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80085e0 <vPortEnableVFP+0x10>
 80085d4:	6801      	ldr	r1, [r0, #0]
 80085d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80085da:	6001      	str	r1, [r0, #0]
 80085dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80085de:	bf00      	nop
 80085e0:	e000ed88 	.word	0xe000ed88

080085e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80085ea:	f3ef 8305 	mrs	r3, IPSR
 80085ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2b0f      	cmp	r3, #15
 80085f4:	d913      	bls.n	800861e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80085f6:	4a16      	ldr	r2, [pc, #88]	; (8008650 <vPortValidateInterruptPriority+0x6c>)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4413      	add	r3, r2
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008600:	4b14      	ldr	r3, [pc, #80]	; (8008654 <vPortValidateInterruptPriority+0x70>)
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	7afa      	ldrb	r2, [r7, #11]
 8008606:	429a      	cmp	r2, r3
 8008608:	d209      	bcs.n	800861e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	607b      	str	r3, [r7, #4]
 800861c:	e7fe      	b.n	800861c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800861e:	4b0e      	ldr	r3, [pc, #56]	; (8008658 <vPortValidateInterruptPriority+0x74>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008626:	4b0d      	ldr	r3, [pc, #52]	; (800865c <vPortValidateInterruptPriority+0x78>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	429a      	cmp	r2, r3
 800862c:	d909      	bls.n	8008642 <vPortValidateInterruptPriority+0x5e>
 800862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	603b      	str	r3, [r7, #0]
 8008640:	e7fe      	b.n	8008640 <vPortValidateInterruptPriority+0x5c>
	}
 8008642:	bf00      	nop
 8008644:	3714      	adds	r7, #20
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	e000e3f0 	.word	0xe000e3f0
 8008654:	20000380 	.word	0x20000380
 8008658:	e000ed0c 	.word	0xe000ed0c
 800865c:	20000384 	.word	0x20000384

08008660 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b08a      	sub	sp, #40	; 0x28
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008668:	2300      	movs	r3, #0
 800866a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800866c:	f7fe fa06 	bl	8006a7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008670:	4b57      	ldr	r3, [pc, #348]	; (80087d0 <pvPortMalloc+0x170>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d101      	bne.n	800867c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008678:	f000 f90c 	bl	8008894 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800867c:	4b55      	ldr	r3, [pc, #340]	; (80087d4 <pvPortMalloc+0x174>)
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4013      	ands	r3, r2
 8008684:	2b00      	cmp	r3, #0
 8008686:	f040 808c 	bne.w	80087a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d01c      	beq.n	80086ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008690:	2208      	movs	r2, #8
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4413      	add	r3, r2
 8008696:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d013      	beq.n	80086ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f023 0307 	bic.w	r3, r3, #7
 80086a8:	3308      	adds	r3, #8
 80086aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f003 0307 	and.w	r3, r3, #7
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d009      	beq.n	80086ca <pvPortMalloc+0x6a>
 80086b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	617b      	str	r3, [r7, #20]
 80086c8:	e7fe      	b.n	80086c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d068      	beq.n	80087a2 <pvPortMalloc+0x142>
 80086d0:	4b41      	ldr	r3, [pc, #260]	; (80087d8 <pvPortMalloc+0x178>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d863      	bhi.n	80087a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80086da:	4b40      	ldr	r3, [pc, #256]	; (80087dc <pvPortMalloc+0x17c>)
 80086dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80086de:	4b3f      	ldr	r3, [pc, #252]	; (80087dc <pvPortMalloc+0x17c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086e4:	e004      	b.n	80086f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80086e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d903      	bls.n	8008702 <pvPortMalloc+0xa2>
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1f1      	bne.n	80086e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008702:	4b33      	ldr	r3, [pc, #204]	; (80087d0 <pvPortMalloc+0x170>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008708:	429a      	cmp	r2, r3
 800870a:	d04a      	beq.n	80087a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2208      	movs	r2, #8
 8008712:	4413      	add	r3, r2
 8008714:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	1ad2      	subs	r2, r2, r3
 8008726:	2308      	movs	r3, #8
 8008728:	005b      	lsls	r3, r3, #1
 800872a:	429a      	cmp	r2, r3
 800872c:	d91e      	bls.n	800876c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800872e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4413      	add	r3, r2
 8008734:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	f003 0307 	and.w	r3, r3, #7
 800873c:	2b00      	cmp	r3, #0
 800873e:	d009      	beq.n	8008754 <pvPortMalloc+0xf4>
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	613b      	str	r3, [r7, #16]
 8008752:	e7fe      	b.n	8008752 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	1ad2      	subs	r2, r2, r3
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008766:	69b8      	ldr	r0, [r7, #24]
 8008768:	f000 f8f6 	bl	8008958 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800876c:	4b1a      	ldr	r3, [pc, #104]	; (80087d8 <pvPortMalloc+0x178>)
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	4a18      	ldr	r2, [pc, #96]	; (80087d8 <pvPortMalloc+0x178>)
 8008778:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800877a:	4b17      	ldr	r3, [pc, #92]	; (80087d8 <pvPortMalloc+0x178>)
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	4b18      	ldr	r3, [pc, #96]	; (80087e0 <pvPortMalloc+0x180>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	429a      	cmp	r2, r3
 8008784:	d203      	bcs.n	800878e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008786:	4b14      	ldr	r3, [pc, #80]	; (80087d8 <pvPortMalloc+0x178>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a15      	ldr	r2, [pc, #84]	; (80087e0 <pvPortMalloc+0x180>)
 800878c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	4b10      	ldr	r3, [pc, #64]	; (80087d4 <pvPortMalloc+0x174>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	431a      	orrs	r2, r3
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	2200      	movs	r2, #0
 80087a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80087a2:	f7fe f979 	bl	8006a98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	f003 0307 	and.w	r3, r3, #7
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d009      	beq.n	80087c4 <pvPortMalloc+0x164>
 80087b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	60fb      	str	r3, [r7, #12]
 80087c2:	e7fe      	b.n	80087c2 <pvPortMalloc+0x162>
	return pvReturn;
 80087c4:	69fb      	ldr	r3, [r7, #28]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3728      	adds	r7, #40	; 0x28
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	20000f48 	.word	0x20000f48
 80087d4:	20000f54 	.word	0x20000f54
 80087d8:	20000f4c 	.word	0x20000f4c
 80087dc:	20000f40 	.word	0x20000f40
 80087e0:	20000f50 	.word	0x20000f50

080087e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d046      	beq.n	8008884 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80087f6:	2308      	movs	r3, #8
 80087f8:	425b      	negs	r3, r3
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	4413      	add	r3, r2
 80087fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	685a      	ldr	r2, [r3, #4]
 8008808:	4b20      	ldr	r3, [pc, #128]	; (800888c <vPortFree+0xa8>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4013      	ands	r3, r2
 800880e:	2b00      	cmp	r3, #0
 8008810:	d109      	bne.n	8008826 <vPortFree+0x42>
 8008812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	e7fe      	b.n	8008824 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d009      	beq.n	8008842 <vPortFree+0x5e>
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	60bb      	str	r3, [r7, #8]
 8008840:	e7fe      	b.n	8008840 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	4b11      	ldr	r3, [pc, #68]	; (800888c <vPortFree+0xa8>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4013      	ands	r3, r2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d019      	beq.n	8008884 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d115      	bne.n	8008884 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	4b0b      	ldr	r3, [pc, #44]	; (800888c <vPortFree+0xa8>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	43db      	mvns	r3, r3
 8008862:	401a      	ands	r2, r3
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008868:	f7fe f908 	bl	8006a7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	685a      	ldr	r2, [r3, #4]
 8008870:	4b07      	ldr	r3, [pc, #28]	; (8008890 <vPortFree+0xac>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4413      	add	r3, r2
 8008876:	4a06      	ldr	r2, [pc, #24]	; (8008890 <vPortFree+0xac>)
 8008878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800887a:	6938      	ldr	r0, [r7, #16]
 800887c:	f000 f86c 	bl	8008958 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008880:	f7fe f90a 	bl	8006a98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008884:	bf00      	nop
 8008886:	3718      	adds	r7, #24
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	20000f54 	.word	0x20000f54
 8008890:	20000f4c 	.word	0x20000f4c

08008894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800889a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800889e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80088a0:	4b27      	ldr	r3, [pc, #156]	; (8008940 <prvHeapInit+0xac>)
 80088a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f003 0307 	and.w	r3, r3, #7
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00c      	beq.n	80088c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3307      	adds	r3, #7
 80088b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f023 0307 	bic.w	r3, r3, #7
 80088ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	4a1f      	ldr	r2, [pc, #124]	; (8008940 <prvHeapInit+0xac>)
 80088c4:	4413      	add	r3, r2
 80088c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80088cc:	4a1d      	ldr	r2, [pc, #116]	; (8008944 <prvHeapInit+0xb0>)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80088d2:	4b1c      	ldr	r3, [pc, #112]	; (8008944 <prvHeapInit+0xb0>)
 80088d4:	2200      	movs	r2, #0
 80088d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	4413      	add	r3, r2
 80088de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80088e0:	2208      	movs	r2, #8
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	1a9b      	subs	r3, r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f023 0307 	bic.w	r3, r3, #7
 80088ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4a15      	ldr	r2, [pc, #84]	; (8008948 <prvHeapInit+0xb4>)
 80088f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80088f6:	4b14      	ldr	r3, [pc, #80]	; (8008948 <prvHeapInit+0xb4>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2200      	movs	r2, #0
 80088fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80088fe:	4b12      	ldr	r3, [pc, #72]	; (8008948 <prvHeapInit+0xb4>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	1ad2      	subs	r2, r2, r3
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008914:	4b0c      	ldr	r3, [pc, #48]	; (8008948 <prvHeapInit+0xb4>)
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	4a0a      	ldr	r2, [pc, #40]	; (800894c <prvHeapInit+0xb8>)
 8008922:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	4a09      	ldr	r2, [pc, #36]	; (8008950 <prvHeapInit+0xbc>)
 800892a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800892c:	4b09      	ldr	r3, [pc, #36]	; (8008954 <prvHeapInit+0xc0>)
 800892e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008932:	601a      	str	r2, [r3, #0]
}
 8008934:	bf00      	nop
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	20000388 	.word	0x20000388
 8008944:	20000f40 	.word	0x20000f40
 8008948:	20000f48 	.word	0x20000f48
 800894c:	20000f50 	.word	0x20000f50
 8008950:	20000f4c 	.word	0x20000f4c
 8008954:	20000f54 	.word	0x20000f54

08008958 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008960:	4b28      	ldr	r3, [pc, #160]	; (8008a04 <prvInsertBlockIntoFreeList+0xac>)
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	e002      	b.n	800896c <prvInsertBlockIntoFreeList+0x14>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	429a      	cmp	r2, r3
 8008974:	d8f7      	bhi.n	8008966 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	4413      	add	r3, r2
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	429a      	cmp	r2, r3
 8008986:	d108      	bne.n	800899a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	441a      	add	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	441a      	add	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d118      	bne.n	80089e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	4b15      	ldr	r3, [pc, #84]	; (8008a08 <prvInsertBlockIntoFreeList+0xb0>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d00d      	beq.n	80089d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	441a      	add	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	e008      	b.n	80089e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80089d6:	4b0c      	ldr	r3, [pc, #48]	; (8008a08 <prvInsertBlockIntoFreeList+0xb0>)
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	e003      	b.n	80089e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d002      	beq.n	80089f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089f6:	bf00      	nop
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	20000f40 	.word	0x20000f40
 8008a08:	20000f48 	.word	0x20000f48

08008a0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	4a07      	ldr	r2, [pc, #28]	; (8008a38 <vApplicationGetIdleTaskMemory+0x2c>)
 8008a1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	4a06      	ldr	r2, [pc, #24]	; (8008a3c <vApplicationGetIdleTaskMemory+0x30>)
 8008a22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2280      	movs	r2, #128	; 0x80
 8008a28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8008a2a:	bf00      	nop
 8008a2c:	3714      	adds	r7, #20
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	20000f58 	.word	0x20000f58
 8008a3c:	20000fac 	.word	0x20000fac

08008a40 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	4a07      	ldr	r2, [pc, #28]	; (8008a6c <vApplicationGetTimerTaskMemory+0x2c>)
 8008a50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	4a06      	ldr	r2, [pc, #24]	; (8008a70 <vApplicationGetTimerTaskMemory+0x30>)
 8008a56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a5e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8008a60:	bf00      	nop
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	200011ac 	.word	0x200011ac
 8008a70:	20001200 	.word	0x20001200

08008a74 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8008a7e:	88fb      	ldrh	r3, [r7, #6]
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2120      	movs	r1, #32
 8008a84:	4618      	mov	r0, r3
 8008a86:	f001 fb7d 	bl	800a184 <SENSOR_IO_Read>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
 8008a90:	f023 0304 	bic.w	r3, r3, #4
 8008a94:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
 8008a98:	f043 0304 	orr.w	r3, r3, #4
 8008a9c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	f023 0303 	bic.w	r3, r3, #3
 8008aa4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
 8008aa8:	f043 0301 	orr.w	r3, r3, #1
 8008aac:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
 8008ab0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ab4:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8008ab6:	88fb      	ldrh	r3, [r7, #6]
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	7bfa      	ldrb	r2, [r7, #15]
 8008abc:	2120      	movs	r1, #32
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f001 fb46 	bl	800a150 <SENSOR_IO_Write>
}
 8008ac4:	bf00      	nop
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8008ada:	f001 fb2f 	bl	800a13c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8008ade:	88fb      	ldrh	r3, [r7, #6]
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	210f      	movs	r1, #15
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f001 fb4d 	bl	800a184 <SENSOR_IO_Read>
 8008aea:	4603      	mov	r3, r0
 8008aec:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b088      	sub	sp, #32
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8008b02:	88fb      	ldrh	r3, [r7, #6]
 8008b04:	b2d8      	uxtb	r0, r3
 8008b06:	f107 020c 	add.w	r2, r7, #12
 8008b0a:	2302      	movs	r3, #2
 8008b0c:	21b0      	movs	r1, #176	; 0xb0
 8008b0e:	f001 fb57 	bl	800a1c0 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8008b12:	7b3b      	ldrb	r3, [r7, #12]
 8008b14:	085b      	lsrs	r3, r3, #1
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8008b1a:	7b7b      	ldrb	r3, [r7, #13]
 8008b1c:	085b      	lsrs	r3, r3, #1
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8008b22:	88fb      	ldrh	r3, [r7, #6]
 8008b24:	b2d8      	uxtb	r0, r3
 8008b26:	f107 020c 	add.w	r2, r7, #12
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	21b6      	movs	r1, #182	; 0xb6
 8008b2e:	f001 fb47 	bl	800a1c0 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8008b32:	7b7b      	ldrb	r3, [r7, #13]
 8008b34:	021b      	lsls	r3, r3, #8
 8008b36:	b21a      	sxth	r2, r3
 8008b38:	7b3b      	ldrb	r3, [r7, #12]
 8008b3a:	b21b      	sxth	r3, r3
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8008b40:	88fb      	ldrh	r3, [r7, #6]
 8008b42:	b2d8      	uxtb	r0, r3
 8008b44:	f107 020c 	add.w	r2, r7, #12
 8008b48:	2302      	movs	r3, #2
 8008b4a:	21ba      	movs	r1, #186	; 0xba
 8008b4c:	f001 fb38 	bl	800a1c0 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8008b50:	7b7b      	ldrb	r3, [r7, #13]
 8008b52:	021b      	lsls	r3, r3, #8
 8008b54:	b21a      	sxth	r2, r3
 8008b56:	7b3b      	ldrb	r3, [r7, #12]
 8008b58:	b21b      	sxth	r3, r3
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8008b5e:	88fb      	ldrh	r3, [r7, #6]
 8008b60:	b2d8      	uxtb	r0, r3
 8008b62:	f107 020c 	add.w	r2, r7, #12
 8008b66:	2302      	movs	r3, #2
 8008b68:	21a8      	movs	r1, #168	; 0xa8
 8008b6a:	f001 fb29 	bl	800a1c0 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8008b6e:	7b7b      	ldrb	r3, [r7, #13]
 8008b70:	021b      	lsls	r3, r3, #8
 8008b72:	b21a      	sxth	r2, r3
 8008b74:	7b3b      	ldrb	r3, [r7, #12]
 8008b76:	b21b      	sxth	r3, r3
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8008b7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008b80:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b8e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008b92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	ee07 3a90 	vmov	s15, r3
 8008b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ba0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8008ba4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8008ba8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	ee07 3a90 	vmov	s15, r3
 8008bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bca:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8008bce:	edd7 7a04 	vldr	s15, [r7, #16]
 8008bd2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008bda:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8008bde:	edd7 7a04 	vldr	s15, [r7, #16]
 8008be2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8008c28 <HTS221_H_ReadHumidity+0x130>
 8008be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bee:	dd01      	ble.n	8008bf4 <HTS221_H_ReadHumidity+0xfc>
 8008bf0:	4b0e      	ldr	r3, [pc, #56]	; (8008c2c <HTS221_H_ReadHumidity+0x134>)
 8008bf2:	e00a      	b.n	8008c0a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8008bf4:	edd7 7a04 	vldr	s15, [r7, #16]
 8008bf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c00:	d502      	bpl.n	8008c08 <HTS221_H_ReadHumidity+0x110>
 8008c02:	f04f 0300 	mov.w	r3, #0
 8008c06:	e000      	b.n	8008c0a <HTS221_H_ReadHumidity+0x112>
 8008c08:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8008c0a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8008c0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8008c10:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008c14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c18:	eef0 7a66 	vmov.f32	s15, s13
}
 8008c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8008c20:	3720      	adds	r7, #32
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	447a0000 	.word	0x447a0000
 8008c2c:	447a0000 	.word	0x447a0000

08008c30 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	4603      	mov	r3, r0
 8008c38:	6039      	str	r1, [r7, #0]
 8008c3a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8008c3c:	88fb      	ldrh	r3, [r7, #6]
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2120      	movs	r1, #32
 8008c42:	4618      	mov	r0, r3
 8008c44:	f001 fa9e 	bl	800a184 <SENSOR_IO_Read>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	f023 0304 	bic.w	r3, r3, #4
 8008c52:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	f043 0304 	orr.w	r3, r3, #4
 8008c5a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
 8008c5e:	f023 0303 	bic.w	r3, r3, #3
 8008c62:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
 8008c66:	f043 0301 	orr.w	r3, r3, #1
 8008c6a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c72:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8008c74:	88fb      	ldrh	r3, [r7, #6]
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	7bfa      	ldrb	r2, [r7, #15]
 8008c7a:	2120      	movs	r1, #32
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f001 fa67 	bl	800a150 <SENSOR_IO_Write>
}
 8008c82:	bf00      	nop
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b088      	sub	sp, #32
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	4603      	mov	r3, r0
 8008c92:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8008c94:	88fb      	ldrh	r3, [r7, #6]
 8008c96:	b2d8      	uxtb	r0, r3
 8008c98:	f107 0208 	add.w	r2, r7, #8
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	21b2      	movs	r1, #178	; 0xb2
 8008ca0:	f001 fa8e 	bl	800a1c0 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8008ca4:	88fb      	ldrh	r3, [r7, #6]
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2135      	movs	r1, #53	; 0x35
 8008caa:	4618      	mov	r0, r3
 8008cac:	f001 fa6a 	bl	800a184 <SENSOR_IO_Read>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8008cb4:	7ffb      	ldrb	r3, [r7, #31]
 8008cb6:	021b      	lsls	r3, r3, #8
 8008cb8:	b21b      	sxth	r3, r3
 8008cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cbe:	b21a      	sxth	r2, r3
 8008cc0:	7a3b      	ldrb	r3, [r7, #8]
 8008cc2:	b21b      	sxth	r3, r3
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8008cc8:	7ffb      	ldrb	r3, [r7, #31]
 8008cca:	019b      	lsls	r3, r3, #6
 8008ccc:	b21b      	sxth	r3, r3
 8008cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cd2:	b21a      	sxth	r2, r3
 8008cd4:	7a7b      	ldrb	r3, [r7, #9]
 8008cd6:	b21b      	sxth	r3, r3
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8008cdc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008ce0:	10db      	asrs	r3, r3, #3
 8008ce2:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8008ce4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008ce8:	10db      	asrs	r3, r3, #3
 8008cea:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8008cec:	88fb      	ldrh	r3, [r7, #6]
 8008cee:	b2d8      	uxtb	r0, r3
 8008cf0:	f107 0208 	add.w	r2, r7, #8
 8008cf4:	2304      	movs	r3, #4
 8008cf6:	21bc      	movs	r1, #188	; 0xbc
 8008cf8:	f001 fa62 	bl	800a1c0 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8008cfc:	7a7b      	ldrb	r3, [r7, #9]
 8008cfe:	021b      	lsls	r3, r3, #8
 8008d00:	b21a      	sxth	r2, r3
 8008d02:	7a3b      	ldrb	r3, [r7, #8]
 8008d04:	b21b      	sxth	r3, r3
 8008d06:	4313      	orrs	r3, r2
 8008d08:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8008d0a:	7afb      	ldrb	r3, [r7, #11]
 8008d0c:	021b      	lsls	r3, r3, #8
 8008d0e:	b21a      	sxth	r2, r3
 8008d10:	7abb      	ldrb	r3, [r7, #10]
 8008d12:	b21b      	sxth	r3, r3
 8008d14:	4313      	orrs	r3, r2
 8008d16:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8008d18:	88fb      	ldrh	r3, [r7, #6]
 8008d1a:	b2d8      	uxtb	r0, r3
 8008d1c:	f107 0208 	add.w	r2, r7, #8
 8008d20:	2302      	movs	r3, #2
 8008d22:	21aa      	movs	r1, #170	; 0xaa
 8008d24:	f001 fa4c 	bl	800a1c0 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8008d28:	7a7b      	ldrb	r3, [r7, #9]
 8008d2a:	021b      	lsls	r3, r3, #8
 8008d2c:	b21a      	sxth	r2, r3
 8008d2e:	7a3b      	ldrb	r3, [r7, #8]
 8008d30:	b21b      	sxth	r3, r3
 8008d32:	4313      	orrs	r3, r2
 8008d34:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8008d36:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008d3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	ee07 3a90 	vmov	s15, r3
 8008d44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008d48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008d4c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d5a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8008d5e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8008d62:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	ee07 3a90 	vmov	s15, r3
 8008d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d74:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008d78:	ee07 3a90 	vmov	s15, r3
 8008d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d84:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	ee07 3a90 	vmov	s15, r3
}
 8008d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8008d92:	3720      	adds	r7, #32
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	463b      	mov	r3, r7
 8008da0:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8008da4:	783b      	ldrb	r3, [r7, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	2120      	movs	r1, #32
 8008daa:	203c      	movs	r0, #60	; 0x3c
 8008dac:	f001 f9d0 	bl	800a150 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8008db0:	787b      	ldrb	r3, [r7, #1]
 8008db2:	461a      	mov	r2, r3
 8008db4:	2121      	movs	r1, #33	; 0x21
 8008db6:	203c      	movs	r0, #60	; 0x3c
 8008db8:	f001 f9ca 	bl	800a150 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8008dbc:	78bb      	ldrb	r3, [r7, #2]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	2122      	movs	r1, #34	; 0x22
 8008dc2:	203c      	movs	r0, #60	; 0x3c
 8008dc4:	f001 f9c4 	bl	800a150 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8008dc8:	78fb      	ldrb	r3, [r7, #3]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	2123      	movs	r1, #35	; 0x23
 8008dce:	203c      	movs	r0, #60	; 0x3c
 8008dd0:	f001 f9be 	bl	800a150 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8008dd4:	793b      	ldrb	r3, [r7, #4]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	2124      	movs	r1, #36	; 0x24
 8008dda:	203c      	movs	r0, #60	; 0x3c
 8008ddc:	f001 f9b8 	bl	800a150 <SENSOR_IO_Write>
}
 8008de0:	bf00      	nop
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8008dee:	2300      	movs	r3, #0
 8008df0:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8008df2:	2122      	movs	r1, #34	; 0x22
 8008df4:	203c      	movs	r0, #60	; 0x3c
 8008df6:	f001 f9c5 	bl	800a184 <SENSOR_IO_Read>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8008dfe:	79fb      	ldrb	r3, [r7, #7]
 8008e00:	f023 0303 	bic.w	r3, r3, #3
 8008e04:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8008e06:	79fb      	ldrb	r3, [r7, #7]
 8008e08:	f043 0303 	orr.w	r3, r3, #3
 8008e0c:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8008e0e:	79fb      	ldrb	r3, [r7, #7]
 8008e10:	461a      	mov	r2, r3
 8008e12:	2122      	movs	r1, #34	; 0x22
 8008e14:	203c      	movs	r0, #60	; 0x3c
 8008e16:	f001 f99b 	bl	800a150 <SENSOR_IO_Write>
}
 8008e1a:	bf00      	nop
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8008e26:	f001 f989 	bl	800a13c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8008e2a:	210f      	movs	r1, #15
 8008e2c:	203c      	movs	r0, #60	; 0x3c
 8008e2e:	f001 f9a9 	bl	800a184 <SENSOR_IO_Read>
 8008e32:	4603      	mov	r3, r0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8008e46:	2122      	movs	r1, #34	; 0x22
 8008e48:	203c      	movs	r0, #60	; 0x3c
 8008e4a:	f001 f99b 	bl	800a184 <SENSOR_IO_Read>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
 8008e54:	f023 0320 	bic.w	r3, r3, #32
 8008e58:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8008e5a:	88fb      	ldrh	r3, [r7, #6]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d003      	beq.n	8008e68 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
 8008e62:	f043 0320 	orr.w	r3, r3, #32
 8008e66:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	2122      	movs	r1, #34	; 0x22
 8008e6e:	203c      	movs	r0, #60	; 0x3c
 8008e70:	f001 f96e 	bl	800a150 <SENSOR_IO_Write>
}
 8008e74:	bf00      	nop
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b088      	sub	sp, #32
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8008e84:	2300      	movs	r3, #0
 8008e86:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8008e8c:	f04f 0300 	mov.w	r3, #0
 8008e90:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8008e92:	2121      	movs	r1, #33	; 0x21
 8008e94:	203c      	movs	r0, #60	; 0x3c
 8008e96:	f001 f975 	bl	800a184 <SENSOR_IO_Read>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8008e9e:	f107 0208 	add.w	r2, r7, #8
 8008ea2:	2306      	movs	r3, #6
 8008ea4:	21a8      	movs	r1, #168	; 0xa8
 8008ea6:	203c      	movs	r0, #60	; 0x3c
 8008ea8:	f001 f98a 	bl	800a1c0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8008eac:	2300      	movs	r3, #0
 8008eae:	77fb      	strb	r3, [r7, #31]
 8008eb0:	e01f      	b.n	8008ef2 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8008eb2:	7ffb      	ldrb	r3, [r7, #31]
 8008eb4:	005b      	lsls	r3, r3, #1
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	f107 0220 	add.w	r2, r7, #32
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	021b      	lsls	r3, r3, #8
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	7ffb      	ldrb	r3, [r7, #31]
 8008eca:	005b      	lsls	r3, r3, #1
 8008ecc:	f107 0120 	add.w	r1, r7, #32
 8008ed0:	440b      	add	r3, r1
 8008ed2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	4413      	add	r3, r2
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	7ffb      	ldrb	r3, [r7, #31]
 8008ede:	b212      	sxth	r2, r2
 8008ee0:	005b      	lsls	r3, r3, #1
 8008ee2:	f107 0120 	add.w	r1, r7, #32
 8008ee6:	440b      	add	r3, r1
 8008ee8:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8008eec:	7ffb      	ldrb	r3, [r7, #31]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	77fb      	strb	r3, [r7, #31]
 8008ef2:	7ffb      	ldrb	r3, [r7, #31]
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d9dc      	bls.n	8008eb2 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008efe:	2b20      	cmp	r3, #32
 8008f00:	d00c      	beq.n	8008f1c <LIS3MDL_MagReadXYZ+0xa0>
 8008f02:	2b20      	cmp	r3, #32
 8008f04:	dc02      	bgt.n	8008f0c <LIS3MDL_MagReadXYZ+0x90>
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d005      	beq.n	8008f16 <LIS3MDL_MagReadXYZ+0x9a>
 8008f0a:	e010      	b.n	8008f2e <LIS3MDL_MagReadXYZ+0xb2>
 8008f0c:	2b40      	cmp	r3, #64	; 0x40
 8008f0e:	d008      	beq.n	8008f22 <LIS3MDL_MagReadXYZ+0xa6>
 8008f10:	2b60      	cmp	r3, #96	; 0x60
 8008f12:	d009      	beq.n	8008f28 <LIS3MDL_MagReadXYZ+0xac>
 8008f14:	e00b      	b.n	8008f2e <LIS3MDL_MagReadXYZ+0xb2>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8008f16:	4b19      	ldr	r3, [pc, #100]	; (8008f7c <LIS3MDL_MagReadXYZ+0x100>)
 8008f18:	61bb      	str	r3, [r7, #24]
    break;
 8008f1a:	e008      	b.n	8008f2e <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8008f1c:	4b18      	ldr	r3, [pc, #96]	; (8008f80 <LIS3MDL_MagReadXYZ+0x104>)
 8008f1e:	61bb      	str	r3, [r7, #24]
    break;
 8008f20:	e005      	b.n	8008f2e <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8008f22:	4b18      	ldr	r3, [pc, #96]	; (8008f84 <LIS3MDL_MagReadXYZ+0x108>)
 8008f24:	61bb      	str	r3, [r7, #24]
    break;
 8008f26:	e002      	b.n	8008f2e <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8008f28:	4b17      	ldr	r3, [pc, #92]	; (8008f88 <LIS3MDL_MagReadXYZ+0x10c>)
 8008f2a:	61bb      	str	r3, [r7, #24]
    break;    
 8008f2c:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8008f2e:	2300      	movs	r3, #0
 8008f30:	77fb      	strb	r3, [r7, #31]
 8008f32:	e01b      	b.n	8008f6c <LIS3MDL_MagReadXYZ+0xf0>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8008f34:	7ffb      	ldrb	r3, [r7, #31]
 8008f36:	005b      	lsls	r3, r3, #1
 8008f38:	f107 0220 	add.w	r2, r7, #32
 8008f3c:	4413      	add	r3, r2
 8008f3e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8008f42:	ee07 3a90 	vmov	s15, r3
 8008f46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8008f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f52:	7ffb      	ldrb	r3, [r7, #31]
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	4413      	add	r3, r2
 8008f5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f5e:	ee17 2a90 	vmov	r2, s15
 8008f62:	b212      	sxth	r2, r2
 8008f64:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8008f66:	7ffb      	ldrb	r3, [r7, #31]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	77fb      	strb	r3, [r7, #31]
 8008f6c:	7ffb      	ldrb	r3, [r7, #31]
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d9e0      	bls.n	8008f34 <LIS3MDL_MagReadXYZ+0xb8>
  }
}
 8008f72:	bf00      	nop
 8008f74:	3720      	adds	r7, #32
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	3e0f5c29 	.word	0x3e0f5c29
 8008f80:	3e947ae1 	.word	0x3e947ae1
 8008f84:	3edc28f6 	.word	0x3edc28f6
 8008f88:	3f147ae1 	.word	0x3f147ae1

08008f8c <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8008f96:	88fb      	ldrh	r3, [r7, #6]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f000 f87b 	bl	8009094 <LPS22HB_Init>
}
 8008f9e:	bf00      	nop
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b084      	sub	sp, #16
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	4603      	mov	r3, r0
 8008fae:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8008fb4:	f001 f8c2 	bl	800a13c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8008fb8:	88fb      	ldrh	r3, [r7, #6]
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	210f      	movs	r1, #15
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f001 f8e0 	bl	800a184 <SENSOR_IO_Read>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
	...

08008fd4 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8008fd4:	b590      	push	{r4, r7, lr}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	4603      	mov	r3, r0
 8008fdc:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	74fb      	strb	r3, [r7, #19]
 8008fe6:	e013      	b.n	8009010 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8008fe8:	88fb      	ldrh	r3, [r7, #6]
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	7cfb      	ldrb	r3, [r7, #19]
 8008fee:	3328      	adds	r3, #40	; 0x28
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	7cfc      	ldrb	r4, [r7, #19]
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	f001 f8c4 	bl	800a184 <SENSOR_IO_Read>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	461a      	mov	r2, r3
 8009000:	f107 0318 	add.w	r3, r7, #24
 8009004:	4423      	add	r3, r4
 8009006:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800900a:	7cfb      	ldrb	r3, [r7, #19]
 800900c:	3301      	adds	r3, #1
 800900e:	74fb      	strb	r3, [r7, #19]
 8009010:	7cfb      	ldrb	r3, [r7, #19]
 8009012:	2b02      	cmp	r3, #2
 8009014:	d9e8      	bls.n	8008fe8 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8009016:	2300      	movs	r3, #0
 8009018:	74fb      	strb	r3, [r7, #19]
 800901a:	e010      	b.n	800903e <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 800901c:	7cfb      	ldrb	r3, [r7, #19]
 800901e:	f107 0218 	add.w	r2, r7, #24
 8009022:	4413      	add	r3, r2
 8009024:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8009028:	461a      	mov	r2, r3
 800902a:	7cfb      	ldrb	r3, [r7, #19]
 800902c:	00db      	lsls	r3, r3, #3
 800902e:	fa02 f303 	lsl.w	r3, r2, r3
 8009032:	697a      	ldr	r2, [r7, #20]
 8009034:	4313      	orrs	r3, r2
 8009036:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8009038:	7cfb      	ldrb	r3, [r7, #19]
 800903a:	3301      	adds	r3, #1
 800903c:	74fb      	strb	r3, [r7, #19]
 800903e:	7cfb      	ldrb	r3, [r7, #19]
 8009040:	2b02      	cmp	r3, #2
 8009042:	d9eb      	bls.n	800901c <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009054:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2264      	movs	r2, #100	; 0x64
 800905e:	fb02 f303 	mul.w	r3, r2, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	da01      	bge.n	800906a <LPS22HB_P_ReadPressure+0x96>
 8009066:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800906a:	131b      	asrs	r3, r3, #12
 800906c:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	ee07 3a90 	vmov	s15, r3
 8009074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009078:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8009090 <LPS22HB_P_ReadPressure+0xbc>
 800907c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009080:	eef0 7a66 	vmov.f32	s15, s13
}
 8009084:	eeb0 0a67 	vmov.f32	s0, s15
 8009088:	371c      	adds	r7, #28
 800908a:	46bd      	mov	sp, r7
 800908c:	bd90      	pop	{r4, r7, pc}
 800908e:	bf00      	nop
 8009090:	42c80000 	.word	0x42c80000

08009094 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	4603      	mov	r3, r0
 800909c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800909e:	88fb      	ldrh	r3, [r7, #6]
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	211a      	movs	r1, #26
 80090a4:	4618      	mov	r0, r3
 80090a6:	f001 f86d 	bl	800a184 <SENSOR_IO_Read>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	f023 0301 	bic.w	r3, r3, #1
 80090b4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80090b6:	7bfb      	ldrb	r3, [r7, #15]
 80090b8:	f043 0301 	orr.w	r3, r3, #1
 80090bc:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80090be:	88fb      	ldrh	r3, [r7, #6]
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	7bfa      	ldrb	r2, [r7, #15]
 80090c4:	211a      	movs	r1, #26
 80090c6:	4618      	mov	r0, r3
 80090c8:	f001 f842 	bl	800a150 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80090cc:	88fb      	ldrh	r3, [r7, #6]
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	2110      	movs	r1, #16
 80090d2:	4618      	mov	r0, r3
 80090d4:	f001 f856 	bl	800a184 <SENSOR_IO_Read>
 80090d8:	4603      	mov	r3, r0
 80090da:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
 80090de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090e2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80090ea:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
 80090ee:	f023 0302 	bic.w	r3, r3, #2
 80090f2:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
 80090f6:	f043 0302 	orr.w	r3, r3, #2
 80090fa:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80090fc:	88fb      	ldrh	r3, [r7, #6]
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	7bfa      	ldrb	r2, [r7, #15]
 8009102:	2110      	movs	r1, #16
 8009104:	4618      	mov	r0, r3
 8009106:	f001 f823 	bl	800a150 <SENSOR_IO_Write>
}  
 800910a:	bf00      	nop
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	4603      	mov	r3, r0
 800911a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800911c:	2300      	movs	r3, #0
 800911e:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009120:	2110      	movs	r1, #16
 8009122:	20d4      	movs	r0, #212	; 0xd4
 8009124:	f001 f82e 	bl	800a184 <SENSOR_IO_Read>
 8009128:	4603      	mov	r3, r0
 800912a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800912c:	88fb      	ldrh	r3, [r7, #6]
 800912e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8009130:	7bbb      	ldrb	r3, [r7, #14]
 8009132:	f003 0303 	and.w	r3, r3, #3
 8009136:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8009138:	7bba      	ldrb	r2, [r7, #14]
 800913a:	7bfb      	ldrb	r3, [r7, #15]
 800913c:	4313      	orrs	r3, r2
 800913e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8009140:	7bbb      	ldrb	r3, [r7, #14]
 8009142:	461a      	mov	r2, r3
 8009144:	2110      	movs	r1, #16
 8009146:	20d4      	movs	r0, #212	; 0xd4
 8009148:	f001 f802 	bl	800a150 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800914c:	2112      	movs	r1, #18
 800914e:	20d4      	movs	r0, #212	; 0xd4
 8009150:	f001 f818 	bl	800a184 <SENSOR_IO_Read>
 8009154:	4603      	mov	r3, r0
 8009156:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8009158:	88fb      	ldrh	r3, [r7, #6]
 800915a:	0a1b      	lsrs	r3, r3, #8
 800915c:	b29b      	uxth	r3, r3
 800915e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8009160:	7bbb      	ldrb	r3, [r7, #14]
 8009162:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8009166:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8009168:	7bba      	ldrb	r2, [r7, #14]
 800916a:	7bfb      	ldrb	r3, [r7, #15]
 800916c:	4313      	orrs	r3, r2
 800916e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8009170:	7bbb      	ldrb	r3, [r7, #14]
 8009172:	461a      	mov	r2, r3
 8009174:	2112      	movs	r1, #18
 8009176:	20d4      	movs	r0, #212	; 0xd4
 8009178:	f000 ffea 	bl	800a150 <SENSOR_IO_Write>
}
 800917c:	bf00      	nop
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800918a:	2300      	movs	r3, #0
 800918c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800918e:	2110      	movs	r1, #16
 8009190:	20d4      	movs	r0, #212	; 0xd4
 8009192:	f000 fff7 	bl	800a184 <SENSOR_IO_Read>
 8009196:	4603      	mov	r3, r0
 8009198:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800919a:	79fb      	ldrb	r3, [r7, #7]
 800919c:	f003 030f 	and.w	r3, r3, #15
 80091a0:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80091a2:	79fb      	ldrb	r3, [r7, #7]
 80091a4:	461a      	mov	r2, r3
 80091a6:	2110      	movs	r1, #16
 80091a8:	20d4      	movs	r0, #212	; 0xd4
 80091aa:	f000 ffd1 	bl	800a150 <SENSOR_IO_Write>
}
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80091b6:	b580      	push	{r7, lr}
 80091b8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80091ba:	f000 ffbf 	bl	800a13c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80091be:	210f      	movs	r1, #15
 80091c0:	20d4      	movs	r0, #212	; 0xd4
 80091c2:	f000 ffdf 	bl	800a184 <SENSOR_IO_Read>
 80091c6:	4603      	mov	r3, r0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	bd80      	pop	{r7, pc}

080091cc <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	4603      	mov	r3, r0
 80091d4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80091d6:	2300      	movs	r3, #0
 80091d8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80091da:	2115      	movs	r1, #21
 80091dc:	20d4      	movs	r0, #212	; 0xd4
 80091de:	f000 ffd1 	bl	800a184 <SENSOR_IO_Read>
 80091e2:	4603      	mov	r3, r0
 80091e4:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	f023 0310 	bic.w	r3, r3, #16
 80091ec:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80091ee:	88fb      	ldrh	r3, [r7, #6]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
 80091f6:	f043 0310 	orr.w	r3, r3, #16
 80091fa:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
 80091fe:	461a      	mov	r2, r3
 8009200:	2115      	movs	r1, #21
 8009202:	20d4      	movs	r0, #212	; 0xd4
 8009204:	f000 ffa4 	bl	800a150 <SENSOR_IO_Write>
}
 8009208:	bf00      	nop
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b088      	sub	sp, #32
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8009218:	2300      	movs	r3, #0
 800921a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800921c:	2300      	movs	r3, #0
 800921e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8009220:	f04f 0300 	mov.w	r3, #0
 8009224:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009226:	2110      	movs	r1, #16
 8009228:	20d4      	movs	r0, #212	; 0xd4
 800922a:	f000 ffab 	bl	800a184 <SENSOR_IO_Read>
 800922e:	4603      	mov	r3, r0
 8009230:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8009232:	f107 0208 	add.w	r2, r7, #8
 8009236:	2306      	movs	r3, #6
 8009238:	2128      	movs	r1, #40	; 0x28
 800923a:	20d4      	movs	r0, #212	; 0xd4
 800923c:	f000 ffc0 	bl	800a1c0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8009240:	2300      	movs	r3, #0
 8009242:	77fb      	strb	r3, [r7, #31]
 8009244:	e01f      	b.n	8009286 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8009246:	7ffb      	ldrb	r3, [r7, #31]
 8009248:	005b      	lsls	r3, r3, #1
 800924a:	3301      	adds	r3, #1
 800924c:	f107 0220 	add.w	r2, r7, #32
 8009250:	4413      	add	r3, r2
 8009252:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009256:	b29b      	uxth	r3, r3
 8009258:	021b      	lsls	r3, r3, #8
 800925a:	b29a      	uxth	r2, r3
 800925c:	7ffb      	ldrb	r3, [r7, #31]
 800925e:	005b      	lsls	r3, r3, #1
 8009260:	f107 0120 	add.w	r1, r7, #32
 8009264:	440b      	add	r3, r1
 8009266:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800926a:	b29b      	uxth	r3, r3
 800926c:	4413      	add	r3, r2
 800926e:	b29a      	uxth	r2, r3
 8009270:	7ffb      	ldrb	r3, [r7, #31]
 8009272:	b212      	sxth	r2, r2
 8009274:	005b      	lsls	r3, r3, #1
 8009276:	f107 0120 	add.w	r1, r7, #32
 800927a:	440b      	add	r3, r1
 800927c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8009280:	7ffb      	ldrb	r3, [r7, #31]
 8009282:	3301      	adds	r3, #1
 8009284:	77fb      	strb	r3, [r7, #31]
 8009286:	7ffb      	ldrb	r3, [r7, #31]
 8009288:	2b02      	cmp	r3, #2
 800928a:	d9dc      	bls.n	8009246 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800928c:	7dfb      	ldrb	r3, [r7, #23]
 800928e:	f003 030c 	and.w	r3, r3, #12
 8009292:	2b0c      	cmp	r3, #12
 8009294:	d828      	bhi.n	80092e8 <LSM6DSL_AccReadXYZ+0xd8>
 8009296:	a201      	add	r2, pc, #4	; (adr r2, 800929c <LSM6DSL_AccReadXYZ+0x8c>)
 8009298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929c:	080092d1 	.word	0x080092d1
 80092a0:	080092e9 	.word	0x080092e9
 80092a4:	080092e9 	.word	0x080092e9
 80092a8:	080092e9 	.word	0x080092e9
 80092ac:	080092e3 	.word	0x080092e3
 80092b0:	080092e9 	.word	0x080092e9
 80092b4:	080092e9 	.word	0x080092e9
 80092b8:	080092e9 	.word	0x080092e9
 80092bc:	080092d7 	.word	0x080092d7
 80092c0:	080092e9 	.word	0x080092e9
 80092c4:	080092e9 	.word	0x080092e9
 80092c8:	080092e9 	.word	0x080092e9
 80092cc:	080092dd 	.word	0x080092dd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80092d0:	4b18      	ldr	r3, [pc, #96]	; (8009334 <LSM6DSL_AccReadXYZ+0x124>)
 80092d2:	61bb      	str	r3, [r7, #24]
    break;
 80092d4:	e008      	b.n	80092e8 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80092d6:	4b18      	ldr	r3, [pc, #96]	; (8009338 <LSM6DSL_AccReadXYZ+0x128>)
 80092d8:	61bb      	str	r3, [r7, #24]
    break;
 80092da:	e005      	b.n	80092e8 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80092dc:	4b17      	ldr	r3, [pc, #92]	; (800933c <LSM6DSL_AccReadXYZ+0x12c>)
 80092de:	61bb      	str	r3, [r7, #24]
    break;
 80092e0:	e002      	b.n	80092e8 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80092e2:	4b17      	ldr	r3, [pc, #92]	; (8009340 <LSM6DSL_AccReadXYZ+0x130>)
 80092e4:	61bb      	str	r3, [r7, #24]
    break;    
 80092e6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80092e8:	2300      	movs	r3, #0
 80092ea:	77fb      	strb	r3, [r7, #31]
 80092ec:	e01b      	b.n	8009326 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80092ee:	7ffb      	ldrb	r3, [r7, #31]
 80092f0:	005b      	lsls	r3, r3, #1
 80092f2:	f107 0220 	add.w	r2, r7, #32
 80092f6:	4413      	add	r3, r2
 80092f8:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80092fc:	ee07 3a90 	vmov	s15, r3
 8009300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009304:	edd7 7a06 	vldr	s15, [r7, #24]
 8009308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800930c:	7ffb      	ldrb	r3, [r7, #31]
 800930e:	005b      	lsls	r3, r3, #1
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	4413      	add	r3, r2
 8009314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009318:	ee17 2a90 	vmov	r2, s15
 800931c:	b212      	sxth	r2, r2
 800931e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8009320:	7ffb      	ldrb	r3, [r7, #31]
 8009322:	3301      	adds	r3, #1
 8009324:	77fb      	strb	r3, [r7, #31]
 8009326:	7ffb      	ldrb	r3, [r7, #31]
 8009328:	2b02      	cmp	r3, #2
 800932a:	d9e0      	bls.n	80092ee <LSM6DSL_AccReadXYZ+0xde>
  }
}
 800932c:	bf00      	nop
 800932e:	3720      	adds	r7, #32
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	3d79db23 	.word	0x3d79db23
 8009338:	3df9db23 	.word	0x3df9db23
 800933c:	3e79db23 	.word	0x3e79db23
 8009340:	3ef9db23 	.word	0x3ef9db23

08009344 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	4603      	mov	r3, r0
 800934c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800934e:	2300      	movs	r3, #0
 8009350:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8009352:	2111      	movs	r1, #17
 8009354:	20d4      	movs	r0, #212	; 0xd4
 8009356:	f000 ff15 	bl	800a184 <SENSOR_IO_Read>
 800935a:	4603      	mov	r3, r0
 800935c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800935e:	88fb      	ldrh	r3, [r7, #6]
 8009360:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8009362:	7bbb      	ldrb	r3, [r7, #14]
 8009364:	f003 0303 	and.w	r3, r3, #3
 8009368:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800936a:	7bba      	ldrb	r2, [r7, #14]
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	4313      	orrs	r3, r2
 8009370:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	461a      	mov	r2, r3
 8009376:	2111      	movs	r1, #17
 8009378:	20d4      	movs	r0, #212	; 0xd4
 800937a:	f000 fee9 	bl	800a150 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800937e:	2112      	movs	r1, #18
 8009380:	20d4      	movs	r0, #212	; 0xd4
 8009382:	f000 feff 	bl	800a184 <SENSOR_IO_Read>
 8009386:	4603      	mov	r3, r0
 8009388:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800938a:	88fb      	ldrh	r3, [r7, #6]
 800938c:	0a1b      	lsrs	r3, r3, #8
 800938e:	b29b      	uxth	r3, r3
 8009390:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8009392:	7bbb      	ldrb	r3, [r7, #14]
 8009394:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8009398:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800939a:	7bba      	ldrb	r2, [r7, #14]
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	4313      	orrs	r3, r2
 80093a0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80093a2:	7bbb      	ldrb	r3, [r7, #14]
 80093a4:	461a      	mov	r2, r3
 80093a6:	2112      	movs	r1, #18
 80093a8:	20d4      	movs	r0, #212	; 0xd4
 80093aa:	f000 fed1 	bl	800a150 <SENSOR_IO_Write>
}
 80093ae:	bf00      	nop
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b082      	sub	sp, #8
 80093ba:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80093bc:	2300      	movs	r3, #0
 80093be:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80093c0:	2111      	movs	r1, #17
 80093c2:	20d4      	movs	r0, #212	; 0xd4
 80093c4:	f000 fede 	bl	800a184 <SENSOR_IO_Read>
 80093c8:	4603      	mov	r3, r0
 80093ca:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80093cc:	79fb      	ldrb	r3, [r7, #7]
 80093ce:	f003 030f 	and.w	r3, r3, #15
 80093d2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80093d4:	79fb      	ldrb	r3, [r7, #7]
 80093d6:	461a      	mov	r2, r3
 80093d8:	2111      	movs	r1, #17
 80093da:	20d4      	movs	r0, #212	; 0xd4
 80093dc:	f000 feb8 	bl	800a150 <SENSOR_IO_Write>
}
 80093e0:	bf00      	nop
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80093ec:	f000 fea6 	bl	800a13c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80093f0:	210f      	movs	r1, #15
 80093f2:	20d4      	movs	r0, #212	; 0xd4
 80093f4:	f000 fec6 	bl	800a184 <SENSOR_IO_Read>
 80093f8:	4603      	mov	r3, r0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	bd80      	pop	{r7, pc}

080093fe <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80093fe:	b580      	push	{r7, lr}
 8009400:	b084      	sub	sp, #16
 8009402:	af00      	add	r7, sp, #0
 8009404:	4603      	mov	r3, r0
 8009406:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009408:	2300      	movs	r3, #0
 800940a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800940c:	2116      	movs	r1, #22
 800940e:	20d4      	movs	r0, #212	; 0xd4
 8009410:	f000 feb8 	bl	800a184 <SENSOR_IO_Read>
 8009414:	4603      	mov	r3, r0
 8009416:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800941e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8009420:	88fb      	ldrh	r3, [r7, #6]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d003      	beq.n	800942e <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8009426:	7bfb      	ldrb	r3, [r7, #15]
 8009428:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800942c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800942e:	7bfb      	ldrb	r3, [r7, #15]
 8009430:	461a      	mov	r2, r3
 8009432:	2116      	movs	r1, #22
 8009434:	20d4      	movs	r0, #212	; 0xd4
 8009436:	f000 fe8b 	bl	800a150 <SENSOR_IO_Write>
}
 800943a:	bf00      	nop
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
	...

08009444 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b088      	sub	sp, #32
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 800944c:	2300      	movs	r3, #0
 800944e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8009450:	2300      	movs	r3, #0
 8009452:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8009454:	f04f 0300 	mov.w	r3, #0
 8009458:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800945a:	2111      	movs	r1, #17
 800945c:	20d4      	movs	r0, #212	; 0xd4
 800945e:	f000 fe91 	bl	800a184 <SENSOR_IO_Read>
 8009462:	4603      	mov	r3, r0
 8009464:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8009466:	f107 0208 	add.w	r2, r7, #8
 800946a:	2306      	movs	r3, #6
 800946c:	2122      	movs	r1, #34	; 0x22
 800946e:	20d4      	movs	r0, #212	; 0xd4
 8009470:	f000 fea6 	bl	800a1c0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8009474:	2300      	movs	r3, #0
 8009476:	77fb      	strb	r3, [r7, #31]
 8009478:	e01f      	b.n	80094ba <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800947a:	7ffb      	ldrb	r3, [r7, #31]
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	3301      	adds	r3, #1
 8009480:	f107 0220 	add.w	r2, r7, #32
 8009484:	4413      	add	r3, r2
 8009486:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800948a:	b29b      	uxth	r3, r3
 800948c:	021b      	lsls	r3, r3, #8
 800948e:	b29a      	uxth	r2, r3
 8009490:	7ffb      	ldrb	r3, [r7, #31]
 8009492:	005b      	lsls	r3, r3, #1
 8009494:	f107 0120 	add.w	r1, r7, #32
 8009498:	440b      	add	r3, r1
 800949a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800949e:	b29b      	uxth	r3, r3
 80094a0:	4413      	add	r3, r2
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	7ffb      	ldrb	r3, [r7, #31]
 80094a6:	b212      	sxth	r2, r2
 80094a8:	005b      	lsls	r3, r3, #1
 80094aa:	f107 0120 	add.w	r1, r7, #32
 80094ae:	440b      	add	r3, r1
 80094b0:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80094b4:	7ffb      	ldrb	r3, [r7, #31]
 80094b6:	3301      	adds	r3, #1
 80094b8:	77fb      	strb	r3, [r7, #31]
 80094ba:	7ffb      	ldrb	r3, [r7, #31]
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d9dc      	bls.n	800947a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	f003 030c 	and.w	r3, r3, #12
 80094c6:	2b0c      	cmp	r3, #12
 80094c8:	d828      	bhi.n	800951c <LSM6DSL_GyroReadXYZAngRate+0xd8>
 80094ca:	a201      	add	r2, pc, #4	; (adr r2, 80094d0 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 80094cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d0:	08009505 	.word	0x08009505
 80094d4:	0800951d 	.word	0x0800951d
 80094d8:	0800951d 	.word	0x0800951d
 80094dc:	0800951d 	.word	0x0800951d
 80094e0:	0800950b 	.word	0x0800950b
 80094e4:	0800951d 	.word	0x0800951d
 80094e8:	0800951d 	.word	0x0800951d
 80094ec:	0800951d 	.word	0x0800951d
 80094f0:	08009511 	.word	0x08009511
 80094f4:	0800951d 	.word	0x0800951d
 80094f8:	0800951d 	.word	0x0800951d
 80094fc:	0800951d 	.word	0x0800951d
 8009500:	08009517 	.word	0x08009517
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8009504:	4b16      	ldr	r3, [pc, #88]	; (8009560 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8009506:	61bb      	str	r3, [r7, #24]
    break;
 8009508:	e008      	b.n	800951c <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800950a:	4b16      	ldr	r3, [pc, #88]	; (8009564 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 800950c:	61bb      	str	r3, [r7, #24]
    break;
 800950e:	e005      	b.n	800951c <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8009510:	4b15      	ldr	r3, [pc, #84]	; (8009568 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8009512:	61bb      	str	r3, [r7, #24]
    break;
 8009514:	e002      	b.n	800951c <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8009516:	4b15      	ldr	r3, [pc, #84]	; (800956c <LSM6DSL_GyroReadXYZAngRate+0x128>)
 8009518:	61bb      	str	r3, [r7, #24]
    break;    
 800951a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800951c:	2300      	movs	r3, #0
 800951e:	77fb      	strb	r3, [r7, #31]
 8009520:	e017      	b.n	8009552 <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8009522:	7ffb      	ldrb	r3, [r7, #31]
 8009524:	005b      	lsls	r3, r3, #1
 8009526:	f107 0220 	add.w	r2, r7, #32
 800952a:	4413      	add	r3, r2
 800952c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8009530:	ee07 3a90 	vmov	s15, r3
 8009534:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009538:	7ffb      	ldrb	r3, [r7, #31]
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	4413      	add	r3, r2
 8009540:	edd7 7a06 	vldr	s15, [r7, #24]
 8009544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009548:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800954c:	7ffb      	ldrb	r3, [r7, #31]
 800954e:	3301      	adds	r3, #1
 8009550:	77fb      	strb	r3, [r7, #31]
 8009552:	7ffb      	ldrb	r3, [r7, #31]
 8009554:	2b02      	cmp	r3, #2
 8009556:	d9e4      	bls.n	8009522 <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 8009558:	bf00      	nop
 800955a:	3720      	adds	r7, #32
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	410c0000 	.word	0x410c0000
 8009564:	418c0000 	.word	0x418c0000
 8009568:	420c0000 	.word	0x420c0000
 800956c:	428c0000 	.word	0x428c0000

08009570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009570:	b5b0      	push	{r4, r5, r7, lr}
 8009572:	b0a0      	sub	sp, #128	; 0x80
 8009574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009576:	f7f7 fca7 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800957a:	f000 f979 	bl	8009870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800957e:	f000 fac9 	bl	8009b14 <MX_GPIO_Init>
  MX_I2C2_Init();
 8009582:	f000 f9ed 	bl	8009960 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8009586:	f000 fa79 	bl	8009a7c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800958a:	f000 fa29 	bl	80099e0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	// Initialize peripherals
	BSP_ACCELERO_Init();
 800958e:	f000 fe35 	bl	800a1fc <BSP_ACCELERO_Init>
	BSP_MAGNETO_Init();
 8009592:	f000 ff11 	bl	800a3b8 <BSP_MAGNETO_Init>
	BSP_GYRO_Init();
 8009596:	f000 fe87 	bl	800a2a8 <BSP_GYRO_Init>
	BSP_HSENSOR_Init();
 800959a:	f000 fedf 	bl	800a35c <BSP_HSENSOR_Init>
	BSP_PSENSOR_Init();
 800959e:	f000 ff4f 	bl	800a440 <BSP_PSENSOR_Init>
	BSP_TSENSOR_Init();
 80095a2:	f000 ff7b 	bl	800a49c <BSP_TSENSOR_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 80095a6:	4898      	ldr	r0, [pc, #608]	; (8009808 <main+0x298>)
 80095a8:	f7fa fb64 	bl	8003c74 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of consoleMutex */
  osMutexDef(consoleMutex);
 80095ac:	2300      	movs	r3, #0
 80095ae:	673b      	str	r3, [r7, #112]	; 0x70
 80095b0:	2300      	movs	r3, #0
 80095b2:	677b      	str	r3, [r7, #116]	; 0x74
  consoleMutexHandle = osMutexCreate(osMutex(consoleMutex));
 80095b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fb ff39 	bl	8005430 <osMutexCreate>
 80095be:	4602      	mov	r2, r0
 80095c0:	4b92      	ldr	r3, [pc, #584]	; (800980c <main+0x29c>)
 80095c2:	601a      	str	r2, [r3, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerDef(myTimer01, Callback01);
 80095c4:	4b92      	ldr	r3, [pc, #584]	; (8009810 <main+0x2a0>)
 80095c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80095c8:	2300      	movs	r3, #0
 80095ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80095cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80095d0:	2200      	movs	r2, #0
 80095d2:	2101      	movs	r1, #1
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fb fe6b 	bl	80052b0 <osTimerCreate>
 80095da:	4602      	mov	r2, r0
 80095dc:	4b8d      	ldr	r3, [pc, #564]	; (8009814 <main+0x2a4>)
 80095de:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of displayBuffer */
  osMessageQDef(displayBuffer, 50, uint8_t);
 80095e0:	4b8d      	ldr	r3, [pc, #564]	; (8009818 <main+0x2a8>)
 80095e2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80095e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80095e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  displayBufferHandle = osMessageCreate(osMessageQ(displayBuffer), NULL);
 80095ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80095f0:	2100      	movs	r1, #0
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fb ffb8 	bl	8005568 <osMessageCreate>
 80095f8:	4602      	mov	r2, r0
 80095fa:	4b88      	ldr	r3, [pc, #544]	; (800981c <main+0x2ac>)
 80095fc:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of measure */
  osThreadDef(measure, StartMeasureTask, osPriorityNormal, 0, 256);
 80095fe:	4b88      	ldr	r3, [pc, #544]	; (8009820 <main+0x2b0>)
 8009600:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8009604:	461d      	mov	r5, r3
 8009606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800960a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800960e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  measureHandle = osThreadCreate(osThread(measure), NULL);
 8009612:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009616:	2100      	movs	r1, #0
 8009618:	4618      	mov	r0, r3
 800961a:	f7fb fde8 	bl	80051ee <osThreadCreate>
 800961e:	4602      	mov	r2, r0
 8009620:	4b80      	ldr	r3, [pc, #512]	; (8009824 <main+0x2b4>)
 8009622:	601a      	str	r2, [r3, #0]

  /* definition and creation of transmit */
  osThreadDef(transmit, StartTransmitTask, osPriorityIdle, 0, 128);
 8009624:	4b80      	ldr	r3, [pc, #512]	; (8009828 <main+0x2b8>)
 8009626:	f107 0420 	add.w	r4, r7, #32
 800962a:	461d      	mov	r5, r3
 800962c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800962e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitHandle = osThreadCreate(osThread(transmit), NULL);
 8009638:	f107 0320 	add.w	r3, r7, #32
 800963c:	2100      	movs	r1, #0
 800963e:	4618      	mov	r0, r3
 8009640:	f7fb fdd5 	bl	80051ee <osThreadCreate>
 8009644:	4602      	mov	r2, r0
 8009646:	4b79      	ldr	r3, [pc, #484]	; (800982c <main+0x2bc>)
 8009648:	601a      	str	r2, [r3, #0]

  /* definition and creation of listen */
  osThreadDef(listen, StartListenTask, osPriorityIdle, 0, 128);
 800964a:	4b79      	ldr	r3, [pc, #484]	; (8009830 <main+0x2c0>)
 800964c:	1d3c      	adds	r4, r7, #4
 800964e:	461d      	mov	r5, r3
 8009650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009654:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009658:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  listenHandle = osThreadCreate(osThread(listen), NULL);
 800965c:	1d3b      	adds	r3, r7, #4
 800965e:	2100      	movs	r1, #0
 8009660:	4618      	mov	r0, r3
 8009662:	f7fb fdc4 	bl	80051ee <osThreadCreate>
 8009666:	4602      	mov	r2, r0
 8009668:	4b72      	ldr	r3, [pc, #456]	; (8009834 <main+0x2c4>)
 800966a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800966c:	f7fb fdb8 	bl	80051e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		BSP_ACCELERO_AccGetXYZ(acceleration);
 8009670:	4871      	ldr	r0, [pc, #452]	; (8009838 <main+0x2c8>)
 8009672:	f000 fe01 	bl	800a278 <BSP_ACCELERO_AccGetXYZ>
		humidity = BSP_HSENSOR_ReadHumidity();
 8009676:	f000 fe91 	bl	800a39c <BSP_HSENSOR_ReadHumidity>
 800967a:	eef0 7a40 	vmov.f32	s15, s0
 800967e:	4b6f      	ldr	r3, [pc, #444]	; (800983c <main+0x2cc>)
 8009680:	edc3 7a00 	vstr	s15, [r3]
		BSP_MAGNETO_GetXYZ(magneto);
 8009684:	486e      	ldr	r0, [pc, #440]	; (8009840 <main+0x2d0>)
 8009686:	f000 fec3 	bl	800a410 <BSP_MAGNETO_GetXYZ>
		BSP_GYRO_GetXYZ(gyro);
 800968a:	486e      	ldr	r0, [pc, #440]	; (8009844 <main+0x2d4>)
 800968c:	f000 fe4e 	bl	800a32c <BSP_GYRO_GetXYZ>
		pressure = BSP_PSENSOR_ReadPressure();
 8009690:	f000 fef6 	bl	800a480 <BSP_PSENSOR_ReadPressure>
 8009694:	eef0 7a40 	vmov.f32	s15, s0
 8009698:	4b6b      	ldr	r3, [pc, #428]	; (8009848 <main+0x2d8>)
 800969a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(100);
 800969e:	2064      	movs	r0, #100	; 0x64
 80096a0:	f7f7 fc4a 	bl	8000f38 <HAL_Delay>

		memset(buffer, 0, strlen(buffer));
 80096a4:	4869      	ldr	r0, [pc, #420]	; (800984c <main+0x2dc>)
 80096a6:	f7f6 fdab 	bl	8000200 <strlen>
 80096aa:	4603      	mov	r3, r0
 80096ac:	461a      	mov	r2, r3
 80096ae:	2100      	movs	r1, #0
 80096b0:	4866      	ldr	r0, [pc, #408]	; (800984c <main+0x2dc>)
 80096b2:	f001 f968 	bl	800a986 <memset>
		switch (mode) {
 80096b6:	4b66      	ldr	r3, [pc, #408]	; (8009850 <main+0x2e0>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b03      	cmp	r3, #3
 80096bc:	f200 808e 	bhi.w	80097dc <main+0x26c>
 80096c0:	a201      	add	r2, pc, #4	; (adr r2, 80096c8 <main+0x158>)
 80096c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c6:	bf00      	nop
 80096c8:	080096d9 	.word	0x080096d9
 80096cc:	08009711 	.word	0x08009711
 80096d0:	08009749 	.word	0x08009749
 80096d4:	08009793 	.word	0x08009793
		case 0:
			sprintf((char*) buffer, "Acceleration = [%d, %d, %d] \n\n",
					(int) acceleration[0], (int) acceleration[1],
 80096d8:	4b57      	ldr	r3, [pc, #348]	; (8009838 <main+0x2c8>)
 80096da:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf((char*) buffer, "Acceleration = [%d, %d, %d] \n\n",
 80096de:	461a      	mov	r2, r3
					(int) acceleration[0], (int) acceleration[1],
 80096e0:	4b55      	ldr	r3, [pc, #340]	; (8009838 <main+0x2c8>)
 80096e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			sprintf((char*) buffer, "Acceleration = [%d, %d, %d] \n\n",
 80096e6:	4619      	mov	r1, r3
					(int) acceleration[2]);
 80096e8:	4b53      	ldr	r3, [pc, #332]	; (8009838 <main+0x2c8>)
 80096ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			sprintf((char*) buffer, "Acceleration = [%d, %d, %d] \n\n",
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	460b      	mov	r3, r1
 80096f2:	4958      	ldr	r1, [pc, #352]	; (8009854 <main+0x2e4>)
 80096f4:	4855      	ldr	r0, [pc, #340]	; (800984c <main+0x2dc>)
 80096f6:	f001 f94f 	bl	800a998 <siprintf>
			HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 5);
 80096fa:	4854      	ldr	r0, [pc, #336]	; (800984c <main+0x2dc>)
 80096fc:	f7f6 fd80 	bl	8000200 <strlen>
 8009700:	4603      	mov	r3, r0
 8009702:	b29a      	uxth	r2, r3
 8009704:	2305      	movs	r3, #5
 8009706:	4951      	ldr	r1, [pc, #324]	; (800984c <main+0x2dc>)
 8009708:	4853      	ldr	r0, [pc, #332]	; (8009858 <main+0x2e8>)
 800970a:	f7fa ff4d 	bl	80045a8 <HAL_UART_Transmit>
			break;
 800970e:	e07a      	b.n	8009806 <main+0x296>
		case 1:
			sprintf((char*) buffer, "Magnetometer = [%d, %d, %d]\n",
					(int) magneto[0], (int) magneto[1], (int) magneto[2]);
 8009710:	4b4b      	ldr	r3, [pc, #300]	; (8009840 <main+0x2d0>)
 8009712:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf((char*) buffer, "Magnetometer = [%d, %d, %d]\n",
 8009716:	461a      	mov	r2, r3
					(int) magneto[0], (int) magneto[1], (int) magneto[2]);
 8009718:	4b49      	ldr	r3, [pc, #292]	; (8009840 <main+0x2d0>)
 800971a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			sprintf((char*) buffer, "Magnetometer = [%d, %d, %d]\n",
 800971e:	4619      	mov	r1, r3
					(int) magneto[0], (int) magneto[1], (int) magneto[2]);
 8009720:	4b47      	ldr	r3, [pc, #284]	; (8009840 <main+0x2d0>)
 8009722:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			sprintf((char*) buffer, "Magnetometer = [%d, %d, %d]\n",
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	460b      	mov	r3, r1
 800972a:	494c      	ldr	r1, [pc, #304]	; (800985c <main+0x2ec>)
 800972c:	4847      	ldr	r0, [pc, #284]	; (800984c <main+0x2dc>)
 800972e:	f001 f933 	bl	800a998 <siprintf>
			HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 5);
 8009732:	4846      	ldr	r0, [pc, #280]	; (800984c <main+0x2dc>)
 8009734:	f7f6 fd64 	bl	8000200 <strlen>
 8009738:	4603      	mov	r3, r0
 800973a:	b29a      	uxth	r2, r3
 800973c:	2305      	movs	r3, #5
 800973e:	4943      	ldr	r1, [pc, #268]	; (800984c <main+0x2dc>)
 8009740:	4845      	ldr	r0, [pc, #276]	; (8009858 <main+0x2e8>)
 8009742:	f7fa ff31 	bl	80045a8 <HAL_UART_Transmit>
			break;
 8009746:	e05e      	b.n	8009806 <main+0x296>
		case 2:
			sprintf((char*) buffer, "Angular Acceleration = [%d, %d, %d]\n",
					(int) (gyro[0]), (int) (gyro[1]), (int) (gyro[2]));
 8009748:	4b3e      	ldr	r3, [pc, #248]	; (8009844 <main+0x2d4>)
 800974a:	edd3 7a00 	vldr	s15, [r3]
			sprintf((char*) buffer, "Angular Acceleration = [%d, %d, %d]\n",
 800974e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
					(int) (gyro[0]), (int) (gyro[1]), (int) (gyro[2]));
 8009752:	4b3c      	ldr	r3, [pc, #240]	; (8009844 <main+0x2d4>)
 8009754:	edd3 7a01 	vldr	s15, [r3, #4]
			sprintf((char*) buffer, "Angular Acceleration = [%d, %d, %d]\n",
 8009758:	eefd 6ae7 	vcvt.s32.f32	s13, s15
					(int) (gyro[0]), (int) (gyro[1]), (int) (gyro[2]));
 800975c:	4b39      	ldr	r3, [pc, #228]	; (8009844 <main+0x2d4>)
 800975e:	edd3 7a02 	vldr	s15, [r3, #8]
			sprintf((char*) buffer, "Angular Acceleration = [%d, %d, %d]\n",
 8009762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009766:	ee17 3a90 	vmov	r3, s15
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	ee16 3a90 	vmov	r3, s13
 8009770:	ee17 2a10 	vmov	r2, s14
 8009774:	493a      	ldr	r1, [pc, #232]	; (8009860 <main+0x2f0>)
 8009776:	4835      	ldr	r0, [pc, #212]	; (800984c <main+0x2dc>)
 8009778:	f001 f90e 	bl	800a998 <siprintf>
			HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 5);
 800977c:	4833      	ldr	r0, [pc, #204]	; (800984c <main+0x2dc>)
 800977e:	f7f6 fd3f 	bl	8000200 <strlen>
 8009782:	4603      	mov	r3, r0
 8009784:	b29a      	uxth	r2, r3
 8009786:	2305      	movs	r3, #5
 8009788:	4930      	ldr	r1, [pc, #192]	; (800984c <main+0x2dc>)
 800978a:	4833      	ldr	r0, [pc, #204]	; (8009858 <main+0x2e8>)
 800978c:	f7fa ff0c 	bl	80045a8 <HAL_UART_Transmit>
			break;
 8009790:	e039      	b.n	8009806 <main+0x296>
		case 3:
			sprintf((char*) buffer,
 8009792:	4b2d      	ldr	r3, [pc, #180]	; (8009848 <main+0x2d8>)
 8009794:	edd3 7a00 	vldr	s15, [r3]
 8009798:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800979c:	4b27      	ldr	r3, [pc, #156]	; (800983c <main+0x2cc>)
 800979e:	edd3 7a00 	vldr	s15, [r3]
 80097a2:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80097a6:	4b2f      	ldr	r3, [pc, #188]	; (8009864 <main+0x2f4>)
 80097a8:	edd3 7a00 	vldr	s15, [r3]
 80097ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097b0:	ee17 3a90 	vmov	r3, s15
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	ee16 3a90 	vmov	r3, s13
 80097ba:	ee17 2a10 	vmov	r2, s14
 80097be:	492a      	ldr	r1, [pc, #168]	; (8009868 <main+0x2f8>)
 80097c0:	4822      	ldr	r0, [pc, #136]	; (800984c <main+0x2dc>)
 80097c2:	f001 f8e9 	bl	800a998 <siprintf>
					"Pressure = %d\n, Humidity = %d\n, Temperature = %d\n",
					(int) pressure, (int) humidity, (int) temperature);
			HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 5);
 80097c6:	4821      	ldr	r0, [pc, #132]	; (800984c <main+0x2dc>)
 80097c8:	f7f6 fd1a 	bl	8000200 <strlen>
 80097cc:	4603      	mov	r3, r0
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	2305      	movs	r3, #5
 80097d2:	491e      	ldr	r1, [pc, #120]	; (800984c <main+0x2dc>)
 80097d4:	4820      	ldr	r0, [pc, #128]	; (8009858 <main+0x2e8>)
 80097d6:	f7fa fee7 	bl	80045a8 <HAL_UART_Transmit>
			break;
 80097da:	e014      	b.n	8009806 <main+0x296>
		default:
			sprintf((char*) buffer, "Humidity = %d\n", (int) humidity);
 80097dc:	4b17      	ldr	r3, [pc, #92]	; (800983c <main+0x2cc>)
 80097de:	edd3 7a00 	vldr	s15, [r3]
 80097e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097e6:	ee17 2a90 	vmov	r2, s15
 80097ea:	4920      	ldr	r1, [pc, #128]	; (800986c <main+0x2fc>)
 80097ec:	4817      	ldr	r0, [pc, #92]	; (800984c <main+0x2dc>)
 80097ee:	f001 f8d3 	bl	800a998 <siprintf>
			HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 5);
 80097f2:	4816      	ldr	r0, [pc, #88]	; (800984c <main+0x2dc>)
 80097f4:	f7f6 fd04 	bl	8000200 <strlen>
 80097f8:	4603      	mov	r3, r0
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	2305      	movs	r3, #5
 80097fe:	4913      	ldr	r1, [pc, #76]	; (800984c <main+0x2dc>)
 8009800:	4815      	ldr	r0, [pc, #84]	; (8009858 <main+0x2e8>)
 8009802:	f7fa fed1 	bl	80045a8 <HAL_UART_Transmit>
		BSP_ACCELERO_AccGetXYZ(acceleration);
 8009806:	e733      	b.n	8009670 <main+0x100>
 8009808:	200017b0 	.word	0x200017b0
 800980c:	20001808 	.word	0x20001808
 8009810:	08009f05 	.word	0x08009f05
 8009814:	200017ac 	.word	0x200017ac
 8009818:	0800c3d8 	.word	0x0800c3d8
 800981c:	20001674 	.word	0x20001674
 8009820:	0800c3f0 	.word	0x0800c3f0
 8009824:	200017a8 	.word	0x200017a8
 8009828:	0800c418 	.word	0x0800c418
 800982c:	200016dc 	.word	0x200016dc
 8009830:	0800c43c 	.word	0x0800c43c
 8009834:	200017fc 	.word	0x200017fc
 8009838:	20001800 	.word	0x20001800
 800983c:	200016cc 	.word	0x200016cc
 8009840:	2000166c 	.word	0x2000166c
 8009844:	200016d0 	.word	0x200016d0
 8009848:	200016c8 	.word	0x200016c8
 800984c:	2000176c 	.word	0x2000176c
 8009850:	20001600 	.word	0x20001600
 8009854:	0800c32c 	.word	0x0800c32c
 8009858:	200016e0 	.word	0x200016e0
 800985c:	0800c34c 	.word	0x0800c34c
 8009860:	0800c36c 	.word	0x0800c36c
 8009864:	200016c4 	.word	0x200016c4
 8009868:	0800c394 	.word	0x0800c394
 800986c:	0800c3c8 	.word	0x0800c3c8

08009870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b0bc      	sub	sp, #240	; 0xf0
 8009874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009876:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800987a:	2244      	movs	r2, #68	; 0x44
 800987c:	2100      	movs	r1, #0
 800987e:	4618      	mov	r0, r3
 8009880:	f001 f881 	bl	800a986 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009884:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009888:	2200      	movs	r2, #0
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	605a      	str	r2, [r3, #4]
 800988e:	609a      	str	r2, [r3, #8]
 8009890:	60da      	str	r2, [r3, #12]
 8009892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009894:	1d3b      	adds	r3, r7, #4
 8009896:	2294      	movs	r2, #148	; 0x94
 8009898:	2100      	movs	r1, #0
 800989a:	4618      	mov	r0, r3
 800989c:	f001 f873 	bl	800a986 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80098a0:	2000      	movs	r0, #0
 80098a2:	f7f8 fcdb 	bl	800225c <HAL_PWREx_ControlVoltageScaling>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d001      	beq.n	80098b0 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80098ac:	f000 fb52 	bl	8009f54 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80098b0:	2310      	movs	r3, #16
 80098b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80098b6:	2301      	movs	r3, #1
 80098b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80098bc:	2300      	movs	r3, #0
 80098be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80098c2:	2360      	movs	r3, #96	; 0x60
 80098c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80098c8:	2302      	movs	r3, #2
 80098ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80098ce:	2301      	movs	r3, #1
 80098d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80098d4:	2301      	movs	r3, #1
 80098d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 80098da:	233c      	movs	r3, #60	; 0x3c
 80098dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80098e0:	2302      	movs	r3, #2
 80098e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80098e6:	2302      	movs	r3, #2
 80098e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80098ec:	2302      	movs	r3, #2
 80098ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80098f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7f8 fd54 	bl	80023a4 <HAL_RCC_OscConfig>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d001      	beq.n	8009906 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8009902:	f000 fb27 	bl	8009f54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009906:	230f      	movs	r3, #15
 8009908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800990c:	2303      	movs	r3, #3
 800990e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009912:	2300      	movs	r3, #0
 8009914:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009918:	2300      	movs	r3, #0
 800991a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800991e:	2300      	movs	r3, #0
 8009920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009924:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009928:	2105      	movs	r1, #5
 800992a:	4618      	mov	r0, r3
 800992c:	f7f9 f960 	bl	8002bf0 <HAL_RCC_ClockConfig>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d001      	beq.n	800993a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8009936:	f000 fb0d 	bl	8009f54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 800993a:	2381      	movs	r3, #129	; 0x81
 800993c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800993e:	2300      	movs	r3, #0
 8009940:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8009942:	2300      	movs	r3, #0
 8009944:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009946:	1d3b      	adds	r3, r7, #4
 8009948:	4618      	mov	r0, r3
 800994a:	f7f9 fc33 	bl	80031b4 <HAL_RCCEx_PeriphCLKConfig>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8009954:	f000 fafe 	bl	8009f54 <Error_Handler>
  }
}
 8009958:	bf00      	nop
 800995a:	37f0      	adds	r7, #240	; 0xf0
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8009964:	4b1b      	ldr	r3, [pc, #108]	; (80099d4 <MX_I2C2_Init+0x74>)
 8009966:	4a1c      	ldr	r2, [pc, #112]	; (80099d8 <MX_I2C2_Init+0x78>)
 8009968:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800996a:	4b1a      	ldr	r3, [pc, #104]	; (80099d4 <MX_I2C2_Init+0x74>)
 800996c:	4a1b      	ldr	r2, [pc, #108]	; (80099dc <MX_I2C2_Init+0x7c>)
 800996e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8009970:	4b18      	ldr	r3, [pc, #96]	; (80099d4 <MX_I2C2_Init+0x74>)
 8009972:	2200      	movs	r2, #0
 8009974:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009976:	4b17      	ldr	r3, [pc, #92]	; (80099d4 <MX_I2C2_Init+0x74>)
 8009978:	2201      	movs	r2, #1
 800997a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800997c:	4b15      	ldr	r3, [pc, #84]	; (80099d4 <MX_I2C2_Init+0x74>)
 800997e:	2200      	movs	r2, #0
 8009980:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8009982:	4b14      	ldr	r3, [pc, #80]	; (80099d4 <MX_I2C2_Init+0x74>)
 8009984:	2200      	movs	r2, #0
 8009986:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009988:	4b12      	ldr	r3, [pc, #72]	; (80099d4 <MX_I2C2_Init+0x74>)
 800998a:	2200      	movs	r2, #0
 800998c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800998e:	4b11      	ldr	r3, [pc, #68]	; (80099d4 <MX_I2C2_Init+0x74>)
 8009990:	2200      	movs	r2, #0
 8009992:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009994:	4b0f      	ldr	r3, [pc, #60]	; (80099d4 <MX_I2C2_Init+0x74>)
 8009996:	2200      	movs	r2, #0
 8009998:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800999a:	480e      	ldr	r0, [pc, #56]	; (80099d4 <MX_I2C2_Init+0x74>)
 800999c:	f7f7 fe9e 	bl	80016dc <HAL_I2C_Init>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d001      	beq.n	80099aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80099a6:	f000 fad5 	bl	8009f54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80099aa:	2100      	movs	r1, #0
 80099ac:	4809      	ldr	r0, [pc, #36]	; (80099d4 <MX_I2C2_Init+0x74>)
 80099ae:	f7f8 fb9d 	bl	80020ec <HAL_I2CEx_ConfigAnalogFilter>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d001      	beq.n	80099bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80099b8:	f000 facc 	bl	8009f54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80099bc:	2100      	movs	r1, #0
 80099be:	4805      	ldr	r0, [pc, #20]	; (80099d4 <MX_I2C2_Init+0x74>)
 80099c0:	f7f8 fbdf 	bl	8002182 <HAL_I2CEx_ConfigDigitalFilter>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80099ca:	f000 fac3 	bl	8009f54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80099ce:	bf00      	nop
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20001678 	.word	0x20001678
 80099d8:	40005800 	.word	0x40005800
 80099dc:	307075b1 	.word	0x307075b1

080099e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80099e6:	f107 0310 	add.w	r3, r7, #16
 80099ea:	2200      	movs	r2, #0
 80099ec:	601a      	str	r2, [r3, #0]
 80099ee:	605a      	str	r2, [r3, #4]
 80099f0:	609a      	str	r2, [r3, #8]
 80099f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80099f4:	1d3b      	adds	r3, r7, #4
 80099f6:	2200      	movs	r2, #0
 80099f8:	601a      	str	r2, [r3, #0]
 80099fa:	605a      	str	r2, [r3, #4]
 80099fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80099fe:	4b1e      	ldr	r3, [pc, #120]	; (8009a78 <MX_TIM2_Init+0x98>)
 8009a00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009a04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12000;
 8009a06:	4b1c      	ldr	r3, [pc, #112]	; (8009a78 <MX_TIM2_Init+0x98>)
 8009a08:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8009a0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a0e:	4b1a      	ldr	r3, [pc, #104]	; (8009a78 <MX_TIM2_Init+0x98>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8009a14:	4b18      	ldr	r3, [pc, #96]	; (8009a78 <MX_TIM2_Init+0x98>)
 8009a16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a1c:	4b16      	ldr	r3, [pc, #88]	; (8009a78 <MX_TIM2_Init+0x98>)
 8009a1e:	2200      	movs	r2, #0
 8009a20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a22:	4b15      	ldr	r3, [pc, #84]	; (8009a78 <MX_TIM2_Init+0x98>)
 8009a24:	2200      	movs	r2, #0
 8009a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009a28:	4813      	ldr	r0, [pc, #76]	; (8009a78 <MX_TIM2_Init+0x98>)
 8009a2a:	f7fa f8cb 	bl	8003bc4 <HAL_TIM_Base_Init>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8009a34:	f000 fa8e 	bl	8009f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009a3e:	f107 0310 	add.w	r3, r7, #16
 8009a42:	4619      	mov	r1, r3
 8009a44:	480c      	ldr	r0, [pc, #48]	; (8009a78 <MX_TIM2_Init+0x98>)
 8009a46:	f7fa faa4 	bl	8003f92 <HAL_TIM_ConfigClockSource>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d001      	beq.n	8009a54 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8009a50:	f000 fa80 	bl	8009f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a54:	2300      	movs	r3, #0
 8009a56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009a5c:	1d3b      	adds	r3, r7, #4
 8009a5e:	4619      	mov	r1, r3
 8009a60:	4805      	ldr	r0, [pc, #20]	; (8009a78 <MX_TIM2_Init+0x98>)
 8009a62:	f7fa fcab 	bl	80043bc <HAL_TIMEx_MasterConfigSynchronization>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8009a6c:	f000 fa72 	bl	8009f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009a70:	bf00      	nop
 8009a72:	3720      	adds	r7, #32
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	200017b0 	.word	0x200017b0

08009a7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009a80:	4b22      	ldr	r3, [pc, #136]	; (8009b0c <MX_USART1_UART_Init+0x90>)
 8009a82:	4a23      	ldr	r2, [pc, #140]	; (8009b10 <MX_USART1_UART_Init+0x94>)
 8009a84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009a86:	4b21      	ldr	r3, [pc, #132]	; (8009b0c <MX_USART1_UART_Init+0x90>)
 8009a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009a8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009a8e:	4b1f      	ldr	r3, [pc, #124]	; (8009b0c <MX_USART1_UART_Init+0x90>)
 8009a90:	2200      	movs	r2, #0
 8009a92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009a94:	4b1d      	ldr	r3, [pc, #116]	; (8009b0c <MX_USART1_UART_Init+0x90>)
 8009a96:	2200      	movs	r2, #0
 8009a98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009a9a:	4b1c      	ldr	r3, [pc, #112]	; (8009b0c <MX_USART1_UART_Init+0x90>)
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009aa0:	4b1a      	ldr	r3, [pc, #104]	; (8009b0c <MX_USART1_UART_Init+0x90>)
 8009aa2:	220c      	movs	r2, #12
 8009aa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009aa6:	4b19      	ldr	r3, [pc, #100]	; (8009b0c <MX_USART1_UART_Init+0x90>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009aac:	4b17      	ldr	r3, [pc, #92]	; (8009b0c <MX_USART1_UART_Init+0x90>)
 8009aae:	2200      	movs	r2, #0
 8009ab0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009ab2:	4b16      	ldr	r3, [pc, #88]	; (8009b0c <MX_USART1_UART_Init+0x90>)
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009ab8:	4b14      	ldr	r3, [pc, #80]	; (8009b0c <MX_USART1_UART_Init+0x90>)
 8009aba:	2200      	movs	r2, #0
 8009abc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009abe:	4b13      	ldr	r3, [pc, #76]	; (8009b0c <MX_USART1_UART_Init+0x90>)
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009ac4:	4811      	ldr	r0, [pc, #68]	; (8009b0c <MX_USART1_UART_Init+0x90>)
 8009ac6:	f7fa fd1f 	bl	8004508 <HAL_UART_Init>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8009ad0:	f000 fa40 	bl	8009f54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	480d      	ldr	r0, [pc, #52]	; (8009b0c <MX_USART1_UART_Init+0x90>)
 8009ad8:	f7fb fa73 	bl	8004fc2 <HAL_UARTEx_SetTxFifoThreshold>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d001      	beq.n	8009ae6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8009ae2:	f000 fa37 	bl	8009f54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	4808      	ldr	r0, [pc, #32]	; (8009b0c <MX_USART1_UART_Init+0x90>)
 8009aea:	f7fb faa8 	bl	800503e <HAL_UARTEx_SetRxFifoThreshold>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d001      	beq.n	8009af8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8009af4:	f000 fa2e 	bl	8009f54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8009af8:	4804      	ldr	r0, [pc, #16]	; (8009b0c <MX_USART1_UART_Init+0x90>)
 8009afa:	f7fb fa29 	bl	8004f50 <HAL_UARTEx_DisableFifoMode>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8009b04:	f000 fa26 	bl	8009f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009b08:	bf00      	nop
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	200016e0 	.word	0x200016e0
 8009b10:	40013800 	.word	0x40013800

08009b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b08a      	sub	sp, #40	; 0x28
 8009b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b1a:	f107 0314 	add.w	r3, r7, #20
 8009b1e:	2200      	movs	r2, #0
 8009b20:	601a      	str	r2, [r3, #0]
 8009b22:	605a      	str	r2, [r3, #4]
 8009b24:	609a      	str	r2, [r3, #8]
 8009b26:	60da      	str	r2, [r3, #12]
 8009b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009b2a:	4b38      	ldr	r3, [pc, #224]	; (8009c0c <MX_GPIO_Init+0xf8>)
 8009b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b2e:	4a37      	ldr	r2, [pc, #220]	; (8009c0c <MX_GPIO_Init+0xf8>)
 8009b30:	f043 0310 	orr.w	r3, r3, #16
 8009b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b36:	4b35      	ldr	r3, [pc, #212]	; (8009c0c <MX_GPIO_Init+0xf8>)
 8009b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b3a:	f003 0310 	and.w	r3, r3, #16
 8009b3e:	613b      	str	r3, [r7, #16]
 8009b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009b42:	4b32      	ldr	r3, [pc, #200]	; (8009c0c <MX_GPIO_Init+0xf8>)
 8009b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b46:	4a31      	ldr	r2, [pc, #196]	; (8009c0c <MX_GPIO_Init+0xf8>)
 8009b48:	f043 0304 	orr.w	r3, r3, #4
 8009b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b4e:	4b2f      	ldr	r3, [pc, #188]	; (8009c0c <MX_GPIO_Init+0xf8>)
 8009b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b52:	f003 0304 	and.w	r3, r3, #4
 8009b56:	60fb      	str	r3, [r7, #12]
 8009b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b5a:	4b2c      	ldr	r3, [pc, #176]	; (8009c0c <MX_GPIO_Init+0xf8>)
 8009b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b5e:	4a2b      	ldr	r2, [pc, #172]	; (8009c0c <MX_GPIO_Init+0xf8>)
 8009b60:	f043 0302 	orr.w	r3, r3, #2
 8009b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b66:	4b29      	ldr	r3, [pc, #164]	; (8009c0c <MX_GPIO_Init+0xf8>)
 8009b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b6a:	f003 0302 	and.w	r3, r3, #2
 8009b6e:	60bb      	str	r3, [r7, #8]
 8009b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b72:	4b26      	ldr	r3, [pc, #152]	; (8009c0c <MX_GPIO_Init+0xf8>)
 8009b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b76:	4a25      	ldr	r2, [pc, #148]	; (8009c0c <MX_GPIO_Init+0xf8>)
 8009b78:	f043 0301 	orr.w	r3, r3, #1
 8009b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b7e:	4b23      	ldr	r3, [pc, #140]	; (8009c0c <MX_GPIO_Init+0xf8>)
 8009b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b82:	f003 0301 	and.w	r3, r3, #1
 8009b86:	607b      	str	r3, [r7, #4]
 8009b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	2108      	movs	r1, #8
 8009b8e:	4820      	ldr	r0, [pc, #128]	; (8009c10 <MX_GPIO_Init+0xfc>)
 8009b90:	f7f7 fd5a 	bl	8001648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8009b94:	2200      	movs	r2, #0
 8009b96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009b9a:	481e      	ldr	r0, [pc, #120]	; (8009c14 <MX_GPIO_Init+0x100>)
 8009b9c:	f7f7 fd54 	bl	8001648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8009ba0:	2308      	movs	r3, #8
 8009ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bac:	2300      	movs	r3, #0
 8009bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8009bb0:	f107 0314 	add.w	r3, r7, #20
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	4816      	ldr	r0, [pc, #88]	; (8009c10 <MX_GPIO_Init+0xfc>)
 8009bb8:	f7f7 fac2 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8009bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009bc2:	4b15      	ldr	r3, [pc, #84]	; (8009c18 <MX_GPIO_Init+0x104>)
 8009bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8009bca:	f107 0314 	add.w	r3, r7, #20
 8009bce:	4619      	mov	r1, r3
 8009bd0:	4812      	ldr	r0, [pc, #72]	; (8009c1c <MX_GPIO_Init+0x108>)
 8009bd2:	f7f7 fab5 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8009bd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009be0:	2300      	movs	r3, #0
 8009be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009be4:	2300      	movs	r3, #0
 8009be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8009be8:	f107 0314 	add.w	r3, r7, #20
 8009bec:	4619      	mov	r1, r3
 8009bee:	4809      	ldr	r0, [pc, #36]	; (8009c14 <MX_GPIO_Init+0x100>)
 8009bf0:	f7f7 faa6 	bl	8001140 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	2105      	movs	r1, #5
 8009bf8:	2028      	movs	r0, #40	; 0x28
 8009bfa:	f7f7 fa77 	bl	80010ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009bfe:	2028      	movs	r0, #40	; 0x28
 8009c00:	f7f7 fa90 	bl	8001124 <HAL_NVIC_EnableIRQ>

}
 8009c04:	bf00      	nop
 8009c06:	3728      	adds	r7, #40	; 0x28
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	40021000 	.word	0x40021000
 8009c10:	48001000 	.word	0x48001000
 8009c14:	48000400 	.word	0x48000400
 8009c18:	10110000 	.word	0x10110000
 8009c1c:	48000800 	.word	0x48000800

08009c20 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {// detect when the button is pressed
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	4603      	mov	r3, r0
 8009c28:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_BUTTON_Pin) {
 8009c2a:	88fb      	ldrh	r3, [r7, #6]
 8009c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c30:	d10a      	bne.n	8009c48 <HAL_GPIO_EXTI_Callback+0x28>
		osSignalSet (listenHandle, 0x0002);
 8009c32:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <HAL_GPIO_EXTI_Callback+0x30>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2102      	movs	r1, #2
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7fb fb6d 	bl	8005318 <osSignalSet>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8009c3e:	2200      	movs	r2, #0
 8009c40:	2108      	movs	r1, #8
 8009c42:	4804      	ldr	r0, [pc, #16]	; (8009c54 <HAL_GPIO_EXTI_Callback+0x34>)
 8009c44:	f7f7 fd00 	bl	8001648 <HAL_GPIO_WritePin>
	}
}
 8009c48:	bf00      	nop
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	200017fc 	.word	0x200017fc
 8009c54:	48001000 	.word	0x48001000

08009c58 <StartMeasureTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMeasureTask */
void StartMeasureTask(void const * argument)
{
 8009c58:	b590      	push	{r4, r7, lr}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af02      	add	r7, sp, #8
 8009c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(fmin(pow(10, mode + 1), 2500));
 8009c60:	4b73      	ldr	r3, [pc, #460]	; (8009e30 <StartMeasureTask+0x1d8>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	3301      	adds	r3, #1
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7f6 fc74 	bl	8000554 <__aeabi_i2d>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	460c      	mov	r4, r1
 8009c70:	ec44 3b11 	vmov	d1, r3, r4
 8009c74:	ed9f 0b6a 	vldr	d0, [pc, #424]	; 8009e20 <StartMeasureTask+0x1c8>
 8009c78:	f001 fade 	bl	800b238 <pow>
 8009c7c:	eeb0 7a40 	vmov.f32	s14, s0
 8009c80:	eef0 7a60 	vmov.f32	s15, s1
 8009c84:	ed9f 1b68 	vldr	d1, [pc, #416]	; 8009e28 <StartMeasureTask+0x1d0>
 8009c88:	eeb0 0a47 	vmov.f32	s0, s14
 8009c8c:	eef0 0a67 	vmov.f32	s1, s15
 8009c90:	f001 fa7e 	bl	800b190 <fmin>
 8009c94:	ec54 3b10 	vmov	r3, r4, d0
 8009c98:	4618      	mov	r0, r3
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	f7f6 ff74 	bl	8000b88 <__aeabi_d2uiz>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fb faef 	bl	8005286 <osDelay>
#ifdef USE_SIGNAL
		if (osThreadSuspend(transmitHandle) != osOK){
			Error_Handler();
		}
#else
		osMutexWait (consoleMutexHandle, osWaitForever);
 8009ca8:	4b62      	ldr	r3, [pc, #392]	; (8009e34 <StartMeasureTask+0x1dc>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f04f 31ff 	mov.w	r1, #4294967295
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fb fbd5 	bl	8005460 <osMutexWait>
#endif
		memset(buffer, 0, strlen(buffer));
 8009cb6:	4860      	ldr	r0, [pc, #384]	; (8009e38 <StartMeasureTask+0x1e0>)
 8009cb8:	f7f6 faa2 	bl	8000200 <strlen>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	485d      	ldr	r0, [pc, #372]	; (8009e38 <StartMeasureTask+0x1e0>)
 8009cc4:	f000 fe5f 	bl	800a986 <memset>
		switch (mode) {
 8009cc8:	4b59      	ldr	r3, [pc, #356]	; (8009e30 <StartMeasureTask+0x1d8>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2b03      	cmp	r3, #3
 8009cce:	f200 8083 	bhi.w	8009dd8 <StartMeasureTask+0x180>
 8009cd2:	a201      	add	r2, pc, #4	; (adr r2, 8009cd8 <StartMeasureTask+0x80>)
 8009cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd8:	08009ce9 	.word	0x08009ce9
 8009cdc:	08009d13 	.word	0x08009d13
 8009ce0:	08009d3d 	.word	0x08009d3d
 8009ce4:	08009d79 	.word	0x08009d79
		case 0:
			BSP_ACCELERO_AccGetXYZ(acceleration);
 8009ce8:	4854      	ldr	r0, [pc, #336]	; (8009e3c <StartMeasureTask+0x1e4>)
 8009cea:	f000 fac5 	bl	800a278 <BSP_ACCELERO_AccGetXYZ>
			sprintf((char*) buffer, "Acceleration = [%d, %d, %d] \n\n",
					(int) acceleration[0], (int) acceleration[1],
 8009cee:	4b53      	ldr	r3, [pc, #332]	; (8009e3c <StartMeasureTask+0x1e4>)
 8009cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf((char*) buffer, "Acceleration = [%d, %d, %d] \n\n",
 8009cf4:	461a      	mov	r2, r3
					(int) acceleration[0], (int) acceleration[1],
 8009cf6:	4b51      	ldr	r3, [pc, #324]	; (8009e3c <StartMeasureTask+0x1e4>)
 8009cf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			sprintf((char*) buffer, "Acceleration = [%d, %d, %d] \n\n",
 8009cfc:	4619      	mov	r1, r3
					(int) acceleration[2]);
 8009cfe:	4b4f      	ldr	r3, [pc, #316]	; (8009e3c <StartMeasureTask+0x1e4>)
 8009d00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			sprintf((char*) buffer, "Acceleration = [%d, %d, %d] \n\n",
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	460b      	mov	r3, r1
 8009d08:	494d      	ldr	r1, [pc, #308]	; (8009e40 <StartMeasureTask+0x1e8>)
 8009d0a:	484b      	ldr	r0, [pc, #300]	; (8009e38 <StartMeasureTask+0x1e0>)
 8009d0c:	f000 fe44 	bl	800a998 <siprintf>
			break;
 8009d10:	e074      	b.n	8009dfc <StartMeasureTask+0x1a4>
		case 1:
			BSP_MAGNETO_GetXYZ(magneto);
 8009d12:	484c      	ldr	r0, [pc, #304]	; (8009e44 <StartMeasureTask+0x1ec>)
 8009d14:	f000 fb7c 	bl	800a410 <BSP_MAGNETO_GetXYZ>
			sprintf((char*) buffer, "Magnetometer = [%d, %d, %d]\n",
					(int) magneto[0], (int) magneto[1], (int) magneto[2]);
 8009d18:	4b4a      	ldr	r3, [pc, #296]	; (8009e44 <StartMeasureTask+0x1ec>)
 8009d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf((char*) buffer, "Magnetometer = [%d, %d, %d]\n",
 8009d1e:	461a      	mov	r2, r3
					(int) magneto[0], (int) magneto[1], (int) magneto[2]);
 8009d20:	4b48      	ldr	r3, [pc, #288]	; (8009e44 <StartMeasureTask+0x1ec>)
 8009d22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			sprintf((char*) buffer, "Magnetometer = [%d, %d, %d]\n",
 8009d26:	4619      	mov	r1, r3
					(int) magneto[0], (int) magneto[1], (int) magneto[2]);
 8009d28:	4b46      	ldr	r3, [pc, #280]	; (8009e44 <StartMeasureTask+0x1ec>)
 8009d2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			sprintf((char*) buffer, "Magnetometer = [%d, %d, %d]\n",
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	460b      	mov	r3, r1
 8009d32:	4945      	ldr	r1, [pc, #276]	; (8009e48 <StartMeasureTask+0x1f0>)
 8009d34:	4840      	ldr	r0, [pc, #256]	; (8009e38 <StartMeasureTask+0x1e0>)
 8009d36:	f000 fe2f 	bl	800a998 <siprintf>
			break;
 8009d3a:	e05f      	b.n	8009dfc <StartMeasureTask+0x1a4>
		case 2:
			BSP_GYRO_GetXYZ(gyro);
 8009d3c:	4843      	ldr	r0, [pc, #268]	; (8009e4c <StartMeasureTask+0x1f4>)
 8009d3e:	f000 faf5 	bl	800a32c <BSP_GYRO_GetXYZ>
			sprintf((char*) buffer, "Angular Acceleration = [%d, %d, %d]\n",
					(int) (gyro[0]), (int) (gyro[1]), (int) (gyro[2]));
 8009d42:	4b42      	ldr	r3, [pc, #264]	; (8009e4c <StartMeasureTask+0x1f4>)
 8009d44:	edd3 7a00 	vldr	s15, [r3]
			sprintf((char*) buffer, "Angular Acceleration = [%d, %d, %d]\n",
 8009d48:	eebd 7ae7 	vcvt.s32.f32	s14, s15
					(int) (gyro[0]), (int) (gyro[1]), (int) (gyro[2]));
 8009d4c:	4b3f      	ldr	r3, [pc, #252]	; (8009e4c <StartMeasureTask+0x1f4>)
 8009d4e:	edd3 7a01 	vldr	s15, [r3, #4]
			sprintf((char*) buffer, "Angular Acceleration = [%d, %d, %d]\n",
 8009d52:	eefd 6ae7 	vcvt.s32.f32	s13, s15
					(int) (gyro[0]), (int) (gyro[1]), (int) (gyro[2]));
 8009d56:	4b3d      	ldr	r3, [pc, #244]	; (8009e4c <StartMeasureTask+0x1f4>)
 8009d58:	edd3 7a02 	vldr	s15, [r3, #8]
			sprintf((char*) buffer, "Angular Acceleration = [%d, %d, %d]\n",
 8009d5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d60:	ee17 3a90 	vmov	r3, s15
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	ee16 3a90 	vmov	r3, s13
 8009d6a:	ee17 2a10 	vmov	r2, s14
 8009d6e:	4938      	ldr	r1, [pc, #224]	; (8009e50 <StartMeasureTask+0x1f8>)
 8009d70:	4831      	ldr	r0, [pc, #196]	; (8009e38 <StartMeasureTask+0x1e0>)
 8009d72:	f000 fe11 	bl	800a998 <siprintf>
			break;
 8009d76:	e041      	b.n	8009dfc <StartMeasureTask+0x1a4>
		case 3:
			humidity = BSP_HSENSOR_ReadHumidity();
 8009d78:	f000 fb10 	bl	800a39c <BSP_HSENSOR_ReadHumidity>
 8009d7c:	eef0 7a40 	vmov.f32	s15, s0
 8009d80:	4b34      	ldr	r3, [pc, #208]	; (8009e54 <StartMeasureTask+0x1fc>)
 8009d82:	edc3 7a00 	vstr	s15, [r3]
			pressure = BSP_PSENSOR_ReadPressure();
 8009d86:	f000 fb7b 	bl	800a480 <BSP_PSENSOR_ReadPressure>
 8009d8a:	eef0 7a40 	vmov.f32	s15, s0
 8009d8e:	4b32      	ldr	r3, [pc, #200]	; (8009e58 <StartMeasureTask+0x200>)
 8009d90:	edc3 7a00 	vstr	s15, [r3]
			temperature = BSP_TSENSOR_ReadTemp();
 8009d94:	f000 fb9e 	bl	800a4d4 <BSP_TSENSOR_ReadTemp>
 8009d98:	eef0 7a40 	vmov.f32	s15, s0
 8009d9c:	4b2f      	ldr	r3, [pc, #188]	; (8009e5c <StartMeasureTask+0x204>)
 8009d9e:	edc3 7a00 	vstr	s15, [r3]
			sprintf((char*) buffer,
 8009da2:	4b2d      	ldr	r3, [pc, #180]	; (8009e58 <StartMeasureTask+0x200>)
 8009da4:	edd3 7a00 	vldr	s15, [r3]
 8009da8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009dac:	4b29      	ldr	r3, [pc, #164]	; (8009e54 <StartMeasureTask+0x1fc>)
 8009dae:	edd3 7a00 	vldr	s15, [r3]
 8009db2:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8009db6:	4b29      	ldr	r3, [pc, #164]	; (8009e5c <StartMeasureTask+0x204>)
 8009db8:	edd3 7a00 	vldr	s15, [r3]
 8009dbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009dc0:	ee17 3a90 	vmov	r3, s15
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	ee16 3a90 	vmov	r3, s13
 8009dca:	ee17 2a10 	vmov	r2, s14
 8009dce:	4924      	ldr	r1, [pc, #144]	; (8009e60 <StartMeasureTask+0x208>)
 8009dd0:	4819      	ldr	r0, [pc, #100]	; (8009e38 <StartMeasureTask+0x1e0>)
 8009dd2:	f000 fde1 	bl	800a998 <siprintf>
					"Pressure = %d\n, Humidity = %d\n, Temperature = %d\n",
					(int) pressure, (int) humidity, (int) temperature);
			break;
 8009dd6:	e011      	b.n	8009dfc <StartMeasureTask+0x1a4>
		default:
			humidity = BSP_HSENSOR_ReadHumidity();
 8009dd8:	f000 fae0 	bl	800a39c <BSP_HSENSOR_ReadHumidity>
 8009ddc:	eef0 7a40 	vmov.f32	s15, s0
 8009de0:	4b1c      	ldr	r3, [pc, #112]	; (8009e54 <StartMeasureTask+0x1fc>)
 8009de2:	edc3 7a00 	vstr	s15, [r3]
			sprintf((char*) buffer, "Humidity = %d\n", (int) humidity);
 8009de6:	4b1b      	ldr	r3, [pc, #108]	; (8009e54 <StartMeasureTask+0x1fc>)
 8009de8:	edd3 7a00 	vldr	s15, [r3]
 8009dec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009df0:	ee17 2a90 	vmov	r2, s15
 8009df4:	491b      	ldr	r1, [pc, #108]	; (8009e64 <StartMeasureTask+0x20c>)
 8009df6:	4810      	ldr	r0, [pc, #64]	; (8009e38 <StartMeasureTask+0x1e0>)
 8009df8:	f000 fdce 	bl	800a998 <siprintf>
		}
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	2108      	movs	r1, #8
 8009e00:	4819      	ldr	r0, [pc, #100]	; (8009e68 <StartMeasureTask+0x210>)
 8009e02:	f7f7 fc21 	bl	8001648 <HAL_GPIO_WritePin>
#ifdef USE_SIGNAL
		//		if (osThreadResume(transmitHandle) != osOK){
		//			Error_Handler();
		//		}
#else
		osSignalSet (transmitHandle, 0x0001);
 8009e06:	4b19      	ldr	r3, [pc, #100]	; (8009e6c <StartMeasureTask+0x214>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2101      	movs	r1, #1
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7fb fa83 	bl	8005318 <osSignalSet>
		osMutexRelease (consoleMutexHandle);
 8009e12:	4b08      	ldr	r3, [pc, #32]	; (8009e34 <StartMeasureTask+0x1dc>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fb fb70 	bl	80054fc <osMutexRelease>
		osDelay(fmin(pow(10, mode + 1), 2500));
 8009e1c:	e720      	b.n	8009c60 <StartMeasureTask+0x8>
 8009e1e:	bf00      	nop
 8009e20:	00000000 	.word	0x00000000
 8009e24:	40240000 	.word	0x40240000
 8009e28:	00000000 	.word	0x00000000
 8009e2c:	40a38800 	.word	0x40a38800
 8009e30:	20001600 	.word	0x20001600
 8009e34:	20001808 	.word	0x20001808
 8009e38:	2000176c 	.word	0x2000176c
 8009e3c:	20001800 	.word	0x20001800
 8009e40:	0800c32c 	.word	0x0800c32c
 8009e44:	2000166c 	.word	0x2000166c
 8009e48:	0800c34c 	.word	0x0800c34c
 8009e4c:	200016d0 	.word	0x200016d0
 8009e50:	0800c36c 	.word	0x0800c36c
 8009e54:	200016cc 	.word	0x200016cc
 8009e58:	200016c8 	.word	0x200016c8
 8009e5c:	200016c4 	.word	0x200016c4
 8009e60:	0800c394 	.word	0x0800c394
 8009e64:	0800c3c8 	.word	0x0800c3c8
 8009e68:	48001000 	.word	0x48001000
 8009e6c:	200016dc 	.word	0x200016dc

08009e70 <StartTransmitTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTransmitTask */
void StartTransmitTask(void const * argument)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTransmitTask */
	/* Infinite loop */
	for (;;) {
		osDelay(10);
 8009e78:	200a      	movs	r0, #10
 8009e7a:	f7fb fa04 	bl	8005286 <osDelay>

#ifdef USE_SIGNAL
#else
		osSignalWait (0x0001, osWaitForever);
 8009e7e:	463b      	mov	r3, r7
 8009e80:	f04f 32ff 	mov.w	r2, #4294967295
 8009e84:	2101      	movs	r1, #1
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fb fa86 	bl	8005398 <osSignalWait>
		osMutexWait (consoleMutexHandle, osWaitForever);
 8009e8c:	4b0b      	ldr	r3, [pc, #44]	; (8009ebc <StartTransmitTask+0x4c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f04f 31ff 	mov.w	r1, #4294967295
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7fb fae3 	bl	8005460 <osMutexWait>
#endif
		HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 5);
 8009e9a:	4809      	ldr	r0, [pc, #36]	; (8009ec0 <StartTransmitTask+0x50>)
 8009e9c:	f7f6 f9b0 	bl	8000200 <strlen>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	2305      	movs	r3, #5
 8009ea6:	4906      	ldr	r1, [pc, #24]	; (8009ec0 <StartTransmitTask+0x50>)
 8009ea8:	4806      	ldr	r0, [pc, #24]	; (8009ec4 <StartTransmitTask+0x54>)
 8009eaa:	f7fa fb7d 	bl	80045a8 <HAL_UART_Transmit>
		//osSignalClear(transmitHandle, 0x0001);
		if (osThreadSuspend(transmitHandle) != osOK){
					Error_Handler();
				}
#else
		osMutexRelease (consoleMutexHandle);
 8009eae:	4b03      	ldr	r3, [pc, #12]	; (8009ebc <StartTransmitTask+0x4c>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fb fb22 	bl	80054fc <osMutexRelease>
		osDelay(10);
 8009eb8:	e7de      	b.n	8009e78 <StartTransmitTask+0x8>
 8009eba:	bf00      	nop
 8009ebc:	20001808 	.word	0x20001808
 8009ec0:	2000176c 	.word	0x2000176c
 8009ec4:	200016e0 	.word	0x200016e0

08009ec8 <StartListenTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartListenTask */
void StartListenTask(void const * argument)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b086      	sub	sp, #24
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartListenTask */
	/* Infinite loop */
	for (;;) {
		osDelay(500);
 8009ed0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009ed4:	f7fb f9d7 	bl	8005286 <osDelay>
		osSignalWait (0x0002, osWaitForever);
 8009ed8:	463b      	mov	r3, r7
 8009eda:	f04f 32ff 	mov.w	r2, #4294967295
 8009ede:	2102      	movs	r1, #2
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7fb fa59 	bl	8005398 <osSignalWait>
#ifndef USE_SIGNAL
		//osMutexWait (consoleMutexHandle, osWaitForever);
#endif
		mode = (mode + 1) % 4;
 8009ee6:	4b06      	ldr	r3, [pc, #24]	; (8009f00 <StartListenTask+0x38>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3301      	adds	r3, #1
 8009eec:	425a      	negs	r2, r3
 8009eee:	f003 0303 	and.w	r3, r3, #3
 8009ef2:	f002 0203 	and.w	r2, r2, #3
 8009ef6:	bf58      	it	pl
 8009ef8:	4253      	negpl	r3, r2
 8009efa:	4a01      	ldr	r2, [pc, #4]	; (8009f00 <StartListenTask+0x38>)
 8009efc:	6013      	str	r3, [r2, #0]
		osDelay(500);
 8009efe:	e7e7      	b.n	8009ed0 <StartListenTask+0x8>
 8009f00:	20001600 	.word	0x20001600

08009f04 <Callback01>:
  /* USER CODE END StartListenTask */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f28:	d104      	bne.n	8009f34 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8009f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009f2e:	4807      	ldr	r0, [pc, #28]	; (8009f4c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8009f30:	f7f7 fba2 	bl	8001678 <HAL_GPIO_TogglePin>
	  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a05      	ldr	r2, [pc, #20]	; (8009f50 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d101      	bne.n	8009f42 <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8009f3e:	f7f6 ffdb 	bl	8000ef8 <HAL_IncTick>
  }

  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8009f42:	bf00      	nop
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	48000400 	.word	0x48000400
 8009f50:	40001000 	.word	0x40001000

08009f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009f54:	b480      	push	{r7}
 8009f56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009f58:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8009f5a:	e7fe      	b.n	8009f5a <Error_Handler+0x6>

08009f5c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b08a      	sub	sp, #40	; 0x28
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8009f64:	4b27      	ldr	r3, [pc, #156]	; (800a004 <I2Cx_MspInit+0xa8>)
 8009f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f68:	4a26      	ldr	r2, [pc, #152]	; (800a004 <I2Cx_MspInit+0xa8>)
 8009f6a:	f043 0302 	orr.w	r3, r3, #2
 8009f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f70:	4b24      	ldr	r3, [pc, #144]	; (800a004 <I2Cx_MspInit+0xa8>)
 8009f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f74:	f003 0302 	and.w	r3, r3, #2
 8009f78:	613b      	str	r3, [r7, #16]
 8009f7a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8009f7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009f80:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8009f82:	2312      	movs	r3, #18
 8009f84:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8009f86:	2301      	movs	r3, #1
 8009f88:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8009f8e:	2304      	movs	r3, #4
 8009f90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009f92:	f107 0314 	add.w	r3, r7, #20
 8009f96:	4619      	mov	r1, r3
 8009f98:	481b      	ldr	r0, [pc, #108]	; (800a008 <I2Cx_MspInit+0xac>)
 8009f9a:	f7f7 f8d1 	bl	8001140 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009f9e:	f107 0314 	add.w	r3, r7, #20
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	4818      	ldr	r0, [pc, #96]	; (800a008 <I2Cx_MspInit+0xac>)
 8009fa6:	f7f7 f8cb 	bl	8001140 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8009faa:	4b16      	ldr	r3, [pc, #88]	; (800a004 <I2Cx_MspInit+0xa8>)
 8009fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fae:	4a15      	ldr	r2, [pc, #84]	; (800a004 <I2Cx_MspInit+0xa8>)
 8009fb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009fb4:	6593      	str	r3, [r2, #88]	; 0x58
 8009fb6:	4b13      	ldr	r3, [pc, #76]	; (800a004 <I2Cx_MspInit+0xa8>)
 8009fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fbe:	60fb      	str	r3, [r7, #12]
 8009fc0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8009fc2:	4b10      	ldr	r3, [pc, #64]	; (800a004 <I2Cx_MspInit+0xa8>)
 8009fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc6:	4a0f      	ldr	r2, [pc, #60]	; (800a004 <I2Cx_MspInit+0xa8>)
 8009fc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009fcc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8009fce:	4b0d      	ldr	r3, [pc, #52]	; (800a004 <I2Cx_MspInit+0xa8>)
 8009fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd2:	4a0c      	ldr	r2, [pc, #48]	; (800a004 <I2Cx_MspInit+0xa8>)
 8009fd4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009fd8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8009fda:	2200      	movs	r2, #0
 8009fdc:	210f      	movs	r1, #15
 8009fde:	2021      	movs	r0, #33	; 0x21
 8009fe0:	f7f7 f884 	bl	80010ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8009fe4:	2021      	movs	r0, #33	; 0x21
 8009fe6:	f7f7 f89d 	bl	8001124 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8009fea:	2200      	movs	r2, #0
 8009fec:	210f      	movs	r1, #15
 8009fee:	2022      	movs	r0, #34	; 0x22
 8009ff0:	f7f7 f87c 	bl	80010ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8009ff4:	2022      	movs	r0, #34	; 0x22
 8009ff6:	f7f7 f895 	bl	8001124 <HAL_NVIC_EnableIRQ>
}
 8009ffa:	bf00      	nop
 8009ffc:	3728      	adds	r7, #40	; 0x28
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	40021000 	.word	0x40021000
 800a008:	48000400 	.word	0x48000400

0800a00c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a12      	ldr	r2, [pc, #72]	; (800a060 <I2Cx_Init+0x54>)
 800a018:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a11      	ldr	r2, [pc, #68]	; (800a064 <I2Cx_Init+0x58>)
 800a01e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7ff ff89 	bl	8009f5c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7f7 fb46 	bl	80016dc <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800a050:	2100      	movs	r1, #0
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7f8 f84a 	bl	80020ec <HAL_I2CEx_ConfigAnalogFilter>
}
 800a058:	bf00      	nop
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	40005800 	.word	0x40005800
 800a064:	00702681 	.word	0x00702681

0800a068 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b08a      	sub	sp, #40	; 0x28
 800a06c:	af04      	add	r7, sp, #16
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	4608      	mov	r0, r1
 800a072:	4611      	mov	r1, r2
 800a074:	461a      	mov	r2, r3
 800a076:	4603      	mov	r3, r0
 800a078:	72fb      	strb	r3, [r7, #11]
 800a07a:	460b      	mov	r3, r1
 800a07c:	813b      	strh	r3, [r7, #8]
 800a07e:	4613      	mov	r3, r2
 800a080:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a082:	2300      	movs	r3, #0
 800a084:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a086:	7afb      	ldrb	r3, [r7, #11]
 800a088:	b299      	uxth	r1, r3
 800a08a:	88f8      	ldrh	r0, [r7, #6]
 800a08c:	893a      	ldrh	r2, [r7, #8]
 800a08e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a092:	9302      	str	r3, [sp, #8]
 800a094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a096:	9301      	str	r3, [sp, #4]
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	4603      	mov	r3, r0
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f7f7 fcee 	bl	8001a80 <HAL_I2C_Mem_Read>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800a0a8:	7dfb      	ldrb	r3, [r7, #23]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d004      	beq.n	800a0b8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800a0ae:	7afb      	ldrb	r3, [r7, #11]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f000 f832 	bl	800a11c <I2Cx_Error>
  }
  return status;
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b08a      	sub	sp, #40	; 0x28
 800a0c6:	af04      	add	r7, sp, #16
 800a0c8:	60f8      	str	r0, [r7, #12]
 800a0ca:	4608      	mov	r0, r1
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	72fb      	strb	r3, [r7, #11]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	813b      	strh	r3, [r7, #8]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a0e0:	7afb      	ldrb	r3, [r7, #11]
 800a0e2:	b299      	uxth	r1, r3
 800a0e4:	88f8      	ldrh	r0, [r7, #6]
 800a0e6:	893a      	ldrh	r2, [r7, #8]
 800a0e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a0ec:	9302      	str	r3, [sp, #8]
 800a0ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0f0:	9301      	str	r3, [sp, #4]
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f7f7 fbad 	bl	8001858 <HAL_I2C_Mem_Write>
 800a0fe:	4603      	mov	r3, r0
 800a100:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800a102:	7dfb      	ldrb	r3, [r7, #23]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d004      	beq.n	800a112 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800a108:	7afb      	ldrb	r3, [r7, #11]
 800a10a:	4619      	mov	r1, r3
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f000 f805 	bl	800a11c <I2Cx_Error>
  }
  return status;
 800a112:	7dfb      	ldrb	r3, [r7, #23]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3718      	adds	r7, #24
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	460b      	mov	r3, r1
 800a126:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f7f7 fb66 	bl	80017fa <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7ff ff6c 	bl	800a00c <I2Cx_Init>
}
 800a134:	bf00      	nop
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800a140:	4802      	ldr	r0, [pc, #8]	; (800a14c <SENSOR_IO_Init+0x10>)
 800a142:	f7ff ff63 	bl	800a00c <I2Cx_Init>
}
 800a146:	bf00      	nop
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	20001898 	.word	0x20001898

0800a150 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af02      	add	r7, sp, #8
 800a156:	4603      	mov	r3, r0
 800a158:	71fb      	strb	r3, [r7, #7]
 800a15a:	460b      	mov	r3, r1
 800a15c:	71bb      	strb	r3, [r7, #6]
 800a15e:	4613      	mov	r3, r2
 800a160:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800a162:	79bb      	ldrb	r3, [r7, #6]
 800a164:	b29a      	uxth	r2, r3
 800a166:	79f9      	ldrb	r1, [r7, #7]
 800a168:	2301      	movs	r3, #1
 800a16a:	9301      	str	r3, [sp, #4]
 800a16c:	1d7b      	adds	r3, r7, #5
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	2301      	movs	r3, #1
 800a172:	4803      	ldr	r0, [pc, #12]	; (800a180 <SENSOR_IO_Write+0x30>)
 800a174:	f7ff ffa5 	bl	800a0c2 <I2Cx_WriteMultiple>
}
 800a178:	bf00      	nop
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	20001898 	.word	0x20001898

0800a184 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af02      	add	r7, sp, #8
 800a18a:	4603      	mov	r3, r0
 800a18c:	460a      	mov	r2, r1
 800a18e:	71fb      	strb	r3, [r7, #7]
 800a190:	4613      	mov	r3, r2
 800a192:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800a194:	2300      	movs	r3, #0
 800a196:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800a198:	79bb      	ldrb	r3, [r7, #6]
 800a19a:	b29a      	uxth	r2, r3
 800a19c:	79f9      	ldrb	r1, [r7, #7]
 800a19e:	2301      	movs	r3, #1
 800a1a0:	9301      	str	r3, [sp, #4]
 800a1a2:	f107 030f 	add.w	r3, r7, #15
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	4804      	ldr	r0, [pc, #16]	; (800a1bc <SENSOR_IO_Read+0x38>)
 800a1ac:	f7ff ff5c 	bl	800a068 <I2Cx_ReadMultiple>

  return read_value;
 800a1b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20001898 	.word	0x20001898

0800a1c0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af02      	add	r7, sp, #8
 800a1c6:	603a      	str	r2, [r7, #0]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	71fb      	strb	r3, [r7, #7]
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	71bb      	strb	r3, [r7, #6]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800a1d6:	79bb      	ldrb	r3, [r7, #6]
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	79f9      	ldrb	r1, [r7, #7]
 800a1dc:	88bb      	ldrh	r3, [r7, #4]
 800a1de:	9301      	str	r3, [sp, #4]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	4804      	ldr	r0, [pc, #16]	; (800a1f8 <SENSOR_IO_ReadMultiple+0x38>)
 800a1e8:	f7ff ff3e 	bl	800a068 <I2Cx_ReadMultiple>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	b29b      	uxth	r3, r3
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	20001898 	.word	0x20001898

0800a1fc <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800a206:	2300      	movs	r3, #0
 800a208:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800a20a:	4b19      	ldr	r3, [pc, #100]	; (800a270 <BSP_ACCELERO_Init+0x74>)
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	4798      	blx	r3
 800a210:	4603      	mov	r3, r0
 800a212:	2b6a      	cmp	r3, #106	; 0x6a
 800a214:	d002      	beq.n	800a21c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	73fb      	strb	r3, [r7, #15]
 800a21a:	e024      	b.n	800a266 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800a21c:	4b15      	ldr	r3, [pc, #84]	; (800a274 <BSP_ACCELERO_Init+0x78>)
 800a21e:	4a14      	ldr	r2, [pc, #80]	; (800a270 <BSP_ACCELERO_Init+0x74>)
 800a220:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800a222:	2330      	movs	r3, #48	; 0x30
 800a224:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800a226:	2300      	movs	r3, #0
 800a228:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800a22a:	2300      	movs	r3, #0
 800a22c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800a22e:	2340      	movs	r3, #64	; 0x40
 800a230:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800a232:	2300      	movs	r3, #0
 800a234:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800a23a:	797a      	ldrb	r2, [r7, #5]
 800a23c:	7abb      	ldrb	r3, [r7, #10]
 800a23e:	4313      	orrs	r3, r2
 800a240:	b2db      	uxtb	r3, r3
 800a242:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800a244:	7a3b      	ldrb	r3, [r7, #8]
 800a246:	f043 0304 	orr.w	r3, r3, #4
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	021b      	lsls	r3, r3, #8
 800a24e:	b21a      	sxth	r2, r3
 800a250:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a254:	4313      	orrs	r3, r2
 800a256:	b21b      	sxth	r3, r3
 800a258:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800a25a:	4b06      	ldr	r3, [pc, #24]	; (800a274 <BSP_ACCELERO_Init+0x78>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	89ba      	ldrh	r2, [r7, #12]
 800a262:	4610      	mov	r0, r2
 800a264:	4798      	blx	r3
  }  

  return ret;
 800a266:	7bfb      	ldrb	r3, [r7, #15]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	20000068 	.word	0x20000068
 800a274:	20001604 	.word	0x20001604

0800a278 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800a280:	4b08      	ldr	r3, [pc, #32]	; (800a2a4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d009      	beq.n	800a29c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800a288:	4b06      	ldr	r3, [pc, #24]	; (800a2a4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d004      	beq.n	800a29c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800a292:	4b04      	ldr	r3, [pc, #16]	; (800a2a4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	4798      	blx	r3
    }
  }
}
 800a29c:	bf00      	nop
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	20001604 	.word	0x20001604

0800a2a8 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800a2b6:	4b1b      	ldr	r3, [pc, #108]	; (800a324 <BSP_GYRO_Init+0x7c>)
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	4798      	blx	r3
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b6a      	cmp	r3, #106	; 0x6a
 800a2c0:	d002      	beq.n	800a2c8 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	73fb      	strb	r3, [r7, #15]
 800a2c6:	e028      	b.n	800a31a <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800a2c8:	4b17      	ldr	r3, [pc, #92]	; (800a328 <BSP_GYRO_Init+0x80>)
 800a2ca:	4a16      	ldr	r2, [pc, #88]	; (800a324 <BSP_GYRO_Init+0x7c>)
 800a2cc:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800a2d2:	2330      	movs	r3, #48	; 0x30
 800a2d4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800a2de:	2340      	movs	r3, #64	; 0x40
 800a2e0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800a2e6:	230c      	movs	r3, #12
 800a2e8:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800a2ea:	7aba      	ldrb	r2, [r7, #10]
 800a2ec:	797b      	ldrb	r3, [r7, #5]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800a2f4:	7a3b      	ldrb	r3, [r7, #8]
 800a2f6:	f043 0304 	orr.w	r3, r3, #4
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	021b      	lsls	r3, r3, #8
 800a2fe:	b21a      	sxth	r2, r3
 800a300:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a304:	4313      	orrs	r3, r2
 800a306:	b21b      	sxth	r3, r3
 800a308:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800a30a:	4b07      	ldr	r3, [pc, #28]	; (800a328 <BSP_GYRO_Init+0x80>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	89ba      	ldrh	r2, [r7, #12]
 800a312:	4610      	mov	r0, r2
 800a314:	4798      	blx	r3
    
    ret = GYRO_OK;
 800a316:	2300      	movs	r3, #0
 800a318:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800a31a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	2000009c 	.word	0x2000009c
 800a328:	20001608 	.word	0x20001608

0800a32c <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 800a334:	4b08      	ldr	r3, [pc, #32]	; (800a358 <BSP_GYRO_GetXYZ+0x2c>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d009      	beq.n	800a350 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 800a33c:	4b06      	ldr	r3, [pc, #24]	; (800a358 <BSP_GYRO_GetXYZ+0x2c>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a342:	2b00      	cmp	r3, #0
 800a344:	d004      	beq.n	800a350 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800a346:	4b04      	ldr	r3, [pc, #16]	; (800a358 <BSP_GYRO_GetXYZ+0x2c>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	4798      	blx	r3
    }
  }
}
 800a350:	bf00      	nop
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	20001608 	.word	0x20001608

0800a35c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800a362:	4b0c      	ldr	r3, [pc, #48]	; (800a394 <BSP_HSENSOR_Init+0x38>)
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	20be      	movs	r0, #190	; 0xbe
 800a368:	4798      	blx	r3
 800a36a:	4603      	mov	r3, r0
 800a36c:	2bbc      	cmp	r3, #188	; 0xbc
 800a36e:	d002      	beq.n	800a376 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	607b      	str	r3, [r7, #4]
 800a374:	e009      	b.n	800a38a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800a376:	4b08      	ldr	r3, [pc, #32]	; (800a398 <BSP_HSENSOR_Init+0x3c>)
 800a378:	4a06      	ldr	r2, [pc, #24]	; (800a394 <BSP_HSENSOR_Init+0x38>)
 800a37a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800a37c:	4b06      	ldr	r3, [pc, #24]	; (800a398 <BSP_HSENSOR_Init+0x3c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	20be      	movs	r0, #190	; 0xbe
 800a384:	4798      	blx	r3
    ret = HSENSOR_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800a38a:	687b      	ldr	r3, [r7, #4]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	2000000c 	.word	0x2000000c
 800a398:	2000160c 	.word	0x2000160c

0800a39c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800a39c:	b580      	push	{r7, lr}
 800a39e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 800a3a0:	4b04      	ldr	r3, [pc, #16]	; (800a3b4 <BSP_HSENSOR_ReadHumidity+0x18>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	20be      	movs	r0, #190	; 0xbe
 800a3a8:	4798      	blx	r3
 800a3aa:	eef0 7a40 	vmov.f32	s15, s0
}
 800a3ae:	eeb0 0a67 	vmov.f32	s0, s15
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	2000160c 	.word	0x2000160c

0800a3b8 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800a3c2:	4b11      	ldr	r3, [pc, #68]	; (800a408 <BSP_MAGNETO_Init+0x50>)
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	4798      	blx	r3
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b3d      	cmp	r3, #61	; 0x3d
 800a3cc:	d002      	beq.n	800a3d4 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	71fb      	strb	r3, [r7, #7]
 800a3d2:	e013      	b.n	800a3fc <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 800a3d4:	4b0d      	ldr	r3, [pc, #52]	; (800a40c <BSP_MAGNETO_Init+0x54>)
 800a3d6:	4a0c      	ldr	r2, [pc, #48]	; (800a408 <BSP_MAGNETO_Init+0x50>)
 800a3d8:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800a3da:	2358      	movs	r3, #88	; 0x58
 800a3dc:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800a3e6:	2308      	movs	r3, #8
 800a3e8:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800a3ea:	2340      	movs	r3, #64	; 0x40
 800a3ec:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 800a3ee:	4b07      	ldr	r3, [pc, #28]	; (800a40c <BSP_MAGNETO_Init+0x54>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	463a      	mov	r2, r7
 800a3f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a3fa:	4798      	blx	r3
  } 

  return ret;  
 800a3fc:	79fb      	ldrb	r3, [r7, #7]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	20000028 	.word	0x20000028
 800a40c:	20001610 	.word	0x20001610

0800a410 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 800a418:	4b08      	ldr	r3, [pc, #32]	; (800a43c <BSP_MAGNETO_GetXYZ+0x2c>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d009      	beq.n	800a434 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 800a420:	4b06      	ldr	r3, [pc, #24]	; (800a43c <BSP_MAGNETO_GetXYZ+0x2c>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a426:	2b00      	cmp	r3, #0
 800a428:	d004      	beq.n	800a434 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 800a42a:	4b04      	ldr	r3, [pc, #16]	; (800a43c <BSP_MAGNETO_GetXYZ+0x2c>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	4798      	blx	r3
    }
  }
}
 800a434:	bf00      	nop
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	20001610 	.word	0x20001610

0800a440 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800a446:	4b0c      	ldr	r3, [pc, #48]	; (800a478 <BSP_PSENSOR_Init+0x38>)
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	20ba      	movs	r0, #186	; 0xba
 800a44c:	4798      	blx	r3
 800a44e:	4603      	mov	r3, r0
 800a450:	2bb1      	cmp	r3, #177	; 0xb1
 800a452:	d002      	beq.n	800a45a <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	607b      	str	r3, [r7, #4]
 800a458:	e009      	b.n	800a46e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800a45a:	4b08      	ldr	r3, [pc, #32]	; (800a47c <BSP_PSENSOR_Init+0x3c>)
 800a45c:	4a06      	ldr	r2, [pc, #24]	; (800a478 <BSP_PSENSOR_Init+0x38>)
 800a45e:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 800a460:	4b06      	ldr	r3, [pc, #24]	; (800a47c <BSP_PSENSOR_Init+0x3c>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	20ba      	movs	r0, #186	; 0xba
 800a468:	4798      	blx	r3
    ret = PSENSOR_OK;
 800a46a:	2300      	movs	r3, #0
 800a46c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800a46e:	687b      	ldr	r3, [r7, #4]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	2000005c 	.word	0x2000005c
 800a47c:	20001614 	.word	0x20001614

0800a480 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 800a480:	b580      	push	{r7, lr}
 800a482:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 800a484:	4b04      	ldr	r3, [pc, #16]	; (800a498 <BSP_PSENSOR_ReadPressure+0x18>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	20ba      	movs	r0, #186	; 0xba
 800a48c:	4798      	blx	r3
 800a48e:	eef0 7a40 	vmov.f32	s15, s0
}
 800a492:	eeb0 0a67 	vmov.f32	s0, s15
 800a496:	bd80      	pop	{r7, pc}
 800a498:	20001614 	.word	0x20001614

0800a49c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800a4a6:	4b09      	ldr	r3, [pc, #36]	; (800a4cc <BSP_TSENSOR_Init+0x30>)
 800a4a8:	4a09      	ldr	r2, [pc, #36]	; (800a4d0 <BSP_TSENSOR_Init+0x34>)
 800a4aa:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800a4ac:	f7ff fe46 	bl	800a13c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800a4b0:	4b06      	ldr	r3, [pc, #24]	; (800a4cc <BSP_TSENSOR_Init+0x30>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	20be      	movs	r0, #190	; 0xbe
 800a4ba:	4798      	blx	r3

  ret = TSENSOR_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800a4c0:	79fb      	ldrb	r3, [r7, #7]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3708      	adds	r7, #8
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	20001618 	.word	0x20001618
 800a4d0:	20000018 	.word	0x20000018

0800a4d4 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800a4d8:	4b04      	ldr	r3, [pc, #16]	; (800a4ec <BSP_TSENSOR_ReadTemp+0x18>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	20be      	movs	r0, #190	; 0xbe
 800a4e0:	4798      	blx	r3
 800a4e2:	eef0 7a40 	vmov.f32	s15, s0
}
 800a4e6:	eeb0 0a67 	vmov.f32	s0, s15
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	20001618 	.word	0x20001618

0800a4f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4f6:	4b11      	ldr	r3, [pc, #68]	; (800a53c <HAL_MspInit+0x4c>)
 800a4f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4fa:	4a10      	ldr	r2, [pc, #64]	; (800a53c <HAL_MspInit+0x4c>)
 800a4fc:	f043 0301 	orr.w	r3, r3, #1
 800a500:	6613      	str	r3, [r2, #96]	; 0x60
 800a502:	4b0e      	ldr	r3, [pc, #56]	; (800a53c <HAL_MspInit+0x4c>)
 800a504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a506:	f003 0301 	and.w	r3, r3, #1
 800a50a:	607b      	str	r3, [r7, #4]
 800a50c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a50e:	4b0b      	ldr	r3, [pc, #44]	; (800a53c <HAL_MspInit+0x4c>)
 800a510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a512:	4a0a      	ldr	r2, [pc, #40]	; (800a53c <HAL_MspInit+0x4c>)
 800a514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a518:	6593      	str	r3, [r2, #88]	; 0x58
 800a51a:	4b08      	ldr	r3, [pc, #32]	; (800a53c <HAL_MspInit+0x4c>)
 800a51c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a51e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a522:	603b      	str	r3, [r7, #0]
 800a524:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a526:	2200      	movs	r2, #0
 800a528:	210f      	movs	r1, #15
 800a52a:	f06f 0001 	mvn.w	r0, #1
 800a52e:	f7f6 fddd 	bl	80010ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a532:	bf00      	nop
 800a534:	3708      	adds	r7, #8
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	40021000 	.word	0x40021000

0800a540 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b08a      	sub	sp, #40	; 0x28
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a548:	f107 0314 	add.w	r3, r7, #20
 800a54c:	2200      	movs	r2, #0
 800a54e:	601a      	str	r2, [r3, #0]
 800a550:	605a      	str	r2, [r3, #4]
 800a552:	609a      	str	r2, [r3, #8]
 800a554:	60da      	str	r2, [r3, #12]
 800a556:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a17      	ldr	r2, [pc, #92]	; (800a5bc <HAL_I2C_MspInit+0x7c>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d128      	bne.n	800a5b4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a562:	4b17      	ldr	r3, [pc, #92]	; (800a5c0 <HAL_I2C_MspInit+0x80>)
 800a564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a566:	4a16      	ldr	r2, [pc, #88]	; (800a5c0 <HAL_I2C_MspInit+0x80>)
 800a568:	f043 0302 	orr.w	r3, r3, #2
 800a56c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a56e:	4b14      	ldr	r3, [pc, #80]	; (800a5c0 <HAL_I2C_MspInit+0x80>)
 800a570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a572:	f003 0302 	and.w	r3, r3, #2
 800a576:	613b      	str	r3, [r7, #16]
 800a578:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a57a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a57e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a580:	2312      	movs	r3, #18
 800a582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a584:	2301      	movs	r3, #1
 800a586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a588:	2303      	movs	r3, #3
 800a58a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a58c:	2304      	movs	r3, #4
 800a58e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a590:	f107 0314 	add.w	r3, r7, #20
 800a594:	4619      	mov	r1, r3
 800a596:	480b      	ldr	r0, [pc, #44]	; (800a5c4 <HAL_I2C_MspInit+0x84>)
 800a598:	f7f6 fdd2 	bl	8001140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a59c:	4b08      	ldr	r3, [pc, #32]	; (800a5c0 <HAL_I2C_MspInit+0x80>)
 800a59e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5a0:	4a07      	ldr	r2, [pc, #28]	; (800a5c0 <HAL_I2C_MspInit+0x80>)
 800a5a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a5a6:	6593      	str	r3, [r2, #88]	; 0x58
 800a5a8:	4b05      	ldr	r3, [pc, #20]	; (800a5c0 <HAL_I2C_MspInit+0x80>)
 800a5aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5b0:	60fb      	str	r3, [r7, #12]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800a5b4:	bf00      	nop
 800a5b6:	3728      	adds	r7, #40	; 0x28
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	40005800 	.word	0x40005800
 800a5c0:	40021000 	.word	0x40021000
 800a5c4:	48000400 	.word	0x48000400

0800a5c8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a0b      	ldr	r2, [pc, #44]	; (800a604 <HAL_I2C_MspDeInit+0x3c>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d10f      	bne.n	800a5fa <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800a5da:	4b0b      	ldr	r3, [pc, #44]	; (800a608 <HAL_I2C_MspDeInit+0x40>)
 800a5dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5de:	4a0a      	ldr	r2, [pc, #40]	; (800a608 <HAL_I2C_MspDeInit+0x40>)
 800a5e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a5e4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800a5e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a5ea:	4808      	ldr	r0, [pc, #32]	; (800a60c <HAL_I2C_MspDeInit+0x44>)
 800a5ec:	f7f6 ff3a 	bl	8001464 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800a5f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a5f4:	4805      	ldr	r0, [pc, #20]	; (800a60c <HAL_I2C_MspDeInit+0x44>)
 800a5f6:	f7f6 ff35 	bl	8001464 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800a5fa:	bf00      	nop
 800a5fc:	3708      	adds	r7, #8
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	40005800 	.word	0x40005800
 800a608:	40021000 	.word	0x40021000
 800a60c:	48000400 	.word	0x48000400

0800a610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a620:	d113      	bne.n	800a64a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a622:	4b0c      	ldr	r3, [pc, #48]	; (800a654 <HAL_TIM_Base_MspInit+0x44>)
 800a624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a626:	4a0b      	ldr	r2, [pc, #44]	; (800a654 <HAL_TIM_Base_MspInit+0x44>)
 800a628:	f043 0301 	orr.w	r3, r3, #1
 800a62c:	6593      	str	r3, [r2, #88]	; 0x58
 800a62e:	4b09      	ldr	r3, [pc, #36]	; (800a654 <HAL_TIM_Base_MspInit+0x44>)
 800a630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a632:	f003 0301 	and.w	r3, r3, #1
 800a636:	60fb      	str	r3, [r7, #12]
 800a638:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800a63a:	2200      	movs	r2, #0
 800a63c:	2105      	movs	r1, #5
 800a63e:	201c      	movs	r0, #28
 800a640:	f7f6 fd54 	bl	80010ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a644:	201c      	movs	r0, #28
 800a646:	f7f6 fd6d 	bl	8001124 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800a64a:	bf00      	nop
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	40021000 	.word	0x40021000

0800a658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08a      	sub	sp, #40	; 0x28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a660:	f107 0314 	add.w	r3, r7, #20
 800a664:	2200      	movs	r2, #0
 800a666:	601a      	str	r2, [r3, #0]
 800a668:	605a      	str	r2, [r3, #4]
 800a66a:	609a      	str	r2, [r3, #8]
 800a66c:	60da      	str	r2, [r3, #12]
 800a66e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a17      	ldr	r2, [pc, #92]	; (800a6d4 <HAL_UART_MspInit+0x7c>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d127      	bne.n	800a6ca <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a67a:	4b17      	ldr	r3, [pc, #92]	; (800a6d8 <HAL_UART_MspInit+0x80>)
 800a67c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a67e:	4a16      	ldr	r2, [pc, #88]	; (800a6d8 <HAL_UART_MspInit+0x80>)
 800a680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a684:	6613      	str	r3, [r2, #96]	; 0x60
 800a686:	4b14      	ldr	r3, [pc, #80]	; (800a6d8 <HAL_UART_MspInit+0x80>)
 800a688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a68a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a68e:	613b      	str	r3, [r7, #16]
 800a690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a692:	4b11      	ldr	r3, [pc, #68]	; (800a6d8 <HAL_UART_MspInit+0x80>)
 800a694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a696:	4a10      	ldr	r2, [pc, #64]	; (800a6d8 <HAL_UART_MspInit+0x80>)
 800a698:	f043 0302 	orr.w	r3, r3, #2
 800a69c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a69e:	4b0e      	ldr	r3, [pc, #56]	; (800a6d8 <HAL_UART_MspInit+0x80>)
 800a6a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6a2:	f003 0302 	and.w	r3, r3, #2
 800a6a6:	60fb      	str	r3, [r7, #12]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a6aa:	23c0      	movs	r3, #192	; 0xc0
 800a6ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a6ba:	2307      	movs	r3, #7
 800a6bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a6be:	f107 0314 	add.w	r3, r7, #20
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	4805      	ldr	r0, [pc, #20]	; (800a6dc <HAL_UART_MspInit+0x84>)
 800a6c6:	f7f6 fd3b 	bl	8001140 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a6ca:	bf00      	nop
 800a6cc:	3728      	adds	r7, #40	; 0x28
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	40013800 	.word	0x40013800
 800a6d8:	40021000 	.word	0x40021000
 800a6dc:	48000400 	.word	0x48000400

0800a6e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b08c      	sub	sp, #48	; 0x30
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	6879      	ldr	r1, [r7, #4]
 800a6f4:	2036      	movs	r0, #54	; 0x36
 800a6f6:	f7f6 fcf9 	bl	80010ec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a6fa:	2036      	movs	r0, #54	; 0x36
 800a6fc:	f7f6 fd12 	bl	8001124 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a700:	4b1e      	ldr	r3, [pc, #120]	; (800a77c <HAL_InitTick+0x9c>)
 800a702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a704:	4a1d      	ldr	r2, [pc, #116]	; (800a77c <HAL_InitTick+0x9c>)
 800a706:	f043 0310 	orr.w	r3, r3, #16
 800a70a:	6593      	str	r3, [r2, #88]	; 0x58
 800a70c:	4b1b      	ldr	r3, [pc, #108]	; (800a77c <HAL_InitTick+0x9c>)
 800a70e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a710:	f003 0310 	and.w	r3, r3, #16
 800a714:	60fb      	str	r3, [r7, #12]
 800a716:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a718:	f107 0210 	add.w	r2, r7, #16
 800a71c:	f107 0314 	add.w	r3, r7, #20
 800a720:	4611      	mov	r1, r2
 800a722:	4618      	mov	r0, r3
 800a724:	f7f8 fc52 	bl	8002fcc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800a728:	f7f8 fc24 	bl	8002f74 <HAL_RCC_GetPCLK1Freq>
 800a72c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a730:	4a13      	ldr	r2, [pc, #76]	; (800a780 <HAL_InitTick+0xa0>)
 800a732:	fba2 2303 	umull	r2, r3, r2, r3
 800a736:	0c9b      	lsrs	r3, r3, #18
 800a738:	3b01      	subs	r3, #1
 800a73a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800a73c:	4b11      	ldr	r3, [pc, #68]	; (800a784 <HAL_InitTick+0xa4>)
 800a73e:	4a12      	ldr	r2, [pc, #72]	; (800a788 <HAL_InitTick+0xa8>)
 800a740:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800a742:	4b10      	ldr	r3, [pc, #64]	; (800a784 <HAL_InitTick+0xa4>)
 800a744:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a748:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800a74a:	4a0e      	ldr	r2, [pc, #56]	; (800a784 <HAL_InitTick+0xa4>)
 800a74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800a750:	4b0c      	ldr	r3, [pc, #48]	; (800a784 <HAL_InitTick+0xa4>)
 800a752:	2200      	movs	r2, #0
 800a754:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a756:	4b0b      	ldr	r3, [pc, #44]	; (800a784 <HAL_InitTick+0xa4>)
 800a758:	2200      	movs	r2, #0
 800a75a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800a75c:	4809      	ldr	r0, [pc, #36]	; (800a784 <HAL_InitTick+0xa4>)
 800a75e:	f7f9 fa31 	bl	8003bc4 <HAL_TIM_Base_Init>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d104      	bne.n	800a772 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800a768:	4806      	ldr	r0, [pc, #24]	; (800a784 <HAL_InitTick+0xa4>)
 800a76a:	f7f9 fa83 	bl	8003c74 <HAL_TIM_Base_Start_IT>
 800a76e:	4603      	mov	r3, r0
 800a770:	e000      	b.n	800a774 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800a772:	2301      	movs	r3, #1
}
 800a774:	4618      	mov	r0, r3
 800a776:	3730      	adds	r7, #48	; 0x30
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	40021000 	.word	0x40021000
 800a780:	431bde83 	.word	0x431bde83
 800a784:	200018e4 	.word	0x200018e4
 800a788:	40001000 	.word	0x40001000

0800a78c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a78c:	b480      	push	{r7}
 800a78e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a790:	e7fe      	b.n	800a790 <NMI_Handler+0x4>

0800a792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a792:	b480      	push	{r7}
 800a794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a796:	e7fe      	b.n	800a796 <HardFault_Handler+0x4>

0800a798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a798:	b480      	push	{r7}
 800a79a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a79c:	e7fe      	b.n	800a79c <MemManage_Handler+0x4>

0800a79e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a7a2:	e7fe      	b.n	800a7a2 <BusFault_Handler+0x4>

0800a7a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a7a8:	e7fe      	b.n	800a7a8 <UsageFault_Handler+0x4>

0800a7aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a7ae:	bf00      	nop
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a7bc:	4802      	ldr	r0, [pc, #8]	; (800a7c8 <TIM2_IRQHandler+0x10>)
 800a7be:	f7f9 fac9 	bl	8003d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a7c2:	bf00      	nop
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	200017b0 	.word	0x200017b0

0800a7cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800a7d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a7d4:	f7f6 ff6a 	bl	80016ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a7d8:	bf00      	nop
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a7e0:	4802      	ldr	r0, [pc, #8]	; (800a7ec <TIM6_DAC_IRQHandler+0x10>)
 800a7e2:	f7f9 fab7 	bl	8003d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a7e6:	bf00      	nop
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	200018e4 	.word	0x200018e4

0800a7f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a7f8:	4a14      	ldr	r2, [pc, #80]	; (800a84c <_sbrk+0x5c>)
 800a7fa:	4b15      	ldr	r3, [pc, #84]	; (800a850 <_sbrk+0x60>)
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a804:	4b13      	ldr	r3, [pc, #76]	; (800a854 <_sbrk+0x64>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d102      	bne.n	800a812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a80c:	4b11      	ldr	r3, [pc, #68]	; (800a854 <_sbrk+0x64>)
 800a80e:	4a12      	ldr	r2, [pc, #72]	; (800a858 <_sbrk+0x68>)
 800a810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a812:	4b10      	ldr	r3, [pc, #64]	; (800a854 <_sbrk+0x64>)
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4413      	add	r3, r2
 800a81a:	693a      	ldr	r2, [r7, #16]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d207      	bcs.n	800a830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a820:	f000 f87c 	bl	800a91c <__errno>
 800a824:	4602      	mov	r2, r0
 800a826:	230c      	movs	r3, #12
 800a828:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800a82a:	f04f 33ff 	mov.w	r3, #4294967295
 800a82e:	e009      	b.n	800a844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a830:	4b08      	ldr	r3, [pc, #32]	; (800a854 <_sbrk+0x64>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a836:	4b07      	ldr	r3, [pc, #28]	; (800a854 <_sbrk+0x64>)
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4413      	add	r3, r2
 800a83e:	4a05      	ldr	r2, [pc, #20]	; (800a854 <_sbrk+0x64>)
 800a840:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a842:	68fb      	ldr	r3, [r7, #12]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3718      	adds	r7, #24
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	200a0000 	.word	0x200a0000
 800a850:	00000400 	.word	0x00000400
 800a854:	2000161c 	.word	0x2000161c
 800a858:	20001938 	.word	0x20001938

0800a85c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800a85c:	b480      	push	{r7}
 800a85e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a860:	4b17      	ldr	r3, [pc, #92]	; (800a8c0 <SystemInit+0x64>)
 800a862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a866:	4a16      	ldr	r2, [pc, #88]	; (800a8c0 <SystemInit+0x64>)
 800a868:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a86c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800a870:	4b14      	ldr	r3, [pc, #80]	; (800a8c4 <SystemInit+0x68>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a13      	ldr	r2, [pc, #76]	; (800a8c4 <SystemInit+0x68>)
 800a876:	f043 0301 	orr.w	r3, r3, #1
 800a87a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800a87c:	4b11      	ldr	r3, [pc, #68]	; (800a8c4 <SystemInit+0x68>)
 800a87e:	2200      	movs	r2, #0
 800a880:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800a882:	4b10      	ldr	r3, [pc, #64]	; (800a8c4 <SystemInit+0x68>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a0f      	ldr	r2, [pc, #60]	; (800a8c4 <SystemInit+0x68>)
 800a888:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800a88c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800a890:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800a892:	4b0c      	ldr	r3, [pc, #48]	; (800a8c4 <SystemInit+0x68>)
 800a894:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a898:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a89a:	4b0a      	ldr	r3, [pc, #40]	; (800a8c4 <SystemInit+0x68>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a09      	ldr	r2, [pc, #36]	; (800a8c4 <SystemInit+0x68>)
 800a8a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800a8a6:	4b07      	ldr	r3, [pc, #28]	; (800a8c4 <SystemInit+0x68>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a8ac:	4b04      	ldr	r3, [pc, #16]	; (800a8c0 <SystemInit+0x64>)
 800a8ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a8b2:	609a      	str	r2, [r3, #8]
#endif
}
 800a8b4:	bf00      	nop
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	e000ed00 	.word	0xe000ed00
 800a8c4:	40021000 	.word	0x40021000

0800a8c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800a8c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a900 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a8cc:	f7ff ffc6 	bl	800a85c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800a8d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800a8d2:	e003      	b.n	800a8dc <LoopCopyDataInit>

0800a8d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800a8d4:	4b0b      	ldr	r3, [pc, #44]	; (800a904 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800a8d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800a8d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800a8da:	3104      	adds	r1, #4

0800a8dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800a8dc:	480a      	ldr	r0, [pc, #40]	; (800a908 <LoopForever+0xa>)
	ldr	r3, =_edata
 800a8de:	4b0b      	ldr	r3, [pc, #44]	; (800a90c <LoopForever+0xe>)
	adds	r2, r0, r1
 800a8e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800a8e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800a8e4:	d3f6      	bcc.n	800a8d4 <CopyDataInit>
	ldr	r2, =_sbss
 800a8e6:	4a0a      	ldr	r2, [pc, #40]	; (800a910 <LoopForever+0x12>)
	b	LoopFillZerobss
 800a8e8:	e002      	b.n	800a8f0 <LoopFillZerobss>

0800a8ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800a8ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800a8ec:	f842 3b04 	str.w	r3, [r2], #4

0800a8f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800a8f0:	4b08      	ldr	r3, [pc, #32]	; (800a914 <LoopForever+0x16>)
	cmp	r2, r3
 800a8f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800a8f4:	d3f9      	bcc.n	800a8ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a8f6:	f000 f817 	bl	800a928 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a8fa:	f7fe fe39 	bl	8009570 <main>

0800a8fe <LoopForever>:

LoopForever:
    b LoopForever
 800a8fe:	e7fe      	b.n	800a8fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800a900:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800a904:	0800c540 	.word	0x0800c540
	ldr	r0, =_sdata
 800a908:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800a90c:	2000013c 	.word	0x2000013c
	ldr	r2, =_sbss
 800a910:	2000013c 	.word	0x2000013c
	ldr	r3, = _ebss
 800a914:	20001934 	.word	0x20001934

0800a918 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a918:	e7fe      	b.n	800a918 <ADC1_IRQHandler>
	...

0800a91c <__errno>:
 800a91c:	4b01      	ldr	r3, [pc, #4]	; (800a924 <__errno+0x8>)
 800a91e:	6818      	ldr	r0, [r3, #0]
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop
 800a924:	200000d4 	.word	0x200000d4

0800a928 <__libc_init_array>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	4e0d      	ldr	r6, [pc, #52]	; (800a960 <__libc_init_array+0x38>)
 800a92c:	4c0d      	ldr	r4, [pc, #52]	; (800a964 <__libc_init_array+0x3c>)
 800a92e:	1ba4      	subs	r4, r4, r6
 800a930:	10a4      	asrs	r4, r4, #2
 800a932:	2500      	movs	r5, #0
 800a934:	42a5      	cmp	r5, r4
 800a936:	d109      	bne.n	800a94c <__libc_init_array+0x24>
 800a938:	4e0b      	ldr	r6, [pc, #44]	; (800a968 <__libc_init_array+0x40>)
 800a93a:	4c0c      	ldr	r4, [pc, #48]	; (800a96c <__libc_init_array+0x44>)
 800a93c:	f001 fcd2 	bl	800c2e4 <_init>
 800a940:	1ba4      	subs	r4, r4, r6
 800a942:	10a4      	asrs	r4, r4, #2
 800a944:	2500      	movs	r5, #0
 800a946:	42a5      	cmp	r5, r4
 800a948:	d105      	bne.n	800a956 <__libc_init_array+0x2e>
 800a94a:	bd70      	pop	{r4, r5, r6, pc}
 800a94c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a950:	4798      	blx	r3
 800a952:	3501      	adds	r5, #1
 800a954:	e7ee      	b.n	800a934 <__libc_init_array+0xc>
 800a956:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a95a:	4798      	blx	r3
 800a95c:	3501      	adds	r5, #1
 800a95e:	e7f2      	b.n	800a946 <__libc_init_array+0x1e>
 800a960:	0800c538 	.word	0x0800c538
 800a964:	0800c538 	.word	0x0800c538
 800a968:	0800c538 	.word	0x0800c538
 800a96c:	0800c53c 	.word	0x0800c53c

0800a970 <memcpy>:
 800a970:	b510      	push	{r4, lr}
 800a972:	1e43      	subs	r3, r0, #1
 800a974:	440a      	add	r2, r1
 800a976:	4291      	cmp	r1, r2
 800a978:	d100      	bne.n	800a97c <memcpy+0xc>
 800a97a:	bd10      	pop	{r4, pc}
 800a97c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a980:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a984:	e7f7      	b.n	800a976 <memcpy+0x6>

0800a986 <memset>:
 800a986:	4402      	add	r2, r0
 800a988:	4603      	mov	r3, r0
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d100      	bne.n	800a990 <memset+0xa>
 800a98e:	4770      	bx	lr
 800a990:	f803 1b01 	strb.w	r1, [r3], #1
 800a994:	e7f9      	b.n	800a98a <memset+0x4>
	...

0800a998 <siprintf>:
 800a998:	b40e      	push	{r1, r2, r3}
 800a99a:	b500      	push	{lr}
 800a99c:	b09c      	sub	sp, #112	; 0x70
 800a99e:	ab1d      	add	r3, sp, #116	; 0x74
 800a9a0:	9002      	str	r0, [sp, #8]
 800a9a2:	9006      	str	r0, [sp, #24]
 800a9a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a9a8:	4809      	ldr	r0, [pc, #36]	; (800a9d0 <siprintf+0x38>)
 800a9aa:	9107      	str	r1, [sp, #28]
 800a9ac:	9104      	str	r1, [sp, #16]
 800a9ae:	4909      	ldr	r1, [pc, #36]	; (800a9d4 <siprintf+0x3c>)
 800a9b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9b4:	9105      	str	r1, [sp, #20]
 800a9b6:	6800      	ldr	r0, [r0, #0]
 800a9b8:	9301      	str	r3, [sp, #4]
 800a9ba:	a902      	add	r1, sp, #8
 800a9bc:	f000 f866 	bl	800aa8c <_svfiprintf_r>
 800a9c0:	9b02      	ldr	r3, [sp, #8]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	701a      	strb	r2, [r3, #0]
 800a9c6:	b01c      	add	sp, #112	; 0x70
 800a9c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9cc:	b003      	add	sp, #12
 800a9ce:	4770      	bx	lr
 800a9d0:	200000d4 	.word	0x200000d4
 800a9d4:	ffff0208 	.word	0xffff0208

0800a9d8 <__ssputs_r>:
 800a9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9dc:	688e      	ldr	r6, [r1, #8]
 800a9de:	429e      	cmp	r6, r3
 800a9e0:	4682      	mov	sl, r0
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	4690      	mov	r8, r2
 800a9e6:	4699      	mov	r9, r3
 800a9e8:	d837      	bhi.n	800aa5a <__ssputs_r+0x82>
 800a9ea:	898a      	ldrh	r2, [r1, #12]
 800a9ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9f0:	d031      	beq.n	800aa56 <__ssputs_r+0x7e>
 800a9f2:	6825      	ldr	r5, [r4, #0]
 800a9f4:	6909      	ldr	r1, [r1, #16]
 800a9f6:	1a6f      	subs	r7, r5, r1
 800a9f8:	6965      	ldr	r5, [r4, #20]
 800a9fa:	2302      	movs	r3, #2
 800a9fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa00:	fb95 f5f3 	sdiv	r5, r5, r3
 800aa04:	f109 0301 	add.w	r3, r9, #1
 800aa08:	443b      	add	r3, r7
 800aa0a:	429d      	cmp	r5, r3
 800aa0c:	bf38      	it	cc
 800aa0e:	461d      	movcc	r5, r3
 800aa10:	0553      	lsls	r3, r2, #21
 800aa12:	d530      	bpl.n	800aa76 <__ssputs_r+0x9e>
 800aa14:	4629      	mov	r1, r5
 800aa16:	f000 fb21 	bl	800b05c <_malloc_r>
 800aa1a:	4606      	mov	r6, r0
 800aa1c:	b950      	cbnz	r0, 800aa34 <__ssputs_r+0x5c>
 800aa1e:	230c      	movs	r3, #12
 800aa20:	f8ca 3000 	str.w	r3, [sl]
 800aa24:	89a3      	ldrh	r3, [r4, #12]
 800aa26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa2a:	81a3      	strh	r3, [r4, #12]
 800aa2c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa34:	463a      	mov	r2, r7
 800aa36:	6921      	ldr	r1, [r4, #16]
 800aa38:	f7ff ff9a 	bl	800a970 <memcpy>
 800aa3c:	89a3      	ldrh	r3, [r4, #12]
 800aa3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa46:	81a3      	strh	r3, [r4, #12]
 800aa48:	6126      	str	r6, [r4, #16]
 800aa4a:	6165      	str	r5, [r4, #20]
 800aa4c:	443e      	add	r6, r7
 800aa4e:	1bed      	subs	r5, r5, r7
 800aa50:	6026      	str	r6, [r4, #0]
 800aa52:	60a5      	str	r5, [r4, #8]
 800aa54:	464e      	mov	r6, r9
 800aa56:	454e      	cmp	r6, r9
 800aa58:	d900      	bls.n	800aa5c <__ssputs_r+0x84>
 800aa5a:	464e      	mov	r6, r9
 800aa5c:	4632      	mov	r2, r6
 800aa5e:	4641      	mov	r1, r8
 800aa60:	6820      	ldr	r0, [r4, #0]
 800aa62:	f000 fa93 	bl	800af8c <memmove>
 800aa66:	68a3      	ldr	r3, [r4, #8]
 800aa68:	1b9b      	subs	r3, r3, r6
 800aa6a:	60a3      	str	r3, [r4, #8]
 800aa6c:	6823      	ldr	r3, [r4, #0]
 800aa6e:	441e      	add	r6, r3
 800aa70:	6026      	str	r6, [r4, #0]
 800aa72:	2000      	movs	r0, #0
 800aa74:	e7dc      	b.n	800aa30 <__ssputs_r+0x58>
 800aa76:	462a      	mov	r2, r5
 800aa78:	f000 fb4a 	bl	800b110 <_realloc_r>
 800aa7c:	4606      	mov	r6, r0
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	d1e2      	bne.n	800aa48 <__ssputs_r+0x70>
 800aa82:	6921      	ldr	r1, [r4, #16]
 800aa84:	4650      	mov	r0, sl
 800aa86:	f000 fa9b 	bl	800afc0 <_free_r>
 800aa8a:	e7c8      	b.n	800aa1e <__ssputs_r+0x46>

0800aa8c <_svfiprintf_r>:
 800aa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa90:	461d      	mov	r5, r3
 800aa92:	898b      	ldrh	r3, [r1, #12]
 800aa94:	061f      	lsls	r7, r3, #24
 800aa96:	b09d      	sub	sp, #116	; 0x74
 800aa98:	4680      	mov	r8, r0
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	4616      	mov	r6, r2
 800aa9e:	d50f      	bpl.n	800aac0 <_svfiprintf_r+0x34>
 800aaa0:	690b      	ldr	r3, [r1, #16]
 800aaa2:	b96b      	cbnz	r3, 800aac0 <_svfiprintf_r+0x34>
 800aaa4:	2140      	movs	r1, #64	; 0x40
 800aaa6:	f000 fad9 	bl	800b05c <_malloc_r>
 800aaaa:	6020      	str	r0, [r4, #0]
 800aaac:	6120      	str	r0, [r4, #16]
 800aaae:	b928      	cbnz	r0, 800aabc <_svfiprintf_r+0x30>
 800aab0:	230c      	movs	r3, #12
 800aab2:	f8c8 3000 	str.w	r3, [r8]
 800aab6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaba:	e0c8      	b.n	800ac4e <_svfiprintf_r+0x1c2>
 800aabc:	2340      	movs	r3, #64	; 0x40
 800aabe:	6163      	str	r3, [r4, #20]
 800aac0:	2300      	movs	r3, #0
 800aac2:	9309      	str	r3, [sp, #36]	; 0x24
 800aac4:	2320      	movs	r3, #32
 800aac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aaca:	2330      	movs	r3, #48	; 0x30
 800aacc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aad0:	9503      	str	r5, [sp, #12]
 800aad2:	f04f 0b01 	mov.w	fp, #1
 800aad6:	4637      	mov	r7, r6
 800aad8:	463d      	mov	r5, r7
 800aada:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aade:	b10b      	cbz	r3, 800aae4 <_svfiprintf_r+0x58>
 800aae0:	2b25      	cmp	r3, #37	; 0x25
 800aae2:	d13e      	bne.n	800ab62 <_svfiprintf_r+0xd6>
 800aae4:	ebb7 0a06 	subs.w	sl, r7, r6
 800aae8:	d00b      	beq.n	800ab02 <_svfiprintf_r+0x76>
 800aaea:	4653      	mov	r3, sl
 800aaec:	4632      	mov	r2, r6
 800aaee:	4621      	mov	r1, r4
 800aaf0:	4640      	mov	r0, r8
 800aaf2:	f7ff ff71 	bl	800a9d8 <__ssputs_r>
 800aaf6:	3001      	adds	r0, #1
 800aaf8:	f000 80a4 	beq.w	800ac44 <_svfiprintf_r+0x1b8>
 800aafc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aafe:	4453      	add	r3, sl
 800ab00:	9309      	str	r3, [sp, #36]	; 0x24
 800ab02:	783b      	ldrb	r3, [r7, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 809d 	beq.w	800ac44 <_svfiprintf_r+0x1b8>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab14:	9304      	str	r3, [sp, #16]
 800ab16:	9307      	str	r3, [sp, #28]
 800ab18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab1c:	931a      	str	r3, [sp, #104]	; 0x68
 800ab1e:	462f      	mov	r7, r5
 800ab20:	2205      	movs	r2, #5
 800ab22:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ab26:	4850      	ldr	r0, [pc, #320]	; (800ac68 <_svfiprintf_r+0x1dc>)
 800ab28:	f7f5 fb72 	bl	8000210 <memchr>
 800ab2c:	9b04      	ldr	r3, [sp, #16]
 800ab2e:	b9d0      	cbnz	r0, 800ab66 <_svfiprintf_r+0xda>
 800ab30:	06d9      	lsls	r1, r3, #27
 800ab32:	bf44      	itt	mi
 800ab34:	2220      	movmi	r2, #32
 800ab36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ab3a:	071a      	lsls	r2, r3, #28
 800ab3c:	bf44      	itt	mi
 800ab3e:	222b      	movmi	r2, #43	; 0x2b
 800ab40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ab44:	782a      	ldrb	r2, [r5, #0]
 800ab46:	2a2a      	cmp	r2, #42	; 0x2a
 800ab48:	d015      	beq.n	800ab76 <_svfiprintf_r+0xea>
 800ab4a:	9a07      	ldr	r2, [sp, #28]
 800ab4c:	462f      	mov	r7, r5
 800ab4e:	2000      	movs	r0, #0
 800ab50:	250a      	movs	r5, #10
 800ab52:	4639      	mov	r1, r7
 800ab54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab58:	3b30      	subs	r3, #48	; 0x30
 800ab5a:	2b09      	cmp	r3, #9
 800ab5c:	d94d      	bls.n	800abfa <_svfiprintf_r+0x16e>
 800ab5e:	b1b8      	cbz	r0, 800ab90 <_svfiprintf_r+0x104>
 800ab60:	e00f      	b.n	800ab82 <_svfiprintf_r+0xf6>
 800ab62:	462f      	mov	r7, r5
 800ab64:	e7b8      	b.n	800aad8 <_svfiprintf_r+0x4c>
 800ab66:	4a40      	ldr	r2, [pc, #256]	; (800ac68 <_svfiprintf_r+0x1dc>)
 800ab68:	1a80      	subs	r0, r0, r2
 800ab6a:	fa0b f000 	lsl.w	r0, fp, r0
 800ab6e:	4318      	orrs	r0, r3
 800ab70:	9004      	str	r0, [sp, #16]
 800ab72:	463d      	mov	r5, r7
 800ab74:	e7d3      	b.n	800ab1e <_svfiprintf_r+0x92>
 800ab76:	9a03      	ldr	r2, [sp, #12]
 800ab78:	1d11      	adds	r1, r2, #4
 800ab7a:	6812      	ldr	r2, [r2, #0]
 800ab7c:	9103      	str	r1, [sp, #12]
 800ab7e:	2a00      	cmp	r2, #0
 800ab80:	db01      	blt.n	800ab86 <_svfiprintf_r+0xfa>
 800ab82:	9207      	str	r2, [sp, #28]
 800ab84:	e004      	b.n	800ab90 <_svfiprintf_r+0x104>
 800ab86:	4252      	negs	r2, r2
 800ab88:	f043 0302 	orr.w	r3, r3, #2
 800ab8c:	9207      	str	r2, [sp, #28]
 800ab8e:	9304      	str	r3, [sp, #16]
 800ab90:	783b      	ldrb	r3, [r7, #0]
 800ab92:	2b2e      	cmp	r3, #46	; 0x2e
 800ab94:	d10c      	bne.n	800abb0 <_svfiprintf_r+0x124>
 800ab96:	787b      	ldrb	r3, [r7, #1]
 800ab98:	2b2a      	cmp	r3, #42	; 0x2a
 800ab9a:	d133      	bne.n	800ac04 <_svfiprintf_r+0x178>
 800ab9c:	9b03      	ldr	r3, [sp, #12]
 800ab9e:	1d1a      	adds	r2, r3, #4
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	9203      	str	r2, [sp, #12]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	bfb8      	it	lt
 800aba8:	f04f 33ff 	movlt.w	r3, #4294967295
 800abac:	3702      	adds	r7, #2
 800abae:	9305      	str	r3, [sp, #20]
 800abb0:	4d2e      	ldr	r5, [pc, #184]	; (800ac6c <_svfiprintf_r+0x1e0>)
 800abb2:	7839      	ldrb	r1, [r7, #0]
 800abb4:	2203      	movs	r2, #3
 800abb6:	4628      	mov	r0, r5
 800abb8:	f7f5 fb2a 	bl	8000210 <memchr>
 800abbc:	b138      	cbz	r0, 800abce <_svfiprintf_r+0x142>
 800abbe:	2340      	movs	r3, #64	; 0x40
 800abc0:	1b40      	subs	r0, r0, r5
 800abc2:	fa03 f000 	lsl.w	r0, r3, r0
 800abc6:	9b04      	ldr	r3, [sp, #16]
 800abc8:	4303      	orrs	r3, r0
 800abca:	3701      	adds	r7, #1
 800abcc:	9304      	str	r3, [sp, #16]
 800abce:	7839      	ldrb	r1, [r7, #0]
 800abd0:	4827      	ldr	r0, [pc, #156]	; (800ac70 <_svfiprintf_r+0x1e4>)
 800abd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abd6:	2206      	movs	r2, #6
 800abd8:	1c7e      	adds	r6, r7, #1
 800abda:	f7f5 fb19 	bl	8000210 <memchr>
 800abde:	2800      	cmp	r0, #0
 800abe0:	d038      	beq.n	800ac54 <_svfiprintf_r+0x1c8>
 800abe2:	4b24      	ldr	r3, [pc, #144]	; (800ac74 <_svfiprintf_r+0x1e8>)
 800abe4:	bb13      	cbnz	r3, 800ac2c <_svfiprintf_r+0x1a0>
 800abe6:	9b03      	ldr	r3, [sp, #12]
 800abe8:	3307      	adds	r3, #7
 800abea:	f023 0307 	bic.w	r3, r3, #7
 800abee:	3308      	adds	r3, #8
 800abf0:	9303      	str	r3, [sp, #12]
 800abf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf4:	444b      	add	r3, r9
 800abf6:	9309      	str	r3, [sp, #36]	; 0x24
 800abf8:	e76d      	b.n	800aad6 <_svfiprintf_r+0x4a>
 800abfa:	fb05 3202 	mla	r2, r5, r2, r3
 800abfe:	2001      	movs	r0, #1
 800ac00:	460f      	mov	r7, r1
 800ac02:	e7a6      	b.n	800ab52 <_svfiprintf_r+0xc6>
 800ac04:	2300      	movs	r3, #0
 800ac06:	3701      	adds	r7, #1
 800ac08:	9305      	str	r3, [sp, #20]
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	250a      	movs	r5, #10
 800ac0e:	4638      	mov	r0, r7
 800ac10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac14:	3a30      	subs	r2, #48	; 0x30
 800ac16:	2a09      	cmp	r2, #9
 800ac18:	d903      	bls.n	800ac22 <_svfiprintf_r+0x196>
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d0c8      	beq.n	800abb0 <_svfiprintf_r+0x124>
 800ac1e:	9105      	str	r1, [sp, #20]
 800ac20:	e7c6      	b.n	800abb0 <_svfiprintf_r+0x124>
 800ac22:	fb05 2101 	mla	r1, r5, r1, r2
 800ac26:	2301      	movs	r3, #1
 800ac28:	4607      	mov	r7, r0
 800ac2a:	e7f0      	b.n	800ac0e <_svfiprintf_r+0x182>
 800ac2c:	ab03      	add	r3, sp, #12
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	4622      	mov	r2, r4
 800ac32:	4b11      	ldr	r3, [pc, #68]	; (800ac78 <_svfiprintf_r+0x1ec>)
 800ac34:	a904      	add	r1, sp, #16
 800ac36:	4640      	mov	r0, r8
 800ac38:	f3af 8000 	nop.w
 800ac3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ac40:	4681      	mov	r9, r0
 800ac42:	d1d6      	bne.n	800abf2 <_svfiprintf_r+0x166>
 800ac44:	89a3      	ldrh	r3, [r4, #12]
 800ac46:	065b      	lsls	r3, r3, #25
 800ac48:	f53f af35 	bmi.w	800aab6 <_svfiprintf_r+0x2a>
 800ac4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac4e:	b01d      	add	sp, #116	; 0x74
 800ac50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac54:	ab03      	add	r3, sp, #12
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	4622      	mov	r2, r4
 800ac5a:	4b07      	ldr	r3, [pc, #28]	; (800ac78 <_svfiprintf_r+0x1ec>)
 800ac5c:	a904      	add	r1, sp, #16
 800ac5e:	4640      	mov	r0, r8
 800ac60:	f000 f882 	bl	800ad68 <_printf_i>
 800ac64:	e7ea      	b.n	800ac3c <_svfiprintf_r+0x1b0>
 800ac66:	bf00      	nop
 800ac68:	0800c4b8 	.word	0x0800c4b8
 800ac6c:	0800c4be 	.word	0x0800c4be
 800ac70:	0800c4c2 	.word	0x0800c4c2
 800ac74:	00000000 	.word	0x00000000
 800ac78:	0800a9d9 	.word	0x0800a9d9

0800ac7c <_printf_common>:
 800ac7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac80:	4691      	mov	r9, r2
 800ac82:	461f      	mov	r7, r3
 800ac84:	688a      	ldr	r2, [r1, #8]
 800ac86:	690b      	ldr	r3, [r1, #16]
 800ac88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	bfb8      	it	lt
 800ac90:	4613      	movlt	r3, r2
 800ac92:	f8c9 3000 	str.w	r3, [r9]
 800ac96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	b112      	cbz	r2, 800aca6 <_printf_common+0x2a>
 800aca0:	3301      	adds	r3, #1
 800aca2:	f8c9 3000 	str.w	r3, [r9]
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	0699      	lsls	r1, r3, #26
 800acaa:	bf42      	ittt	mi
 800acac:	f8d9 3000 	ldrmi.w	r3, [r9]
 800acb0:	3302      	addmi	r3, #2
 800acb2:	f8c9 3000 	strmi.w	r3, [r9]
 800acb6:	6825      	ldr	r5, [r4, #0]
 800acb8:	f015 0506 	ands.w	r5, r5, #6
 800acbc:	d107      	bne.n	800acce <_printf_common+0x52>
 800acbe:	f104 0a19 	add.w	sl, r4, #25
 800acc2:	68e3      	ldr	r3, [r4, #12]
 800acc4:	f8d9 2000 	ldr.w	r2, [r9]
 800acc8:	1a9b      	subs	r3, r3, r2
 800acca:	42ab      	cmp	r3, r5
 800accc:	dc28      	bgt.n	800ad20 <_printf_common+0xa4>
 800acce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800acd2:	6822      	ldr	r2, [r4, #0]
 800acd4:	3300      	adds	r3, #0
 800acd6:	bf18      	it	ne
 800acd8:	2301      	movne	r3, #1
 800acda:	0692      	lsls	r2, r2, #26
 800acdc:	d42d      	bmi.n	800ad3a <_printf_common+0xbe>
 800acde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ace2:	4639      	mov	r1, r7
 800ace4:	4630      	mov	r0, r6
 800ace6:	47c0      	blx	r8
 800ace8:	3001      	adds	r0, #1
 800acea:	d020      	beq.n	800ad2e <_printf_common+0xb2>
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	68e5      	ldr	r5, [r4, #12]
 800acf0:	f8d9 2000 	ldr.w	r2, [r9]
 800acf4:	f003 0306 	and.w	r3, r3, #6
 800acf8:	2b04      	cmp	r3, #4
 800acfa:	bf08      	it	eq
 800acfc:	1aad      	subeq	r5, r5, r2
 800acfe:	68a3      	ldr	r3, [r4, #8]
 800ad00:	6922      	ldr	r2, [r4, #16]
 800ad02:	bf0c      	ite	eq
 800ad04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad08:	2500      	movne	r5, #0
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	bfc4      	itt	gt
 800ad0e:	1a9b      	subgt	r3, r3, r2
 800ad10:	18ed      	addgt	r5, r5, r3
 800ad12:	f04f 0900 	mov.w	r9, #0
 800ad16:	341a      	adds	r4, #26
 800ad18:	454d      	cmp	r5, r9
 800ad1a:	d11a      	bne.n	800ad52 <_printf_common+0xd6>
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	e008      	b.n	800ad32 <_printf_common+0xb6>
 800ad20:	2301      	movs	r3, #1
 800ad22:	4652      	mov	r2, sl
 800ad24:	4639      	mov	r1, r7
 800ad26:	4630      	mov	r0, r6
 800ad28:	47c0      	blx	r8
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	d103      	bne.n	800ad36 <_printf_common+0xba>
 800ad2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad36:	3501      	adds	r5, #1
 800ad38:	e7c3      	b.n	800acc2 <_printf_common+0x46>
 800ad3a:	18e1      	adds	r1, r4, r3
 800ad3c:	1c5a      	adds	r2, r3, #1
 800ad3e:	2030      	movs	r0, #48	; 0x30
 800ad40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad44:	4422      	add	r2, r4
 800ad46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad4e:	3302      	adds	r3, #2
 800ad50:	e7c5      	b.n	800acde <_printf_common+0x62>
 800ad52:	2301      	movs	r3, #1
 800ad54:	4622      	mov	r2, r4
 800ad56:	4639      	mov	r1, r7
 800ad58:	4630      	mov	r0, r6
 800ad5a:	47c0      	blx	r8
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	d0e6      	beq.n	800ad2e <_printf_common+0xb2>
 800ad60:	f109 0901 	add.w	r9, r9, #1
 800ad64:	e7d8      	b.n	800ad18 <_printf_common+0x9c>
	...

0800ad68 <_printf_i>:
 800ad68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad6c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ad70:	460c      	mov	r4, r1
 800ad72:	7e09      	ldrb	r1, [r1, #24]
 800ad74:	b085      	sub	sp, #20
 800ad76:	296e      	cmp	r1, #110	; 0x6e
 800ad78:	4617      	mov	r7, r2
 800ad7a:	4606      	mov	r6, r0
 800ad7c:	4698      	mov	r8, r3
 800ad7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad80:	f000 80b3 	beq.w	800aeea <_printf_i+0x182>
 800ad84:	d822      	bhi.n	800adcc <_printf_i+0x64>
 800ad86:	2963      	cmp	r1, #99	; 0x63
 800ad88:	d036      	beq.n	800adf8 <_printf_i+0x90>
 800ad8a:	d80a      	bhi.n	800ada2 <_printf_i+0x3a>
 800ad8c:	2900      	cmp	r1, #0
 800ad8e:	f000 80b9 	beq.w	800af04 <_printf_i+0x19c>
 800ad92:	2958      	cmp	r1, #88	; 0x58
 800ad94:	f000 8083 	beq.w	800ae9e <_printf_i+0x136>
 800ad98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad9c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ada0:	e032      	b.n	800ae08 <_printf_i+0xa0>
 800ada2:	2964      	cmp	r1, #100	; 0x64
 800ada4:	d001      	beq.n	800adaa <_printf_i+0x42>
 800ada6:	2969      	cmp	r1, #105	; 0x69
 800ada8:	d1f6      	bne.n	800ad98 <_printf_i+0x30>
 800adaa:	6820      	ldr	r0, [r4, #0]
 800adac:	6813      	ldr	r3, [r2, #0]
 800adae:	0605      	lsls	r5, r0, #24
 800adb0:	f103 0104 	add.w	r1, r3, #4
 800adb4:	d52a      	bpl.n	800ae0c <_printf_i+0xa4>
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	6011      	str	r1, [r2, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	da03      	bge.n	800adc6 <_printf_i+0x5e>
 800adbe:	222d      	movs	r2, #45	; 0x2d
 800adc0:	425b      	negs	r3, r3
 800adc2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800adc6:	486f      	ldr	r0, [pc, #444]	; (800af84 <_printf_i+0x21c>)
 800adc8:	220a      	movs	r2, #10
 800adca:	e039      	b.n	800ae40 <_printf_i+0xd8>
 800adcc:	2973      	cmp	r1, #115	; 0x73
 800adce:	f000 809d 	beq.w	800af0c <_printf_i+0x1a4>
 800add2:	d808      	bhi.n	800ade6 <_printf_i+0x7e>
 800add4:	296f      	cmp	r1, #111	; 0x6f
 800add6:	d020      	beq.n	800ae1a <_printf_i+0xb2>
 800add8:	2970      	cmp	r1, #112	; 0x70
 800adda:	d1dd      	bne.n	800ad98 <_printf_i+0x30>
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	f043 0320 	orr.w	r3, r3, #32
 800ade2:	6023      	str	r3, [r4, #0]
 800ade4:	e003      	b.n	800adee <_printf_i+0x86>
 800ade6:	2975      	cmp	r1, #117	; 0x75
 800ade8:	d017      	beq.n	800ae1a <_printf_i+0xb2>
 800adea:	2978      	cmp	r1, #120	; 0x78
 800adec:	d1d4      	bne.n	800ad98 <_printf_i+0x30>
 800adee:	2378      	movs	r3, #120	; 0x78
 800adf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800adf4:	4864      	ldr	r0, [pc, #400]	; (800af88 <_printf_i+0x220>)
 800adf6:	e055      	b.n	800aea4 <_printf_i+0x13c>
 800adf8:	6813      	ldr	r3, [r2, #0]
 800adfa:	1d19      	adds	r1, r3, #4
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	6011      	str	r1, [r2, #0]
 800ae00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e08c      	b.n	800af26 <_printf_i+0x1be>
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	6011      	str	r1, [r2, #0]
 800ae10:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae14:	bf18      	it	ne
 800ae16:	b21b      	sxthne	r3, r3
 800ae18:	e7cf      	b.n	800adba <_printf_i+0x52>
 800ae1a:	6813      	ldr	r3, [r2, #0]
 800ae1c:	6825      	ldr	r5, [r4, #0]
 800ae1e:	1d18      	adds	r0, r3, #4
 800ae20:	6010      	str	r0, [r2, #0]
 800ae22:	0628      	lsls	r0, r5, #24
 800ae24:	d501      	bpl.n	800ae2a <_printf_i+0xc2>
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	e002      	b.n	800ae30 <_printf_i+0xc8>
 800ae2a:	0668      	lsls	r0, r5, #25
 800ae2c:	d5fb      	bpl.n	800ae26 <_printf_i+0xbe>
 800ae2e:	881b      	ldrh	r3, [r3, #0]
 800ae30:	4854      	ldr	r0, [pc, #336]	; (800af84 <_printf_i+0x21c>)
 800ae32:	296f      	cmp	r1, #111	; 0x6f
 800ae34:	bf14      	ite	ne
 800ae36:	220a      	movne	r2, #10
 800ae38:	2208      	moveq	r2, #8
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae40:	6865      	ldr	r5, [r4, #4]
 800ae42:	60a5      	str	r5, [r4, #8]
 800ae44:	2d00      	cmp	r5, #0
 800ae46:	f2c0 8095 	blt.w	800af74 <_printf_i+0x20c>
 800ae4a:	6821      	ldr	r1, [r4, #0]
 800ae4c:	f021 0104 	bic.w	r1, r1, #4
 800ae50:	6021      	str	r1, [r4, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d13d      	bne.n	800aed2 <_printf_i+0x16a>
 800ae56:	2d00      	cmp	r5, #0
 800ae58:	f040 808e 	bne.w	800af78 <_printf_i+0x210>
 800ae5c:	4665      	mov	r5, ip
 800ae5e:	2a08      	cmp	r2, #8
 800ae60:	d10b      	bne.n	800ae7a <_printf_i+0x112>
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	07db      	lsls	r3, r3, #31
 800ae66:	d508      	bpl.n	800ae7a <_printf_i+0x112>
 800ae68:	6923      	ldr	r3, [r4, #16]
 800ae6a:	6862      	ldr	r2, [r4, #4]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	bfde      	ittt	le
 800ae70:	2330      	movle	r3, #48	; 0x30
 800ae72:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae76:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae7a:	ebac 0305 	sub.w	r3, ip, r5
 800ae7e:	6123      	str	r3, [r4, #16]
 800ae80:	f8cd 8000 	str.w	r8, [sp]
 800ae84:	463b      	mov	r3, r7
 800ae86:	aa03      	add	r2, sp, #12
 800ae88:	4621      	mov	r1, r4
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	f7ff fef6 	bl	800ac7c <_printf_common>
 800ae90:	3001      	adds	r0, #1
 800ae92:	d14d      	bne.n	800af30 <_printf_i+0x1c8>
 800ae94:	f04f 30ff 	mov.w	r0, #4294967295
 800ae98:	b005      	add	sp, #20
 800ae9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae9e:	4839      	ldr	r0, [pc, #228]	; (800af84 <_printf_i+0x21c>)
 800aea0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800aea4:	6813      	ldr	r3, [r2, #0]
 800aea6:	6821      	ldr	r1, [r4, #0]
 800aea8:	1d1d      	adds	r5, r3, #4
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	6015      	str	r5, [r2, #0]
 800aeae:	060a      	lsls	r2, r1, #24
 800aeb0:	d50b      	bpl.n	800aeca <_printf_i+0x162>
 800aeb2:	07ca      	lsls	r2, r1, #31
 800aeb4:	bf44      	itt	mi
 800aeb6:	f041 0120 	orrmi.w	r1, r1, #32
 800aeba:	6021      	strmi	r1, [r4, #0]
 800aebc:	b91b      	cbnz	r3, 800aec6 <_printf_i+0x15e>
 800aebe:	6822      	ldr	r2, [r4, #0]
 800aec0:	f022 0220 	bic.w	r2, r2, #32
 800aec4:	6022      	str	r2, [r4, #0]
 800aec6:	2210      	movs	r2, #16
 800aec8:	e7b7      	b.n	800ae3a <_printf_i+0xd2>
 800aeca:	064d      	lsls	r5, r1, #25
 800aecc:	bf48      	it	mi
 800aece:	b29b      	uxthmi	r3, r3
 800aed0:	e7ef      	b.n	800aeb2 <_printf_i+0x14a>
 800aed2:	4665      	mov	r5, ip
 800aed4:	fbb3 f1f2 	udiv	r1, r3, r2
 800aed8:	fb02 3311 	mls	r3, r2, r1, r3
 800aedc:	5cc3      	ldrb	r3, [r0, r3]
 800aede:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800aee2:	460b      	mov	r3, r1
 800aee4:	2900      	cmp	r1, #0
 800aee6:	d1f5      	bne.n	800aed4 <_printf_i+0x16c>
 800aee8:	e7b9      	b.n	800ae5e <_printf_i+0xf6>
 800aeea:	6813      	ldr	r3, [r2, #0]
 800aeec:	6825      	ldr	r5, [r4, #0]
 800aeee:	6961      	ldr	r1, [r4, #20]
 800aef0:	1d18      	adds	r0, r3, #4
 800aef2:	6010      	str	r0, [r2, #0]
 800aef4:	0628      	lsls	r0, r5, #24
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	d501      	bpl.n	800aefe <_printf_i+0x196>
 800aefa:	6019      	str	r1, [r3, #0]
 800aefc:	e002      	b.n	800af04 <_printf_i+0x19c>
 800aefe:	066a      	lsls	r2, r5, #25
 800af00:	d5fb      	bpl.n	800aefa <_printf_i+0x192>
 800af02:	8019      	strh	r1, [r3, #0]
 800af04:	2300      	movs	r3, #0
 800af06:	6123      	str	r3, [r4, #16]
 800af08:	4665      	mov	r5, ip
 800af0a:	e7b9      	b.n	800ae80 <_printf_i+0x118>
 800af0c:	6813      	ldr	r3, [r2, #0]
 800af0e:	1d19      	adds	r1, r3, #4
 800af10:	6011      	str	r1, [r2, #0]
 800af12:	681d      	ldr	r5, [r3, #0]
 800af14:	6862      	ldr	r2, [r4, #4]
 800af16:	2100      	movs	r1, #0
 800af18:	4628      	mov	r0, r5
 800af1a:	f7f5 f979 	bl	8000210 <memchr>
 800af1e:	b108      	cbz	r0, 800af24 <_printf_i+0x1bc>
 800af20:	1b40      	subs	r0, r0, r5
 800af22:	6060      	str	r0, [r4, #4]
 800af24:	6863      	ldr	r3, [r4, #4]
 800af26:	6123      	str	r3, [r4, #16]
 800af28:	2300      	movs	r3, #0
 800af2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af2e:	e7a7      	b.n	800ae80 <_printf_i+0x118>
 800af30:	6923      	ldr	r3, [r4, #16]
 800af32:	462a      	mov	r2, r5
 800af34:	4639      	mov	r1, r7
 800af36:	4630      	mov	r0, r6
 800af38:	47c0      	blx	r8
 800af3a:	3001      	adds	r0, #1
 800af3c:	d0aa      	beq.n	800ae94 <_printf_i+0x12c>
 800af3e:	6823      	ldr	r3, [r4, #0]
 800af40:	079b      	lsls	r3, r3, #30
 800af42:	d413      	bmi.n	800af6c <_printf_i+0x204>
 800af44:	68e0      	ldr	r0, [r4, #12]
 800af46:	9b03      	ldr	r3, [sp, #12]
 800af48:	4298      	cmp	r0, r3
 800af4a:	bfb8      	it	lt
 800af4c:	4618      	movlt	r0, r3
 800af4e:	e7a3      	b.n	800ae98 <_printf_i+0x130>
 800af50:	2301      	movs	r3, #1
 800af52:	464a      	mov	r2, r9
 800af54:	4639      	mov	r1, r7
 800af56:	4630      	mov	r0, r6
 800af58:	47c0      	blx	r8
 800af5a:	3001      	adds	r0, #1
 800af5c:	d09a      	beq.n	800ae94 <_printf_i+0x12c>
 800af5e:	3501      	adds	r5, #1
 800af60:	68e3      	ldr	r3, [r4, #12]
 800af62:	9a03      	ldr	r2, [sp, #12]
 800af64:	1a9b      	subs	r3, r3, r2
 800af66:	42ab      	cmp	r3, r5
 800af68:	dcf2      	bgt.n	800af50 <_printf_i+0x1e8>
 800af6a:	e7eb      	b.n	800af44 <_printf_i+0x1dc>
 800af6c:	2500      	movs	r5, #0
 800af6e:	f104 0919 	add.w	r9, r4, #25
 800af72:	e7f5      	b.n	800af60 <_printf_i+0x1f8>
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1ac      	bne.n	800aed2 <_printf_i+0x16a>
 800af78:	7803      	ldrb	r3, [r0, #0]
 800af7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af82:	e76c      	b.n	800ae5e <_printf_i+0xf6>
 800af84:	0800c4c9 	.word	0x0800c4c9
 800af88:	0800c4da 	.word	0x0800c4da

0800af8c <memmove>:
 800af8c:	4288      	cmp	r0, r1
 800af8e:	b510      	push	{r4, lr}
 800af90:	eb01 0302 	add.w	r3, r1, r2
 800af94:	d807      	bhi.n	800afa6 <memmove+0x1a>
 800af96:	1e42      	subs	r2, r0, #1
 800af98:	4299      	cmp	r1, r3
 800af9a:	d00a      	beq.n	800afb2 <memmove+0x26>
 800af9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afa0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800afa4:	e7f8      	b.n	800af98 <memmove+0xc>
 800afa6:	4283      	cmp	r3, r0
 800afa8:	d9f5      	bls.n	800af96 <memmove+0xa>
 800afaa:	1881      	adds	r1, r0, r2
 800afac:	1ad2      	subs	r2, r2, r3
 800afae:	42d3      	cmn	r3, r2
 800afb0:	d100      	bne.n	800afb4 <memmove+0x28>
 800afb2:	bd10      	pop	{r4, pc}
 800afb4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800afb8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800afbc:	e7f7      	b.n	800afae <memmove+0x22>
	...

0800afc0 <_free_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4605      	mov	r5, r0
 800afc4:	2900      	cmp	r1, #0
 800afc6:	d045      	beq.n	800b054 <_free_r+0x94>
 800afc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afcc:	1f0c      	subs	r4, r1, #4
 800afce:	2b00      	cmp	r3, #0
 800afd0:	bfb8      	it	lt
 800afd2:	18e4      	addlt	r4, r4, r3
 800afd4:	f000 f8d2 	bl	800b17c <__malloc_lock>
 800afd8:	4a1f      	ldr	r2, [pc, #124]	; (800b058 <_free_r+0x98>)
 800afda:	6813      	ldr	r3, [r2, #0]
 800afdc:	4610      	mov	r0, r2
 800afde:	b933      	cbnz	r3, 800afee <_free_r+0x2e>
 800afe0:	6063      	str	r3, [r4, #4]
 800afe2:	6014      	str	r4, [r2, #0]
 800afe4:	4628      	mov	r0, r5
 800afe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afea:	f000 b8c8 	b.w	800b17e <__malloc_unlock>
 800afee:	42a3      	cmp	r3, r4
 800aff0:	d90c      	bls.n	800b00c <_free_r+0x4c>
 800aff2:	6821      	ldr	r1, [r4, #0]
 800aff4:	1862      	adds	r2, r4, r1
 800aff6:	4293      	cmp	r3, r2
 800aff8:	bf04      	itt	eq
 800affa:	681a      	ldreq	r2, [r3, #0]
 800affc:	685b      	ldreq	r3, [r3, #4]
 800affe:	6063      	str	r3, [r4, #4]
 800b000:	bf04      	itt	eq
 800b002:	1852      	addeq	r2, r2, r1
 800b004:	6022      	streq	r2, [r4, #0]
 800b006:	6004      	str	r4, [r0, #0]
 800b008:	e7ec      	b.n	800afe4 <_free_r+0x24>
 800b00a:	4613      	mov	r3, r2
 800b00c:	685a      	ldr	r2, [r3, #4]
 800b00e:	b10a      	cbz	r2, 800b014 <_free_r+0x54>
 800b010:	42a2      	cmp	r2, r4
 800b012:	d9fa      	bls.n	800b00a <_free_r+0x4a>
 800b014:	6819      	ldr	r1, [r3, #0]
 800b016:	1858      	adds	r0, r3, r1
 800b018:	42a0      	cmp	r0, r4
 800b01a:	d10b      	bne.n	800b034 <_free_r+0x74>
 800b01c:	6820      	ldr	r0, [r4, #0]
 800b01e:	4401      	add	r1, r0
 800b020:	1858      	adds	r0, r3, r1
 800b022:	4282      	cmp	r2, r0
 800b024:	6019      	str	r1, [r3, #0]
 800b026:	d1dd      	bne.n	800afe4 <_free_r+0x24>
 800b028:	6810      	ldr	r0, [r2, #0]
 800b02a:	6852      	ldr	r2, [r2, #4]
 800b02c:	605a      	str	r2, [r3, #4]
 800b02e:	4401      	add	r1, r0
 800b030:	6019      	str	r1, [r3, #0]
 800b032:	e7d7      	b.n	800afe4 <_free_r+0x24>
 800b034:	d902      	bls.n	800b03c <_free_r+0x7c>
 800b036:	230c      	movs	r3, #12
 800b038:	602b      	str	r3, [r5, #0]
 800b03a:	e7d3      	b.n	800afe4 <_free_r+0x24>
 800b03c:	6820      	ldr	r0, [r4, #0]
 800b03e:	1821      	adds	r1, r4, r0
 800b040:	428a      	cmp	r2, r1
 800b042:	bf04      	itt	eq
 800b044:	6811      	ldreq	r1, [r2, #0]
 800b046:	6852      	ldreq	r2, [r2, #4]
 800b048:	6062      	str	r2, [r4, #4]
 800b04a:	bf04      	itt	eq
 800b04c:	1809      	addeq	r1, r1, r0
 800b04e:	6021      	streq	r1, [r4, #0]
 800b050:	605c      	str	r4, [r3, #4]
 800b052:	e7c7      	b.n	800afe4 <_free_r+0x24>
 800b054:	bd38      	pop	{r3, r4, r5, pc}
 800b056:	bf00      	nop
 800b058:	20001620 	.word	0x20001620

0800b05c <_malloc_r>:
 800b05c:	b570      	push	{r4, r5, r6, lr}
 800b05e:	1ccd      	adds	r5, r1, #3
 800b060:	f025 0503 	bic.w	r5, r5, #3
 800b064:	3508      	adds	r5, #8
 800b066:	2d0c      	cmp	r5, #12
 800b068:	bf38      	it	cc
 800b06a:	250c      	movcc	r5, #12
 800b06c:	2d00      	cmp	r5, #0
 800b06e:	4606      	mov	r6, r0
 800b070:	db01      	blt.n	800b076 <_malloc_r+0x1a>
 800b072:	42a9      	cmp	r1, r5
 800b074:	d903      	bls.n	800b07e <_malloc_r+0x22>
 800b076:	230c      	movs	r3, #12
 800b078:	6033      	str	r3, [r6, #0]
 800b07a:	2000      	movs	r0, #0
 800b07c:	bd70      	pop	{r4, r5, r6, pc}
 800b07e:	f000 f87d 	bl	800b17c <__malloc_lock>
 800b082:	4a21      	ldr	r2, [pc, #132]	; (800b108 <_malloc_r+0xac>)
 800b084:	6814      	ldr	r4, [r2, #0]
 800b086:	4621      	mov	r1, r4
 800b088:	b991      	cbnz	r1, 800b0b0 <_malloc_r+0x54>
 800b08a:	4c20      	ldr	r4, [pc, #128]	; (800b10c <_malloc_r+0xb0>)
 800b08c:	6823      	ldr	r3, [r4, #0]
 800b08e:	b91b      	cbnz	r3, 800b098 <_malloc_r+0x3c>
 800b090:	4630      	mov	r0, r6
 800b092:	f000 f863 	bl	800b15c <_sbrk_r>
 800b096:	6020      	str	r0, [r4, #0]
 800b098:	4629      	mov	r1, r5
 800b09a:	4630      	mov	r0, r6
 800b09c:	f000 f85e 	bl	800b15c <_sbrk_r>
 800b0a0:	1c43      	adds	r3, r0, #1
 800b0a2:	d124      	bne.n	800b0ee <_malloc_r+0x92>
 800b0a4:	230c      	movs	r3, #12
 800b0a6:	6033      	str	r3, [r6, #0]
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f000 f868 	bl	800b17e <__malloc_unlock>
 800b0ae:	e7e4      	b.n	800b07a <_malloc_r+0x1e>
 800b0b0:	680b      	ldr	r3, [r1, #0]
 800b0b2:	1b5b      	subs	r3, r3, r5
 800b0b4:	d418      	bmi.n	800b0e8 <_malloc_r+0x8c>
 800b0b6:	2b0b      	cmp	r3, #11
 800b0b8:	d90f      	bls.n	800b0da <_malloc_r+0x7e>
 800b0ba:	600b      	str	r3, [r1, #0]
 800b0bc:	50cd      	str	r5, [r1, r3]
 800b0be:	18cc      	adds	r4, r1, r3
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	f000 f85c 	bl	800b17e <__malloc_unlock>
 800b0c6:	f104 000b 	add.w	r0, r4, #11
 800b0ca:	1d23      	adds	r3, r4, #4
 800b0cc:	f020 0007 	bic.w	r0, r0, #7
 800b0d0:	1ac3      	subs	r3, r0, r3
 800b0d2:	d0d3      	beq.n	800b07c <_malloc_r+0x20>
 800b0d4:	425a      	negs	r2, r3
 800b0d6:	50e2      	str	r2, [r4, r3]
 800b0d8:	e7d0      	b.n	800b07c <_malloc_r+0x20>
 800b0da:	428c      	cmp	r4, r1
 800b0dc:	684b      	ldr	r3, [r1, #4]
 800b0de:	bf16      	itet	ne
 800b0e0:	6063      	strne	r3, [r4, #4]
 800b0e2:	6013      	streq	r3, [r2, #0]
 800b0e4:	460c      	movne	r4, r1
 800b0e6:	e7eb      	b.n	800b0c0 <_malloc_r+0x64>
 800b0e8:	460c      	mov	r4, r1
 800b0ea:	6849      	ldr	r1, [r1, #4]
 800b0ec:	e7cc      	b.n	800b088 <_malloc_r+0x2c>
 800b0ee:	1cc4      	adds	r4, r0, #3
 800b0f0:	f024 0403 	bic.w	r4, r4, #3
 800b0f4:	42a0      	cmp	r0, r4
 800b0f6:	d005      	beq.n	800b104 <_malloc_r+0xa8>
 800b0f8:	1a21      	subs	r1, r4, r0
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f000 f82e 	bl	800b15c <_sbrk_r>
 800b100:	3001      	adds	r0, #1
 800b102:	d0cf      	beq.n	800b0a4 <_malloc_r+0x48>
 800b104:	6025      	str	r5, [r4, #0]
 800b106:	e7db      	b.n	800b0c0 <_malloc_r+0x64>
 800b108:	20001620 	.word	0x20001620
 800b10c:	20001624 	.word	0x20001624

0800b110 <_realloc_r>:
 800b110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b112:	4607      	mov	r7, r0
 800b114:	4614      	mov	r4, r2
 800b116:	460e      	mov	r6, r1
 800b118:	b921      	cbnz	r1, 800b124 <_realloc_r+0x14>
 800b11a:	4611      	mov	r1, r2
 800b11c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b120:	f7ff bf9c 	b.w	800b05c <_malloc_r>
 800b124:	b922      	cbnz	r2, 800b130 <_realloc_r+0x20>
 800b126:	f7ff ff4b 	bl	800afc0 <_free_r>
 800b12a:	4625      	mov	r5, r4
 800b12c:	4628      	mov	r0, r5
 800b12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b130:	f000 f826 	bl	800b180 <_malloc_usable_size_r>
 800b134:	42a0      	cmp	r0, r4
 800b136:	d20f      	bcs.n	800b158 <_realloc_r+0x48>
 800b138:	4621      	mov	r1, r4
 800b13a:	4638      	mov	r0, r7
 800b13c:	f7ff ff8e 	bl	800b05c <_malloc_r>
 800b140:	4605      	mov	r5, r0
 800b142:	2800      	cmp	r0, #0
 800b144:	d0f2      	beq.n	800b12c <_realloc_r+0x1c>
 800b146:	4631      	mov	r1, r6
 800b148:	4622      	mov	r2, r4
 800b14a:	f7ff fc11 	bl	800a970 <memcpy>
 800b14e:	4631      	mov	r1, r6
 800b150:	4638      	mov	r0, r7
 800b152:	f7ff ff35 	bl	800afc0 <_free_r>
 800b156:	e7e9      	b.n	800b12c <_realloc_r+0x1c>
 800b158:	4635      	mov	r5, r6
 800b15a:	e7e7      	b.n	800b12c <_realloc_r+0x1c>

0800b15c <_sbrk_r>:
 800b15c:	b538      	push	{r3, r4, r5, lr}
 800b15e:	4c06      	ldr	r4, [pc, #24]	; (800b178 <_sbrk_r+0x1c>)
 800b160:	2300      	movs	r3, #0
 800b162:	4605      	mov	r5, r0
 800b164:	4608      	mov	r0, r1
 800b166:	6023      	str	r3, [r4, #0]
 800b168:	f7ff fb42 	bl	800a7f0 <_sbrk>
 800b16c:	1c43      	adds	r3, r0, #1
 800b16e:	d102      	bne.n	800b176 <_sbrk_r+0x1a>
 800b170:	6823      	ldr	r3, [r4, #0]
 800b172:	b103      	cbz	r3, 800b176 <_sbrk_r+0x1a>
 800b174:	602b      	str	r3, [r5, #0]
 800b176:	bd38      	pop	{r3, r4, r5, pc}
 800b178:	20001930 	.word	0x20001930

0800b17c <__malloc_lock>:
 800b17c:	4770      	bx	lr

0800b17e <__malloc_unlock>:
 800b17e:	4770      	bx	lr

0800b180 <_malloc_usable_size_r>:
 800b180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b184:	1f18      	subs	r0, r3, #4
 800b186:	2b00      	cmp	r3, #0
 800b188:	bfbc      	itt	lt
 800b18a:	580b      	ldrlt	r3, [r1, r0]
 800b18c:	18c0      	addlt	r0, r0, r3
 800b18e:	4770      	bx	lr

0800b190 <fmin>:
 800b190:	b508      	push	{r3, lr}
 800b192:	ed2d 8b04 	vpush	{d8-d9}
 800b196:	eeb0 8a40 	vmov.f32	s16, s0
 800b19a:	eef0 8a60 	vmov.f32	s17, s1
 800b19e:	eeb0 9a41 	vmov.f32	s18, s2
 800b1a2:	eef0 9a61 	vmov.f32	s19, s3
 800b1a6:	f000 f81b 	bl	800b1e0 <__fpclassifyd>
 800b1aa:	b168      	cbz	r0, 800b1c8 <fmin+0x38>
 800b1ac:	eeb0 0a49 	vmov.f32	s0, s18
 800b1b0:	eef0 0a69 	vmov.f32	s1, s19
 800b1b4:	f000 f814 	bl	800b1e0 <__fpclassifyd>
 800b1b8:	b150      	cbz	r0, 800b1d0 <fmin+0x40>
 800b1ba:	ec53 2b19 	vmov	r2, r3, d9
 800b1be:	ec51 0b18 	vmov	r0, r1, d8
 800b1c2:	f7f5 fca3 	bl	8000b0c <__aeabi_dcmplt>
 800b1c6:	b918      	cbnz	r0, 800b1d0 <fmin+0x40>
 800b1c8:	eeb0 8a49 	vmov.f32	s16, s18
 800b1cc:	eef0 8a69 	vmov.f32	s17, s19
 800b1d0:	eeb0 0a48 	vmov.f32	s0, s16
 800b1d4:	eef0 0a68 	vmov.f32	s1, s17
 800b1d8:	ecbd 8b04 	vpop	{d8-d9}
 800b1dc:	bd08      	pop	{r3, pc}
	...

0800b1e0 <__fpclassifyd>:
 800b1e0:	ec51 0b10 	vmov	r0, r1, d0
 800b1e4:	f031 4200 	bics.w	r2, r1, #2147483648	; 0x80000000
 800b1e8:	b510      	push	{r4, lr}
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	d01b      	beq.n	800b226 <__fpclassifyd+0x46>
 800b1ee:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 800b1f2:	490f      	ldr	r1, [pc, #60]	; (800b230 <__fpclassifyd+0x50>)
 800b1f4:	428c      	cmp	r4, r1
 800b1f6:	d910      	bls.n	800b21a <__fpclassifyd+0x3a>
 800b1f8:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 800b1fc:	490c      	ldr	r1, [pc, #48]	; (800b230 <__fpclassifyd+0x50>)
 800b1fe:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b202:	428b      	cmp	r3, r1
 800b204:	d909      	bls.n	800b21a <__fpclassifyd+0x3a>
 800b206:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800b20a:	d308      	bcc.n	800b21e <__fpclassifyd+0x3e>
 800b20c:	4b09      	ldr	r3, [pc, #36]	; (800b234 <__fpclassifyd+0x54>)
 800b20e:	429a      	cmp	r2, r3
 800b210:	d107      	bne.n	800b222 <__fpclassifyd+0x42>
 800b212:	fab0 f080 	clz	r0, r0
 800b216:	0940      	lsrs	r0, r0, #5
 800b218:	bd10      	pop	{r4, pc}
 800b21a:	2004      	movs	r0, #4
 800b21c:	e7fc      	b.n	800b218 <__fpclassifyd+0x38>
 800b21e:	2003      	movs	r0, #3
 800b220:	e7fa      	b.n	800b218 <__fpclassifyd+0x38>
 800b222:	2000      	movs	r0, #0
 800b224:	e7f8      	b.n	800b218 <__fpclassifyd+0x38>
 800b226:	2800      	cmp	r0, #0
 800b228:	d1e6      	bne.n	800b1f8 <__fpclassifyd+0x18>
 800b22a:	2002      	movs	r0, #2
 800b22c:	e7f4      	b.n	800b218 <__fpclassifyd+0x38>
 800b22e:	bf00      	nop
 800b230:	7fdfffff 	.word	0x7fdfffff
 800b234:	7ff00000 	.word	0x7ff00000

0800b238 <pow>:
 800b238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23c:	ed2d 8b04 	vpush	{d8-d9}
 800b240:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800b514 <pow+0x2dc>
 800b244:	b08d      	sub	sp, #52	; 0x34
 800b246:	ec57 6b10 	vmov	r6, r7, d0
 800b24a:	ec55 4b11 	vmov	r4, r5, d1
 800b24e:	f000 f963 	bl	800b518 <__ieee754_pow>
 800b252:	f999 3000 	ldrsb.w	r3, [r9]
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	3301      	adds	r3, #1
 800b25a:	eeb0 8a40 	vmov.f32	s16, s0
 800b25e:	eef0 8a60 	vmov.f32	s17, s1
 800b262:	46c8      	mov	r8, r9
 800b264:	d05f      	beq.n	800b326 <pow+0xee>
 800b266:	4622      	mov	r2, r4
 800b268:	462b      	mov	r3, r5
 800b26a:	4620      	mov	r0, r4
 800b26c:	4629      	mov	r1, r5
 800b26e:	f7f5 fc75 	bl	8000b5c <__aeabi_dcmpun>
 800b272:	4683      	mov	fp, r0
 800b274:	2800      	cmp	r0, #0
 800b276:	d156      	bne.n	800b326 <pow+0xee>
 800b278:	4632      	mov	r2, r6
 800b27a:	463b      	mov	r3, r7
 800b27c:	4630      	mov	r0, r6
 800b27e:	4639      	mov	r1, r7
 800b280:	f7f5 fc6c 	bl	8000b5c <__aeabi_dcmpun>
 800b284:	9001      	str	r0, [sp, #4]
 800b286:	b1e8      	cbz	r0, 800b2c4 <pow+0x8c>
 800b288:	2200      	movs	r2, #0
 800b28a:	2300      	movs	r3, #0
 800b28c:	4620      	mov	r0, r4
 800b28e:	4629      	mov	r1, r5
 800b290:	f7f5 fc32 	bl	8000af8 <__aeabi_dcmpeq>
 800b294:	2800      	cmp	r0, #0
 800b296:	d046      	beq.n	800b326 <pow+0xee>
 800b298:	2301      	movs	r3, #1
 800b29a:	9302      	str	r3, [sp, #8]
 800b29c:	4b96      	ldr	r3, [pc, #600]	; (800b4f8 <pow+0x2c0>)
 800b29e:	9303      	str	r3, [sp, #12]
 800b2a0:	4b96      	ldr	r3, [pc, #600]	; (800b4fc <pow+0x2c4>)
 800b2a2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b2ac:	9b00      	ldr	r3, [sp, #0]
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b2b4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b2b8:	d033      	beq.n	800b322 <pow+0xea>
 800b2ba:	a802      	add	r0, sp, #8
 800b2bc:	f000 fefb 	bl	800c0b6 <matherr>
 800b2c0:	bb48      	cbnz	r0, 800b316 <pow+0xde>
 800b2c2:	e05d      	b.n	800b380 <pow+0x148>
 800b2c4:	f04f 0a00 	mov.w	sl, #0
 800b2c8:	f04f 0b00 	mov.w	fp, #0
 800b2cc:	4652      	mov	r2, sl
 800b2ce:	465b      	mov	r3, fp
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	4639      	mov	r1, r7
 800b2d4:	f7f5 fc10 	bl	8000af8 <__aeabi_dcmpeq>
 800b2d8:	ec4b ab19 	vmov	d9, sl, fp
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d054      	beq.n	800b38a <pow+0x152>
 800b2e0:	4652      	mov	r2, sl
 800b2e2:	465b      	mov	r3, fp
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	f7f5 fc06 	bl	8000af8 <__aeabi_dcmpeq>
 800b2ec:	4680      	mov	r8, r0
 800b2ee:	b318      	cbz	r0, 800b338 <pow+0x100>
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	9302      	str	r3, [sp, #8]
 800b2f4:	4b80      	ldr	r3, [pc, #512]	; (800b4f8 <pow+0x2c0>)
 800b2f6:	9303      	str	r3, [sp, #12]
 800b2f8:	9b01      	ldr	r3, [sp, #4]
 800b2fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b2fc:	9b00      	ldr	r3, [sp, #0]
 800b2fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b302:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b306:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d0d5      	beq.n	800b2ba <pow+0x82>
 800b30e:	4b7b      	ldr	r3, [pc, #492]	; (800b4fc <pow+0x2c4>)
 800b310:	2200      	movs	r2, #0
 800b312:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b318:	b11b      	cbz	r3, 800b322 <pow+0xea>
 800b31a:	f7ff faff 	bl	800a91c <__errno>
 800b31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b320:	6003      	str	r3, [r0, #0]
 800b322:	ed9d 8b08 	vldr	d8, [sp, #32]
 800b326:	eeb0 0a48 	vmov.f32	s0, s16
 800b32a:	eef0 0a68 	vmov.f32	s1, s17
 800b32e:	b00d      	add	sp, #52	; 0x34
 800b330:	ecbd 8b04 	vpop	{d8-d9}
 800b334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b338:	ec45 4b10 	vmov	d0, r4, r5
 800b33c:	f000 feb3 	bl	800c0a6 <finite>
 800b340:	2800      	cmp	r0, #0
 800b342:	d0f0      	beq.n	800b326 <pow+0xee>
 800b344:	4652      	mov	r2, sl
 800b346:	465b      	mov	r3, fp
 800b348:	4620      	mov	r0, r4
 800b34a:	4629      	mov	r1, r5
 800b34c:	f7f5 fbde 	bl	8000b0c <__aeabi_dcmplt>
 800b350:	2800      	cmp	r0, #0
 800b352:	d0e8      	beq.n	800b326 <pow+0xee>
 800b354:	2301      	movs	r3, #1
 800b356:	9302      	str	r3, [sp, #8]
 800b358:	4b67      	ldr	r3, [pc, #412]	; (800b4f8 <pow+0x2c0>)
 800b35a:	9303      	str	r3, [sp, #12]
 800b35c:	f999 3000 	ldrsb.w	r3, [r9]
 800b360:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800b364:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b368:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b36c:	b913      	cbnz	r3, 800b374 <pow+0x13c>
 800b36e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b372:	e7a2      	b.n	800b2ba <pow+0x82>
 800b374:	4962      	ldr	r1, [pc, #392]	; (800b500 <pow+0x2c8>)
 800b376:	2000      	movs	r0, #0
 800b378:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d19c      	bne.n	800b2ba <pow+0x82>
 800b380:	f7ff facc 	bl	800a91c <__errno>
 800b384:	2321      	movs	r3, #33	; 0x21
 800b386:	6003      	str	r3, [r0, #0]
 800b388:	e7c5      	b.n	800b316 <pow+0xde>
 800b38a:	eeb0 0a48 	vmov.f32	s0, s16
 800b38e:	eef0 0a68 	vmov.f32	s1, s17
 800b392:	f000 fe88 	bl	800c0a6 <finite>
 800b396:	9000      	str	r0, [sp, #0]
 800b398:	2800      	cmp	r0, #0
 800b39a:	f040 8081 	bne.w	800b4a0 <pow+0x268>
 800b39e:	ec47 6b10 	vmov	d0, r6, r7
 800b3a2:	f000 fe80 	bl	800c0a6 <finite>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	d07a      	beq.n	800b4a0 <pow+0x268>
 800b3aa:	ec45 4b10 	vmov	d0, r4, r5
 800b3ae:	f000 fe7a 	bl	800c0a6 <finite>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d074      	beq.n	800b4a0 <pow+0x268>
 800b3b6:	ec53 2b18 	vmov	r2, r3, d8
 800b3ba:	ee18 0a10 	vmov	r0, s16
 800b3be:	4619      	mov	r1, r3
 800b3c0:	f7f5 fbcc 	bl	8000b5c <__aeabi_dcmpun>
 800b3c4:	f999 9000 	ldrsb.w	r9, [r9]
 800b3c8:	4b4b      	ldr	r3, [pc, #300]	; (800b4f8 <pow+0x2c0>)
 800b3ca:	b1b0      	cbz	r0, 800b3fa <pow+0x1c2>
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3d2:	9b00      	ldr	r3, [sp, #0]
 800b3d4:	930a      	str	r3, [sp, #40]	; 0x28
 800b3d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b3da:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b3de:	f1b9 0f00 	cmp.w	r9, #0
 800b3e2:	d0c4      	beq.n	800b36e <pow+0x136>
 800b3e4:	4652      	mov	r2, sl
 800b3e6:	465b      	mov	r3, fp
 800b3e8:	4650      	mov	r0, sl
 800b3ea:	4659      	mov	r1, fp
 800b3ec:	f7f5 fa46 	bl	800087c <__aeabi_ddiv>
 800b3f0:	f1b9 0f02 	cmp.w	r9, #2
 800b3f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b3f8:	e7c1      	b.n	800b37e <pow+0x146>
 800b3fa:	2203      	movs	r2, #3
 800b3fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b400:	900a      	str	r0, [sp, #40]	; 0x28
 800b402:	4629      	mov	r1, r5
 800b404:	4620      	mov	r0, r4
 800b406:	2200      	movs	r2, #0
 800b408:	4b3e      	ldr	r3, [pc, #248]	; (800b504 <pow+0x2cc>)
 800b40a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b40e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b412:	f7f5 f909 	bl	8000628 <__aeabi_dmul>
 800b416:	4604      	mov	r4, r0
 800b418:	460d      	mov	r5, r1
 800b41a:	f1b9 0f00 	cmp.w	r9, #0
 800b41e:	d124      	bne.n	800b46a <pow+0x232>
 800b420:	4b39      	ldr	r3, [pc, #228]	; (800b508 <pow+0x2d0>)
 800b422:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b426:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b42a:	4630      	mov	r0, r6
 800b42c:	4652      	mov	r2, sl
 800b42e:	465b      	mov	r3, fp
 800b430:	4639      	mov	r1, r7
 800b432:	f7f5 fb6b 	bl	8000b0c <__aeabi_dcmplt>
 800b436:	2800      	cmp	r0, #0
 800b438:	d056      	beq.n	800b4e8 <pow+0x2b0>
 800b43a:	ec45 4b10 	vmov	d0, r4, r5
 800b43e:	f000 fe47 	bl	800c0d0 <rint>
 800b442:	4622      	mov	r2, r4
 800b444:	462b      	mov	r3, r5
 800b446:	ec51 0b10 	vmov	r0, r1, d0
 800b44a:	f7f5 fb55 	bl	8000af8 <__aeabi_dcmpeq>
 800b44e:	b920      	cbnz	r0, 800b45a <pow+0x222>
 800b450:	4b2e      	ldr	r3, [pc, #184]	; (800b50c <pow+0x2d4>)
 800b452:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b456:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b45a:	f998 3000 	ldrsb.w	r3, [r8]
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d142      	bne.n	800b4e8 <pow+0x2b0>
 800b462:	f7ff fa5b 	bl	800a91c <__errno>
 800b466:	2322      	movs	r3, #34	; 0x22
 800b468:	e78d      	b.n	800b386 <pow+0x14e>
 800b46a:	4b29      	ldr	r3, [pc, #164]	; (800b510 <pow+0x2d8>)
 800b46c:	2200      	movs	r2, #0
 800b46e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b472:	4630      	mov	r0, r6
 800b474:	4652      	mov	r2, sl
 800b476:	465b      	mov	r3, fp
 800b478:	4639      	mov	r1, r7
 800b47a:	f7f5 fb47 	bl	8000b0c <__aeabi_dcmplt>
 800b47e:	2800      	cmp	r0, #0
 800b480:	d0eb      	beq.n	800b45a <pow+0x222>
 800b482:	ec45 4b10 	vmov	d0, r4, r5
 800b486:	f000 fe23 	bl	800c0d0 <rint>
 800b48a:	4622      	mov	r2, r4
 800b48c:	462b      	mov	r3, r5
 800b48e:	ec51 0b10 	vmov	r0, r1, d0
 800b492:	f7f5 fb31 	bl	8000af8 <__aeabi_dcmpeq>
 800b496:	2800      	cmp	r0, #0
 800b498:	d1df      	bne.n	800b45a <pow+0x222>
 800b49a:	2200      	movs	r2, #0
 800b49c:	4b18      	ldr	r3, [pc, #96]	; (800b500 <pow+0x2c8>)
 800b49e:	e7da      	b.n	800b456 <pow+0x21e>
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	ec51 0b18 	vmov	r0, r1, d8
 800b4a8:	f7f5 fb26 	bl	8000af8 <__aeabi_dcmpeq>
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	f43f af3a 	beq.w	800b326 <pow+0xee>
 800b4b2:	ec47 6b10 	vmov	d0, r6, r7
 800b4b6:	f000 fdf6 	bl	800c0a6 <finite>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	f43f af33 	beq.w	800b326 <pow+0xee>
 800b4c0:	ec45 4b10 	vmov	d0, r4, r5
 800b4c4:	f000 fdef 	bl	800c0a6 <finite>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	f43f af2c 	beq.w	800b326 <pow+0xee>
 800b4ce:	2304      	movs	r3, #4
 800b4d0:	9302      	str	r3, [sp, #8]
 800b4d2:	4b09      	ldr	r3, [pc, #36]	; (800b4f8 <pow+0x2c0>)
 800b4d4:	9303      	str	r3, [sp, #12]
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	930a      	str	r3, [sp, #40]	; 0x28
 800b4da:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b4de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b4e2:	ed8d 9b08 	vstr	d9, [sp, #32]
 800b4e6:	e7b8      	b.n	800b45a <pow+0x222>
 800b4e8:	a802      	add	r0, sp, #8
 800b4ea:	f000 fde4 	bl	800c0b6 <matherr>
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	f47f af11 	bne.w	800b316 <pow+0xde>
 800b4f4:	e7b5      	b.n	800b462 <pow+0x22a>
 800b4f6:	bf00      	nop
 800b4f8:	0800c4eb 	.word	0x0800c4eb
 800b4fc:	3ff00000 	.word	0x3ff00000
 800b500:	fff00000 	.word	0xfff00000
 800b504:	3fe00000 	.word	0x3fe00000
 800b508:	47efffff 	.word	0x47efffff
 800b50c:	c7efffff 	.word	0xc7efffff
 800b510:	7ff00000 	.word	0x7ff00000
 800b514:	20000138 	.word	0x20000138

0800b518 <__ieee754_pow>:
 800b518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b51c:	b091      	sub	sp, #68	; 0x44
 800b51e:	ed8d 1b00 	vstr	d1, [sp]
 800b522:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b526:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b52a:	ea58 0302 	orrs.w	r3, r8, r2
 800b52e:	ec57 6b10 	vmov	r6, r7, d0
 800b532:	f000 84be 	beq.w	800beb2 <__ieee754_pow+0x99a>
 800b536:	4b7a      	ldr	r3, [pc, #488]	; (800b720 <__ieee754_pow+0x208>)
 800b538:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b53c:	429c      	cmp	r4, r3
 800b53e:	463d      	mov	r5, r7
 800b540:	ee10 aa10 	vmov	sl, s0
 800b544:	dc09      	bgt.n	800b55a <__ieee754_pow+0x42>
 800b546:	d103      	bne.n	800b550 <__ieee754_pow+0x38>
 800b548:	b93e      	cbnz	r6, 800b55a <__ieee754_pow+0x42>
 800b54a:	45a0      	cmp	r8, r4
 800b54c:	dc0d      	bgt.n	800b56a <__ieee754_pow+0x52>
 800b54e:	e001      	b.n	800b554 <__ieee754_pow+0x3c>
 800b550:	4598      	cmp	r8, r3
 800b552:	dc02      	bgt.n	800b55a <__ieee754_pow+0x42>
 800b554:	4598      	cmp	r8, r3
 800b556:	d10e      	bne.n	800b576 <__ieee754_pow+0x5e>
 800b558:	b16a      	cbz	r2, 800b576 <__ieee754_pow+0x5e>
 800b55a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b55e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b562:	ea54 030a 	orrs.w	r3, r4, sl
 800b566:	f000 84a4 	beq.w	800beb2 <__ieee754_pow+0x99a>
 800b56a:	486e      	ldr	r0, [pc, #440]	; (800b724 <__ieee754_pow+0x20c>)
 800b56c:	b011      	add	sp, #68	; 0x44
 800b56e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b572:	f000 bda5 	b.w	800c0c0 <nan>
 800b576:	2d00      	cmp	r5, #0
 800b578:	da53      	bge.n	800b622 <__ieee754_pow+0x10a>
 800b57a:	4b6b      	ldr	r3, [pc, #428]	; (800b728 <__ieee754_pow+0x210>)
 800b57c:	4598      	cmp	r8, r3
 800b57e:	dc4d      	bgt.n	800b61c <__ieee754_pow+0x104>
 800b580:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b584:	4598      	cmp	r8, r3
 800b586:	dd4c      	ble.n	800b622 <__ieee754_pow+0x10a>
 800b588:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b58c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b590:	2b14      	cmp	r3, #20
 800b592:	dd26      	ble.n	800b5e2 <__ieee754_pow+0xca>
 800b594:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b598:	fa22 f103 	lsr.w	r1, r2, r3
 800b59c:	fa01 f303 	lsl.w	r3, r1, r3
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d13e      	bne.n	800b622 <__ieee754_pow+0x10a>
 800b5a4:	f001 0101 	and.w	r1, r1, #1
 800b5a8:	f1c1 0b02 	rsb	fp, r1, #2
 800b5ac:	2a00      	cmp	r2, #0
 800b5ae:	d15b      	bne.n	800b668 <__ieee754_pow+0x150>
 800b5b0:	4b5b      	ldr	r3, [pc, #364]	; (800b720 <__ieee754_pow+0x208>)
 800b5b2:	4598      	cmp	r8, r3
 800b5b4:	d124      	bne.n	800b600 <__ieee754_pow+0xe8>
 800b5b6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b5ba:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b5be:	ea53 030a 	orrs.w	r3, r3, sl
 800b5c2:	f000 8476 	beq.w	800beb2 <__ieee754_pow+0x99a>
 800b5c6:	4b59      	ldr	r3, [pc, #356]	; (800b72c <__ieee754_pow+0x214>)
 800b5c8:	429c      	cmp	r4, r3
 800b5ca:	dd2d      	ble.n	800b628 <__ieee754_pow+0x110>
 800b5cc:	f1b9 0f00 	cmp.w	r9, #0
 800b5d0:	f280 8473 	bge.w	800beba <__ieee754_pow+0x9a2>
 800b5d4:	2000      	movs	r0, #0
 800b5d6:	2100      	movs	r1, #0
 800b5d8:	ec41 0b10 	vmov	d0, r0, r1
 800b5dc:	b011      	add	sp, #68	; 0x44
 800b5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e2:	2a00      	cmp	r2, #0
 800b5e4:	d13e      	bne.n	800b664 <__ieee754_pow+0x14c>
 800b5e6:	f1c3 0314 	rsb	r3, r3, #20
 800b5ea:	fa48 f103 	asr.w	r1, r8, r3
 800b5ee:	fa01 f303 	lsl.w	r3, r1, r3
 800b5f2:	4543      	cmp	r3, r8
 800b5f4:	f040 8469 	bne.w	800beca <__ieee754_pow+0x9b2>
 800b5f8:	f001 0101 	and.w	r1, r1, #1
 800b5fc:	f1c1 0b02 	rsb	fp, r1, #2
 800b600:	4b4b      	ldr	r3, [pc, #300]	; (800b730 <__ieee754_pow+0x218>)
 800b602:	4598      	cmp	r8, r3
 800b604:	d118      	bne.n	800b638 <__ieee754_pow+0x120>
 800b606:	f1b9 0f00 	cmp.w	r9, #0
 800b60a:	f280 845a 	bge.w	800bec2 <__ieee754_pow+0x9aa>
 800b60e:	4948      	ldr	r1, [pc, #288]	; (800b730 <__ieee754_pow+0x218>)
 800b610:	4632      	mov	r2, r6
 800b612:	463b      	mov	r3, r7
 800b614:	2000      	movs	r0, #0
 800b616:	f7f5 f931 	bl	800087c <__aeabi_ddiv>
 800b61a:	e7dd      	b.n	800b5d8 <__ieee754_pow+0xc0>
 800b61c:	f04f 0b02 	mov.w	fp, #2
 800b620:	e7c4      	b.n	800b5ac <__ieee754_pow+0x94>
 800b622:	f04f 0b00 	mov.w	fp, #0
 800b626:	e7c1      	b.n	800b5ac <__ieee754_pow+0x94>
 800b628:	f1b9 0f00 	cmp.w	r9, #0
 800b62c:	dad2      	bge.n	800b5d4 <__ieee754_pow+0xbc>
 800b62e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b632:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b636:	e7cf      	b.n	800b5d8 <__ieee754_pow+0xc0>
 800b638:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b63c:	d106      	bne.n	800b64c <__ieee754_pow+0x134>
 800b63e:	4632      	mov	r2, r6
 800b640:	463b      	mov	r3, r7
 800b642:	4610      	mov	r0, r2
 800b644:	4619      	mov	r1, r3
 800b646:	f7f4 ffef 	bl	8000628 <__aeabi_dmul>
 800b64a:	e7c5      	b.n	800b5d8 <__ieee754_pow+0xc0>
 800b64c:	4b39      	ldr	r3, [pc, #228]	; (800b734 <__ieee754_pow+0x21c>)
 800b64e:	4599      	cmp	r9, r3
 800b650:	d10a      	bne.n	800b668 <__ieee754_pow+0x150>
 800b652:	2d00      	cmp	r5, #0
 800b654:	db08      	blt.n	800b668 <__ieee754_pow+0x150>
 800b656:	ec47 6b10 	vmov	d0, r6, r7
 800b65a:	b011      	add	sp, #68	; 0x44
 800b65c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b660:	f000 bc68 	b.w	800bf34 <__ieee754_sqrt>
 800b664:	f04f 0b00 	mov.w	fp, #0
 800b668:	ec47 6b10 	vmov	d0, r6, r7
 800b66c:	f000 fd12 	bl	800c094 <fabs>
 800b670:	ec51 0b10 	vmov	r0, r1, d0
 800b674:	f1ba 0f00 	cmp.w	sl, #0
 800b678:	d127      	bne.n	800b6ca <__ieee754_pow+0x1b2>
 800b67a:	b124      	cbz	r4, 800b686 <__ieee754_pow+0x16e>
 800b67c:	4b2c      	ldr	r3, [pc, #176]	; (800b730 <__ieee754_pow+0x218>)
 800b67e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b682:	429a      	cmp	r2, r3
 800b684:	d121      	bne.n	800b6ca <__ieee754_pow+0x1b2>
 800b686:	f1b9 0f00 	cmp.w	r9, #0
 800b68a:	da05      	bge.n	800b698 <__ieee754_pow+0x180>
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	2000      	movs	r0, #0
 800b692:	4927      	ldr	r1, [pc, #156]	; (800b730 <__ieee754_pow+0x218>)
 800b694:	f7f5 f8f2 	bl	800087c <__aeabi_ddiv>
 800b698:	2d00      	cmp	r5, #0
 800b69a:	da9d      	bge.n	800b5d8 <__ieee754_pow+0xc0>
 800b69c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b6a0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b6a4:	ea54 030b 	orrs.w	r3, r4, fp
 800b6a8:	d108      	bne.n	800b6bc <__ieee754_pow+0x1a4>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	4610      	mov	r0, r2
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	f7f4 fe01 	bl	80002b8 <__aeabi_dsub>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	e7ac      	b.n	800b616 <__ieee754_pow+0xfe>
 800b6bc:	f1bb 0f01 	cmp.w	fp, #1
 800b6c0:	d18a      	bne.n	800b5d8 <__ieee754_pow+0xc0>
 800b6c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	e786      	b.n	800b5d8 <__ieee754_pow+0xc0>
 800b6ca:	0fed      	lsrs	r5, r5, #31
 800b6cc:	1e6b      	subs	r3, r5, #1
 800b6ce:	930d      	str	r3, [sp, #52]	; 0x34
 800b6d0:	ea5b 0303 	orrs.w	r3, fp, r3
 800b6d4:	d102      	bne.n	800b6dc <__ieee754_pow+0x1c4>
 800b6d6:	4632      	mov	r2, r6
 800b6d8:	463b      	mov	r3, r7
 800b6da:	e7e8      	b.n	800b6ae <__ieee754_pow+0x196>
 800b6dc:	4b16      	ldr	r3, [pc, #88]	; (800b738 <__ieee754_pow+0x220>)
 800b6de:	4598      	cmp	r8, r3
 800b6e0:	f340 80fe 	ble.w	800b8e0 <__ieee754_pow+0x3c8>
 800b6e4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b6e8:	4598      	cmp	r8, r3
 800b6ea:	dd0a      	ble.n	800b702 <__ieee754_pow+0x1ea>
 800b6ec:	4b0f      	ldr	r3, [pc, #60]	; (800b72c <__ieee754_pow+0x214>)
 800b6ee:	429c      	cmp	r4, r3
 800b6f0:	dc0d      	bgt.n	800b70e <__ieee754_pow+0x1f6>
 800b6f2:	f1b9 0f00 	cmp.w	r9, #0
 800b6f6:	f6bf af6d 	bge.w	800b5d4 <__ieee754_pow+0xbc>
 800b6fa:	a307      	add	r3, pc, #28	; (adr r3, 800b718 <__ieee754_pow+0x200>)
 800b6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b700:	e79f      	b.n	800b642 <__ieee754_pow+0x12a>
 800b702:	4b0e      	ldr	r3, [pc, #56]	; (800b73c <__ieee754_pow+0x224>)
 800b704:	429c      	cmp	r4, r3
 800b706:	ddf4      	ble.n	800b6f2 <__ieee754_pow+0x1da>
 800b708:	4b09      	ldr	r3, [pc, #36]	; (800b730 <__ieee754_pow+0x218>)
 800b70a:	429c      	cmp	r4, r3
 800b70c:	dd18      	ble.n	800b740 <__ieee754_pow+0x228>
 800b70e:	f1b9 0f00 	cmp.w	r9, #0
 800b712:	dcf2      	bgt.n	800b6fa <__ieee754_pow+0x1e2>
 800b714:	e75e      	b.n	800b5d4 <__ieee754_pow+0xbc>
 800b716:	bf00      	nop
 800b718:	8800759c 	.word	0x8800759c
 800b71c:	7e37e43c 	.word	0x7e37e43c
 800b720:	7ff00000 	.word	0x7ff00000
 800b724:	0800c4bd 	.word	0x0800c4bd
 800b728:	433fffff 	.word	0x433fffff
 800b72c:	3fefffff 	.word	0x3fefffff
 800b730:	3ff00000 	.word	0x3ff00000
 800b734:	3fe00000 	.word	0x3fe00000
 800b738:	41e00000 	.word	0x41e00000
 800b73c:	3feffffe 	.word	0x3feffffe
 800b740:	2200      	movs	r2, #0
 800b742:	4b63      	ldr	r3, [pc, #396]	; (800b8d0 <__ieee754_pow+0x3b8>)
 800b744:	f7f4 fdb8 	bl	80002b8 <__aeabi_dsub>
 800b748:	a355      	add	r3, pc, #340	; (adr r3, 800b8a0 <__ieee754_pow+0x388>)
 800b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74e:	4604      	mov	r4, r0
 800b750:	460d      	mov	r5, r1
 800b752:	f7f4 ff69 	bl	8000628 <__aeabi_dmul>
 800b756:	a354      	add	r3, pc, #336	; (adr r3, 800b8a8 <__ieee754_pow+0x390>)
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	4606      	mov	r6, r0
 800b75e:	460f      	mov	r7, r1
 800b760:	4620      	mov	r0, r4
 800b762:	4629      	mov	r1, r5
 800b764:	f7f4 ff60 	bl	8000628 <__aeabi_dmul>
 800b768:	2200      	movs	r2, #0
 800b76a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b76e:	4b59      	ldr	r3, [pc, #356]	; (800b8d4 <__ieee754_pow+0x3bc>)
 800b770:	4620      	mov	r0, r4
 800b772:	4629      	mov	r1, r5
 800b774:	f7f4 ff58 	bl	8000628 <__aeabi_dmul>
 800b778:	4602      	mov	r2, r0
 800b77a:	460b      	mov	r3, r1
 800b77c:	a14c      	add	r1, pc, #304	; (adr r1, 800b8b0 <__ieee754_pow+0x398>)
 800b77e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b782:	f7f4 fd99 	bl	80002b8 <__aeabi_dsub>
 800b786:	4622      	mov	r2, r4
 800b788:	462b      	mov	r3, r5
 800b78a:	f7f4 ff4d 	bl	8000628 <__aeabi_dmul>
 800b78e:	4602      	mov	r2, r0
 800b790:	460b      	mov	r3, r1
 800b792:	2000      	movs	r0, #0
 800b794:	4950      	ldr	r1, [pc, #320]	; (800b8d8 <__ieee754_pow+0x3c0>)
 800b796:	f7f4 fd8f 	bl	80002b8 <__aeabi_dsub>
 800b79a:	4622      	mov	r2, r4
 800b79c:	462b      	mov	r3, r5
 800b79e:	4680      	mov	r8, r0
 800b7a0:	4689      	mov	r9, r1
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	4629      	mov	r1, r5
 800b7a6:	f7f4 ff3f 	bl	8000628 <__aeabi_dmul>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	4640      	mov	r0, r8
 800b7b0:	4649      	mov	r1, r9
 800b7b2:	f7f4 ff39 	bl	8000628 <__aeabi_dmul>
 800b7b6:	a340      	add	r3, pc, #256	; (adr r3, 800b8b8 <__ieee754_pow+0x3a0>)
 800b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7bc:	f7f4 ff34 	bl	8000628 <__aeabi_dmul>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7c8:	f7f4 fd76 	bl	80002b8 <__aeabi_dsub>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	460d      	mov	r5, r1
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	4639      	mov	r1, r7
 800b7d8:	f7f4 fd70 	bl	80002bc <__adddf3>
 800b7dc:	2000      	movs	r0, #0
 800b7de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7e2:	4632      	mov	r2, r6
 800b7e4:	463b      	mov	r3, r7
 800b7e6:	f7f4 fd67 	bl	80002b8 <__aeabi_dsub>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	f7f4 fd61 	bl	80002b8 <__aeabi_dsub>
 800b7f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7f8:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	4606      	mov	r6, r0
 800b800:	460f      	mov	r7, r1
 800b802:	f040 81eb 	bne.w	800bbdc <__ieee754_pow+0x6c4>
 800b806:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800b8c0 <__ieee754_pow+0x3a8>
 800b80a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b80e:	2400      	movs	r4, #0
 800b810:	4622      	mov	r2, r4
 800b812:	462b      	mov	r3, r5
 800b814:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b818:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b81c:	f7f4 fd4c 	bl	80002b8 <__aeabi_dsub>
 800b820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b824:	f7f4 ff00 	bl	8000628 <__aeabi_dmul>
 800b828:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b82c:	4680      	mov	r8, r0
 800b82e:	4689      	mov	r9, r1
 800b830:	4630      	mov	r0, r6
 800b832:	4639      	mov	r1, r7
 800b834:	f7f4 fef8 	bl	8000628 <__aeabi_dmul>
 800b838:	4602      	mov	r2, r0
 800b83a:	460b      	mov	r3, r1
 800b83c:	4640      	mov	r0, r8
 800b83e:	4649      	mov	r1, r9
 800b840:	f7f4 fd3c 	bl	80002bc <__adddf3>
 800b844:	4622      	mov	r2, r4
 800b846:	462b      	mov	r3, r5
 800b848:	4680      	mov	r8, r0
 800b84a:	4689      	mov	r9, r1
 800b84c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b850:	f7f4 feea 	bl	8000628 <__aeabi_dmul>
 800b854:	460b      	mov	r3, r1
 800b856:	4604      	mov	r4, r0
 800b858:	460d      	mov	r5, r1
 800b85a:	4602      	mov	r2, r0
 800b85c:	4649      	mov	r1, r9
 800b85e:	4640      	mov	r0, r8
 800b860:	e9cd 4500 	strd	r4, r5, [sp]
 800b864:	f7f4 fd2a 	bl	80002bc <__adddf3>
 800b868:	4b1c      	ldr	r3, [pc, #112]	; (800b8dc <__ieee754_pow+0x3c4>)
 800b86a:	4299      	cmp	r1, r3
 800b86c:	4606      	mov	r6, r0
 800b86e:	460f      	mov	r7, r1
 800b870:	468b      	mov	fp, r1
 800b872:	f340 82f7 	ble.w	800be64 <__ieee754_pow+0x94c>
 800b876:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b87a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b87e:	4303      	orrs	r3, r0
 800b880:	f000 81ea 	beq.w	800bc58 <__ieee754_pow+0x740>
 800b884:	a310      	add	r3, pc, #64	; (adr r3, 800b8c8 <__ieee754_pow+0x3b0>)
 800b886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b88e:	f7f4 fecb 	bl	8000628 <__aeabi_dmul>
 800b892:	a30d      	add	r3, pc, #52	; (adr r3, 800b8c8 <__ieee754_pow+0x3b0>)
 800b894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b898:	e6d5      	b.n	800b646 <__ieee754_pow+0x12e>
 800b89a:	bf00      	nop
 800b89c:	f3af 8000 	nop.w
 800b8a0:	60000000 	.word	0x60000000
 800b8a4:	3ff71547 	.word	0x3ff71547
 800b8a8:	f85ddf44 	.word	0xf85ddf44
 800b8ac:	3e54ae0b 	.word	0x3e54ae0b
 800b8b0:	55555555 	.word	0x55555555
 800b8b4:	3fd55555 	.word	0x3fd55555
 800b8b8:	652b82fe 	.word	0x652b82fe
 800b8bc:	3ff71547 	.word	0x3ff71547
 800b8c0:	00000000 	.word	0x00000000
 800b8c4:	bff00000 	.word	0xbff00000
 800b8c8:	8800759c 	.word	0x8800759c
 800b8cc:	7e37e43c 	.word	0x7e37e43c
 800b8d0:	3ff00000 	.word	0x3ff00000
 800b8d4:	3fd00000 	.word	0x3fd00000
 800b8d8:	3fe00000 	.word	0x3fe00000
 800b8dc:	408fffff 	.word	0x408fffff
 800b8e0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b8e4:	f04f 0200 	mov.w	r2, #0
 800b8e8:	da05      	bge.n	800b8f6 <__ieee754_pow+0x3de>
 800b8ea:	4bd3      	ldr	r3, [pc, #844]	; (800bc38 <__ieee754_pow+0x720>)
 800b8ec:	f7f4 fe9c 	bl	8000628 <__aeabi_dmul>
 800b8f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b8f4:	460c      	mov	r4, r1
 800b8f6:	1523      	asrs	r3, r4, #20
 800b8f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b8fc:	4413      	add	r3, r2
 800b8fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b900:	4bce      	ldr	r3, [pc, #824]	; (800bc3c <__ieee754_pow+0x724>)
 800b902:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b906:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b90a:	429c      	cmp	r4, r3
 800b90c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b910:	dd08      	ble.n	800b924 <__ieee754_pow+0x40c>
 800b912:	4bcb      	ldr	r3, [pc, #812]	; (800bc40 <__ieee754_pow+0x728>)
 800b914:	429c      	cmp	r4, r3
 800b916:	f340 815e 	ble.w	800bbd6 <__ieee754_pow+0x6be>
 800b91a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b91c:	3301      	adds	r3, #1
 800b91e:	9309      	str	r3, [sp, #36]	; 0x24
 800b920:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b924:	f04f 0a00 	mov.w	sl, #0
 800b928:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b92c:	930c      	str	r3, [sp, #48]	; 0x30
 800b92e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b930:	4bc4      	ldr	r3, [pc, #784]	; (800bc44 <__ieee754_pow+0x72c>)
 800b932:	4413      	add	r3, r2
 800b934:	ed93 7b00 	vldr	d7, [r3]
 800b938:	4629      	mov	r1, r5
 800b93a:	ec53 2b17 	vmov	r2, r3, d7
 800b93e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b942:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b946:	f7f4 fcb7 	bl	80002b8 <__aeabi_dsub>
 800b94a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b94e:	4606      	mov	r6, r0
 800b950:	460f      	mov	r7, r1
 800b952:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b956:	f7f4 fcb1 	bl	80002bc <__adddf3>
 800b95a:	4602      	mov	r2, r0
 800b95c:	460b      	mov	r3, r1
 800b95e:	2000      	movs	r0, #0
 800b960:	49b9      	ldr	r1, [pc, #740]	; (800bc48 <__ieee754_pow+0x730>)
 800b962:	f7f4 ff8b 	bl	800087c <__aeabi_ddiv>
 800b966:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b96a:	4602      	mov	r2, r0
 800b96c:	460b      	mov	r3, r1
 800b96e:	4630      	mov	r0, r6
 800b970:	4639      	mov	r1, r7
 800b972:	f7f4 fe59 	bl	8000628 <__aeabi_dmul>
 800b976:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b97a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b97e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b982:	2300      	movs	r3, #0
 800b984:	9302      	str	r3, [sp, #8]
 800b986:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b98a:	106d      	asrs	r5, r5, #1
 800b98c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b990:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b994:	2200      	movs	r2, #0
 800b996:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b99a:	4640      	mov	r0, r8
 800b99c:	4649      	mov	r1, r9
 800b99e:	4614      	mov	r4, r2
 800b9a0:	461d      	mov	r5, r3
 800b9a2:	f7f4 fe41 	bl	8000628 <__aeabi_dmul>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	4639      	mov	r1, r7
 800b9ae:	f7f4 fc83 	bl	80002b8 <__aeabi_dsub>
 800b9b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b9b6:	4606      	mov	r6, r0
 800b9b8:	460f      	mov	r7, r1
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	4629      	mov	r1, r5
 800b9be:	f7f4 fc7b 	bl	80002b8 <__aeabi_dsub>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b9ca:	f7f4 fc75 	bl	80002b8 <__aeabi_dsub>
 800b9ce:	4642      	mov	r2, r8
 800b9d0:	464b      	mov	r3, r9
 800b9d2:	f7f4 fe29 	bl	8000628 <__aeabi_dmul>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	460b      	mov	r3, r1
 800b9da:	4630      	mov	r0, r6
 800b9dc:	4639      	mov	r1, r7
 800b9de:	f7f4 fc6b 	bl	80002b8 <__aeabi_dsub>
 800b9e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b9e6:	f7f4 fe1f 	bl	8000628 <__aeabi_dmul>
 800b9ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b9f2:	4610      	mov	r0, r2
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	f7f4 fe17 	bl	8000628 <__aeabi_dmul>
 800b9fa:	a37b      	add	r3, pc, #492	; (adr r3, 800bbe8 <__ieee754_pow+0x6d0>)
 800b9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba00:	4604      	mov	r4, r0
 800ba02:	460d      	mov	r5, r1
 800ba04:	f7f4 fe10 	bl	8000628 <__aeabi_dmul>
 800ba08:	a379      	add	r3, pc, #484	; (adr r3, 800bbf0 <__ieee754_pow+0x6d8>)
 800ba0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0e:	f7f4 fc55 	bl	80002bc <__adddf3>
 800ba12:	4622      	mov	r2, r4
 800ba14:	462b      	mov	r3, r5
 800ba16:	f7f4 fe07 	bl	8000628 <__aeabi_dmul>
 800ba1a:	a377      	add	r3, pc, #476	; (adr r3, 800bbf8 <__ieee754_pow+0x6e0>)
 800ba1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba20:	f7f4 fc4c 	bl	80002bc <__adddf3>
 800ba24:	4622      	mov	r2, r4
 800ba26:	462b      	mov	r3, r5
 800ba28:	f7f4 fdfe 	bl	8000628 <__aeabi_dmul>
 800ba2c:	a374      	add	r3, pc, #464	; (adr r3, 800bc00 <__ieee754_pow+0x6e8>)
 800ba2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba32:	f7f4 fc43 	bl	80002bc <__adddf3>
 800ba36:	4622      	mov	r2, r4
 800ba38:	462b      	mov	r3, r5
 800ba3a:	f7f4 fdf5 	bl	8000628 <__aeabi_dmul>
 800ba3e:	a372      	add	r3, pc, #456	; (adr r3, 800bc08 <__ieee754_pow+0x6f0>)
 800ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba44:	f7f4 fc3a 	bl	80002bc <__adddf3>
 800ba48:	4622      	mov	r2, r4
 800ba4a:	462b      	mov	r3, r5
 800ba4c:	f7f4 fdec 	bl	8000628 <__aeabi_dmul>
 800ba50:	a36f      	add	r3, pc, #444	; (adr r3, 800bc10 <__ieee754_pow+0x6f8>)
 800ba52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba56:	f7f4 fc31 	bl	80002bc <__adddf3>
 800ba5a:	4622      	mov	r2, r4
 800ba5c:	4606      	mov	r6, r0
 800ba5e:	460f      	mov	r7, r1
 800ba60:	462b      	mov	r3, r5
 800ba62:	4620      	mov	r0, r4
 800ba64:	4629      	mov	r1, r5
 800ba66:	f7f4 fddf 	bl	8000628 <__aeabi_dmul>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	4630      	mov	r0, r6
 800ba70:	4639      	mov	r1, r7
 800ba72:	f7f4 fdd9 	bl	8000628 <__aeabi_dmul>
 800ba76:	4642      	mov	r2, r8
 800ba78:	4604      	mov	r4, r0
 800ba7a:	460d      	mov	r5, r1
 800ba7c:	464b      	mov	r3, r9
 800ba7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba82:	f7f4 fc1b 	bl	80002bc <__adddf3>
 800ba86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba8a:	f7f4 fdcd 	bl	8000628 <__aeabi_dmul>
 800ba8e:	4622      	mov	r2, r4
 800ba90:	462b      	mov	r3, r5
 800ba92:	f7f4 fc13 	bl	80002bc <__adddf3>
 800ba96:	4642      	mov	r2, r8
 800ba98:	4606      	mov	r6, r0
 800ba9a:	460f      	mov	r7, r1
 800ba9c:	464b      	mov	r3, r9
 800ba9e:	4640      	mov	r0, r8
 800baa0:	4649      	mov	r1, r9
 800baa2:	f7f4 fdc1 	bl	8000628 <__aeabi_dmul>
 800baa6:	2200      	movs	r2, #0
 800baa8:	4b68      	ldr	r3, [pc, #416]	; (800bc4c <__ieee754_pow+0x734>)
 800baaa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800baae:	f7f4 fc05 	bl	80002bc <__adddf3>
 800bab2:	4632      	mov	r2, r6
 800bab4:	463b      	mov	r3, r7
 800bab6:	f7f4 fc01 	bl	80002bc <__adddf3>
 800baba:	9802      	ldr	r0, [sp, #8]
 800babc:	460d      	mov	r5, r1
 800babe:	4604      	mov	r4, r0
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	4640      	mov	r0, r8
 800bac6:	4649      	mov	r1, r9
 800bac8:	f7f4 fdae 	bl	8000628 <__aeabi_dmul>
 800bacc:	2200      	movs	r2, #0
 800bace:	4680      	mov	r8, r0
 800bad0:	4689      	mov	r9, r1
 800bad2:	4b5e      	ldr	r3, [pc, #376]	; (800bc4c <__ieee754_pow+0x734>)
 800bad4:	4620      	mov	r0, r4
 800bad6:	4629      	mov	r1, r5
 800bad8:	f7f4 fbee 	bl	80002b8 <__aeabi_dsub>
 800badc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bae0:	f7f4 fbea 	bl	80002b8 <__aeabi_dsub>
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	4630      	mov	r0, r6
 800baea:	4639      	mov	r1, r7
 800baec:	f7f4 fbe4 	bl	80002b8 <__aeabi_dsub>
 800baf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800baf4:	f7f4 fd98 	bl	8000628 <__aeabi_dmul>
 800baf8:	4622      	mov	r2, r4
 800bafa:	4606      	mov	r6, r0
 800bafc:	460f      	mov	r7, r1
 800bafe:	462b      	mov	r3, r5
 800bb00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb04:	f7f4 fd90 	bl	8000628 <__aeabi_dmul>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	4639      	mov	r1, r7
 800bb10:	f7f4 fbd4 	bl	80002bc <__adddf3>
 800bb14:	4606      	mov	r6, r0
 800bb16:	460f      	mov	r7, r1
 800bb18:	4602      	mov	r2, r0
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	4640      	mov	r0, r8
 800bb1e:	4649      	mov	r1, r9
 800bb20:	f7f4 fbcc 	bl	80002bc <__adddf3>
 800bb24:	9802      	ldr	r0, [sp, #8]
 800bb26:	a33c      	add	r3, pc, #240	; (adr r3, 800bc18 <__ieee754_pow+0x700>)
 800bb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	460d      	mov	r5, r1
 800bb30:	f7f4 fd7a 	bl	8000628 <__aeabi_dmul>
 800bb34:	4642      	mov	r2, r8
 800bb36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bb3a:	464b      	mov	r3, r9
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	4629      	mov	r1, r5
 800bb40:	f7f4 fbba 	bl	80002b8 <__aeabi_dsub>
 800bb44:	4602      	mov	r2, r0
 800bb46:	460b      	mov	r3, r1
 800bb48:	4630      	mov	r0, r6
 800bb4a:	4639      	mov	r1, r7
 800bb4c:	f7f4 fbb4 	bl	80002b8 <__aeabi_dsub>
 800bb50:	a333      	add	r3, pc, #204	; (adr r3, 800bc20 <__ieee754_pow+0x708>)
 800bb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb56:	f7f4 fd67 	bl	8000628 <__aeabi_dmul>
 800bb5a:	a333      	add	r3, pc, #204	; (adr r3, 800bc28 <__ieee754_pow+0x710>)
 800bb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb60:	4606      	mov	r6, r0
 800bb62:	460f      	mov	r7, r1
 800bb64:	4620      	mov	r0, r4
 800bb66:	4629      	mov	r1, r5
 800bb68:	f7f4 fd5e 	bl	8000628 <__aeabi_dmul>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	460b      	mov	r3, r1
 800bb70:	4630      	mov	r0, r6
 800bb72:	4639      	mov	r1, r7
 800bb74:	f7f4 fba2 	bl	80002bc <__adddf3>
 800bb78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb7a:	4b35      	ldr	r3, [pc, #212]	; (800bc50 <__ieee754_pow+0x738>)
 800bb7c:	4413      	add	r3, r2
 800bb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb82:	f7f4 fb9b 	bl	80002bc <__adddf3>
 800bb86:	4604      	mov	r4, r0
 800bb88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb8a:	460d      	mov	r5, r1
 800bb8c:	f7f4 fce2 	bl	8000554 <__aeabi_i2d>
 800bb90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb92:	4b30      	ldr	r3, [pc, #192]	; (800bc54 <__ieee754_pow+0x73c>)
 800bb94:	4413      	add	r3, r2
 800bb96:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb9a:	4606      	mov	r6, r0
 800bb9c:	460f      	mov	r7, r1
 800bb9e:	4622      	mov	r2, r4
 800bba0:	462b      	mov	r3, r5
 800bba2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bba6:	f7f4 fb89 	bl	80002bc <__adddf3>
 800bbaa:	4642      	mov	r2, r8
 800bbac:	464b      	mov	r3, r9
 800bbae:	f7f4 fb85 	bl	80002bc <__adddf3>
 800bbb2:	4632      	mov	r2, r6
 800bbb4:	463b      	mov	r3, r7
 800bbb6:	f7f4 fb81 	bl	80002bc <__adddf3>
 800bbba:	9802      	ldr	r0, [sp, #8]
 800bbbc:	4632      	mov	r2, r6
 800bbbe:	463b      	mov	r3, r7
 800bbc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbc4:	f7f4 fb78 	bl	80002b8 <__aeabi_dsub>
 800bbc8:	4642      	mov	r2, r8
 800bbca:	464b      	mov	r3, r9
 800bbcc:	f7f4 fb74 	bl	80002b8 <__aeabi_dsub>
 800bbd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bbd4:	e607      	b.n	800b7e6 <__ieee754_pow+0x2ce>
 800bbd6:	f04f 0a01 	mov.w	sl, #1
 800bbda:	e6a5      	b.n	800b928 <__ieee754_pow+0x410>
 800bbdc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800bc30 <__ieee754_pow+0x718>
 800bbe0:	e613      	b.n	800b80a <__ieee754_pow+0x2f2>
 800bbe2:	bf00      	nop
 800bbe4:	f3af 8000 	nop.w
 800bbe8:	4a454eef 	.word	0x4a454eef
 800bbec:	3fca7e28 	.word	0x3fca7e28
 800bbf0:	93c9db65 	.word	0x93c9db65
 800bbf4:	3fcd864a 	.word	0x3fcd864a
 800bbf8:	a91d4101 	.word	0xa91d4101
 800bbfc:	3fd17460 	.word	0x3fd17460
 800bc00:	518f264d 	.word	0x518f264d
 800bc04:	3fd55555 	.word	0x3fd55555
 800bc08:	db6fabff 	.word	0xdb6fabff
 800bc0c:	3fdb6db6 	.word	0x3fdb6db6
 800bc10:	33333303 	.word	0x33333303
 800bc14:	3fe33333 	.word	0x3fe33333
 800bc18:	e0000000 	.word	0xe0000000
 800bc1c:	3feec709 	.word	0x3feec709
 800bc20:	dc3a03fd 	.word	0xdc3a03fd
 800bc24:	3feec709 	.word	0x3feec709
 800bc28:	145b01f5 	.word	0x145b01f5
 800bc2c:	be3e2fe0 	.word	0xbe3e2fe0
 800bc30:	00000000 	.word	0x00000000
 800bc34:	3ff00000 	.word	0x3ff00000
 800bc38:	43400000 	.word	0x43400000
 800bc3c:	0003988e 	.word	0x0003988e
 800bc40:	000bb679 	.word	0x000bb679
 800bc44:	0800c4f0 	.word	0x0800c4f0
 800bc48:	3ff00000 	.word	0x3ff00000
 800bc4c:	40080000 	.word	0x40080000
 800bc50:	0800c510 	.word	0x0800c510
 800bc54:	0800c500 	.word	0x0800c500
 800bc58:	a3b4      	add	r3, pc, #720	; (adr r3, 800bf2c <__ieee754_pow+0xa14>)
 800bc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5e:	4640      	mov	r0, r8
 800bc60:	4649      	mov	r1, r9
 800bc62:	f7f4 fb2b 	bl	80002bc <__adddf3>
 800bc66:	4622      	mov	r2, r4
 800bc68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc6c:	462b      	mov	r3, r5
 800bc6e:	4630      	mov	r0, r6
 800bc70:	4639      	mov	r1, r7
 800bc72:	f7f4 fb21 	bl	80002b8 <__aeabi_dsub>
 800bc76:	4602      	mov	r2, r0
 800bc78:	460b      	mov	r3, r1
 800bc7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc7e:	f7f4 ff63 	bl	8000b48 <__aeabi_dcmpgt>
 800bc82:	2800      	cmp	r0, #0
 800bc84:	f47f adfe 	bne.w	800b884 <__ieee754_pow+0x36c>
 800bc88:	4aa3      	ldr	r2, [pc, #652]	; (800bf18 <__ieee754_pow+0xa00>)
 800bc8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	f340 810a 	ble.w	800bea8 <__ieee754_pow+0x990>
 800bc94:	151b      	asrs	r3, r3, #20
 800bc96:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bc9a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bc9e:	fa4a f303 	asr.w	r3, sl, r3
 800bca2:	445b      	add	r3, fp
 800bca4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bca8:	4e9c      	ldr	r6, [pc, #624]	; (800bf1c <__ieee754_pow+0xa04>)
 800bcaa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bcae:	4116      	asrs	r6, r2
 800bcb0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	ea23 0106 	bic.w	r1, r3, r6
 800bcba:	f1c2 0214 	rsb	r2, r2, #20
 800bcbe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bcc2:	fa4a fa02 	asr.w	sl, sl, r2
 800bcc6:	f1bb 0f00 	cmp.w	fp, #0
 800bcca:	4602      	mov	r2, r0
 800bccc:	460b      	mov	r3, r1
 800bcce:	4620      	mov	r0, r4
 800bcd0:	4629      	mov	r1, r5
 800bcd2:	bfb8      	it	lt
 800bcd4:	f1ca 0a00 	rsblt	sl, sl, #0
 800bcd8:	f7f4 faee 	bl	80002b8 <__aeabi_dsub>
 800bcdc:	e9cd 0100 	strd	r0, r1, [sp]
 800bce0:	4642      	mov	r2, r8
 800bce2:	464b      	mov	r3, r9
 800bce4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bce8:	f7f4 fae8 	bl	80002bc <__adddf3>
 800bcec:	2000      	movs	r0, #0
 800bcee:	a378      	add	r3, pc, #480	; (adr r3, 800bed0 <__ieee754_pow+0x9b8>)
 800bcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	460d      	mov	r5, r1
 800bcf8:	f7f4 fc96 	bl	8000628 <__aeabi_dmul>
 800bcfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd00:	4606      	mov	r6, r0
 800bd02:	460f      	mov	r7, r1
 800bd04:	4620      	mov	r0, r4
 800bd06:	4629      	mov	r1, r5
 800bd08:	f7f4 fad6 	bl	80002b8 <__aeabi_dsub>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	460b      	mov	r3, r1
 800bd10:	4640      	mov	r0, r8
 800bd12:	4649      	mov	r1, r9
 800bd14:	f7f4 fad0 	bl	80002b8 <__aeabi_dsub>
 800bd18:	a36f      	add	r3, pc, #444	; (adr r3, 800bed8 <__ieee754_pow+0x9c0>)
 800bd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1e:	f7f4 fc83 	bl	8000628 <__aeabi_dmul>
 800bd22:	a36f      	add	r3, pc, #444	; (adr r3, 800bee0 <__ieee754_pow+0x9c8>)
 800bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd28:	4680      	mov	r8, r0
 800bd2a:	4689      	mov	r9, r1
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	4629      	mov	r1, r5
 800bd30:	f7f4 fc7a 	bl	8000628 <__aeabi_dmul>
 800bd34:	4602      	mov	r2, r0
 800bd36:	460b      	mov	r3, r1
 800bd38:	4640      	mov	r0, r8
 800bd3a:	4649      	mov	r1, r9
 800bd3c:	f7f4 fabe 	bl	80002bc <__adddf3>
 800bd40:	4604      	mov	r4, r0
 800bd42:	460d      	mov	r5, r1
 800bd44:	4602      	mov	r2, r0
 800bd46:	460b      	mov	r3, r1
 800bd48:	4630      	mov	r0, r6
 800bd4a:	4639      	mov	r1, r7
 800bd4c:	f7f4 fab6 	bl	80002bc <__adddf3>
 800bd50:	4632      	mov	r2, r6
 800bd52:	463b      	mov	r3, r7
 800bd54:	4680      	mov	r8, r0
 800bd56:	4689      	mov	r9, r1
 800bd58:	f7f4 faae 	bl	80002b8 <__aeabi_dsub>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	4620      	mov	r0, r4
 800bd62:	4629      	mov	r1, r5
 800bd64:	f7f4 faa8 	bl	80002b8 <__aeabi_dsub>
 800bd68:	4642      	mov	r2, r8
 800bd6a:	4606      	mov	r6, r0
 800bd6c:	460f      	mov	r7, r1
 800bd6e:	464b      	mov	r3, r9
 800bd70:	4640      	mov	r0, r8
 800bd72:	4649      	mov	r1, r9
 800bd74:	f7f4 fc58 	bl	8000628 <__aeabi_dmul>
 800bd78:	a35b      	add	r3, pc, #364	; (adr r3, 800bee8 <__ieee754_pow+0x9d0>)
 800bd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7e:	4604      	mov	r4, r0
 800bd80:	460d      	mov	r5, r1
 800bd82:	f7f4 fc51 	bl	8000628 <__aeabi_dmul>
 800bd86:	a35a      	add	r3, pc, #360	; (adr r3, 800bef0 <__ieee754_pow+0x9d8>)
 800bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8c:	f7f4 fa94 	bl	80002b8 <__aeabi_dsub>
 800bd90:	4622      	mov	r2, r4
 800bd92:	462b      	mov	r3, r5
 800bd94:	f7f4 fc48 	bl	8000628 <__aeabi_dmul>
 800bd98:	a357      	add	r3, pc, #348	; (adr r3, 800bef8 <__ieee754_pow+0x9e0>)
 800bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9e:	f7f4 fa8d 	bl	80002bc <__adddf3>
 800bda2:	4622      	mov	r2, r4
 800bda4:	462b      	mov	r3, r5
 800bda6:	f7f4 fc3f 	bl	8000628 <__aeabi_dmul>
 800bdaa:	a355      	add	r3, pc, #340	; (adr r3, 800bf00 <__ieee754_pow+0x9e8>)
 800bdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb0:	f7f4 fa82 	bl	80002b8 <__aeabi_dsub>
 800bdb4:	4622      	mov	r2, r4
 800bdb6:	462b      	mov	r3, r5
 800bdb8:	f7f4 fc36 	bl	8000628 <__aeabi_dmul>
 800bdbc:	a352      	add	r3, pc, #328	; (adr r3, 800bf08 <__ieee754_pow+0x9f0>)
 800bdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc2:	f7f4 fa7b 	bl	80002bc <__adddf3>
 800bdc6:	4622      	mov	r2, r4
 800bdc8:	462b      	mov	r3, r5
 800bdca:	f7f4 fc2d 	bl	8000628 <__aeabi_dmul>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	4640      	mov	r0, r8
 800bdd4:	4649      	mov	r1, r9
 800bdd6:	f7f4 fa6f 	bl	80002b8 <__aeabi_dsub>
 800bdda:	4604      	mov	r4, r0
 800bddc:	460d      	mov	r5, r1
 800bdde:	4602      	mov	r2, r0
 800bde0:	460b      	mov	r3, r1
 800bde2:	4640      	mov	r0, r8
 800bde4:	4649      	mov	r1, r9
 800bde6:	f7f4 fc1f 	bl	8000628 <__aeabi_dmul>
 800bdea:	2200      	movs	r2, #0
 800bdec:	e9cd 0100 	strd	r0, r1, [sp]
 800bdf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	4629      	mov	r1, r5
 800bdf8:	f7f4 fa5e 	bl	80002b8 <__aeabi_dsub>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be04:	f7f4 fd3a 	bl	800087c <__aeabi_ddiv>
 800be08:	4632      	mov	r2, r6
 800be0a:	4604      	mov	r4, r0
 800be0c:	460d      	mov	r5, r1
 800be0e:	463b      	mov	r3, r7
 800be10:	4640      	mov	r0, r8
 800be12:	4649      	mov	r1, r9
 800be14:	f7f4 fc08 	bl	8000628 <__aeabi_dmul>
 800be18:	4632      	mov	r2, r6
 800be1a:	463b      	mov	r3, r7
 800be1c:	f7f4 fa4e 	bl	80002bc <__adddf3>
 800be20:	4602      	mov	r2, r0
 800be22:	460b      	mov	r3, r1
 800be24:	4620      	mov	r0, r4
 800be26:	4629      	mov	r1, r5
 800be28:	f7f4 fa46 	bl	80002b8 <__aeabi_dsub>
 800be2c:	4642      	mov	r2, r8
 800be2e:	464b      	mov	r3, r9
 800be30:	f7f4 fa42 	bl	80002b8 <__aeabi_dsub>
 800be34:	4602      	mov	r2, r0
 800be36:	460b      	mov	r3, r1
 800be38:	2000      	movs	r0, #0
 800be3a:	4939      	ldr	r1, [pc, #228]	; (800bf20 <__ieee754_pow+0xa08>)
 800be3c:	f7f4 fa3c 	bl	80002b8 <__aeabi_dsub>
 800be40:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800be44:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	da2f      	bge.n	800beae <__ieee754_pow+0x996>
 800be4e:	4650      	mov	r0, sl
 800be50:	ec43 2b10 	vmov	d0, r2, r3
 800be54:	f000 f9c0 	bl	800c1d8 <scalbn>
 800be58:	ec51 0b10 	vmov	r0, r1, d0
 800be5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be60:	f7ff bbf1 	b.w	800b646 <__ieee754_pow+0x12e>
 800be64:	4b2f      	ldr	r3, [pc, #188]	; (800bf24 <__ieee754_pow+0xa0c>)
 800be66:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800be6a:	429e      	cmp	r6, r3
 800be6c:	f77f af0c 	ble.w	800bc88 <__ieee754_pow+0x770>
 800be70:	4b2d      	ldr	r3, [pc, #180]	; (800bf28 <__ieee754_pow+0xa10>)
 800be72:	440b      	add	r3, r1
 800be74:	4303      	orrs	r3, r0
 800be76:	d00b      	beq.n	800be90 <__ieee754_pow+0x978>
 800be78:	a325      	add	r3, pc, #148	; (adr r3, 800bf10 <__ieee754_pow+0x9f8>)
 800be7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be82:	f7f4 fbd1 	bl	8000628 <__aeabi_dmul>
 800be86:	a322      	add	r3, pc, #136	; (adr r3, 800bf10 <__ieee754_pow+0x9f8>)
 800be88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8c:	f7ff bbdb 	b.w	800b646 <__ieee754_pow+0x12e>
 800be90:	4622      	mov	r2, r4
 800be92:	462b      	mov	r3, r5
 800be94:	f7f4 fa10 	bl	80002b8 <__aeabi_dsub>
 800be98:	4642      	mov	r2, r8
 800be9a:	464b      	mov	r3, r9
 800be9c:	f7f4 fe4a 	bl	8000b34 <__aeabi_dcmpge>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	f43f aef1 	beq.w	800bc88 <__ieee754_pow+0x770>
 800bea6:	e7e7      	b.n	800be78 <__ieee754_pow+0x960>
 800bea8:	f04f 0a00 	mov.w	sl, #0
 800beac:	e718      	b.n	800bce0 <__ieee754_pow+0x7c8>
 800beae:	4621      	mov	r1, r4
 800beb0:	e7d4      	b.n	800be5c <__ieee754_pow+0x944>
 800beb2:	2000      	movs	r0, #0
 800beb4:	491a      	ldr	r1, [pc, #104]	; (800bf20 <__ieee754_pow+0xa08>)
 800beb6:	f7ff bb8f 	b.w	800b5d8 <__ieee754_pow+0xc0>
 800beba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bebe:	f7ff bb8b 	b.w	800b5d8 <__ieee754_pow+0xc0>
 800bec2:	4630      	mov	r0, r6
 800bec4:	4639      	mov	r1, r7
 800bec6:	f7ff bb87 	b.w	800b5d8 <__ieee754_pow+0xc0>
 800beca:	4693      	mov	fp, r2
 800becc:	f7ff bb98 	b.w	800b600 <__ieee754_pow+0xe8>
 800bed0:	00000000 	.word	0x00000000
 800bed4:	3fe62e43 	.word	0x3fe62e43
 800bed8:	fefa39ef 	.word	0xfefa39ef
 800bedc:	3fe62e42 	.word	0x3fe62e42
 800bee0:	0ca86c39 	.word	0x0ca86c39
 800bee4:	be205c61 	.word	0xbe205c61
 800bee8:	72bea4d0 	.word	0x72bea4d0
 800beec:	3e663769 	.word	0x3e663769
 800bef0:	c5d26bf1 	.word	0xc5d26bf1
 800bef4:	3ebbbd41 	.word	0x3ebbbd41
 800bef8:	af25de2c 	.word	0xaf25de2c
 800befc:	3f11566a 	.word	0x3f11566a
 800bf00:	16bebd93 	.word	0x16bebd93
 800bf04:	3f66c16c 	.word	0x3f66c16c
 800bf08:	5555553e 	.word	0x5555553e
 800bf0c:	3fc55555 	.word	0x3fc55555
 800bf10:	c2f8f359 	.word	0xc2f8f359
 800bf14:	01a56e1f 	.word	0x01a56e1f
 800bf18:	3fe00000 	.word	0x3fe00000
 800bf1c:	000fffff 	.word	0x000fffff
 800bf20:	3ff00000 	.word	0x3ff00000
 800bf24:	4090cbff 	.word	0x4090cbff
 800bf28:	3f6f3400 	.word	0x3f6f3400
 800bf2c:	652b82fe 	.word	0x652b82fe
 800bf30:	3c971547 	.word	0x3c971547

0800bf34 <__ieee754_sqrt>:
 800bf34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf38:	4955      	ldr	r1, [pc, #340]	; (800c090 <__ieee754_sqrt+0x15c>)
 800bf3a:	ec55 4b10 	vmov	r4, r5, d0
 800bf3e:	43a9      	bics	r1, r5
 800bf40:	462b      	mov	r3, r5
 800bf42:	462a      	mov	r2, r5
 800bf44:	d112      	bne.n	800bf6c <__ieee754_sqrt+0x38>
 800bf46:	ee10 2a10 	vmov	r2, s0
 800bf4a:	ee10 0a10 	vmov	r0, s0
 800bf4e:	4629      	mov	r1, r5
 800bf50:	f7f4 fb6a 	bl	8000628 <__aeabi_dmul>
 800bf54:	4602      	mov	r2, r0
 800bf56:	460b      	mov	r3, r1
 800bf58:	4620      	mov	r0, r4
 800bf5a:	4629      	mov	r1, r5
 800bf5c:	f7f4 f9ae 	bl	80002bc <__adddf3>
 800bf60:	4604      	mov	r4, r0
 800bf62:	460d      	mov	r5, r1
 800bf64:	ec45 4b10 	vmov	d0, r4, r5
 800bf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf6c:	2d00      	cmp	r5, #0
 800bf6e:	ee10 0a10 	vmov	r0, s0
 800bf72:	4621      	mov	r1, r4
 800bf74:	dc0f      	bgt.n	800bf96 <__ieee754_sqrt+0x62>
 800bf76:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bf7a:	4330      	orrs	r0, r6
 800bf7c:	d0f2      	beq.n	800bf64 <__ieee754_sqrt+0x30>
 800bf7e:	b155      	cbz	r5, 800bf96 <__ieee754_sqrt+0x62>
 800bf80:	ee10 2a10 	vmov	r2, s0
 800bf84:	4620      	mov	r0, r4
 800bf86:	4629      	mov	r1, r5
 800bf88:	f7f4 f996 	bl	80002b8 <__aeabi_dsub>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	460b      	mov	r3, r1
 800bf90:	f7f4 fc74 	bl	800087c <__aeabi_ddiv>
 800bf94:	e7e4      	b.n	800bf60 <__ieee754_sqrt+0x2c>
 800bf96:	151b      	asrs	r3, r3, #20
 800bf98:	d073      	beq.n	800c082 <__ieee754_sqrt+0x14e>
 800bf9a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bf9e:	07dd      	lsls	r5, r3, #31
 800bfa0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bfa4:	bf48      	it	mi
 800bfa6:	0fc8      	lsrmi	r0, r1, #31
 800bfa8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bfac:	bf44      	itt	mi
 800bfae:	0049      	lslmi	r1, r1, #1
 800bfb0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800bfb4:	2500      	movs	r5, #0
 800bfb6:	1058      	asrs	r0, r3, #1
 800bfb8:	0fcb      	lsrs	r3, r1, #31
 800bfba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800bfbe:	0049      	lsls	r1, r1, #1
 800bfc0:	2316      	movs	r3, #22
 800bfc2:	462c      	mov	r4, r5
 800bfc4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800bfc8:	19a7      	adds	r7, r4, r6
 800bfca:	4297      	cmp	r7, r2
 800bfcc:	bfde      	ittt	le
 800bfce:	19bc      	addle	r4, r7, r6
 800bfd0:	1bd2      	suble	r2, r2, r7
 800bfd2:	19ad      	addle	r5, r5, r6
 800bfd4:	0fcf      	lsrs	r7, r1, #31
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800bfdc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bfe0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bfe4:	d1f0      	bne.n	800bfc8 <__ieee754_sqrt+0x94>
 800bfe6:	f04f 0c20 	mov.w	ip, #32
 800bfea:	469e      	mov	lr, r3
 800bfec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bff0:	42a2      	cmp	r2, r4
 800bff2:	eb06 070e 	add.w	r7, r6, lr
 800bff6:	dc02      	bgt.n	800bffe <__ieee754_sqrt+0xca>
 800bff8:	d112      	bne.n	800c020 <__ieee754_sqrt+0xec>
 800bffa:	428f      	cmp	r7, r1
 800bffc:	d810      	bhi.n	800c020 <__ieee754_sqrt+0xec>
 800bffe:	2f00      	cmp	r7, #0
 800c000:	eb07 0e06 	add.w	lr, r7, r6
 800c004:	da42      	bge.n	800c08c <__ieee754_sqrt+0x158>
 800c006:	f1be 0f00 	cmp.w	lr, #0
 800c00a:	db3f      	blt.n	800c08c <__ieee754_sqrt+0x158>
 800c00c:	f104 0801 	add.w	r8, r4, #1
 800c010:	1b12      	subs	r2, r2, r4
 800c012:	428f      	cmp	r7, r1
 800c014:	bf88      	it	hi
 800c016:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c01a:	1bc9      	subs	r1, r1, r7
 800c01c:	4433      	add	r3, r6
 800c01e:	4644      	mov	r4, r8
 800c020:	0052      	lsls	r2, r2, #1
 800c022:	f1bc 0c01 	subs.w	ip, ip, #1
 800c026:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c02a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c02e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c032:	d1dd      	bne.n	800bff0 <__ieee754_sqrt+0xbc>
 800c034:	430a      	orrs	r2, r1
 800c036:	d006      	beq.n	800c046 <__ieee754_sqrt+0x112>
 800c038:	1c5c      	adds	r4, r3, #1
 800c03a:	bf13      	iteet	ne
 800c03c:	3301      	addne	r3, #1
 800c03e:	3501      	addeq	r5, #1
 800c040:	4663      	moveq	r3, ip
 800c042:	f023 0301 	bicne.w	r3, r3, #1
 800c046:	106a      	asrs	r2, r5, #1
 800c048:	085b      	lsrs	r3, r3, #1
 800c04a:	07e9      	lsls	r1, r5, #31
 800c04c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c050:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c054:	bf48      	it	mi
 800c056:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c05a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c05e:	461c      	mov	r4, r3
 800c060:	e780      	b.n	800bf64 <__ieee754_sqrt+0x30>
 800c062:	0aca      	lsrs	r2, r1, #11
 800c064:	3815      	subs	r0, #21
 800c066:	0549      	lsls	r1, r1, #21
 800c068:	2a00      	cmp	r2, #0
 800c06a:	d0fa      	beq.n	800c062 <__ieee754_sqrt+0x12e>
 800c06c:	02d6      	lsls	r6, r2, #11
 800c06e:	d50a      	bpl.n	800c086 <__ieee754_sqrt+0x152>
 800c070:	f1c3 0420 	rsb	r4, r3, #32
 800c074:	fa21 f404 	lsr.w	r4, r1, r4
 800c078:	1e5d      	subs	r5, r3, #1
 800c07a:	4099      	lsls	r1, r3
 800c07c:	4322      	orrs	r2, r4
 800c07e:	1b43      	subs	r3, r0, r5
 800c080:	e78b      	b.n	800bf9a <__ieee754_sqrt+0x66>
 800c082:	4618      	mov	r0, r3
 800c084:	e7f0      	b.n	800c068 <__ieee754_sqrt+0x134>
 800c086:	0052      	lsls	r2, r2, #1
 800c088:	3301      	adds	r3, #1
 800c08a:	e7ef      	b.n	800c06c <__ieee754_sqrt+0x138>
 800c08c:	46a0      	mov	r8, r4
 800c08e:	e7bf      	b.n	800c010 <__ieee754_sqrt+0xdc>
 800c090:	7ff00000 	.word	0x7ff00000

0800c094 <fabs>:
 800c094:	ec51 0b10 	vmov	r0, r1, d0
 800c098:	ee10 2a10 	vmov	r2, s0
 800c09c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c0a0:	ec43 2b10 	vmov	d0, r2, r3
 800c0a4:	4770      	bx	lr

0800c0a6 <finite>:
 800c0a6:	ee10 3a90 	vmov	r3, s1
 800c0aa:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800c0ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c0b2:	0fc0      	lsrs	r0, r0, #31
 800c0b4:	4770      	bx	lr

0800c0b6 <matherr>:
 800c0b6:	2000      	movs	r0, #0
 800c0b8:	4770      	bx	lr
 800c0ba:	0000      	movs	r0, r0
 800c0bc:	0000      	movs	r0, r0
	...

0800c0c0 <nan>:
 800c0c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c0c8 <nan+0x8>
 800c0c4:	4770      	bx	lr
 800c0c6:	bf00      	nop
 800c0c8:	00000000 	.word	0x00000000
 800c0cc:	7ff80000 	.word	0x7ff80000

0800c0d0 <rint>:
 800c0d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0d2:	ec51 0b10 	vmov	r0, r1, d0
 800c0d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c0da:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c0de:	2e13      	cmp	r6, #19
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	ee10 4a10 	vmov	r4, s0
 800c0e6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c0ea:	dc56      	bgt.n	800c19a <rint+0xca>
 800c0ec:	2e00      	cmp	r6, #0
 800c0ee:	da2b      	bge.n	800c148 <rint+0x78>
 800c0f0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c0f4:	4302      	orrs	r2, r0
 800c0f6:	d023      	beq.n	800c140 <rint+0x70>
 800c0f8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c0fc:	4302      	orrs	r2, r0
 800c0fe:	4254      	negs	r4, r2
 800c100:	4314      	orrs	r4, r2
 800c102:	0c4b      	lsrs	r3, r1, #17
 800c104:	0b24      	lsrs	r4, r4, #12
 800c106:	045b      	lsls	r3, r3, #17
 800c108:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c10c:	ea44 0103 	orr.w	r1, r4, r3
 800c110:	460b      	mov	r3, r1
 800c112:	492f      	ldr	r1, [pc, #188]	; (800c1d0 <rint+0x100>)
 800c114:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800c118:	e9d1 6700 	ldrd	r6, r7, [r1]
 800c11c:	4602      	mov	r2, r0
 800c11e:	4639      	mov	r1, r7
 800c120:	4630      	mov	r0, r6
 800c122:	f7f4 f8cb 	bl	80002bc <__adddf3>
 800c126:	e9cd 0100 	strd	r0, r1, [sp]
 800c12a:	463b      	mov	r3, r7
 800c12c:	4632      	mov	r2, r6
 800c12e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c132:	f7f4 f8c1 	bl	80002b8 <__aeabi_dsub>
 800c136:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c13a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c13e:	4639      	mov	r1, r7
 800c140:	ec41 0b10 	vmov	d0, r0, r1
 800c144:	b003      	add	sp, #12
 800c146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c148:	4a22      	ldr	r2, [pc, #136]	; (800c1d4 <rint+0x104>)
 800c14a:	4132      	asrs	r2, r6
 800c14c:	ea01 0702 	and.w	r7, r1, r2
 800c150:	4307      	orrs	r7, r0
 800c152:	d0f5      	beq.n	800c140 <rint+0x70>
 800c154:	0852      	lsrs	r2, r2, #1
 800c156:	4011      	ands	r1, r2
 800c158:	430c      	orrs	r4, r1
 800c15a:	d00b      	beq.n	800c174 <rint+0xa4>
 800c15c:	ea23 0202 	bic.w	r2, r3, r2
 800c160:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c164:	2e13      	cmp	r6, #19
 800c166:	fa43 f306 	asr.w	r3, r3, r6
 800c16a:	bf0c      	ite	eq
 800c16c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c170:	2400      	movne	r4, #0
 800c172:	4313      	orrs	r3, r2
 800c174:	4916      	ldr	r1, [pc, #88]	; (800c1d0 <rint+0x100>)
 800c176:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c17a:	4622      	mov	r2, r4
 800c17c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c180:	4620      	mov	r0, r4
 800c182:	4629      	mov	r1, r5
 800c184:	f7f4 f89a 	bl	80002bc <__adddf3>
 800c188:	e9cd 0100 	strd	r0, r1, [sp]
 800c18c:	4622      	mov	r2, r4
 800c18e:	462b      	mov	r3, r5
 800c190:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c194:	f7f4 f890 	bl	80002b8 <__aeabi_dsub>
 800c198:	e7d2      	b.n	800c140 <rint+0x70>
 800c19a:	2e33      	cmp	r6, #51	; 0x33
 800c19c:	dd07      	ble.n	800c1ae <rint+0xde>
 800c19e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c1a2:	d1cd      	bne.n	800c140 <rint+0x70>
 800c1a4:	ee10 2a10 	vmov	r2, s0
 800c1a8:	f7f4 f888 	bl	80002bc <__adddf3>
 800c1ac:	e7c8      	b.n	800c140 <rint+0x70>
 800c1ae:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800c1b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c1b6:	40f2      	lsrs	r2, r6
 800c1b8:	4210      	tst	r0, r2
 800c1ba:	d0c1      	beq.n	800c140 <rint+0x70>
 800c1bc:	0852      	lsrs	r2, r2, #1
 800c1be:	4210      	tst	r0, r2
 800c1c0:	bf1f      	itttt	ne
 800c1c2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c1c6:	ea20 0202 	bicne.w	r2, r0, r2
 800c1ca:	4134      	asrne	r4, r6
 800c1cc:	4314      	orrne	r4, r2
 800c1ce:	e7d1      	b.n	800c174 <rint+0xa4>
 800c1d0:	0800c520 	.word	0x0800c520
 800c1d4:	000fffff 	.word	0x000fffff

0800c1d8 <scalbn>:
 800c1d8:	b570      	push	{r4, r5, r6, lr}
 800c1da:	ec55 4b10 	vmov	r4, r5, d0
 800c1de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c1e2:	4606      	mov	r6, r0
 800c1e4:	462b      	mov	r3, r5
 800c1e6:	b9aa      	cbnz	r2, 800c214 <scalbn+0x3c>
 800c1e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c1ec:	4323      	orrs	r3, r4
 800c1ee:	d03b      	beq.n	800c268 <scalbn+0x90>
 800c1f0:	4b31      	ldr	r3, [pc, #196]	; (800c2b8 <scalbn+0xe0>)
 800c1f2:	4629      	mov	r1, r5
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	ee10 0a10 	vmov	r0, s0
 800c1fa:	f7f4 fa15 	bl	8000628 <__aeabi_dmul>
 800c1fe:	4b2f      	ldr	r3, [pc, #188]	; (800c2bc <scalbn+0xe4>)
 800c200:	429e      	cmp	r6, r3
 800c202:	4604      	mov	r4, r0
 800c204:	460d      	mov	r5, r1
 800c206:	da12      	bge.n	800c22e <scalbn+0x56>
 800c208:	a327      	add	r3, pc, #156	; (adr r3, 800c2a8 <scalbn+0xd0>)
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	f7f4 fa0b 	bl	8000628 <__aeabi_dmul>
 800c212:	e009      	b.n	800c228 <scalbn+0x50>
 800c214:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c218:	428a      	cmp	r2, r1
 800c21a:	d10c      	bne.n	800c236 <scalbn+0x5e>
 800c21c:	ee10 2a10 	vmov	r2, s0
 800c220:	4620      	mov	r0, r4
 800c222:	4629      	mov	r1, r5
 800c224:	f7f4 f84a 	bl	80002bc <__adddf3>
 800c228:	4604      	mov	r4, r0
 800c22a:	460d      	mov	r5, r1
 800c22c:	e01c      	b.n	800c268 <scalbn+0x90>
 800c22e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c232:	460b      	mov	r3, r1
 800c234:	3a36      	subs	r2, #54	; 0x36
 800c236:	4432      	add	r2, r6
 800c238:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c23c:	428a      	cmp	r2, r1
 800c23e:	dd0b      	ble.n	800c258 <scalbn+0x80>
 800c240:	ec45 4b11 	vmov	d1, r4, r5
 800c244:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c2b0 <scalbn+0xd8>
 800c248:	f000 f83c 	bl	800c2c4 <copysign>
 800c24c:	a318      	add	r3, pc, #96	; (adr r3, 800c2b0 <scalbn+0xd8>)
 800c24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c252:	ec51 0b10 	vmov	r0, r1, d0
 800c256:	e7da      	b.n	800c20e <scalbn+0x36>
 800c258:	2a00      	cmp	r2, #0
 800c25a:	dd08      	ble.n	800c26e <scalbn+0x96>
 800c25c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c260:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c264:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c268:	ec45 4b10 	vmov	d0, r4, r5
 800c26c:	bd70      	pop	{r4, r5, r6, pc}
 800c26e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c272:	da0d      	bge.n	800c290 <scalbn+0xb8>
 800c274:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c278:	429e      	cmp	r6, r3
 800c27a:	ec45 4b11 	vmov	d1, r4, r5
 800c27e:	dce1      	bgt.n	800c244 <scalbn+0x6c>
 800c280:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c2a8 <scalbn+0xd0>
 800c284:	f000 f81e 	bl	800c2c4 <copysign>
 800c288:	a307      	add	r3, pc, #28	; (adr r3, 800c2a8 <scalbn+0xd0>)
 800c28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28e:	e7e0      	b.n	800c252 <scalbn+0x7a>
 800c290:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c294:	3236      	adds	r2, #54	; 0x36
 800c296:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c29a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c29e:	4620      	mov	r0, r4
 800c2a0:	4629      	mov	r1, r5
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	4b06      	ldr	r3, [pc, #24]	; (800c2c0 <scalbn+0xe8>)
 800c2a6:	e7b2      	b.n	800c20e <scalbn+0x36>
 800c2a8:	c2f8f359 	.word	0xc2f8f359
 800c2ac:	01a56e1f 	.word	0x01a56e1f
 800c2b0:	8800759c 	.word	0x8800759c
 800c2b4:	7e37e43c 	.word	0x7e37e43c
 800c2b8:	43500000 	.word	0x43500000
 800c2bc:	ffff3cb0 	.word	0xffff3cb0
 800c2c0:	3c900000 	.word	0x3c900000

0800c2c4 <copysign>:
 800c2c4:	ec51 0b10 	vmov	r0, r1, d0
 800c2c8:	ee11 0a90 	vmov	r0, s3
 800c2cc:	ee10 2a10 	vmov	r2, s0
 800c2d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c2d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c2d8:	ea41 0300 	orr.w	r3, r1, r0
 800c2dc:	ec43 2b10 	vmov	d0, r2, r3
 800c2e0:	4770      	bx	lr
	...

0800c2e4 <_init>:
 800c2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e6:	bf00      	nop
 800c2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ea:	bc08      	pop	{r3}
 800c2ec:	469e      	mov	lr, r3
 800c2ee:	4770      	bx	lr

0800c2f0 <_fini>:
 800c2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f2:	bf00      	nop
 800c2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2f6:	bc08      	pop	{r3}
 800c2f8:	469e      	mov	lr, r3
 800c2fa:	4770      	bx	lr
