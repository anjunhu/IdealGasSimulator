
IdealGasSimulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d078  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000964  0800d238  0800d238  0001d238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db9c  0800db9c  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  0800db9c  0800db9c  0001db9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dba4  0800dba4  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dba4  0800dba4  0001dba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dba8  0800dba8  0001dba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800dbac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e88  20000104  0800dcb0  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f8c  0800dcb0  00021f8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e5f5  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005452  00000000  00000000  0004e729  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021f8  00000000  00000000  00053b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f48  00000000  00000000  00055d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003294f  00000000  00000000  00057cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d4b4  00000000  00000000  0008a60f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00131504  00000000  00000000  000a7ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  001d8fc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009170  00000000  00000000  001d90b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000fa  00000000  00000000  001e2228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000104 	.word	0x20000104
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d220 	.word	0x0800d220

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000108 	.word	0x20000108
 80001fc:	0800d220 	.word	0x0800d220

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b972 	b.w	8000e28 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9e08      	ldr	r6, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	4688      	mov	r8, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d14b      	bne.n	8000c02 <__udivmoddi4+0xa6>
 8000b6a:	428a      	cmp	r2, r1
 8000b6c:	4615      	mov	r5, r2
 8000b6e:	d967      	bls.n	8000c40 <__udivmoddi4+0xe4>
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0720 	rsb	r7, r2, #32
 8000b7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b82:	4095      	lsls	r5, r2
 8000b84:	ea47 0803 	orr.w	r8, r7, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b94:	fa1f fc85 	uxth.w	ip, r5
 8000b98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x60>
 8000ba8:	18eb      	adds	r3, r5, r3
 8000baa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bae:	f080 811b 	bcs.w	8000de8 <__udivmoddi4+0x28c>
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	f240 8118 	bls.w	8000de8 <__udivmoddi4+0x28c>
 8000bb8:	3f02      	subs	r7, #2
 8000bba:	442b      	add	r3, r5
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bcc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bd0:	45a4      	cmp	ip, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x8c>
 8000bd4:	192c      	adds	r4, r5, r4
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bda:	f080 8107 	bcs.w	8000dec <__udivmoddi4+0x290>
 8000bde:	45a4      	cmp	ip, r4
 8000be0:	f240 8104 	bls.w	8000dec <__udivmoddi4+0x290>
 8000be4:	3802      	subs	r0, #2
 8000be6:	442c      	add	r4, r5
 8000be8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bec:	eba4 040c 	sub.w	r4, r4, ip
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	b11e      	cbz	r6, 8000bfc <__udivmoddi4+0xa0>
 8000bf4:	40d4      	lsrs	r4, r2
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0xbe>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	f000 80eb 	beq.w	8000de2 <__udivmoddi4+0x286>
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c12:	4638      	mov	r0, r7
 8000c14:	4639      	mov	r1, r7
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f783 	clz	r7, r3
 8000c1e:	2f00      	cmp	r7, #0
 8000c20:	d147      	bne.n	8000cb2 <__udivmoddi4+0x156>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0xd0>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80fa 	bhi.w	8000e20 <__udivmoddi4+0x2c4>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	4698      	mov	r8, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d0e0      	beq.n	8000bfc <__udivmoddi4+0xa0>
 8000c3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c3e:	e7dd      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000c40:	b902      	cbnz	r2, 8000c44 <__udivmoddi4+0xe8>
 8000c42:	deff      	udf	#255	; 0xff
 8000c44:	fab2 f282 	clz	r2, r2
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	f040 808f 	bne.w	8000d6c <__udivmoddi4+0x210>
 8000c4e:	1b49      	subs	r1, r1, r5
 8000c50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c54:	fa1f f885 	uxth.w	r8, r5
 8000c58:	2701      	movs	r7, #1
 8000c5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb08 f10c 	mul.w	r1, r8, ip
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x124>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x122>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	f200 80cd 	bhi.w	8000e18 <__udivmoddi4+0x2bc>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x14c>
 8000c98:	192c      	adds	r4, r5, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x14a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80b6 	bhi.w	8000e12 <__udivmoddi4+0x2b6>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e79f      	b.n	8000bf2 <__udivmoddi4+0x96>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	40bb      	lsls	r3, r7
 8000cb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ccc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cd0:	4325      	orrs	r5, r4
 8000cd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cd6:	0c2c      	lsrs	r4, r5, #16
 8000cd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cdc:	fa1f fa8e 	uxth.w	sl, lr
 8000ce0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ce4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	fa02 f207 	lsl.w	r2, r2, r7
 8000cee:	fa00 f107 	lsl.w	r1, r0, r7
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b0>
 8000cf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cfc:	f080 8087 	bcs.w	8000e0e <__udivmoddi4+0x2b2>
 8000d00:	429c      	cmp	r4, r3
 8000d02:	f240 8084 	bls.w	8000e0e <__udivmoddi4+0x2b2>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4473      	add	r3, lr
 8000d0c:	1b1b      	subs	r3, r3, r4
 8000d0e:	b2ad      	uxth	r5, r5
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d20:	45a2      	cmp	sl, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1da>
 8000d24:	eb1e 0404 	adds.w	r4, lr, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	d26b      	bcs.n	8000e06 <__udivmoddi4+0x2aa>
 8000d2e:	45a2      	cmp	sl, r4
 8000d30:	d969      	bls.n	8000e06 <__udivmoddi4+0x2aa>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4474      	add	r4, lr
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d3e:	eba4 040a 	sub.w	r4, r4, sl
 8000d42:	454c      	cmp	r4, r9
 8000d44:	46c2      	mov	sl, r8
 8000d46:	464b      	mov	r3, r9
 8000d48:	d354      	bcc.n	8000df4 <__udivmoddi4+0x298>
 8000d4a:	d051      	beq.n	8000df0 <__udivmoddi4+0x294>
 8000d4c:	2e00      	cmp	r6, #0
 8000d4e:	d069      	beq.n	8000e24 <__udivmoddi4+0x2c8>
 8000d50:	ebb1 050a 	subs.w	r5, r1, sl
 8000d54:	eb64 0403 	sbc.w	r4, r4, r3
 8000d58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d5c:	40fd      	lsrs	r5, r7
 8000d5e:	40fc      	lsrs	r4, r7
 8000d60:	ea4c 0505 	orr.w	r5, ip, r5
 8000d64:	e9c6 5400 	strd	r5, r4, [r6]
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e747      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f703 	lsr.w	r7, r0, r3
 8000d74:	4095      	lsls	r5, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d82:	4338      	orrs	r0, r7
 8000d84:	0c01      	lsrs	r1, r0, #16
 8000d86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d8a:	fa1f f885 	uxth.w	r8, r5
 8000d8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb07 f308 	mul.w	r3, r7, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000da0:	d907      	bls.n	8000db2 <__udivmoddi4+0x256>
 8000da2:	1869      	adds	r1, r5, r1
 8000da4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000da8:	d22f      	bcs.n	8000e0a <__udivmoddi4+0x2ae>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d92d      	bls.n	8000e0a <__udivmoddi4+0x2ae>
 8000dae:	3f02      	subs	r7, #2
 8000db0:	4429      	add	r1, r5
 8000db2:	1acb      	subs	r3, r1, r3
 8000db4:	b281      	uxth	r1, r0
 8000db6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb00 f308 	mul.w	r3, r0, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x27e>
 8000dca:	1869      	adds	r1, r5, r1
 8000dcc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd0:	d217      	bcs.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d915      	bls.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4429      	add	r1, r5
 8000dda:	1ac9      	subs	r1, r1, r3
 8000ddc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000de0:	e73b      	b.n	8000c5a <__udivmoddi4+0xfe>
 8000de2:	4637      	mov	r7, r6
 8000de4:	4630      	mov	r0, r6
 8000de6:	e709      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000de8:	4607      	mov	r7, r0
 8000dea:	e6e7      	b.n	8000bbc <__udivmoddi4+0x60>
 8000dec:	4618      	mov	r0, r3
 8000dee:	e6fb      	b.n	8000be8 <__udivmoddi4+0x8c>
 8000df0:	4541      	cmp	r1, r8
 8000df2:	d2ab      	bcs.n	8000d4c <__udivmoddi4+0x1f0>
 8000df4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000df8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dfc:	3801      	subs	r0, #1
 8000dfe:	4613      	mov	r3, r2
 8000e00:	e7a4      	b.n	8000d4c <__udivmoddi4+0x1f0>
 8000e02:	4660      	mov	r0, ip
 8000e04:	e7e9      	b.n	8000dda <__udivmoddi4+0x27e>
 8000e06:	4618      	mov	r0, r3
 8000e08:	e795      	b.n	8000d36 <__udivmoddi4+0x1da>
 8000e0a:	4667      	mov	r7, ip
 8000e0c:	e7d1      	b.n	8000db2 <__udivmoddi4+0x256>
 8000e0e:	4681      	mov	r9, r0
 8000e10:	e77c      	b.n	8000d0c <__udivmoddi4+0x1b0>
 8000e12:	3802      	subs	r0, #2
 8000e14:	442c      	add	r4, r5
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0x14c>
 8000e18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e1c:	442b      	add	r3, r5
 8000e1e:	e72f      	b.n	8000c80 <__udivmoddi4+0x124>
 8000e20:	4638      	mov	r0, r7
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xda>
 8000e24:	4637      	mov	r7, r6
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0xa0>

08000e28 <__aeabi_idiv0>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e36:	2003      	movs	r0, #3
 8000e38:	f001 fa0d 	bl	8002256 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f00b fc43 	bl	800c6c8 <HAL_InitTick>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	71fb      	strb	r3, [r7, #7]
 8000e4c:	e001      	b.n	8000e52 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e4e:	f00b fa8b 	bl	800c368 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e52:	79fb      	ldrb	r3, [r7, #7]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000004 	.word	0x20000004
 8000e80:	200015ec 	.word	0x200015ec

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	200015ec 	.word	0x200015ec

08000e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff ffee 	bl	8000e84 <HAL_GetTick>
 8000ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb4:	d005      	beq.n	8000ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_Delay+0x40>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ec2:	bf00      	nop
 8000ec4:	f7ff ffde 	bl	8000e84 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d8f7      	bhi.n	8000ec4 <HAL_Delay+0x28>
  {
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000004 	.word	0x20000004

08000ee0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3360      	adds	r3, #96	; 0x60
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <LL_ADC_SetOffset+0x44>)
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	430a      	orrs	r2, r1
 8000f76:	4313      	orrs	r3, r2
 8000f78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f80:	bf00      	nop
 8000f82:	371c      	adds	r7, #28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	03fff000 	.word	0x03fff000

08000f90 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3360      	adds	r3, #96	; 0x60
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3360      	adds	r3, #96	; 0x60
 8000fcc:	461a      	mov	r2, r3
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fe6:	bf00      	nop
 8000fe8:	371c      	adds	r7, #28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	431a      	orrs	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	615a      	str	r2, [r3, #20]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800102c:	2301      	movs	r3, #1
 800102e:	e000      	b.n	8001032 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800103e:	b480      	push	{r7}
 8001040:	b087      	sub	sp, #28
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3330      	adds	r3, #48	; 0x30
 800104e:	461a      	mov	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	0a1b      	lsrs	r3, r3, #8
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	4413      	add	r3, r2
 800105c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	f003 031f 	and.w	r3, r3, #31
 8001068:	211f      	movs	r1, #31
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	401a      	ands	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	0e9b      	lsrs	r3, r3, #26
 8001076:	f003 011f 	and.w	r1, r3, #31
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	f003 031f 	and.w	r3, r3, #31
 8001080:	fa01 f303 	lsl.w	r3, r1, r3
 8001084:	431a      	orrs	r2, r3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800108a:	bf00      	nop
 800108c:	371c      	adds	r7, #28
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	3314      	adds	r3, #20
 80010cc:	461a      	mov	r2, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	0e5b      	lsrs	r3, r3, #25
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	4413      	add	r3, r2
 80010da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	0d1b      	lsrs	r3, r3, #20
 80010e4:	f003 031f 	and.w	r3, r3, #31
 80010e8:	2107      	movs	r1, #7
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	401a      	ands	r2, r3
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	0d1b      	lsrs	r3, r3, #20
 80010f6:	f003 031f 	and.w	r3, r3, #31
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	431a      	orrs	r2, r3
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001106:	bf00      	nop
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800112c:	43db      	mvns	r3, r3
 800112e:	401a      	ands	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0318 	and.w	r3, r3, #24
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001138:	40d9      	lsrs	r1, r3
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	400b      	ands	r3, r1
 800113e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001142:	431a      	orrs	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	0007ffff 	.word	0x0007ffff

0800115c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800116c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	6093      	str	r3, [r2, #8]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001194:	d101      	bne.n	800119a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011e4:	d101      	bne.n	80011ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b01      	cmp	r3, #1
 800120a:	d101      	bne.n	8001210 <LL_ADC_IsEnabled+0x18>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <LL_ADC_IsEnabled+0x1a>
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	2b04      	cmp	r3, #4
 8001230:	d101      	bne.n	8001236 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	2b08      	cmp	r3, #8
 8001256:	d101      	bne.n	800125c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e12d      	b.n	80014e2 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001290:	2b00      	cmp	r3, #0
 8001292:	d109      	bne.n	80012a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f00b f88f 	bl	800c3b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff67 	bl	8001180 <LL_ADC_IsDeepPowerDownEnabled>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d004      	beq.n	80012c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff4d 	bl	800115c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff82 	bl	80011d0 <LL_ADC_IsInternalRegulatorEnabled>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d113      	bne.n	80012fa <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff66 	bl	80011a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80012dc:	4b83      	ldr	r3, [pc, #524]	; (80014ec <HAL_ADC_Init+0x280>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	099b      	lsrs	r3, r3, #6
 80012e2:	4a83      	ldr	r2, [pc, #524]	; (80014f0 <HAL_ADC_Init+0x284>)
 80012e4:	fba2 2303 	umull	r2, r3, r2, r3
 80012e8:	099b      	lsrs	r3, r3, #6
 80012ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012ec:	e002      	b.n	80012f4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f9      	bne.n	80012ee <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff66 	bl	80011d0 <LL_ADC_IsInternalRegulatorEnabled>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10d      	bne.n	8001326 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130e:	f043 0210 	orr.w	r2, r3, #16
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131a:	f043 0201 	orr.w	r2, r3, #1
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff77 	bl	800121e <LL_ADC_REG_IsConversionOngoing>
 8001330:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	2b00      	cmp	r3, #0
 800133c:	f040 80c8 	bne.w	80014d0 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2b00      	cmp	r3, #0
 8001344:	f040 80c4 	bne.w	80014d0 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001350:	f043 0202 	orr.w	r2, r3, #2
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff4b 	bl	80011f8 <LL_ADC_IsEnabled>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10b      	bne.n	8001380 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001368:	4862      	ldr	r0, [pc, #392]	; (80014f4 <HAL_ADC_Init+0x288>)
 800136a:	f7ff ff45 	bl	80011f8 <LL_ADC_IsEnabled>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d105      	bne.n	8001380 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4619      	mov	r1, r3
 800137a:	485f      	ldr	r0, [pc, #380]	; (80014f8 <HAL_ADC_Init+0x28c>)
 800137c:	f7ff fdb0 	bl	8000ee0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7e5b      	ldrb	r3, [r3, #25]
 8001384:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800138a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001390:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001396:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800139e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d106      	bne.n	80013bc <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	3b01      	subs	r3, #1
 80013b4:	045b      	lsls	r3, r3, #17
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d009      	beq.n	80013d8 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	4b47      	ldr	r3, [pc, #284]	; (80014fc <HAL_ADC_Init+0x290>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	69b9      	ldr	r1, [r7, #24]
 80013e8:	430b      	orrs	r3, r1
 80013ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff14 	bl	800121e <LL_ADC_REG_IsConversionOngoing>
 80013f6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff21 	bl	8001244 <LL_ADC_INJ_IsConversionOngoing>
 8001402:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d140      	bne.n	800148c <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d13d      	bne.n	800148c <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7e1b      	ldrb	r3, [r3, #24]
 8001418:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800141a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001422:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001432:	f023 0306 	bic.w	r3, r3, #6
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	69b9      	ldr	r1, [r7, #24]
 800143c:	430b      	orrs	r3, r1
 800143e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001446:	2b01      	cmp	r3, #1
 8001448:	d118      	bne.n	800147c <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001454:	f023 0304 	bic.w	r3, r3, #4
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001460:	4311      	orrs	r1, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001466:	4311      	orrs	r1, r2
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800146c:	430a      	orrs	r2, r1
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 0201 	orr.w	r2, r2, #1
 8001478:	611a      	str	r2, [r3, #16]
 800147a:	e007      	b.n	800148c <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0201 	bic.w	r2, r2, #1
 800148a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d10c      	bne.n	80014ae <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f023 010f 	bic.w	r1, r3, #15
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	1e5a      	subs	r2, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	631a      	str	r2, [r3, #48]	; 0x30
 80014ac:	e007      	b.n	80014be <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 020f 	bic.w	r2, r2, #15
 80014bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	f023 0303 	bic.w	r3, r3, #3
 80014c6:	f043 0201 	orr.w	r2, r3, #1
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	659a      	str	r2, [r3, #88]	; 0x58
 80014ce:	e007      	b.n	80014e0 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d4:	f043 0210 	orr.w	r2, r3, #16
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3720      	adds	r7, #32
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000009c 	.word	0x2000009c
 80014f0:	053e2d63 	.word	0x053e2d63
 80014f4:	50040000 	.word	0x50040000
 80014f8:	50040300 	.word	0x50040300
 80014fc:	fff0c007 	.word	0xfff0c007

08001500 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d017      	beq.n	8001556 <HAL_ADC_IRQHandler+0x56>
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d012      	beq.n	8001556 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	2b00      	cmp	r3, #0
 800153a:	d105      	bne.n	8001548 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001540:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fdcd 	bl	80020e8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2202      	movs	r2, #2
 8001554:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <HAL_ADC_IRQHandler+0x6a>
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001570:	2b00      	cmp	r3, #0
 8001572:	d05e      	beq.n	8001632 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	d059      	beq.n	8001632 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	2b00      	cmp	r3, #0
 8001588:	d105      	bne.n	8001596 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fd3c 	bl	8001018 <LL_ADC_REG_IsTriggerSourceSWStart>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d03e      	beq.n	8001624 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d135      	bne.n	8001624 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d12e      	bne.n	8001624 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fe27 	bl	800121e <LL_ADC_REG_IsConversionOngoing>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d11a      	bne.n	800160c <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 020c 	bic.w	r2, r2, #12
 80015e4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d112      	bne.n	8001624 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	f043 0201 	orr.w	r2, r3, #1
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	659a      	str	r2, [r3, #88]	; 0x58
 800160a:	e00b      	b.n	8001624 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001610:	f043 0210 	orr.w	r2, r3, #16
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 f91f 	bl	8001868 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	220c      	movs	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	f003 0320 	and.w	r3, r3, #32
 8001638:	2b00      	cmp	r3, #0
 800163a:	d004      	beq.n	8001646 <HAL_ADC_IRQHandler+0x146>
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f003 0320 	and.w	r3, r3, #32
 8001642:	2b00      	cmp	r3, #0
 8001644:	d109      	bne.n	800165a <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800164c:	2b00      	cmp	r3, #0
 800164e:	d072      	beq.n	8001736 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001656:	2b00      	cmp	r3, #0
 8001658:	d06d      	beq.n	8001736 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b00      	cmp	r3, #0
 8001664:	d105      	bne.n	8001672 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fd0d 	bl	8001096 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800167c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fcc8 	bl	8001018 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001688:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10c      	bne.n	80016b2 <HAL_ADC_IRQHandler+0x1b2>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d142      	bne.n	8001728 <HAL_ADC_IRQHandler+0x228>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d03f      	beq.n	8001728 <HAL_ADC_IRQHandler+0x228>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d13a      	bne.n	8001728 <HAL_ADC_IRQHandler+0x228>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016bc:	2b40      	cmp	r3, #64	; 0x40
 80016be:	d133      	bne.n	8001728 <HAL_ADC_IRQHandler+0x228>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d12e      	bne.n	8001728 <HAL_ADC_IRQHandler+0x228>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fdb8 	bl	8001244 <LL_ADC_INJ_IsConversionOngoing>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11a      	bne.n	8001710 <HAL_ADC_IRQHandler+0x210>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80016e8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d112      	bne.n	8001728 <HAL_ADC_IRQHandler+0x228>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001706:	f043 0201 	orr.w	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	659a      	str	r2, [r3, #88]	; 0x58
 800170e:	e00b      	b.n	8001728 <HAL_ADC_IRQHandler+0x228>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001714:	f043 0210 	orr.w	r2, r3, #16
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001720:	f043 0201 	orr.w	r2, r3, #1
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 fcb5 	bl	8002098 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2260      	movs	r2, #96	; 0x60
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173c:	2b00      	cmp	r3, #0
 800173e:	d011      	beq.n	8001764 <HAL_ADC_IRQHandler+0x264>
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00c      	beq.n	8001764 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f890 	bl	800187c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d012      	beq.n	8001794 <HAL_ADC_IRQHandler+0x294>
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00d      	beq.n	8001794 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 fc9b 	bl	80020c0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001792:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800179a:	2b00      	cmp	r3, #0
 800179c:	d012      	beq.n	80017c4 <HAL_ADC_IRQHandler+0x2c4>
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00d      	beq.n	80017c4 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 fc8d 	bl	80020d4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d02a      	beq.n	8001824 <HAL_ADC_IRQHandler+0x324>
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d025      	beq.n	8001824 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80017e0:	2301      	movs	r3, #1
 80017e2:	61fb      	str	r3, [r7, #28]
 80017e4:	e008      	b.n	80017f8 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d10e      	bne.n	800181c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180e:	f043 0202 	orr.w	r2, r3, #2
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f83a 	bl	8001890 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2210      	movs	r2, #16
 8001822:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182a:	2b00      	cmp	r3, #0
 800182c:	d018      	beq.n	8001860 <HAL_ADC_IRQHandler+0x360>
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001848:	f043 0208 	orr.w	r2, r3, #8
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001858:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 fc26 	bl	80020ac <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001860:	bf00      	nop
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b0b6      	sub	sp, #216	; 0xd8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d101      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x22>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e3d4      	b.n	8002070 <HAL_ADC_ConfigChannel+0x7cc>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fca3 	bl	800121e <LL_ADC_REG_IsConversionOngoing>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f040 83b9 	bne.w	8002052 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d824      	bhi.n	8001932 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	3b02      	subs	r3, #2
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d81b      	bhi.n	800192a <HAL_ADC_ConfigChannel+0x86>
 80018f2:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <HAL_ADC_ConfigChannel+0x54>)
 80018f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f8:	08001909 	.word	0x08001909
 80018fc:	08001911 	.word	0x08001911
 8001900:	08001919 	.word	0x08001919
 8001904:	08001921 	.word	0x08001921
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	220c      	movs	r2, #12
 800190c:	605a      	str	r2, [r3, #4]
          break;
 800190e:	e011      	b.n	8001934 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2212      	movs	r2, #18
 8001914:	605a      	str	r2, [r3, #4]
          break;
 8001916:	e00d      	b.n	8001934 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2218      	movs	r2, #24
 800191c:	605a      	str	r2, [r3, #4]
          break;
 800191e:	e009      	b.n	8001934 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001926:	605a      	str	r2, [r3, #4]
          break;
 8001928:	e004      	b.n	8001934 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2206      	movs	r2, #6
 800192e:	605a      	str	r2, [r3, #4]
          break;
 8001930:	e000      	b.n	8001934 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001932:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	6859      	ldr	r1, [r3, #4]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	f7ff fb7c 	bl	800103e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fc67 	bl	800121e <LL_ADC_REG_IsConversionOngoing>
 8001950:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fc73 	bl	8001244 <LL_ADC_INJ_IsConversionOngoing>
 800195e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001962:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001966:	2b00      	cmp	r3, #0
 8001968:	f040 81c1 	bne.w	8001cee <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800196c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001970:	2b00      	cmp	r3, #0
 8001972:	f040 81bc 	bne.w	8001cee <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800197e:	d10f      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2200      	movs	r2, #0
 800198a:	4619      	mov	r1, r3
 800198c:	f7ff fb96 	bl	80010bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fb2a 	bl	8000ff2 <LL_ADC_SetSamplingTimeCommonConfig>
 800199e:	e00e      	b.n	80019be <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	6819      	ldr	r1, [r3, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	461a      	mov	r2, r3
 80019ae:	f7ff fb85 	bl	80010bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fb1a 	bl	8000ff2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	08db      	lsrs	r3, r3, #3
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d00a      	beq.n	80019f6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	6919      	ldr	r1, [r3, #16]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019f0:	f7ff faaa 	bl	8000f48 <LL_ADC_SetOffset>
 80019f4:	e17b      	b.n	8001cee <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fac7 	bl	8000f90 <LL_ADC_GetOffsetChannel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10a      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x17e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fabc 	bl	8000f90 <LL_ADC_GetOffsetChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	0e9b      	lsrs	r3, r3, #26
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	e01e      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x1bc>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fab1 	bl	8000f90 <LL_ADC_GetOffsetChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001a50:	2320      	movs	r3, #32
 8001a52:	e004      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001a54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a58:	fab3 f383 	clz	r3, r3
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d105      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x1d4>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	0e9b      	lsrs	r3, r3, #26
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	e018      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x206>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001a9c:	2320      	movs	r3, #32
 8001a9e:	e004      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001aa0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001aa4:	fab3 f383 	clz	r3, r3
 8001aa8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d106      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fa80 	bl	8000fbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fa64 	bl	8000f90 <LL_ADC_GetOffsetChannel>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10a      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x244>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fa59 	bl	8000f90 <LL_ADC_GetOffsetChannel>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	0e9b      	lsrs	r3, r3, #26
 8001ae2:	f003 021f 	and.w	r2, r3, #31
 8001ae6:	e01e      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x282>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2101      	movs	r1, #1
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fa4e 	bl	8000f90 <LL_ADC_GetOffsetChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001b16:	2320      	movs	r3, #32
 8001b18:	e004      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001b1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d105      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x29a>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	0e9b      	lsrs	r3, r3, #26
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	e018      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x2cc>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001b62:	2320      	movs	r3, #32
 8001b64:	e004      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001b66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d106      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fa1d 	bl	8000fbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2102      	movs	r1, #2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fa01 	bl	8000f90 <LL_ADC_GetOffsetChannel>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10a      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x30a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f9f6 	bl	8000f90 <LL_ADC_GetOffsetChannel>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	0e9b      	lsrs	r3, r3, #26
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	e01e      	b.n	8001bec <HAL_ADC_ConfigChannel+0x348>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff f9eb 	bl	8000f90 <LL_ADC_GetOffsetChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001bcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001bd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001bdc:	2320      	movs	r3, #32
 8001bde:	e004      	b.n	8001bea <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001be0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001be4:	fab3 f383 	clz	r3, r3
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x360>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	0e9b      	lsrs	r3, r3, #26
 8001bfe:	f003 031f 	and.w	r3, r3, #31
 8001c02:	e016      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x38e>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001c24:	2320      	movs	r3, #32
 8001c26:	e004      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001c28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c2c:	fab3 f383 	clz	r3, r3
 8001c30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d106      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2102      	movs	r1, #2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f9bc 	bl	8000fbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2103      	movs	r1, #3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f9a0 	bl	8000f90 <LL_ADC_GetOffsetChannel>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10a      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x3cc>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2103      	movs	r1, #3
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff f995 	bl	8000f90 <LL_ADC_GetOffsetChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	0e9b      	lsrs	r3, r3, #26
 8001c6a:	f003 021f 	and.w	r2, r3, #31
 8001c6e:	e017      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x3fc>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2103      	movs	r1, #3
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff f98a 	bl	8000f90 <LL_ADC_GetOffsetChannel>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c8a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001c92:	2320      	movs	r3, #32
 8001c94:	e003      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d105      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x414>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0e9b      	lsrs	r3, r3, #26
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	e011      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x438>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cc0:	fa93 f3a3 	rbit	r3, r3
 8001cc4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001cc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	e003      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cd6:	fab3 f383 	clz	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d106      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2103      	movs	r1, #3
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff f967 	bl	8000fbc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fa80 	bl	80011f8 <LL_ADC_IsEnabled>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f040 8140 	bne.w	8001f80 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6819      	ldr	r1, [r3, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	f7ff fa01 	bl	8001114 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	4a8f      	ldr	r2, [pc, #572]	; (8001f54 <HAL_ADC_ConfigChannel+0x6b0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	f040 8131 	bne.w	8001f80 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10b      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x4a2>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	0e9b      	lsrs	r3, r3, #26
 8001d34:	3301      	adds	r3, #1
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	2b09      	cmp	r3, #9
 8001d3c:	bf94      	ite	ls
 8001d3e:	2301      	movls	r3, #1
 8001d40:	2300      	movhi	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	e019      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x4d6>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d56:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001d5e:	2320      	movs	r3, #32
 8001d60:	e003      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001d62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d64:	fab3 f383 	clz	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	2b09      	cmp	r3, #9
 8001d72:	bf94      	ite	ls
 8001d74:	2301      	movls	r3, #1
 8001d76:	2300      	movhi	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d079      	beq.n	8001e72 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d107      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x4f6>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	0e9b      	lsrs	r3, r3, #26
 8001d90:	3301      	adds	r3, #1
 8001d92:	069b      	lsls	r3, r3, #26
 8001d94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d98:	e015      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x522>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001daa:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001db2:	2320      	movs	r3, #32
 8001db4:	e003      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	069b      	lsls	r3, r3, #26
 8001dc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x542>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	0e9b      	lsrs	r3, r3, #26
 8001dd8:	3301      	adds	r3, #1
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	2101      	movs	r1, #1
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	e017      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x572>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001df6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001dfe:	2320      	movs	r3, #32
 8001e00:	e003      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	2101      	movs	r1, #1
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	ea42 0103 	orr.w	r1, r2, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10a      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x598>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	0e9b      	lsrs	r3, r3, #26
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	f003 021f 	and.w	r2, r3, #31
 8001e32:	4613      	mov	r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4413      	add	r3, r2
 8001e38:	051b      	lsls	r3, r3, #20
 8001e3a:	e018      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x5ca>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001e54:	2320      	movs	r3, #32
 8001e56:	e003      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3301      	adds	r3, #1
 8001e62:	f003 021f 	and.w	r2, r3, #31
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e6e:	430b      	orrs	r3, r1
 8001e70:	e081      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d107      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x5ea>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	0e9b      	lsrs	r3, r3, #26
 8001e84:	3301      	adds	r3, #1
 8001e86:	069b      	lsls	r3, r3, #26
 8001e88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e8c:	e015      	b.n	8001eba <HAL_ADC_ConfigChannel+0x616>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	e003      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	069b      	lsls	r3, r3, #26
 8001eb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d109      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x636>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	0e9b      	lsrs	r3, r3, #26
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	e017      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x666>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	61fb      	str	r3, [r7, #28]
  return result;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	e003      	b.n	8001efe <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	fab3 f383 	clz	r3, r3
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	3301      	adds	r3, #1
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	ea42 0103 	orr.w	r1, r2, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10d      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x692>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	0e9b      	lsrs	r3, r3, #26
 8001f20:	3301      	adds	r3, #1
 8001f22:	f003 021f 	and.w	r2, r3, #31
 8001f26:	4613      	mov	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b1e      	subs	r3, #30
 8001f2e:	051b      	lsls	r3, r3, #20
 8001f30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f34:	e01e      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x6d0>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	613b      	str	r3, [r7, #16]
  return result;
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d104      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	e006      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x6bc>
 8001f52:	bf00      	nop
 8001f54:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	3301      	adds	r3, #1
 8001f62:	f003 021f 	and.w	r2, r3, #31
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3b1e      	subs	r3, #30
 8001f6e:	051b      	lsls	r3, r3, #20
 8001f70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f74:	430b      	orrs	r3, r1
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	6892      	ldr	r2, [r2, #8]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f7ff f89e 	bl	80010bc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b3c      	ldr	r3, [pc, #240]	; (8002078 <HAL_ADC_ConfigChannel+0x7d4>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d06b      	beq.n	8002064 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f8c:	483b      	ldr	r0, [pc, #236]	; (800207c <HAL_ADC_ConfigChannel+0x7d8>)
 8001f8e:	f7fe ffcd 	bl	8000f2c <LL_ADC_GetCommonPathInternalCh>
 8001f92:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a39      	ldr	r2, [pc, #228]	; (8002080 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d126      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d120      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a34      	ldr	r2, [pc, #208]	; (8002084 <HAL_ADC_ConfigChannel+0x7e0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d156      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	482e      	ldr	r0, [pc, #184]	; (800207c <HAL_ADC_ConfigChannel+0x7d8>)
 8001fc2:	f7fe ffa0 	bl	8000f06 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001fc6:	4b30      	ldr	r3, [pc, #192]	; (8002088 <HAL_ADC_ConfigChannel+0x7e4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	099b      	lsrs	r3, r3, #6
 8001fcc:	4a2f      	ldr	r2, [pc, #188]	; (800208c <HAL_ADC_ConfigChannel+0x7e8>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	099a      	lsrs	r2, r3, #6
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fde:	e002      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f9      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fec:	e03a      	b.n	8002064 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a27      	ldr	r2, [pc, #156]	; (8002090 <HAL_ADC_ConfigChannel+0x7ec>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d113      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x77c>
 8001ff8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10d      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1e      	ldr	r2, [pc, #120]	; (8002084 <HAL_ADC_ConfigChannel+0x7e0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12a      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800200e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002016:	4619      	mov	r1, r3
 8002018:	4818      	ldr	r0, [pc, #96]	; (800207c <HAL_ADC_ConfigChannel+0x7d8>)
 800201a:	f7fe ff74 	bl	8000f06 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800201e:	e021      	b.n	8002064 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1b      	ldr	r2, [pc, #108]	; (8002094 <HAL_ADC_ConfigChannel+0x7f0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d11c      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800202a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800202e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d116      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a12      	ldr	r2, [pc, #72]	; (8002084 <HAL_ADC_ConfigChannel+0x7e0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d111      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002040:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002044:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002048:	4619      	mov	r1, r3
 800204a:	480c      	ldr	r0, [pc, #48]	; (800207c <HAL_ADC_ConfigChannel+0x7d8>)
 800204c:	f7fe ff5b 	bl	8000f06 <LL_ADC_SetCommonPathInternalCh>
 8002050:	e008      	b.n	8002064 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	f043 0220 	orr.w	r2, r3, #32
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800206c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002070:	4618      	mov	r0, r3
 8002072:	37d8      	adds	r7, #216	; 0xd8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	80080000 	.word	0x80080000
 800207c:	50040300 	.word	0x50040300
 8002080:	c7520000 	.word	0xc7520000
 8002084:	50040000 	.word	0x50040000
 8002088:	2000009c 	.word	0x2000009c
 800208c:	053e2d63 	.word	0x053e2d63
 8002090:	cb840000 	.word	0xcb840000
 8002094:	80000001 	.word	0x80000001

08002098 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <__NVIC_SetPriorityGrouping+0x44>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002118:	4013      	ands	r3, r2
 800211a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800212c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212e:	4a04      	ldr	r2, [pc, #16]	; (8002140 <__NVIC_SetPriorityGrouping+0x44>)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	60d3      	str	r3, [r2, #12]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <__NVIC_GetPriorityGrouping+0x18>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	0a1b      	lsrs	r3, r3, #8
 800214e:	f003 0307 	and.w	r3, r3, #7
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	2b00      	cmp	r3, #0
 8002170:	db0b      	blt.n	800218a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	f003 021f 	and.w	r2, r3, #31
 8002178:	4907      	ldr	r1, [pc, #28]	; (8002198 <__NVIC_EnableIRQ+0x38>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	2001      	movs	r0, #1
 8002182:	fa00 f202 	lsl.w	r2, r0, r2
 8002186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000e100 	.word	0xe000e100

0800219c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	6039      	str	r1, [r7, #0]
 80021a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	db0a      	blt.n	80021c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	490c      	ldr	r1, [pc, #48]	; (80021e8 <__NVIC_SetPriority+0x4c>)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	0112      	lsls	r2, r2, #4
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	440b      	add	r3, r1
 80021c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c4:	e00a      	b.n	80021dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4908      	ldr	r1, [pc, #32]	; (80021ec <__NVIC_SetPriority+0x50>)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	3b04      	subs	r3, #4
 80021d4:	0112      	lsls	r2, r2, #4
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	440b      	add	r3, r1
 80021da:	761a      	strb	r2, [r3, #24]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000e100 	.word	0xe000e100
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f1c3 0307 	rsb	r3, r3, #7
 800220a:	2b04      	cmp	r3, #4
 800220c:	bf28      	it	cs
 800220e:	2304      	movcs	r3, #4
 8002210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3304      	adds	r3, #4
 8002216:	2b06      	cmp	r3, #6
 8002218:	d902      	bls.n	8002220 <NVIC_EncodePriority+0x30>
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3b03      	subs	r3, #3
 800221e:	e000      	b.n	8002222 <NVIC_EncodePriority+0x32>
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43da      	mvns	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	401a      	ands	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002238:	f04f 31ff 	mov.w	r1, #4294967295
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	43d9      	mvns	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	4313      	orrs	r3, r2
         );
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	; 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ff4c 	bl	80020fc <__NVIC_SetPriorityGrouping>
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800227e:	f7ff ff61 	bl	8002144 <__NVIC_GetPriorityGrouping>
 8002282:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	6978      	ldr	r0, [r7, #20]
 800228a:	f7ff ffb1 	bl	80021f0 <NVIC_EncodePriority>
 800228e:	4602      	mov	r2, r0
 8002290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ff80 	bl	800219c <__NVIC_SetPriority>
}
 800229c:	bf00      	nop
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff54 	bl	8002160 <__NVIC_EnableIRQ>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e014      	b.n	80022fc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	791b      	ldrb	r3, [r3, #4]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f00a f8b0 	bl	800c448 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	795b      	ldrb	r3, [r3, #5]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_DAC_Start_DMA+0x1e>
 800231e:	2302      	movs	r3, #2
 8002320:	e09e      	b.n	8002460 <HAL_DAC_Start_DMA+0x15c>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2202      	movs	r2, #2
 800232c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d12a      	bne.n	800238a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	4a4b      	ldr	r2, [pc, #300]	; (8002468 <HAL_DAC_Start_DMA+0x164>)
 800233a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4a4a      	ldr	r2, [pc, #296]	; (800246c <HAL_DAC_Start_DMA+0x168>)
 8002342:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a49      	ldr	r2, [pc, #292]	; (8002470 <HAL_DAC_Start_DMA+0x16c>)
 800234a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800235a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	2b04      	cmp	r3, #4
 8002360:	d009      	beq.n	8002376 <HAL_DAC_Start_DMA+0x72>
 8002362:	2b08      	cmp	r3, #8
 8002364:	d00c      	beq.n	8002380 <HAL_DAC_Start_DMA+0x7c>
 8002366:	2b00      	cmp	r3, #0
 8002368:	d000      	beq.n	800236c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800236a:	e039      	b.n	80023e0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	3308      	adds	r3, #8
 8002372:	613b      	str	r3, [r7, #16]
        break;
 8002374:	e034      	b.n	80023e0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	330c      	adds	r3, #12
 800237c:	613b      	str	r3, [r7, #16]
        break;
 800237e:	e02f      	b.n	80023e0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	3310      	adds	r3, #16
 8002386:	613b      	str	r3, [r7, #16]
        break;
 8002388:	e02a      	b.n	80023e0 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	4a39      	ldr	r2, [pc, #228]	; (8002474 <HAL_DAC_Start_DMA+0x170>)
 8002390:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	4a38      	ldr	r2, [pc, #224]	; (8002478 <HAL_DAC_Start_DMA+0x174>)
 8002398:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	4a37      	ldr	r2, [pc, #220]	; (800247c <HAL_DAC_Start_DMA+0x178>)
 80023a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023b0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d009      	beq.n	80023cc <HAL_DAC_Start_DMA+0xc8>
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d00c      	beq.n	80023d6 <HAL_DAC_Start_DMA+0xd2>
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d000      	beq.n	80023c2 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80023c0:	e00e      	b.n	80023e0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	3314      	adds	r3, #20
 80023c8:	613b      	str	r3, [r7, #16]
        break;
 80023ca:	e009      	b.n	80023e0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3318      	adds	r3, #24
 80023d2:	613b      	str	r3, [r7, #16]
        break;
 80023d4:	e004      	b.n	80023e0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	331c      	adds	r3, #28
 80023dc:	613b      	str	r3, [r7, #16]
        break;
 80023de:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d111      	bne.n	800240a <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023f4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6898      	ldr	r0, [r3, #8]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	f000 fb78 	bl	8002af4 <HAL_DMA_Start_IT>
 8002404:	4603      	mov	r3, r0
 8002406:	75fb      	strb	r3, [r7, #23]
 8002408:	e010      	b.n	800242c <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002418:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	68d8      	ldr	r0, [r3, #12]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	f000 fb66 	bl	8002af4 <HAL_DMA_Start_IT>
 8002428:	4603      	mov	r3, r0
 800242a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002432:	7dfb      	ldrb	r3, [r7, #23]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10c      	bne.n	8002452 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6819      	ldr	r1, [r3, #0]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2201      	movs	r2, #1
 8002446:	409a      	lsls	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	e005      	b.n	800245e <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f043 0204 	orr.w	r2, r3, #4
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800245e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	0800287d 	.word	0x0800287d
 800246c:	0800289f 	.word	0x0800289f
 8002470:	080028bb 	.word	0x080028bb
 8002474:	08002939 	.word	0x08002939
 8002478:	0800295b 	.word	0x0800295b
 800247c:	08002977 	.word	0x08002977

08002480 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6819      	ldr	r1, [r3, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	400a      	ands	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6819      	ldr	r1, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2201      	movs	r2, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	400a      	ands	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10d      	bne.n	80024e6 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fb8b 	bl	8002bea <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	e00c      	b.n	8002500 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fb7d 	bl	8002bea <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80024fe:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800251c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002520:	d120      	bne.n	8002564 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800252c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002530:	d118      	bne.n	8002564 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2204      	movs	r2, #4
 8002536:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f043 0201 	orr.w	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800254c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800255c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f841 	bl	80025e6 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800256e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002572:	d120      	bne.n	80025b6 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800257e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002582:	d118      	bne.n	80025b6 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2204      	movs	r2, #4
 8002588:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f043 0202 	orr.w	r2, r3, #2
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800259e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80025ae:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f9b7 	bl	8002924 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	795b      	ldrb	r3, [r3, #5]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_DAC_ConfigChannel+0x1c>
 8002614:	2302      	movs	r3, #2
 8002616:	e12a      	b.n	800286e <HAL_DAC_ConfigChannel+0x272>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2201      	movs	r2, #1
 800261c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2202      	movs	r2, #2
 8002622:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b04      	cmp	r3, #4
 800262a:	d174      	bne.n	8002716 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800262c:	f7fe fc2a 	bl	8000e84 <HAL_GetTick>
 8002630:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d134      	bne.n	80026a2 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002638:	e011      	b.n	800265e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800263a:	f7fe fc23 	bl	8000e84 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b01      	cmp	r3, #1
 8002646:	d90a      	bls.n	800265e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	f043 0208 	orr.w	r2, r3, #8
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2203      	movs	r2, #3
 8002658:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e107      	b.n	800286e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1e6      	bne.n	800263a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800266c:	2001      	movs	r0, #1
 800266e:	f7fe fc15 	bl	8000e9c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	69d2      	ldr	r2, [r2, #28]
 800267a:	641a      	str	r2, [r3, #64]	; 0x40
 800267c:	e01e      	b.n	80026bc <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800267e:	f7fe fc01 	bl	8000e84 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	d90a      	bls.n	80026a2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f043 0208 	orr.w	r2, r3, #8
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2203      	movs	r2, #3
 800269c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e0e5      	b.n	800286e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	dbe8      	blt.n	800267e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80026ac:	2001      	movs	r0, #1
 80026ae:	f7fe fbf5 	bl	8000e9c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	69d2      	ldr	r2, [r2, #28]
 80026ba:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	ea02 0103 	and.w	r1, r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	6a1a      	ldr	r2, [r3, #32]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	409a      	lsls	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	21ff      	movs	r1, #255	; 0xff
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	ea02 0103 	and.w	r1, r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	409a      	lsls	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d11d      	bne.n	800275a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002724:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	221f      	movs	r2, #31
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	4013      	ands	r3, r2
 8002738:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	4313      	orrs	r3, r2
 8002750:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002760:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2207      	movs	r2, #7
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	4013      	ands	r3, r2
 8002774:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	431a      	orrs	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f003 0310 	and.w	r3, r3, #16
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	4313      	orrs	r3, r2
 8002798:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6819      	ldr	r1, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	400a      	ands	r2, r1
 80027be:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	f640 72fe 	movw	r2, #4094	; 0xffe
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	4013      	ands	r3, r2
 80027dc:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027fe:	d104      	bne.n	800280a <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	e018      	b.n	800283c <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d104      	bne.n	800281c <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	e00f      	b.n	800283c <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 800281c:	f002 fa84 	bl	8004d28 <HAL_RCC_GetHCLKFreq>
 8002820:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4a14      	ldr	r2, [pc, #80]	; (8002878 <HAL_DAC_ConfigChannel+0x27c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d904      	bls.n	8002834 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	e003      	b.n	800283c <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800283a:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6819      	ldr	r1, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	22c0      	movs	r2, #192	; 0xc0
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43da      	mvns	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	400a      	ands	r2, r1
 800285e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3720      	adds	r7, #32
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	04c4b400 	.word	0x04c4b400

0800287c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f7ff fe97 	bl	80025be <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2201      	movs	r2, #1
 8002894:	711a      	strb	r2, [r3, #4]
}
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028aa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f009 f981 	bl	800bbb4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f043 0204 	orr.w	r2, r3, #4
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f7ff fe7c 	bl	80025d2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	711a      	strb	r2, [r3, #4]
}
 80028e0:	bf00      	nop
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff ffce 	bl	80028e8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	711a      	strb	r2, [r3, #4]
}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f7ff ffc7 	bl	80028fc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	f043 0204 	orr.w	r2, r3, #4
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f7ff ffbd 	bl	8002910 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	711a      	strb	r2, [r3, #4]
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e08d      	b.n	8002ad2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b47      	ldr	r3, [pc, #284]	; (8002adc <HAL_DMA_Init+0x138>)
 80029be:	429a      	cmp	r2, r3
 80029c0:	d80f      	bhi.n	80029e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	4b45      	ldr	r3, [pc, #276]	; (8002ae0 <HAL_DMA_Init+0x13c>)
 80029ca:	4413      	add	r3, r2
 80029cc:	4a45      	ldr	r2, [pc, #276]	; (8002ae4 <HAL_DMA_Init+0x140>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	009a      	lsls	r2, r3, #2
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a42      	ldr	r2, [pc, #264]	; (8002ae8 <HAL_DMA_Init+0x144>)
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
 80029e0:	e00e      	b.n	8002a00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b40      	ldr	r3, [pc, #256]	; (8002aec <HAL_DMA_Init+0x148>)
 80029ea:	4413      	add	r3, r2
 80029ec:	4a3d      	ldr	r2, [pc, #244]	; (8002ae4 <HAL_DMA_Init+0x140>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	009a      	lsls	r2, r3, #2
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a3c      	ldr	r2, [pc, #240]	; (8002af0 <HAL_DMA_Init+0x14c>)
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fa12 	bl	8002e7c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a60:	d102      	bne.n	8002a68 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a7c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d010      	beq.n	8002aa8 <HAL_DMA_Init+0x104>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d80c      	bhi.n	8002aa8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fa32 	bl	8002ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	e008      	b.n	8002aba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40020407 	.word	0x40020407
 8002ae0:	bffdfff8 	.word	0xbffdfff8
 8002ae4:	cccccccd 	.word	0xcccccccd
 8002ae8:	40020000 	.word	0x40020000
 8002aec:	bffdfbf8 	.word	0xbffdfbf8
 8002af0:	40020400 	.word	0x40020400

08002af4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_DMA_Start_IT+0x20>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e066      	b.n	8002be2 <HAL_DMA_Start_IT+0xee>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d155      	bne.n	8002bd4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f957 	bl	8002e00 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 020e 	orr.w	r2, r2, #14
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e00f      	b.n	8002b8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0204 	bic.w	r2, r2, #4
 8002b7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 020a 	orr.w	r2, r2, #10
 8002b8a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e005      	b.n	8002be0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b085      	sub	sp, #20
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d008      	beq.n	8002c14 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2204      	movs	r2, #4
 8002c06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e040      	b.n	8002c96 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 020e 	bic.w	r2, r2, #14
 8002c22:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c32:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0201 	bic.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	f003 021c 	and.w	r2, r3, #28
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	2101      	movs	r1, #1
 8002c52:	fa01 f202 	lsl.w	r2, r1, r2
 8002c56:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c60:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00c      	beq.n	8002c84 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c78:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c82:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	f003 031c 	and.w	r3, r3, #28
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d026      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x7a>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d021      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d107      	bne.n	8002cf6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0204 	bic.w	r2, r2, #4
 8002cf4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f003 021c 	and.w	r2, r3, #28
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	2104      	movs	r1, #4
 8002d04:	fa01 f202 	lsl.w	r2, r1, r2
 8002d08:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d071      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002d1a:	e06c      	b.n	8002df6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d20:	f003 031c 	and.w	r3, r3, #28
 8002d24:	2202      	movs	r2, #2
 8002d26:	409a      	lsls	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d02e      	beq.n	8002d8e <HAL_DMA_IRQHandler+0xec>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d029      	beq.n	8002d8e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10b      	bne.n	8002d60 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 020a 	bic.w	r2, r2, #10
 8002d56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d64:	f003 021c 	and.w	r2, r3, #28
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d72:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d038      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d8c:	e033      	b.n	8002df6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	f003 031c 	and.w	r3, r3, #28
 8002d96:	2208      	movs	r2, #8
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d02a      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x156>
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d025      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 020e 	bic.w	r2, r2, #14
 8002dba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	f003 021c 	and.w	r2, r3, #28
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	2101      	movs	r1, #1
 8002dca:	fa01 f202 	lsl.w	r2, r1, r2
 8002dce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d004      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002df6:	bf00      	nop
 8002df8:	bf00      	nop
}
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e16:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d004      	beq.n	8002e2a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e28:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f003 021c 	and.w	r2, r3, #28
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	2101      	movs	r1, #1
 8002e38:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b10      	cmp	r3, #16
 8002e4c:	d108      	bne.n	8002e60 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e5e:	e007      	b.n	8002e70 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	60da      	str	r2, [r3, #12]
}
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d80a      	bhi.n	8002ea6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e9c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6493      	str	r3, [r2, #72]	; 0x48
 8002ea4:	e007      	b.n	8002eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	089b      	lsrs	r3, r3, #2
 8002eac:	009a      	lsls	r2, r3, #2
 8002eae:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002eb0:	4413      	add	r3, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	3b08      	subs	r3, #8
 8002ebe:	4a0c      	ldr	r2, [pc, #48]	; (8002ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002ecc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	40020407 	.word	0x40020407
 8002eec:	4002081c 	.word	0x4002081c
 8002ef0:	cccccccd 	.word	0xcccccccd
 8002ef4:	40020880 	.word	0x40020880

08002ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	461a      	mov	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002f1a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2201      	movs	r2, #1
 8002f26:	409a      	lsls	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	1000823f 	.word	0x1000823f
 8002f3c:	40020940 	.word	0x40020940

08002f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f4e:	e166      	b.n	800321e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	2101      	movs	r1, #1
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 8158 	beq.w	8003218 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d00b      	beq.n	8002f88 <HAL_GPIO_Init+0x48>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d007      	beq.n	8002f88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f7c:	2b11      	cmp	r3, #17
 8002f7e:	d003      	beq.n	8002f88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b12      	cmp	r3, #18
 8002f86:	d130      	bne.n	8002fea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	2203      	movs	r2, #3
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	091b      	lsrs	r3, r3, #4
 8002fd4:	f003 0201 	and.w	r2, r3, #1
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4013      	ands	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d003      	beq.n	800302a <HAL_GPIO_Init+0xea>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b12      	cmp	r3, #18
 8003028:	d123      	bne.n	8003072 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	08da      	lsrs	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3208      	adds	r2, #8
 8003032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003036:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	220f      	movs	r2, #15
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4013      	ands	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	08da      	lsrs	r2, r3, #3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3208      	adds	r2, #8
 800306c:	6939      	ldr	r1, [r7, #16]
 800306e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	2203      	movs	r2, #3
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4013      	ands	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 0203 	and.w	r2, r3, #3
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80b2 	beq.w	8003218 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b4:	4b61      	ldr	r3, [pc, #388]	; (800323c <HAL_GPIO_Init+0x2fc>)
 80030b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b8:	4a60      	ldr	r2, [pc, #384]	; (800323c <HAL_GPIO_Init+0x2fc>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	6613      	str	r3, [r2, #96]	; 0x60
 80030c0:	4b5e      	ldr	r3, [pc, #376]	; (800323c <HAL_GPIO_Init+0x2fc>)
 80030c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030cc:	4a5c      	ldr	r2, [pc, #368]	; (8003240 <HAL_GPIO_Init+0x300>)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	089b      	lsrs	r3, r3, #2
 80030d2:	3302      	adds	r3, #2
 80030d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	220f      	movs	r2, #15
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030f6:	d02b      	beq.n	8003150 <HAL_GPIO_Init+0x210>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a52      	ldr	r2, [pc, #328]	; (8003244 <HAL_GPIO_Init+0x304>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d025      	beq.n	800314c <HAL_GPIO_Init+0x20c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a51      	ldr	r2, [pc, #324]	; (8003248 <HAL_GPIO_Init+0x308>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d01f      	beq.n	8003148 <HAL_GPIO_Init+0x208>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a50      	ldr	r2, [pc, #320]	; (800324c <HAL_GPIO_Init+0x30c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d019      	beq.n	8003144 <HAL_GPIO_Init+0x204>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a4f      	ldr	r2, [pc, #316]	; (8003250 <HAL_GPIO_Init+0x310>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d013      	beq.n	8003140 <HAL_GPIO_Init+0x200>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a4e      	ldr	r2, [pc, #312]	; (8003254 <HAL_GPIO_Init+0x314>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00d      	beq.n	800313c <HAL_GPIO_Init+0x1fc>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a4d      	ldr	r2, [pc, #308]	; (8003258 <HAL_GPIO_Init+0x318>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d007      	beq.n	8003138 <HAL_GPIO_Init+0x1f8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a4c      	ldr	r2, [pc, #304]	; (800325c <HAL_GPIO_Init+0x31c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d101      	bne.n	8003134 <HAL_GPIO_Init+0x1f4>
 8003130:	2307      	movs	r3, #7
 8003132:	e00e      	b.n	8003152 <HAL_GPIO_Init+0x212>
 8003134:	2308      	movs	r3, #8
 8003136:	e00c      	b.n	8003152 <HAL_GPIO_Init+0x212>
 8003138:	2306      	movs	r3, #6
 800313a:	e00a      	b.n	8003152 <HAL_GPIO_Init+0x212>
 800313c:	2305      	movs	r3, #5
 800313e:	e008      	b.n	8003152 <HAL_GPIO_Init+0x212>
 8003140:	2304      	movs	r3, #4
 8003142:	e006      	b.n	8003152 <HAL_GPIO_Init+0x212>
 8003144:	2303      	movs	r3, #3
 8003146:	e004      	b.n	8003152 <HAL_GPIO_Init+0x212>
 8003148:	2302      	movs	r3, #2
 800314a:	e002      	b.n	8003152 <HAL_GPIO_Init+0x212>
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <HAL_GPIO_Init+0x212>
 8003150:	2300      	movs	r3, #0
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	f002 0203 	and.w	r2, r2, #3
 8003158:	0092      	lsls	r2, r2, #2
 800315a:	4093      	lsls	r3, r2
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003162:	4937      	ldr	r1, [pc, #220]	; (8003240 <HAL_GPIO_Init+0x300>)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	089b      	lsrs	r3, r3, #2
 8003168:	3302      	adds	r3, #2
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003170:	4b3b      	ldr	r3, [pc, #236]	; (8003260 <HAL_GPIO_Init+0x320>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	43db      	mvns	r3, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003194:	4a32      	ldr	r2, [pc, #200]	; (8003260 <HAL_GPIO_Init+0x320>)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800319a:	4b31      	ldr	r3, [pc, #196]	; (8003260 <HAL_GPIO_Init+0x320>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031be:	4a28      	ldr	r2, [pc, #160]	; (8003260 <HAL_GPIO_Init+0x320>)
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031c4:	4b26      	ldr	r3, [pc, #152]	; (8003260 <HAL_GPIO_Init+0x320>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4013      	ands	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031e8:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <HAL_GPIO_Init+0x320>)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031ee:	4b1c      	ldr	r3, [pc, #112]	; (8003260 <HAL_GPIO_Init+0x320>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4013      	ands	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4313      	orrs	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003212:	4a13      	ldr	r2, [pc, #76]	; (8003260 <HAL_GPIO_Init+0x320>)
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	3301      	adds	r3, #1
 800321c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	fa22 f303 	lsr.w	r3, r2, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	f47f ae91 	bne.w	8002f50 <HAL_GPIO_Init+0x10>
  }
}
 800322e:	bf00      	nop
 8003230:	371c      	adds	r7, #28
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40021000 	.word	0x40021000
 8003240:	40010000 	.word	0x40010000
 8003244:	48000400 	.word	0x48000400
 8003248:	48000800 	.word	0x48000800
 800324c:	48000c00 	.word	0x48000c00
 8003250:	48001000 	.word	0x48001000
 8003254:	48001400 	.word	0x48001400
 8003258:	48001800 	.word	0x48001800
 800325c:	48001c00 	.word	0x48001c00
 8003260:	40010400 	.word	0x40010400

08003264 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003272:	e0c9      	b.n	8003408 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003274:	2201      	movs	r2, #1
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	4013      	ands	r3, r2
 8003280:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80bc 	beq.w	8003402 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800328a:	4a66      	ldr	r2, [pc, #408]	; (8003424 <HAL_GPIO_DeInit+0x1c0>)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	089b      	lsrs	r3, r3, #2
 8003290:	3302      	adds	r3, #2
 8003292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003296:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	220f      	movs	r2, #15
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4013      	ands	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032b2:	d02b      	beq.n	800330c <HAL_GPIO_DeInit+0xa8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a5c      	ldr	r2, [pc, #368]	; (8003428 <HAL_GPIO_DeInit+0x1c4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d025      	beq.n	8003308 <HAL_GPIO_DeInit+0xa4>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a5b      	ldr	r2, [pc, #364]	; (800342c <HAL_GPIO_DeInit+0x1c8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d01f      	beq.n	8003304 <HAL_GPIO_DeInit+0xa0>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a5a      	ldr	r2, [pc, #360]	; (8003430 <HAL_GPIO_DeInit+0x1cc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d019      	beq.n	8003300 <HAL_GPIO_DeInit+0x9c>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a59      	ldr	r2, [pc, #356]	; (8003434 <HAL_GPIO_DeInit+0x1d0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d013      	beq.n	80032fc <HAL_GPIO_DeInit+0x98>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a58      	ldr	r2, [pc, #352]	; (8003438 <HAL_GPIO_DeInit+0x1d4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00d      	beq.n	80032f8 <HAL_GPIO_DeInit+0x94>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a57      	ldr	r2, [pc, #348]	; (800343c <HAL_GPIO_DeInit+0x1d8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d007      	beq.n	80032f4 <HAL_GPIO_DeInit+0x90>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a56      	ldr	r2, [pc, #344]	; (8003440 <HAL_GPIO_DeInit+0x1dc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d101      	bne.n	80032f0 <HAL_GPIO_DeInit+0x8c>
 80032ec:	2307      	movs	r3, #7
 80032ee:	e00e      	b.n	800330e <HAL_GPIO_DeInit+0xaa>
 80032f0:	2308      	movs	r3, #8
 80032f2:	e00c      	b.n	800330e <HAL_GPIO_DeInit+0xaa>
 80032f4:	2306      	movs	r3, #6
 80032f6:	e00a      	b.n	800330e <HAL_GPIO_DeInit+0xaa>
 80032f8:	2305      	movs	r3, #5
 80032fa:	e008      	b.n	800330e <HAL_GPIO_DeInit+0xaa>
 80032fc:	2304      	movs	r3, #4
 80032fe:	e006      	b.n	800330e <HAL_GPIO_DeInit+0xaa>
 8003300:	2303      	movs	r3, #3
 8003302:	e004      	b.n	800330e <HAL_GPIO_DeInit+0xaa>
 8003304:	2302      	movs	r3, #2
 8003306:	e002      	b.n	800330e <HAL_GPIO_DeInit+0xaa>
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <HAL_GPIO_DeInit+0xaa>
 800330c:	2300      	movs	r3, #0
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	f002 0203 	and.w	r2, r2, #3
 8003314:	0092      	lsls	r2, r2, #2
 8003316:	4093      	lsls	r3, r2
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	429a      	cmp	r2, r3
 800331c:	d132      	bne.n	8003384 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800331e:	4b49      	ldr	r3, [pc, #292]	; (8003444 <HAL_GPIO_DeInit+0x1e0>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	43db      	mvns	r3, r3
 8003326:	4947      	ldr	r1, [pc, #284]	; (8003444 <HAL_GPIO_DeInit+0x1e0>)
 8003328:	4013      	ands	r3, r2
 800332a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800332c:	4b45      	ldr	r3, [pc, #276]	; (8003444 <HAL_GPIO_DeInit+0x1e0>)
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	43db      	mvns	r3, r3
 8003334:	4943      	ldr	r1, [pc, #268]	; (8003444 <HAL_GPIO_DeInit+0x1e0>)
 8003336:	4013      	ands	r3, r2
 8003338:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800333a:	4b42      	ldr	r3, [pc, #264]	; (8003444 <HAL_GPIO_DeInit+0x1e0>)
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	43db      	mvns	r3, r3
 8003342:	4940      	ldr	r1, [pc, #256]	; (8003444 <HAL_GPIO_DeInit+0x1e0>)
 8003344:	4013      	ands	r3, r2
 8003346:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003348:	4b3e      	ldr	r3, [pc, #248]	; (8003444 <HAL_GPIO_DeInit+0x1e0>)
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	493c      	ldr	r1, [pc, #240]	; (8003444 <HAL_GPIO_DeInit+0x1e0>)
 8003352:	4013      	ands	r3, r2
 8003354:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	220f      	movs	r2, #15
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003366:	4a2f      	ldr	r2, [pc, #188]	; (8003424 <HAL_GPIO_DeInit+0x1c0>)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	089b      	lsrs	r3, r3, #2
 800336c:	3302      	adds	r3, #2
 800336e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	43da      	mvns	r2, r3
 8003376:	482b      	ldr	r0, [pc, #172]	; (8003424 <HAL_GPIO_DeInit+0x1c0>)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	400a      	ands	r2, r1
 800337e:	3302      	adds	r3, #2
 8003380:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	2103      	movs	r1, #3
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	08da      	lsrs	r2, r3, #3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3208      	adds	r2, #8
 80033a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	220f      	movs	r2, #15
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	08d2      	lsrs	r2, r2, #3
 80033b8:	4019      	ands	r1, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3208      	adds	r2, #8
 80033be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	2103      	movs	r1, #3
 80033cc:	fa01 f303 	lsl.w	r3, r1, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	401a      	ands	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	2101      	movs	r1, #1
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	fa01 f303 	lsl.w	r3, r1, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	401a      	ands	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	2103      	movs	r1, #3
 80033f6:	fa01 f303 	lsl.w	r3, r1, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	401a      	ands	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	3301      	adds	r3, #1
 8003406:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	f47f af2f 	bne.w	8003274 <HAL_GPIO_DeInit+0x10>
  }
}
 8003416:	bf00      	nop
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40010000 	.word	0x40010000
 8003428:	48000400 	.word	0x48000400
 800342c:	48000800 	.word	0x48000800
 8003430:	48000c00 	.word	0x48000c00
 8003434:	48001000 	.word	0x48001000
 8003438:	48001400 	.word	0x48001400
 800343c:	48001800 	.word	0x48001800
 8003440:	48001c00 	.word	0x48001c00
 8003444:	40010400 	.word	0x40010400

08003448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	807b      	strh	r3, [r7, #2]
 8003454:	4613      	mov	r3, r2
 8003456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003458:	787b      	ldrb	r3, [r7, #1]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003464:	e002      	b.n	800346c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003466:	887a      	ldrh	r2, [r7, #2]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d006      	beq.n	800349c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800348e:	4a05      	ldr	r2, [pc, #20]	; (80034a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003494:	88fb      	ldrh	r3, [r7, #6]
 8003496:	4618      	mov	r0, r3
 8003498:	f008 fb70 	bl	800bb7c <HAL_GPIO_EXTI_Callback>
  }
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40010400 	.word	0x40010400

080034a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e081      	b.n	80035be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f009 f830 	bl	800c534 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2224      	movs	r2, #36	; 0x24
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0201 	bic.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003508:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	e006      	b.n	8003530 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800352e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d104      	bne.n	8003542 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003540:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003554:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003564:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	ea42 0103 	orr.w	r1, r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	021a      	lsls	r2, r3, #8
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69d9      	ldr	r1, [r3, #28]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1a      	ldr	r2, [r3, #32]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e021      	b.n	800361c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2224      	movs	r2, #36	; 0x24
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0201 	bic.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f008 ffe3 	bl	800c5bc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	4608      	mov	r0, r1
 800362e:	4611      	mov	r1, r2
 8003630:	461a      	mov	r2, r3
 8003632:	4603      	mov	r3, r0
 8003634:	817b      	strh	r3, [r7, #10]
 8003636:	460b      	mov	r3, r1
 8003638:	813b      	strh	r3, [r7, #8]
 800363a:	4613      	mov	r3, r2
 800363c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b20      	cmp	r3, #32
 8003648:	f040 80f9 	bne.w	800383e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_I2C_Mem_Write+0x34>
 8003652:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003654:	2b00      	cmp	r3, #0
 8003656:	d105      	bne.n	8003664 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800365e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0ed      	b.n	8003840 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_I2C_Mem_Write+0x4e>
 800366e:	2302      	movs	r3, #2
 8003670:	e0e6      	b.n	8003840 <HAL_I2C_Mem_Write+0x21c>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800367a:	f7fd fc03 	bl	8000e84 <HAL_GetTick>
 800367e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2319      	movs	r3, #25
 8003686:	2201      	movs	r2, #1
 8003688:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fac3 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0d1      	b.n	8003840 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2221      	movs	r2, #33	; 0x21
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2240      	movs	r2, #64	; 0x40
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a3a      	ldr	r2, [r7, #32]
 80036b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036c4:	88f8      	ldrh	r0, [r7, #6]
 80036c6:	893a      	ldrh	r2, [r7, #8]
 80036c8:	8979      	ldrh	r1, [r7, #10]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	9301      	str	r3, [sp, #4]
 80036ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	4603      	mov	r3, r0
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f9d3 	bl	8003a80 <I2C_RequestMemoryWrite>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0a9      	b.n	8003840 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2bff      	cmp	r3, #255	; 0xff
 80036f4:	d90e      	bls.n	8003714 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	22ff      	movs	r2, #255	; 0xff
 80036fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003700:	b2da      	uxtb	r2, r3
 8003702:	8979      	ldrh	r1, [r7, #10]
 8003704:	2300      	movs	r3, #0
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fba5 	bl	8003e5c <I2C_TransferConfig>
 8003712:	e00f      	b.n	8003734 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003722:	b2da      	uxtb	r2, r3
 8003724:	8979      	ldrh	r1, [r7, #10]
 8003726:	2300      	movs	r3, #0
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fb94 	bl	8003e5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 faad 	bl	8003c98 <I2C_WaitOnTXISFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e07b      	b.n	8003840 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	781a      	ldrb	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d034      	beq.n	80037ec <HAL_I2C_Mem_Write+0x1c8>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	2b00      	cmp	r3, #0
 8003788:	d130      	bne.n	80037ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	2200      	movs	r2, #0
 8003792:	2180      	movs	r1, #128	; 0x80
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fa3f 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e04d      	b.n	8003840 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2bff      	cmp	r3, #255	; 0xff
 80037ac:	d90e      	bls.n	80037cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	22ff      	movs	r2, #255	; 0xff
 80037b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	8979      	ldrh	r1, [r7, #10]
 80037bc:	2300      	movs	r3, #0
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fb49 	bl	8003e5c <I2C_TransferConfig>
 80037ca:	e00f      	b.n	80037ec <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	8979      	ldrh	r1, [r7, #10]
 80037de:	2300      	movs	r3, #0
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fb38 	bl	8003e5c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d19e      	bne.n	8003734 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fa8c 	bl	8003d18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e01a      	b.n	8003840 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2220      	movs	r2, #32
 8003810:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <HAL_I2C_Mem_Write+0x224>)
 800381e:	400b      	ands	r3, r1
 8003820:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e000      	b.n	8003840 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
  }
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	fe00e800 	.word	0xfe00e800

0800384c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af02      	add	r7, sp, #8
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	4608      	mov	r0, r1
 8003856:	4611      	mov	r1, r2
 8003858:	461a      	mov	r2, r3
 800385a:	4603      	mov	r3, r0
 800385c:	817b      	strh	r3, [r7, #10]
 800385e:	460b      	mov	r3, r1
 8003860:	813b      	strh	r3, [r7, #8]
 8003862:	4613      	mov	r3, r2
 8003864:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b20      	cmp	r3, #32
 8003870:	f040 80fd 	bne.w	8003a6e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_I2C_Mem_Read+0x34>
 800387a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800387c:	2b00      	cmp	r3, #0
 800387e:	d105      	bne.n	800388c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003886:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0f1      	b.n	8003a70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_I2C_Mem_Read+0x4e>
 8003896:	2302      	movs	r3, #2
 8003898:	e0ea      	b.n	8003a70 <HAL_I2C_Mem_Read+0x224>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038a2:	f7fd faef 	bl	8000e84 <HAL_GetTick>
 80038a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	2319      	movs	r3, #25
 80038ae:	2201      	movs	r2, #1
 80038b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f9af 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0d5      	b.n	8003a70 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2222      	movs	r2, #34	; 0x22
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2240      	movs	r2, #64	; 0x40
 80038d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a3a      	ldr	r2, [r7, #32]
 80038de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038ec:	88f8      	ldrh	r0, [r7, #6]
 80038ee:	893a      	ldrh	r2, [r7, #8]
 80038f0:	8979      	ldrh	r1, [r7, #10]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	9301      	str	r3, [sp, #4]
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	4603      	mov	r3, r0
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f913 	bl	8003b28 <I2C_RequestMemoryRead>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0ad      	b.n	8003a70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	2bff      	cmp	r3, #255	; 0xff
 800391c:	d90e      	bls.n	800393c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	22ff      	movs	r2, #255	; 0xff
 8003922:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003928:	b2da      	uxtb	r2, r3
 800392a:	8979      	ldrh	r1, [r7, #10]
 800392c:	4b52      	ldr	r3, [pc, #328]	; (8003a78 <HAL_I2C_Mem_Read+0x22c>)
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 fa91 	bl	8003e5c <I2C_TransferConfig>
 800393a:	e00f      	b.n	800395c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394a:	b2da      	uxtb	r2, r3
 800394c:	8979      	ldrh	r1, [r7, #10]
 800394e:	4b4a      	ldr	r3, [pc, #296]	; (8003a78 <HAL_I2C_Mem_Read+0x22c>)
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 fa80 	bl	8003e5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	2200      	movs	r2, #0
 8003964:	2104      	movs	r1, #4
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 f956 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e07c      	b.n	8003a70 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d034      	beq.n	8003a1c <HAL_I2C_Mem_Read+0x1d0>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d130      	bne.n	8003a1c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	2200      	movs	r2, #0
 80039c2:	2180      	movs	r1, #128	; 0x80
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f927 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e04d      	b.n	8003a70 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2bff      	cmp	r3, #255	; 0xff
 80039dc:	d90e      	bls.n	80039fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	22ff      	movs	r2, #255	; 0xff
 80039e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	8979      	ldrh	r1, [r7, #10]
 80039ec:	2300      	movs	r3, #0
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fa31 	bl	8003e5c <I2C_TransferConfig>
 80039fa:	e00f      	b.n	8003a1c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	8979      	ldrh	r1, [r7, #10]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 fa20 	bl	8003e5c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d19a      	bne.n	800395c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f974 	bl	8003d18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e01a      	b.n	8003a70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <HAL_I2C_Mem_Read+0x230>)
 8003a4e:	400b      	ands	r3, r1
 8003a50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e000      	b.n	8003a70 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
  }
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	80002400 	.word	0x80002400
 8003a7c:	fe00e800 	.word	0xfe00e800

08003a80 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	4608      	mov	r0, r1
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4603      	mov	r3, r0
 8003a90:	817b      	strh	r3, [r7, #10]
 8003a92:	460b      	mov	r3, r1
 8003a94:	813b      	strh	r3, [r7, #8]
 8003a96:	4613      	mov	r3, r2
 8003a98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	8979      	ldrh	r1, [r7, #10]
 8003aa0:	4b20      	ldr	r3, [pc, #128]	; (8003b24 <I2C_RequestMemoryWrite+0xa4>)
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f9d7 	bl	8003e5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	69b9      	ldr	r1, [r7, #24]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f8f0 	bl	8003c98 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e02c      	b.n	8003b1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d105      	bne.n	8003ad4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac8:	893b      	ldrh	r3, [r7, #8]
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ad2:	e015      	b.n	8003b00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ad4:	893b      	ldrh	r3, [r7, #8]
 8003ad6:	0a1b      	lsrs	r3, r3, #8
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	69b9      	ldr	r1, [r7, #24]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f8d6 	bl	8003c98 <I2C_WaitOnTXISFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e012      	b.n	8003b1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003af6:	893b      	ldrh	r3, [r7, #8]
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2200      	movs	r2, #0
 8003b08:	2180      	movs	r1, #128	; 0x80
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f884 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	80002000 	.word	0x80002000

08003b28 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	4608      	mov	r0, r1
 8003b32:	4611      	mov	r1, r2
 8003b34:	461a      	mov	r2, r3
 8003b36:	4603      	mov	r3, r0
 8003b38:	817b      	strh	r3, [r7, #10]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	813b      	strh	r3, [r7, #8]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	8979      	ldrh	r1, [r7, #10]
 8003b48:	4b20      	ldr	r3, [pc, #128]	; (8003bcc <I2C_RequestMemoryRead+0xa4>)
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f984 	bl	8003e5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	69b9      	ldr	r1, [r7, #24]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f89d 	bl	8003c98 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e02c      	b.n	8003bc2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b68:	88fb      	ldrh	r3, [r7, #6]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d105      	bne.n	8003b7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b6e:	893b      	ldrh	r3, [r7, #8]
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28
 8003b78:	e015      	b.n	8003ba6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b7a:	893b      	ldrh	r3, [r7, #8]
 8003b7c:	0a1b      	lsrs	r3, r3, #8
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	69b9      	ldr	r1, [r7, #24]
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f883 	bl	8003c98 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e012      	b.n	8003bc2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b9c:	893b      	ldrh	r3, [r7, #8]
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2200      	movs	r2, #0
 8003bae:	2140      	movs	r1, #64	; 0x40
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f831 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	80002000 	.word	0x80002000

08003bd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d103      	bne.n	8003bee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2200      	movs	r2, #0
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d007      	beq.n	8003c0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	619a      	str	r2, [r3, #24]
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	4613      	mov	r3, r2
 8003c26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c28:	e022      	b.n	8003c70 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d01e      	beq.n	8003c70 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c32:	f7fd f927 	bl	8000e84 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d302      	bcc.n	8003c48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d113      	bne.n	8003c70 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e00f      	b.n	8003c90 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d0cd      	beq.n	8003c2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ca4:	e02c      	b.n	8003d00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f870 	bl	8003d90 <I2C_IsAcknowledgeFailed>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e02a      	b.n	8003d10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d01e      	beq.n	8003d00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc2:	f7fd f8df 	bl	8000e84 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d302      	bcc.n	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d113      	bne.n	8003d00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cdc:	f043 0220 	orr.w	r2, r3, #32
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e007      	b.n	8003d10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d1cb      	bne.n	8003ca6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d24:	e028      	b.n	8003d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f830 	bl	8003d90 <I2C_IsAcknowledgeFailed>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e026      	b.n	8003d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3a:	f7fd f8a3 	bl	8000e84 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d302      	bcc.n	8003d50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d113      	bne.n	8003d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	f043 0220 	orr.w	r2, r3, #32
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e007      	b.n	8003d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d1cf      	bne.n	8003d26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f003 0310 	and.w	r3, r3, #16
 8003da6:	2b10      	cmp	r3, #16
 8003da8:	d151      	bne.n	8003e4e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003daa:	e022      	b.n	8003df2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db2:	d01e      	beq.n	8003df2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db4:	f7fd f866 	bl	8000e84 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d302      	bcc.n	8003dca <I2C_IsAcknowledgeFailed+0x3a>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d113      	bne.n	8003df2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	f043 0220 	orr.w	r2, r3, #32
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e02e      	b.n	8003e50 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d1d5      	bne.n	8003dac <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2210      	movs	r2, #16
 8003e06:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7ff fedd 	bl	8003bd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6859      	ldr	r1, [r3, #4]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <I2C_IsAcknowledgeFailed+0xc8>)
 8003e22:	400b      	ands	r3, r1
 8003e24:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	f043 0204 	orr.w	r2, r3, #4
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	fe00e800 	.word	0xfe00e800

08003e5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	607b      	str	r3, [r7, #4]
 8003e66:	460b      	mov	r3, r1
 8003e68:	817b      	strh	r3, [r7, #10]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	0d5b      	lsrs	r3, r3, #21
 8003e78:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <I2C_TransferConfig+0x58>)
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	43db      	mvns	r3, r3
 8003e82:	ea02 0103 	and.w	r1, r2, r3
 8003e86:	897b      	ldrh	r3, [r7, #10]
 8003e88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e8c:	7a7b      	ldrb	r3, [r7, #9]
 8003e8e:	041b      	lsls	r3, r3, #16
 8003e90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	03ff63ff 	.word	0x03ff63ff

08003eb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	d138      	bne.n	8003f40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e032      	b.n	8003f42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2224      	movs	r2, #36	; 0x24
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0201 	bic.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6819      	ldr	r1, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e000      	b.n	8003f42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f40:	2302      	movs	r3, #2
  }
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b085      	sub	sp, #20
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d139      	bne.n	8003fd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e033      	b.n	8003fda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2224      	movs	r2, #36	; 0x24
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0201 	bic.w	r2, r2, #1
 8003f90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fa0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e000      	b.n	8003fda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fd8:	2302      	movs	r3, #2
  }
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fec:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff8:	d102      	bne.n	8004000 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ffe:	e00b      	b.n	8004018 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004000:	4b08      	ldr	r3, [pc, #32]	; (8004024 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800400e:	d102      	bne.n	8004016 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004014:	e000      	b.n	8004018 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004016:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40007000 	.word	0x40007000

08004028 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d141      	bne.n	80040ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004036:	4b4b      	ldr	r3, [pc, #300]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800403e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004042:	d131      	bne.n	80040a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004044:	4b47      	ldr	r3, [pc, #284]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404a:	4a46      	ldr	r2, [pc, #280]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800404c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004050:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004054:	4b43      	ldr	r3, [pc, #268]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800405c:	4a41      	ldr	r2, [pc, #260]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004062:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004064:	4b40      	ldr	r3, [pc, #256]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2232      	movs	r2, #50	; 0x32
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	4a3f      	ldr	r2, [pc, #252]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	0c9b      	lsrs	r3, r3, #18
 8004076:	3301      	adds	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800407a:	e002      	b.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3b01      	subs	r3, #1
 8004080:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004082:	4b38      	ldr	r3, [pc, #224]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408e:	d102      	bne.n	8004096 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f2      	bne.n	800407c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004096:	4b33      	ldr	r3, [pc, #204]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a2:	d158      	bne.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e057      	b.n	8004158 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040a8:	4b2e      	ldr	r3, [pc, #184]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ae:	4a2d      	ldr	r2, [pc, #180]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040b8:	e04d      	b.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c0:	d141      	bne.n	8004146 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040c2:	4b28      	ldr	r3, [pc, #160]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ce:	d131      	bne.n	8004134 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040d0:	4b24      	ldr	r3, [pc, #144]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d6:	4a23      	ldr	r2, [pc, #140]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040e0:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040e8:	4a1e      	ldr	r2, [pc, #120]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80040f0:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2232      	movs	r2, #50	; 0x32
 80040f6:	fb02 f303 	mul.w	r3, r2, r3
 80040fa:	4a1c      	ldr	r2, [pc, #112]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	0c9b      	lsrs	r3, r3, #18
 8004102:	3301      	adds	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004106:	e002      	b.n	800410e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3b01      	subs	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800410e:	4b15      	ldr	r3, [pc, #84]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411a:	d102      	bne.n	8004122 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f2      	bne.n	8004108 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004122:	4b10      	ldr	r3, [pc, #64]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412e:	d112      	bne.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e011      	b.n	8004158 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004140:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004144:	e007      	b.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004146:	4b07      	ldr	r3, [pc, #28]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800414e:	4a05      	ldr	r2, [pc, #20]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004150:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004154:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	40007000 	.word	0x40007000
 8004168:	2000009c 	.word	0x2000009c
 800416c:	431bde83 	.word	0x431bde83

08004170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	f000 bc16 	b.w	80049b0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004184:	4ba0      	ldr	r3, [pc, #640]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 030c 	and.w	r3, r3, #12
 800418c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800418e:	4b9e      	ldr	r3, [pc, #632]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0310 	and.w	r3, r3, #16
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 80e4 	beq.w	800436e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <HAL_RCC_OscConfig+0x4c>
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	2b0c      	cmp	r3, #12
 80041b0:	f040 808b 	bne.w	80042ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	f040 8087 	bne.w	80042ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041bc:	4b92      	ldr	r3, [pc, #584]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_RCC_OscConfig+0x64>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e3ed      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1a      	ldr	r2, [r3, #32]
 80041d8:	4b8b      	ldr	r3, [pc, #556]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d004      	beq.n	80041ee <HAL_RCC_OscConfig+0x7e>
 80041e4:	4b88      	ldr	r3, [pc, #544]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ec:	e005      	b.n	80041fa <HAL_RCC_OscConfig+0x8a>
 80041ee:	4b86      	ldr	r3, [pc, #536]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 80041f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d223      	bcs.n	8004246 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fdfa 	bl	8004dfc <RCC_SetFlashLatencyFromMSIRange>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e3ce      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004212:	4b7d      	ldr	r3, [pc, #500]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a7c      	ldr	r2, [pc, #496]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 8004218:	f043 0308 	orr.w	r3, r3, #8
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	4b7a      	ldr	r3, [pc, #488]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	4977      	ldr	r1, [pc, #476]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004230:	4b75      	ldr	r3, [pc, #468]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	4972      	ldr	r1, [pc, #456]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 8004240:	4313      	orrs	r3, r2
 8004242:	604b      	str	r3, [r1, #4]
 8004244:	e025      	b.n	8004292 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004246:	4b70      	ldr	r3, [pc, #448]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a6f      	ldr	r2, [pc, #444]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 800424c:	f043 0308 	orr.w	r3, r3, #8
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	4b6d      	ldr	r3, [pc, #436]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	496a      	ldr	r1, [pc, #424]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 8004260:	4313      	orrs	r3, r2
 8004262:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004264:	4b68      	ldr	r3, [pc, #416]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	4965      	ldr	r1, [pc, #404]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fdba 	bl	8004dfc <RCC_SetFlashLatencyFromMSIRange>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e38e      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004292:	f000 fcbf 	bl	8004c14 <HAL_RCC_GetSysClockFreq>
 8004296:	4601      	mov	r1, r0
 8004298:	4b5b      	ldr	r3, [pc, #364]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	4a5a      	ldr	r2, [pc, #360]	; (800440c <HAL_RCC_OscConfig+0x29c>)
 80042a4:	5cd3      	ldrb	r3, [r2, r3]
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	fa21 f303 	lsr.w	r3, r1, r3
 80042ae:	4a58      	ldr	r2, [pc, #352]	; (8004410 <HAL_RCC_OscConfig+0x2a0>)
 80042b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042b2:	4b58      	ldr	r3, [pc, #352]	; (8004414 <HAL_RCC_OscConfig+0x2a4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f008 fa06 	bl	800c6c8 <HAL_InitTick>
 80042bc:	4603      	mov	r3, r0
 80042be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d052      	beq.n	800436c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	e372      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d032      	beq.n	8004338 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042d2:	4b4d      	ldr	r3, [pc, #308]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a4c      	ldr	r2, [pc, #304]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042de:	f7fc fdd1 	bl	8000e84 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042e6:	f7fc fdcd 	bl	8000e84 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e35b      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042f8:	4b43      	ldr	r3, [pc, #268]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004304:	4b40      	ldr	r3, [pc, #256]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a3f      	ldr	r2, [pc, #252]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 800430a:	f043 0308 	orr.w	r3, r3, #8
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	4b3d      	ldr	r3, [pc, #244]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	493a      	ldr	r1, [pc, #232]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 800431e:	4313      	orrs	r3, r2
 8004320:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004322:	4b39      	ldr	r3, [pc, #228]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	4935      	ldr	r1, [pc, #212]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 8004332:	4313      	orrs	r3, r2
 8004334:	604b      	str	r3, [r1, #4]
 8004336:	e01a      	b.n	800436e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004338:	4b33      	ldr	r3, [pc, #204]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a32      	ldr	r2, [pc, #200]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004344:	f7fc fd9e 	bl	8000e84 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800434c:	f7fc fd9a 	bl	8000e84 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e328      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800435e:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x1dc>
 800436a:	e000      	b.n	800436e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800436c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d073      	beq.n	8004462 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	2b08      	cmp	r3, #8
 800437e:	d005      	beq.n	800438c <HAL_RCC_OscConfig+0x21c>
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b0c      	cmp	r3, #12
 8004384:	d10e      	bne.n	80043a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b03      	cmp	r3, #3
 800438a:	d10b      	bne.n	80043a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438c:	4b1e      	ldr	r3, [pc, #120]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d063      	beq.n	8004460 <HAL_RCC_OscConfig+0x2f0>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d15f      	bne.n	8004460 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e305      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ac:	d106      	bne.n	80043bc <HAL_RCC_OscConfig+0x24c>
 80043ae:	4b16      	ldr	r3, [pc, #88]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a15      	ldr	r2, [pc, #84]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 80043b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e01d      	b.n	80043f8 <HAL_RCC_OscConfig+0x288>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043c4:	d10c      	bne.n	80043e0 <HAL_RCC_OscConfig+0x270>
 80043c6:	4b10      	ldr	r3, [pc, #64]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a0f      	ldr	r2, [pc, #60]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 80043cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a0c      	ldr	r2, [pc, #48]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 80043d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	e00b      	b.n	80043f8 <HAL_RCC_OscConfig+0x288>
 80043e0:	4b09      	ldr	r3, [pc, #36]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a08      	ldr	r2, [pc, #32]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 80043e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a05      	ldr	r2, [pc, #20]	; (8004408 <HAL_RCC_OscConfig+0x298>)
 80043f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01b      	beq.n	8004438 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fc fd40 	bl	8000e84 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004406:	e010      	b.n	800442a <HAL_RCC_OscConfig+0x2ba>
 8004408:	40021000 	.word	0x40021000
 800440c:	0800d31c 	.word	0x0800d31c
 8004410:	2000009c 	.word	0x2000009c
 8004414:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004418:	f7fc fd34 	bl	8000e84 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	; 0x64
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e2c2      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800442a:	4baf      	ldr	r3, [pc, #700]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0x2a8>
 8004436:	e014      	b.n	8004462 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fc fd24 	bl	8000e84 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004440:	f7fc fd20 	bl	8000e84 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e2ae      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004452:	4ba5      	ldr	r3, [pc, #660]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x2d0>
 800445e:	e000      	b.n	8004462 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d060      	beq.n	8004530 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b04      	cmp	r3, #4
 8004472:	d005      	beq.n	8004480 <HAL_RCC_OscConfig+0x310>
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b0c      	cmp	r3, #12
 8004478:	d119      	bne.n	80044ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d116      	bne.n	80044ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004480:	4b99      	ldr	r3, [pc, #612]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_OscConfig+0x328>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e28b      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004498:	4b93      	ldr	r3, [pc, #588]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	4990      	ldr	r1, [pc, #576]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ac:	e040      	b.n	8004530 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d023      	beq.n	80044fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b6:	4b8c      	ldr	r3, [pc, #560]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a8b      	ldr	r2, [pc, #556]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 80044bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c2:	f7fc fcdf 	bl	8000e84 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ca:	f7fc fcdb 	bl	8000e84 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e269      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044dc:	4b82      	ldr	r3, [pc, #520]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e8:	4b7f      	ldr	r3, [pc, #508]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	061b      	lsls	r3, r3, #24
 80044f6:	497c      	ldr	r1, [pc, #496]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	604b      	str	r3, [r1, #4]
 80044fc:	e018      	b.n	8004530 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044fe:	4b7a      	ldr	r3, [pc, #488]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a79      	ldr	r2, [pc, #484]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 8004504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450a:	f7fc fcbb 	bl	8000e84 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004512:	f7fc fcb7 	bl	8000e84 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e245      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004524:	4b70      	ldr	r3, [pc, #448]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1f0      	bne.n	8004512 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b00      	cmp	r3, #0
 800453a:	d03c      	beq.n	80045b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01c      	beq.n	800457e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004544:	4b68      	ldr	r3, [pc, #416]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 8004546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800454a:	4a67      	ldr	r2, [pc, #412]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004554:	f7fc fc96 	bl	8000e84 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800455c:	f7fc fc92 	bl	8000e84 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e220      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800456e:	4b5e      	ldr	r3, [pc, #376]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 8004570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ef      	beq.n	800455c <HAL_RCC_OscConfig+0x3ec>
 800457c:	e01b      	b.n	80045b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800457e:	4b5a      	ldr	r3, [pc, #360]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 8004580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004584:	4a58      	ldr	r2, [pc, #352]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458e:	f7fc fc79 	bl	8000e84 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004596:	f7fc fc75 	bl	8000e84 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e203      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045a8:	4b4f      	ldr	r3, [pc, #316]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 80045aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1ef      	bne.n	8004596 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80a6 	beq.w	8004710 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c4:	2300      	movs	r3, #0
 80045c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045c8:	4b47      	ldr	r3, [pc, #284]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 80045ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10d      	bne.n	80045f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d4:	4b44      	ldr	r3, [pc, #272]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 80045d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d8:	4a43      	ldr	r2, [pc, #268]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 80045da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045de:	6593      	str	r3, [r2, #88]	; 0x58
 80045e0:	4b41      	ldr	r3, [pc, #260]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 80045e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ec:	2301      	movs	r3, #1
 80045ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045f0:	4b3e      	ldr	r3, [pc, #248]	; (80046ec <HAL_RCC_OscConfig+0x57c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d118      	bne.n	800462e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045fc:	4b3b      	ldr	r3, [pc, #236]	; (80046ec <HAL_RCC_OscConfig+0x57c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a3a      	ldr	r2, [pc, #232]	; (80046ec <HAL_RCC_OscConfig+0x57c>)
 8004602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004606:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004608:	f7fc fc3c 	bl	8000e84 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004610:	f7fc fc38 	bl	8000e84 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e1c6      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004622:	4b32      	ldr	r3, [pc, #200]	; (80046ec <HAL_RCC_OscConfig+0x57c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d108      	bne.n	8004648 <HAL_RCC_OscConfig+0x4d8>
 8004636:	4b2c      	ldr	r3, [pc, #176]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463c:	4a2a      	ldr	r2, [pc, #168]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004646:	e024      	b.n	8004692 <HAL_RCC_OscConfig+0x522>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b05      	cmp	r3, #5
 800464e:	d110      	bne.n	8004672 <HAL_RCC_OscConfig+0x502>
 8004650:	4b25      	ldr	r3, [pc, #148]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004656:	4a24      	ldr	r2, [pc, #144]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 8004658:	f043 0304 	orr.w	r3, r3, #4
 800465c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004660:	4b21      	ldr	r3, [pc, #132]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004666:	4a20      	ldr	r2, [pc, #128]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004670:	e00f      	b.n	8004692 <HAL_RCC_OscConfig+0x522>
 8004672:	4b1d      	ldr	r3, [pc, #116]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 8004674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004678:	4a1b      	ldr	r2, [pc, #108]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004682:	4b19      	ldr	r3, [pc, #100]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004688:	4a17      	ldr	r2, [pc, #92]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 800468a:	f023 0304 	bic.w	r3, r3, #4
 800468e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d016      	beq.n	80046c8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469a:	f7fc fbf3 	bl	8000e84 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a0:	e00a      	b.n	80046b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a2:	f7fc fbef 	bl	8000e84 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e17b      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046b8:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_RCC_OscConfig+0x578>)
 80046ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0ed      	beq.n	80046a2 <HAL_RCC_OscConfig+0x532>
 80046c6:	e01a      	b.n	80046fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c8:	f7fc fbdc 	bl	8000e84 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046ce:	e00f      	b.n	80046f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d0:	f7fc fbd8 	bl	8000e84 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f241 3288 	movw	r2, #5000	; 0x1388
 80046de:	4293      	cmp	r3, r2
 80046e0:	d906      	bls.n	80046f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e164      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000
 80046ec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046f0:	4ba8      	ldr	r3, [pc, #672]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e8      	bne.n	80046d0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046fe:	7ffb      	ldrb	r3, [r7, #31]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d105      	bne.n	8004710 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004704:	4ba3      	ldr	r3, [pc, #652]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 8004706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004708:	4aa2      	ldr	r2, [pc, #648]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 800470a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800470e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b00      	cmp	r3, #0
 800471a:	d03c      	beq.n	8004796 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01c      	beq.n	800475e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004724:	4b9b      	ldr	r3, [pc, #620]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 8004726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800472a:	4a9a      	ldr	r2, [pc, #616]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 800472c:	f043 0301 	orr.w	r3, r3, #1
 8004730:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004734:	f7fc fba6 	bl	8000e84 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800473c:	f7fc fba2 	bl	8000e84 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e130      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800474e:	4b91      	ldr	r3, [pc, #580]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 8004750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0ef      	beq.n	800473c <HAL_RCC_OscConfig+0x5cc>
 800475c:	e01b      	b.n	8004796 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800475e:	4b8d      	ldr	r3, [pc, #564]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 8004760:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004764:	4a8b      	ldr	r2, [pc, #556]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 8004766:	f023 0301 	bic.w	r3, r3, #1
 800476a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476e:	f7fc fb89 	bl	8000e84 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004776:	f7fc fb85 	bl	8000e84 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e113      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004788:	4b82      	ldr	r3, [pc, #520]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 800478a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1ef      	bne.n	8004776 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 8107 	beq.w	80049ae <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	f040 80cb 	bne.w	8004940 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80047aa:	4b7a      	ldr	r3, [pc, #488]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f003 0203 	and.w	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d12c      	bne.n	8004818 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	3b01      	subs	r3, #1
 80047ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d123      	bne.n	8004818 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047dc:	429a      	cmp	r2, r3
 80047de:	d11b      	bne.n	8004818 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d113      	bne.n	8004818 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	3b01      	subs	r3, #1
 80047fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004800:	429a      	cmp	r2, r3
 8004802:	d109      	bne.n	8004818 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	085b      	lsrs	r3, r3, #1
 8004810:	3b01      	subs	r3, #1
 8004812:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d06d      	beq.n	80048f4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	2b0c      	cmp	r3, #12
 800481c:	d068      	beq.n	80048f0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800481e:	4b5d      	ldr	r3, [pc, #372]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d105      	bne.n	8004836 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800482a:	4b5a      	ldr	r3, [pc, #360]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e0ba      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800483a:	4b56      	ldr	r3, [pc, #344]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a55      	ldr	r2, [pc, #340]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 8004840:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004844:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004846:	f7fc fb1d 	bl	8000e84 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800484e:	f7fc fb19 	bl	8000e84 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e0a7      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004860:	4b4c      	ldr	r3, [pc, #304]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f0      	bne.n	800484e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800486c:	4b49      	ldr	r3, [pc, #292]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	4b49      	ldr	r3, [pc, #292]	; (8004998 <HAL_RCC_OscConfig+0x828>)
 8004872:	4013      	ands	r3, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800487c:	3a01      	subs	r2, #1
 800487e:	0112      	lsls	r2, r2, #4
 8004880:	4311      	orrs	r1, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004886:	0212      	lsls	r2, r2, #8
 8004888:	4311      	orrs	r1, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800488e:	0852      	lsrs	r2, r2, #1
 8004890:	3a01      	subs	r2, #1
 8004892:	0552      	lsls	r2, r2, #21
 8004894:	4311      	orrs	r1, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800489a:	0852      	lsrs	r2, r2, #1
 800489c:	3a01      	subs	r2, #1
 800489e:	0652      	lsls	r2, r2, #25
 80048a0:	4311      	orrs	r1, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048a6:	06d2      	lsls	r2, r2, #27
 80048a8:	430a      	orrs	r2, r1
 80048aa:	493a      	ldr	r1, [pc, #232]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80048b0:	4b38      	ldr	r3, [pc, #224]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a37      	ldr	r2, [pc, #220]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 80048b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048bc:	4b35      	ldr	r3, [pc, #212]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	4a34      	ldr	r2, [pc, #208]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 80048c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048c8:	f7fc fadc 	bl	8000e84 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d0:	f7fc fad8 	bl	8000e84 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e066      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e2:	4b2c      	ldr	r3, [pc, #176]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f0      	beq.n	80048d0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048ee:	e05e      	b.n	80049ae <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e05d      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048f4:	4b27      	ldr	r3, [pc, #156]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d156      	bne.n	80049ae <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004900:	4b24      	ldr	r3, [pc, #144]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a23      	ldr	r2, [pc, #140]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 8004906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800490a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800490c:	4b21      	ldr	r3, [pc, #132]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4a20      	ldr	r2, [pc, #128]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 8004912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004916:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004918:	f7fc fab4 	bl	8000e84 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004920:	f7fc fab0 	bl	8000e84 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e03e      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004932:	4b18      	ldr	r3, [pc, #96]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCC_OscConfig+0x7b0>
 800493e:	e036      	b.n	80049ae <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	2b0c      	cmp	r3, #12
 8004944:	d031      	beq.n	80049aa <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004946:	4b13      	ldr	r3, [pc, #76]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a12      	ldr	r2, [pc, #72]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 800494c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004950:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004952:	4b10      	ldr	r3, [pc, #64]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d105      	bne.n	800496a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800495e:	4b0d      	ldr	r3, [pc, #52]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	4a0c      	ldr	r2, [pc, #48]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 8004964:	f023 0303 	bic.w	r3, r3, #3
 8004968:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800496a:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	4a09      	ldr	r2, [pc, #36]	; (8004994 <HAL_RCC_OscConfig+0x824>)
 8004970:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004978:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497a:	f7fc fa83 	bl	8000e84 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004980:	e00c      	b.n	800499c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004982:	f7fc fa7f 	bl	8000e84 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d905      	bls.n	800499c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e00d      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
 8004994:	40021000 	.word	0x40021000
 8004998:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <HAL_RCC_OscConfig+0x848>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1ec      	bne.n	8004982 <HAL_RCC_OscConfig+0x812>
 80049a8:	e001      	b.n	80049ae <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40021000 	.word	0x40021000

080049bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e10f      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049d4:	4b89      	ldr	r3, [pc, #548]	; (8004bfc <HAL_RCC_ClockConfig+0x240>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d910      	bls.n	8004a04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e2:	4b86      	ldr	r3, [pc, #536]	; (8004bfc <HAL_RCC_ClockConfig+0x240>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f023 020f 	bic.w	r2, r3, #15
 80049ea:	4984      	ldr	r1, [pc, #528]	; (8004bfc <HAL_RCC_ClockConfig+0x240>)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b82      	ldr	r3, [pc, #520]	; (8004bfc <HAL_RCC_ClockConfig+0x240>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0f7      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8089 	beq.w	8004b24 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d133      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a1a:	4b79      	ldr	r3, [pc, #484]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e0e4      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004a2a:	f000 fa41 	bl	8004eb0 <RCC_GetSysClockFreqFromPLLSource>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	4b74      	ldr	r3, [pc, #464]	; (8004c04 <HAL_RCC_ClockConfig+0x248>)
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d955      	bls.n	8004ae2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004a36:	4b72      	ldr	r3, [pc, #456]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a42:	4b6f      	ldr	r3, [pc, #444]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a4a:	4a6d      	ldr	r2, [pc, #436]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a52:	2380      	movs	r3, #128	; 0x80
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	e044      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d03e      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x126>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d13a      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a6c:	4b64      	ldr	r3, [pc, #400]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a74:	4a62      	ldr	r2, [pc, #392]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a7c:	2380      	movs	r3, #128	; 0x80
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	e02f      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d107      	bne.n	8004a9a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a8a:	4b5d      	ldr	r3, [pc, #372]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d115      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e0ac      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d107      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aa2:	4b57      	ldr	r3, [pc, #348]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d109      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e0a0      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ab2:	4b53      	ldr	r3, [pc, #332]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e098      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004ac2:	f000 f8a7 	bl	8004c14 <HAL_RCC_GetSysClockFreq>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	4b4e      	ldr	r3, [pc, #312]	; (8004c04 <HAL_RCC_ClockConfig+0x248>)
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d909      	bls.n	8004ae2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ace:	4b4c      	ldr	r3, [pc, #304]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ad6:	4a4a      	ldr	r2, [pc, #296]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004adc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004ade:	2380      	movs	r3, #128	; 0x80
 8004ae0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ae2:	4b47      	ldr	r3, [pc, #284]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4944      	ldr	r1, [pc, #272]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af4:	f7fc f9c6 	bl	8000e84 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afc:	f7fc f9c2 	bl	8000e84 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e070      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	4b3b      	ldr	r3, [pc, #236]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 020c 	and.w	r2, r3, #12
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1eb      	bne.n	8004afc <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d009      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b30:	4b33      	ldr	r3, [pc, #204]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	4930      	ldr	r1, [pc, #192]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	608b      	str	r3, [r1, #8]
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2b80      	cmp	r3, #128	; 0x80
 8004b48:	d105      	bne.n	8004b56 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b4a:	4b2d      	ldr	r3, [pc, #180]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	4a2c      	ldr	r2, [pc, #176]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004b50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b54:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b56:	4b29      	ldr	r3, [pc, #164]	; (8004bfc <HAL_RCC_ClockConfig+0x240>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d210      	bcs.n	8004b86 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b64:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <HAL_RCC_ClockConfig+0x240>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f023 020f 	bic.w	r2, r3, #15
 8004b6c:	4923      	ldr	r1, [pc, #140]	; (8004bfc <HAL_RCC_ClockConfig+0x240>)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b74:	4b21      	ldr	r3, [pc, #132]	; (8004bfc <HAL_RCC_ClockConfig+0x240>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d001      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e036      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d008      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b92:	4b1b      	ldr	r3, [pc, #108]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	4918      	ldr	r1, [pc, #96]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d009      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bb0:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4910      	ldr	r1, [pc, #64]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bc4:	f000 f826 	bl	8004c14 <HAL_RCC_GetSysClockFreq>
 8004bc8:	4601      	mov	r1, r0
 8004bca:	4b0d      	ldr	r3, [pc, #52]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	091b      	lsrs	r3, r3, #4
 8004bd0:	f003 030f 	and.w	r3, r3, #15
 8004bd4:	4a0c      	ldr	r2, [pc, #48]	; (8004c08 <HAL_RCC_ClockConfig+0x24c>)
 8004bd6:	5cd3      	ldrb	r3, [r2, r3]
 8004bd8:	f003 031f 	and.w	r3, r3, #31
 8004bdc:	fa21 f303 	lsr.w	r3, r1, r3
 8004be0:	4a0a      	ldr	r2, [pc, #40]	; (8004c0c <HAL_RCC_ClockConfig+0x250>)
 8004be2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004be4:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <HAL_RCC_ClockConfig+0x254>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f007 fd6d 	bl	800c6c8 <HAL_InitTick>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	73fb      	strb	r3, [r7, #15]

  return status;
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40022000 	.word	0x40022000
 8004c00:	40021000 	.word	0x40021000
 8004c04:	04c4b400 	.word	0x04c4b400
 8004c08:	0800d31c 	.word	0x0800d31c
 8004c0c:	2000009c 	.word	0x2000009c
 8004c10:	20000000 	.word	0x20000000

08004c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b089      	sub	sp, #36	; 0x24
 8004c18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61fb      	str	r3, [r7, #28]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c22:	4b3d      	ldr	r3, [pc, #244]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c2c:	4b3a      	ldr	r3, [pc, #232]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0303 	and.w	r3, r3, #3
 8004c34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <HAL_RCC_GetSysClockFreq+0x34>
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b0c      	cmp	r3, #12
 8004c40:	d121      	bne.n	8004c86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d11e      	bne.n	8004c86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c48:	4b33      	ldr	r3, [pc, #204]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0308 	and.w	r3, r3, #8
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d107      	bne.n	8004c64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c54:	4b30      	ldr	r3, [pc, #192]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c5a:	0a1b      	lsrs	r3, r3, #8
 8004c5c:	f003 030f 	and.w	r3, r3, #15
 8004c60:	61fb      	str	r3, [r7, #28]
 8004c62:	e005      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c64:	4b2c      	ldr	r3, [pc, #176]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	091b      	lsrs	r3, r3, #4
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c70:	4a2a      	ldr	r2, [pc, #168]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10d      	bne.n	8004c9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c84:	e00a      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d102      	bne.n	8004c92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c8c:	4b24      	ldr	r3, [pc, #144]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c8e:	61bb      	str	r3, [r7, #24]
 8004c90:	e004      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d101      	bne.n	8004c9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c98:	4b22      	ldr	r3, [pc, #136]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b0c      	cmp	r3, #12
 8004ca0:	d133      	bne.n	8004d0a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ca2:	4b1d      	ldr	r3, [pc, #116]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d002      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0xa4>
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	d003      	beq.n	8004cbe <HAL_RCC_GetSysClockFreq+0xaa>
 8004cb6:	e005      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cb8:	4b19      	ldr	r3, [pc, #100]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cba:	617b      	str	r3, [r7, #20]
      break;
 8004cbc:	e005      	b.n	8004cca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004cbe:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cc0:	617b      	str	r3, [r7, #20]
      break;
 8004cc2:	e002      	b.n	8004cca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	617b      	str	r3, [r7, #20]
      break;
 8004cc8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cca:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	091b      	lsrs	r3, r3, #4
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cd8:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x104>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	0a1b      	lsrs	r3, r3, #8
 8004cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	fb02 f203 	mul.w	r2, r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cee:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cf0:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x104>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	0e5b      	lsrs	r3, r3, #25
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d08:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d0a:	69bb      	ldr	r3, [r7, #24]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3724      	adds	r7, #36	; 0x24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	0800d334 	.word	0x0800d334
 8004d20:	00f42400 	.word	0x00f42400
 8004d24:	007a1200 	.word	0x007a1200

08004d28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d2c:	4b03      	ldr	r3, [pc, #12]	; (8004d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	2000009c 	.word	0x2000009c

08004d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d44:	f7ff fff0 	bl	8004d28 <HAL_RCC_GetHCLKFreq>
 8004d48:	4601      	mov	r1, r0
 8004d4a:	4b06      	ldr	r3, [pc, #24]	; (8004d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	0a1b      	lsrs	r3, r3, #8
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	4a04      	ldr	r2, [pc, #16]	; (8004d68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d56:	5cd3      	ldrb	r3, [r2, r3]
 8004d58:	f003 031f 	and.w	r3, r3, #31
 8004d5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40021000 	.word	0x40021000
 8004d68:	0800d32c 	.word	0x0800d32c

08004d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d70:	f7ff ffda 	bl	8004d28 <HAL_RCC_GetHCLKFreq>
 8004d74:	4601      	mov	r1, r0
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	0adb      	lsrs	r3, r3, #11
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	4a04      	ldr	r2, [pc, #16]	; (8004d94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d82:	5cd3      	ldrb	r3, [r2, r3]
 8004d84:	f003 031f 	and.w	r3, r3, #31
 8004d88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40021000 	.word	0x40021000
 8004d94:	0800d32c 	.word	0x0800d32c

08004d98 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	220f      	movs	r2, #15
 8004da6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004da8:	4b12      	ldr	r3, [pc, #72]	; (8004df4 <HAL_RCC_GetClockConfig+0x5c>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 0203 	and.w	r2, r3, #3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004db4:	4b0f      	ldr	r3, [pc, #60]	; (8004df4 <HAL_RCC_GetClockConfig+0x5c>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <HAL_RCC_GetClockConfig+0x5c>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004dcc:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <HAL_RCC_GetClockConfig+0x5c>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	08db      	lsrs	r3, r3, #3
 8004dd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004dda:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <HAL_RCC_GetClockConfig+0x60>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 020f 	and.w	r2, r3, #15
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	601a      	str	r2, [r3, #0]
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40021000 	.word	0x40021000
 8004df8:	40022000 	.word	0x40022000

08004dfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e04:	2300      	movs	r3, #0
 8004e06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e08:	4b27      	ldr	r3, [pc, #156]	; (8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e14:	f7ff f8e8 	bl	8003fe8 <HAL_PWREx_GetVoltageRange>
 8004e18:	6178      	str	r0, [r7, #20]
 8004e1a:	e014      	b.n	8004e46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e1c:	4b22      	ldr	r3, [pc, #136]	; (8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	4a21      	ldr	r2, [pc, #132]	; (8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e26:	6593      	str	r3, [r2, #88]	; 0x58
 8004e28:	4b1f      	ldr	r3, [pc, #124]	; (8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e34:	f7ff f8d8 	bl	8003fe8 <HAL_PWREx_GetVoltageRange>
 8004e38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3e:	4a1a      	ldr	r2, [pc, #104]	; (8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e4c:	d10b      	bne.n	8004e66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b80      	cmp	r3, #128	; 0x80
 8004e52:	d913      	bls.n	8004e7c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2ba0      	cmp	r3, #160	; 0xa0
 8004e58:	d902      	bls.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	e00d      	b.n	8004e7c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e60:	2301      	movs	r3, #1
 8004e62:	613b      	str	r3, [r7, #16]
 8004e64:	e00a      	b.n	8004e7c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b7f      	cmp	r3, #127	; 0x7f
 8004e6a:	d902      	bls.n	8004e72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	e004      	b.n	8004e7c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b70      	cmp	r3, #112	; 0x70
 8004e76:	d101      	bne.n	8004e7c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e78:	2301      	movs	r3, #1
 8004e7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e7c:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f023 020f 	bic.w	r2, r3, #15
 8004e84:	4909      	ldr	r1, [pc, #36]	; (8004eac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e8c:	4b07      	ldr	r3, [pc, #28]	; (8004eac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d001      	beq.n	8004e9e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	40022000 	.word	0x40022000

08004eb0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004eba:	4b2d      	ldr	r3, [pc, #180]	; (8004f70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d118      	bne.n	8004ef8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ec6:	4b2a      	ldr	r3, [pc, #168]	; (8004f70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d107      	bne.n	8004ee2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ed2:	4b27      	ldr	r3, [pc, #156]	; (8004f70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ed8:	0a1b      	lsrs	r3, r3, #8
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	e005      	b.n	8004eee <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ee2:	4b23      	ldr	r3, [pc, #140]	; (8004f70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	091b      	lsrs	r3, r3, #4
 8004ee8:	f003 030f 	and.w	r3, r3, #15
 8004eec:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004eee:	4a21      	ldr	r2, [pc, #132]	; (8004f74 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ef8:	4b1d      	ldr	r3, [pc, #116]	; (8004f70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d002      	beq.n	8004f0e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d003      	beq.n	8004f14 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8004f0c:	e005      	b.n	8004f1a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004f0e:	4b1a      	ldr	r3, [pc, #104]	; (8004f78 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004f10:	613b      	str	r3, [r7, #16]
    break;
 8004f12:	e005      	b.n	8004f20 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004f14:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004f16:	613b      	str	r3, [r7, #16]
    break;
 8004f18:	e002      	b.n	8004f20 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	613b      	str	r3, [r7, #16]
    break;
 8004f1e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f20:	4b13      	ldr	r3, [pc, #76]	; (8004f70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	091b      	lsrs	r3, r3, #4
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f2e:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	0a1b      	lsrs	r3, r3, #8
 8004f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	fb02 f203 	mul.w	r2, r2, r3
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f44:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f46:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	0e5b      	lsrs	r3, r3, #25
 8004f4c:	f003 0303 	and.w	r3, r3, #3
 8004f50:	3301      	adds	r3, #1
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004f60:	683b      	ldr	r3, [r7, #0]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40021000 	.word	0x40021000
 8004f74:	0800d334 	.word	0x0800d334
 8004f78:	00f42400 	.word	0x00f42400
 8004f7c:	007a1200 	.word	0x007a1200

08004f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f88:	2300      	movs	r3, #0
 8004f8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d03d      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa0:	2b40      	cmp	r3, #64	; 0x40
 8004fa2:	d00b      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004fa4:	2b40      	cmp	r3, #64	; 0x40
 8004fa6:	d804      	bhi.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00e      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d015      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004fb0:	e01d      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004fb2:	2b60      	cmp	r3, #96	; 0x60
 8004fb4:	d01e      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004fb6:	2b80      	cmp	r3, #128	; 0x80
 8004fb8:	d01c      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004fba:	e018      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fbc:	4b86      	ldr	r3, [pc, #536]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4a85      	ldr	r2, [pc, #532]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fc8:	e015      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	2100      	movs	r1, #0
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fafd 	bl	80055d0 <RCCEx_PLLSAI1_Config>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fda:	e00c      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3320      	adds	r3, #32
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fbe4 	bl	80057b0 <RCCEx_PLLSAI2_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fec:	e003      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	74fb      	strb	r3, [r7, #19]
      break;
 8004ff2:	e000      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8004ff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ff6:	7cfb      	ldrb	r3, [r7, #19]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10b      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ffc:	4b76      	ldr	r3, [pc, #472]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005002:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800500a:	4973      	ldr	r1, [pc, #460]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005012:	e001      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005014:	7cfb      	ldrb	r3, [r7, #19]
 8005016:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d042      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800502c:	d00f      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xce>
 800502e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005032:	d805      	bhi.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8005034:	2b00      	cmp	r3, #0
 8005036:	d011      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8005038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800503c:	d017      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xee>
 800503e:	e01f      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8005040:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005044:	d01f      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504a:	d01c      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800504c:	e018      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800504e:	4b62      	ldr	r3, [pc, #392]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	4a61      	ldr	r2, [pc, #388]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005058:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800505a:	e015      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3304      	adds	r3, #4
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fab4 	bl	80055d0 <RCCEx_PLLSAI1_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800506c:	e00c      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3320      	adds	r3, #32
 8005072:	2100      	movs	r1, #0
 8005074:	4618      	mov	r0, r3
 8005076:	f000 fb9b 	bl	80057b0 <RCCEx_PLLSAI2_Config>
 800507a:	4603      	mov	r3, r0
 800507c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800507e:	e003      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	74fb      	strb	r3, [r7, #19]
      break;
 8005084:	e000      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8005086:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005088:	7cfb      	ldrb	r3, [r7, #19]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10b      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800508e:	4b52      	ldr	r3, [pc, #328]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005090:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509c:	494e      	ldr	r1, [pc, #312]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80050a4:	e001      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a6:	7cfb      	ldrb	r3, [r7, #19]
 80050a8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 809f 	beq.w	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050b8:	2300      	movs	r3, #0
 80050ba:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050bc:	4b46      	ldr	r3, [pc, #280]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80050cc:	2300      	movs	r3, #0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00d      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d2:	4b41      	ldr	r3, [pc, #260]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d6:	4a40      	ldr	r2, [pc, #256]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050dc:	6593      	str	r3, [r2, #88]	; 0x58
 80050de:	4b3e      	ldr	r3, [pc, #248]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e6:	60bb      	str	r3, [r7, #8]
 80050e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ea:	2301      	movs	r3, #1
 80050ec:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050ee:	4b3b      	ldr	r3, [pc, #236]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a3a      	ldr	r2, [pc, #232]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80050f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050fa:	f7fb fec3 	bl	8000e84 <HAL_GetTick>
 80050fe:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005100:	e009      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005102:	f7fb febf 	bl	8000e84 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d902      	bls.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	74fb      	strb	r3, [r7, #19]
        break;
 8005114:	e005      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005116:	4b31      	ldr	r3, [pc, #196]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0ef      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8005122:	7cfb      	ldrb	r3, [r7, #19]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d15b      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005128:	4b2b      	ldr	r3, [pc, #172]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005132:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01f      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	429a      	cmp	r2, r3
 8005144:	d019      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005146:	4b24      	ldr	r3, [pc, #144]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005150:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005152:	4b21      	ldr	r3, [pc, #132]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005158:	4a1f      	ldr	r2, [pc, #124]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800515a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800515e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005162:	4b1d      	ldr	r3, [pc, #116]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005168:	4a1b      	ldr	r2, [pc, #108]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800516a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800516e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005172:	4a19      	ldr	r2, [pc, #100]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d016      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005184:	f7fb fe7e 	bl	8000e84 <HAL_GetTick>
 8005188:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800518a:	e00b      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800518c:	f7fb fe7a 	bl	8000e84 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	f241 3288 	movw	r2, #5000	; 0x1388
 800519a:	4293      	cmp	r3, r2
 800519c:	d902      	bls.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	74fb      	strb	r3, [r7, #19]
            break;
 80051a2:	e006      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051a4:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0ec      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80051b2:	7cfb      	ldrb	r3, [r7, #19]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10c      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051b8:	4b07      	ldr	r3, [pc, #28]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c8:	4903      	ldr	r1, [pc, #12]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051d0:	e008      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051d2:	7cfb      	ldrb	r3, [r7, #19]
 80051d4:	74bb      	strb	r3, [r7, #18]
 80051d6:	e005      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80051d8:	40021000 	.word	0x40021000
 80051dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e0:	7cfb      	ldrb	r3, [r7, #19]
 80051e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051e4:	7c7b      	ldrb	r3, [r7, #17]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d105      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ea:	4ba0      	ldr	r3, [pc, #640]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ee:	4a9f      	ldr	r2, [pc, #636]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005202:	4b9a      	ldr	r3, [pc, #616]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005208:	f023 0203 	bic.w	r2, r3, #3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005210:	4996      	ldr	r1, [pc, #600]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005224:	4b91      	ldr	r3, [pc, #580]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522a:	f023 020c 	bic.w	r2, r3, #12
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	498e      	ldr	r1, [pc, #568]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005246:	4b89      	ldr	r3, [pc, #548]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005254:	4985      	ldr	r1, [pc, #532]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005268:	4b80      	ldr	r3, [pc, #512]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005276:	497d      	ldr	r1, [pc, #500]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0310 	and.w	r3, r3, #16
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800528a:	4b78      	ldr	r3, [pc, #480]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005290:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005298:	4974      	ldr	r1, [pc, #464]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0320 	and.w	r3, r3, #32
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052ac:	4b6f      	ldr	r3, [pc, #444]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ba:	496c      	ldr	r1, [pc, #432]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052ce:	4b67      	ldr	r3, [pc, #412]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052dc:	4963      	ldr	r1, [pc, #396]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052f0:	4b5e      	ldr	r3, [pc, #376]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052fe:	495b      	ldr	r1, [pc, #364]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005312:	4b56      	ldr	r3, [pc, #344]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005318:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005320:	4952      	ldr	r1, [pc, #328]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00a      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005334:	4b4d      	ldr	r3, [pc, #308]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005342:	494a      	ldr	r1, [pc, #296]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005344:	4313      	orrs	r3, r2
 8005346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005356:	4b45      	ldr	r3, [pc, #276]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005364:	4941      	ldr	r1, [pc, #260]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005366:	4313      	orrs	r3, r2
 8005368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005378:	4b3c      	ldr	r3, [pc, #240]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800537e:	f023 0203 	bic.w	r2, r3, #3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005386:	4939      	ldr	r1, [pc, #228]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005388:	4313      	orrs	r3, r2
 800538a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d028      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800539a:	4b34      	ldr	r3, [pc, #208]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a8:	4930      	ldr	r1, [pc, #192]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053b8:	d106      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ba:	4b2c      	ldr	r3, [pc, #176]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	4a2b      	ldr	r2, [pc, #172]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053c4:	60d3      	str	r3, [r2, #12]
 80053c6:	e011      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053d0:	d10c      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3304      	adds	r3, #4
 80053d6:	2101      	movs	r1, #1
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 f8f9 	bl	80055d0 <RCCEx_PLLSAI1_Config>
 80053de:	4603      	mov	r3, r0
 80053e0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053e2:	7cfb      	ldrb	r3, [r7, #19]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80053e8:	7cfb      	ldrb	r3, [r7, #19]
 80053ea:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d04d      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005400:	d108      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005402:	4b1a      	ldr	r3, [pc, #104]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005404:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005408:	4a18      	ldr	r2, [pc, #96]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800540e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005412:	e012      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005414:	4b15      	ldr	r3, [pc, #84]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005416:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800541a:	4a14      	ldr	r2, [pc, #80]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005420:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005424:	4b11      	ldr	r3, [pc, #68]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005432:	490e      	ldr	r1, [pc, #56]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005434:	4313      	orrs	r3, r2
 8005436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800543e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005442:	d106      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005444:	4b09      	ldr	r3, [pc, #36]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	4a08      	ldr	r2, [pc, #32]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800544e:	60d3      	str	r3, [r2, #12]
 8005450:	e020      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005456:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800545a:	d109      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800545c:	4b03      	ldr	r3, [pc, #12]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	4a02      	ldr	r2, [pc, #8]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005466:	60d3      	str	r3, [r2, #12]
 8005468:	e014      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800546a:	bf00      	nop
 800546c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005474:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005478:	d10c      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3304      	adds	r3, #4
 800547e:	2101      	movs	r1, #1
 8005480:	4618      	mov	r0, r3
 8005482:	f000 f8a5 	bl	80055d0 <RCCEx_PLLSAI1_Config>
 8005486:	4603      	mov	r3, r0
 8005488:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800548a:	7cfb      	ldrb	r3, [r7, #19]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005490:	7cfb      	ldrb	r3, [r7, #19]
 8005492:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d028      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054a0:	4b4a      	ldr	r3, [pc, #296]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ae:	4947      	ldr	r1, [pc, #284]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054be:	d106      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054c0:	4b42      	ldr	r3, [pc, #264]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4a41      	ldr	r2, [pc, #260]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054ca:	60d3      	str	r3, [r2, #12]
 80054cc:	e011      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054d6:	d10c      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3304      	adds	r3, #4
 80054dc:	2101      	movs	r1, #1
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 f876 	bl	80055d0 <RCCEx_PLLSAI1_Config>
 80054e4:	4603      	mov	r3, r0
 80054e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80054ee:	7cfb      	ldrb	r3, [r7, #19]
 80054f0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d01e      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054fe:	4b33      	ldr	r3, [pc, #204]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005504:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800550e:	492f      	ldr	r1, [pc, #188]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800551c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005520:	d10c      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3304      	adds	r3, #4
 8005526:	2102      	movs	r1, #2
 8005528:	4618      	mov	r0, r3
 800552a:	f000 f851 	bl	80055d0 <RCCEx_PLLSAI1_Config>
 800552e:	4603      	mov	r3, r0
 8005530:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005532:	7cfb      	ldrb	r3, [r7, #19]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8005538:	7cfb      	ldrb	r3, [r7, #19]
 800553a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00b      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005548:	4b20      	ldr	r3, [pc, #128]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800554a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800554e:	f023 0204 	bic.w	r2, r3, #4
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005558:	491c      	ldr	r1, [pc, #112]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00b      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800556c:	4b17      	ldr	r3, [pc, #92]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800556e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005572:	f023 0218 	bic.w	r2, r3, #24
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557c:	4913      	ldr	r1, [pc, #76]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d017      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005590:	4b0e      	ldr	r3, [pc, #56]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005592:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005596:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055a0:	490a      	ldr	r1, [pc, #40]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055b2:	d105      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b4:	4b05      	ldr	r3, [pc, #20]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	4a04      	ldr	r2, [pc, #16]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80055ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40021000 	.word	0x40021000

080055d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055de:	4b70      	ldr	r3, [pc, #448]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00e      	beq.n	8005608 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055ea:	4b6d      	ldr	r3, [pc, #436]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f003 0203 	and.w	r2, r3, #3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d103      	bne.n	8005602 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
       ||
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d13f      	bne.n	8005682 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	73fb      	strb	r3, [r7, #15]
 8005606:	e03c      	b.n	8005682 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b02      	cmp	r3, #2
 800560e:	d00c      	beq.n	800562a <RCCEx_PLLSAI1_Config+0x5a>
 8005610:	2b03      	cmp	r3, #3
 8005612:	d013      	beq.n	800563c <RCCEx_PLLSAI1_Config+0x6c>
 8005614:	2b01      	cmp	r3, #1
 8005616:	d120      	bne.n	800565a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005618:	4b61      	ldr	r3, [pc, #388]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d11d      	bne.n	8005660 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005628:	e01a      	b.n	8005660 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800562a:	4b5d      	ldr	r3, [pc, #372]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005632:	2b00      	cmp	r3, #0
 8005634:	d116      	bne.n	8005664 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800563a:	e013      	b.n	8005664 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800563c:	4b58      	ldr	r3, [pc, #352]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10f      	bne.n	8005668 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005648:	4b55      	ldr	r3, [pc, #340]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d109      	bne.n	8005668 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005658:	e006      	b.n	8005668 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
      break;
 800565e:	e004      	b.n	800566a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005660:	bf00      	nop
 8005662:	e002      	b.n	800566a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005664:	bf00      	nop
 8005666:	e000      	b.n	800566a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005668:	bf00      	nop
    }

    if(status == HAL_OK)
 800566a:	7bfb      	ldrb	r3, [r7, #15]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d108      	bne.n	8005682 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005670:	4b4b      	ldr	r3, [pc, #300]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f023 0203 	bic.w	r2, r3, #3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4948      	ldr	r1, [pc, #288]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800567e:	4313      	orrs	r3, r2
 8005680:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	2b00      	cmp	r3, #0
 8005686:	f040 8086 	bne.w	8005796 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800568a:	4b45      	ldr	r3, [pc, #276]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a44      	ldr	r2, [pc, #272]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005690:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005696:	f7fb fbf5 	bl	8000e84 <HAL_GetTick>
 800569a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800569c:	e009      	b.n	80056b2 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800569e:	f7fb fbf1 	bl	8000e84 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d902      	bls.n	80056b2 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	73fb      	strb	r3, [r7, #15]
        break;
 80056b0:	e005      	b.n	80056be <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056b2:	4b3b      	ldr	r3, [pc, #236]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1ef      	bne.n	800569e <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d168      	bne.n	8005796 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d113      	bne.n	80056f2 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056ca:	4b35      	ldr	r3, [pc, #212]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	4b35      	ldr	r3, [pc, #212]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1d4>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6892      	ldr	r2, [r2, #8]
 80056d6:	0211      	lsls	r1, r2, #8
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	68d2      	ldr	r2, [r2, #12]
 80056dc:	06d2      	lsls	r2, r2, #27
 80056de:	4311      	orrs	r1, r2
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6852      	ldr	r2, [r2, #4]
 80056e4:	3a01      	subs	r2, #1
 80056e6:	0112      	lsls	r2, r2, #4
 80056e8:	430a      	orrs	r2, r1
 80056ea:	492d      	ldr	r1, [pc, #180]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	610b      	str	r3, [r1, #16]
 80056f0:	e02d      	b.n	800574e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d115      	bne.n	8005724 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056f8:	4b29      	ldr	r3, [pc, #164]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	4b2a      	ldr	r3, [pc, #168]	; (80057a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056fe:	4013      	ands	r3, r2
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6892      	ldr	r2, [r2, #8]
 8005704:	0211      	lsls	r1, r2, #8
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6912      	ldr	r2, [r2, #16]
 800570a:	0852      	lsrs	r2, r2, #1
 800570c:	3a01      	subs	r2, #1
 800570e:	0552      	lsls	r2, r2, #21
 8005710:	4311      	orrs	r1, r2
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6852      	ldr	r2, [r2, #4]
 8005716:	3a01      	subs	r2, #1
 8005718:	0112      	lsls	r2, r2, #4
 800571a:	430a      	orrs	r2, r1
 800571c:	4920      	ldr	r1, [pc, #128]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800571e:	4313      	orrs	r3, r2
 8005720:	610b      	str	r3, [r1, #16]
 8005722:	e014      	b.n	800574e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005724:	4b1e      	ldr	r3, [pc, #120]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	4b20      	ldr	r3, [pc, #128]	; (80057ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800572a:	4013      	ands	r3, r2
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6892      	ldr	r2, [r2, #8]
 8005730:	0211      	lsls	r1, r2, #8
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6952      	ldr	r2, [r2, #20]
 8005736:	0852      	lsrs	r2, r2, #1
 8005738:	3a01      	subs	r2, #1
 800573a:	0652      	lsls	r2, r2, #25
 800573c:	4311      	orrs	r1, r2
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6852      	ldr	r2, [r2, #4]
 8005742:	3a01      	subs	r2, #1
 8005744:	0112      	lsls	r2, r2, #4
 8005746:	430a      	orrs	r2, r1
 8005748:	4915      	ldr	r1, [pc, #84]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800574a:	4313      	orrs	r3, r2
 800574c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800574e:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a13      	ldr	r2, [pc, #76]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005754:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005758:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800575a:	f7fb fb93 	bl	8000e84 <HAL_GetTick>
 800575e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005760:	e009      	b.n	8005776 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005762:	f7fb fb8f 	bl	8000e84 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d902      	bls.n	8005776 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	73fb      	strb	r3, [r7, #15]
          break;
 8005774:	e005      	b.n	8005782 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005776:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0ef      	beq.n	8005762 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d106      	bne.n	8005796 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005788:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	4903      	ldr	r1, [pc, #12]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005792:	4313      	orrs	r3, r2
 8005794:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005796:	7bfb      	ldrb	r3, [r7, #15]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40021000 	.word	0x40021000
 80057a4:	07ff800f 	.word	0x07ff800f
 80057a8:	ff9f800f 	.word	0xff9f800f
 80057ac:	f9ff800f 	.word	0xf9ff800f

080057b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057be:	4b70      	ldr	r3, [pc, #448]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00e      	beq.n	80057e8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057ca:	4b6d      	ldr	r3, [pc, #436]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f003 0203 	and.w	r2, r3, #3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d103      	bne.n	80057e2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
       ||
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d13f      	bne.n	8005862 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	73fb      	strb	r3, [r7, #15]
 80057e6:	e03c      	b.n	8005862 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d00c      	beq.n	800580a <RCCEx_PLLSAI2_Config+0x5a>
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d013      	beq.n	800581c <RCCEx_PLLSAI2_Config+0x6c>
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d120      	bne.n	800583a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057f8:	4b61      	ldr	r3, [pc, #388]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d11d      	bne.n	8005840 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005808:	e01a      	b.n	8005840 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800580a:	4b5d      	ldr	r3, [pc, #372]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005812:	2b00      	cmp	r3, #0
 8005814:	d116      	bne.n	8005844 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800581a:	e013      	b.n	8005844 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800581c:	4b58      	ldr	r3, [pc, #352]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10f      	bne.n	8005848 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005828:	4b55      	ldr	r3, [pc, #340]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d109      	bne.n	8005848 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005838:	e006      	b.n	8005848 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	73fb      	strb	r3, [r7, #15]
      break;
 800583e:	e004      	b.n	800584a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005840:	bf00      	nop
 8005842:	e002      	b.n	800584a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005844:	bf00      	nop
 8005846:	e000      	b.n	800584a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005848:	bf00      	nop
    }

    if(status == HAL_OK)
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d108      	bne.n	8005862 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005850:	4b4b      	ldr	r3, [pc, #300]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f023 0203 	bic.w	r2, r3, #3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4948      	ldr	r1, [pc, #288]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 800585e:	4313      	orrs	r3, r2
 8005860:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005862:	7bfb      	ldrb	r3, [r7, #15]
 8005864:	2b00      	cmp	r3, #0
 8005866:	f040 8086 	bne.w	8005976 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800586a:	4b45      	ldr	r3, [pc, #276]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a44      	ldr	r2, [pc, #272]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005876:	f7fb fb05 	bl	8000e84 <HAL_GetTick>
 800587a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800587c:	e009      	b.n	8005892 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800587e:	f7fb fb01 	bl	8000e84 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d902      	bls.n	8005892 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	73fb      	strb	r3, [r7, #15]
        break;
 8005890:	e005      	b.n	800589e <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005892:	4b3b      	ldr	r3, [pc, #236]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1ef      	bne.n	800587e <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d168      	bne.n	8005976 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d113      	bne.n	80058d2 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058aa:	4b35      	ldr	r3, [pc, #212]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 80058ac:	695a      	ldr	r2, [r3, #20]
 80058ae:	4b35      	ldr	r3, [pc, #212]	; (8005984 <RCCEx_PLLSAI2_Config+0x1d4>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6892      	ldr	r2, [r2, #8]
 80058b6:	0211      	lsls	r1, r2, #8
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	68d2      	ldr	r2, [r2, #12]
 80058bc:	06d2      	lsls	r2, r2, #27
 80058be:	4311      	orrs	r1, r2
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6852      	ldr	r2, [r2, #4]
 80058c4:	3a01      	subs	r2, #1
 80058c6:	0112      	lsls	r2, r2, #4
 80058c8:	430a      	orrs	r2, r1
 80058ca:	492d      	ldr	r1, [pc, #180]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	614b      	str	r3, [r1, #20]
 80058d0:	e02d      	b.n	800592e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d115      	bne.n	8005904 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058d8:	4b29      	ldr	r3, [pc, #164]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 80058da:	695a      	ldr	r2, [r3, #20]
 80058dc:	4b2a      	ldr	r3, [pc, #168]	; (8005988 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058de:	4013      	ands	r3, r2
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6892      	ldr	r2, [r2, #8]
 80058e4:	0211      	lsls	r1, r2, #8
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6912      	ldr	r2, [r2, #16]
 80058ea:	0852      	lsrs	r2, r2, #1
 80058ec:	3a01      	subs	r2, #1
 80058ee:	0552      	lsls	r2, r2, #21
 80058f0:	4311      	orrs	r1, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6852      	ldr	r2, [r2, #4]
 80058f6:	3a01      	subs	r2, #1
 80058f8:	0112      	lsls	r2, r2, #4
 80058fa:	430a      	orrs	r2, r1
 80058fc:	4920      	ldr	r1, [pc, #128]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	614b      	str	r3, [r1, #20]
 8005902:	e014      	b.n	800592e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005904:	4b1e      	ldr	r3, [pc, #120]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005906:	695a      	ldr	r2, [r3, #20]
 8005908:	4b20      	ldr	r3, [pc, #128]	; (800598c <RCCEx_PLLSAI2_Config+0x1dc>)
 800590a:	4013      	ands	r3, r2
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6892      	ldr	r2, [r2, #8]
 8005910:	0211      	lsls	r1, r2, #8
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6952      	ldr	r2, [r2, #20]
 8005916:	0852      	lsrs	r2, r2, #1
 8005918:	3a01      	subs	r2, #1
 800591a:	0652      	lsls	r2, r2, #25
 800591c:	4311      	orrs	r1, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6852      	ldr	r2, [r2, #4]
 8005922:	3a01      	subs	r2, #1
 8005924:	0112      	lsls	r2, r2, #4
 8005926:	430a      	orrs	r2, r1
 8005928:	4915      	ldr	r1, [pc, #84]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 800592a:	4313      	orrs	r3, r2
 800592c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800592e:	4b14      	ldr	r3, [pc, #80]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a13      	ldr	r2, [pc, #76]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005938:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593a:	f7fb faa3 	bl	8000e84 <HAL_GetTick>
 800593e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005940:	e009      	b.n	8005956 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005942:	f7fb fa9f 	bl	8000e84 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d902      	bls.n	8005956 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	73fb      	strb	r3, [r7, #15]
          break;
 8005954:	e005      	b.n	8005962 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005956:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0ef      	beq.n	8005942 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005962:	7bfb      	ldrb	r3, [r7, #15]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d106      	bne.n	8005976 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005968:	4b05      	ldr	r3, [pc, #20]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 800596a:	695a      	ldr	r2, [r3, #20]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	4903      	ldr	r1, [pc, #12]	; (8005980 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005972:	4313      	orrs	r3, r2
 8005974:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005976:	7bfb      	ldrb	r3, [r7, #15]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40021000 	.word	0x40021000
 8005984:	07ff800f 	.word	0x07ff800f
 8005988:	ff9f800f 	.word	0xff9f800f
 800598c:	f9ff800f 	.word	0xf9ff800f

08005990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e049      	b.n	8005a36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d106      	bne.n	80059bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f006 fe24 	bl	800c604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3304      	adds	r3, #4
 80059cc:	4619      	mov	r1, r3
 80059ce:	4610      	mov	r0, r2
 80059d0:	f000 fb0e 	bl	8005ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d001      	beq.n	8005a58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e047      	b.n	8005ae8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a23      	ldr	r2, [pc, #140]	; (8005af4 <HAL_TIM_Base_Start+0xb4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01d      	beq.n	8005aa6 <HAL_TIM_Base_Start+0x66>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a72:	d018      	beq.n	8005aa6 <HAL_TIM_Base_Start+0x66>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a1f      	ldr	r2, [pc, #124]	; (8005af8 <HAL_TIM_Base_Start+0xb8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d013      	beq.n	8005aa6 <HAL_TIM_Base_Start+0x66>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a1e      	ldr	r2, [pc, #120]	; (8005afc <HAL_TIM_Base_Start+0xbc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00e      	beq.n	8005aa6 <HAL_TIM_Base_Start+0x66>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a1c      	ldr	r2, [pc, #112]	; (8005b00 <HAL_TIM_Base_Start+0xc0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d009      	beq.n	8005aa6 <HAL_TIM_Base_Start+0x66>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a1b      	ldr	r2, [pc, #108]	; (8005b04 <HAL_TIM_Base_Start+0xc4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d004      	beq.n	8005aa6 <HAL_TIM_Base_Start+0x66>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a19      	ldr	r2, [pc, #100]	; (8005b08 <HAL_TIM_Base_Start+0xc8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d115      	bne.n	8005ad2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	4b17      	ldr	r3, [pc, #92]	; (8005b0c <HAL_TIM_Base_Start+0xcc>)
 8005aae:	4013      	ands	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b06      	cmp	r3, #6
 8005ab6:	d015      	beq.n	8005ae4 <HAL_TIM_Base_Start+0xa4>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005abe:	d011      	beq.n	8005ae4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0201 	orr.w	r2, r2, #1
 8005ace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad0:	e008      	b.n	8005ae4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f042 0201 	orr.w	r2, r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	e000      	b.n	8005ae6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	40012c00 	.word	0x40012c00
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40000800 	.word	0x40000800
 8005b00:	40000c00 	.word	0x40000c00
 8005b04:	40013400 	.word	0x40013400
 8005b08:	40014000 	.word	0x40014000
 8005b0c:	00010007 	.word	0x00010007

08005b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d001      	beq.n	8005b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e04f      	b.n	8005bc8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0201 	orr.w	r2, r2, #1
 8005b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a23      	ldr	r2, [pc, #140]	; (8005bd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d01d      	beq.n	8005b86 <HAL_TIM_Base_Start_IT+0x76>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b52:	d018      	beq.n	8005b86 <HAL_TIM_Base_Start_IT+0x76>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a1f      	ldr	r2, [pc, #124]	; (8005bd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d013      	beq.n	8005b86 <HAL_TIM_Base_Start_IT+0x76>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a1e      	ldr	r2, [pc, #120]	; (8005bdc <HAL_TIM_Base_Start_IT+0xcc>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00e      	beq.n	8005b86 <HAL_TIM_Base_Start_IT+0x76>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a1c      	ldr	r2, [pc, #112]	; (8005be0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d009      	beq.n	8005b86 <HAL_TIM_Base_Start_IT+0x76>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a1b      	ldr	r2, [pc, #108]	; (8005be4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d004      	beq.n	8005b86 <HAL_TIM_Base_Start_IT+0x76>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a19      	ldr	r2, [pc, #100]	; (8005be8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d115      	bne.n	8005bb2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	4b17      	ldr	r3, [pc, #92]	; (8005bec <HAL_TIM_Base_Start_IT+0xdc>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2b06      	cmp	r3, #6
 8005b96:	d015      	beq.n	8005bc4 <HAL_TIM_Base_Start_IT+0xb4>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b9e:	d011      	beq.n	8005bc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0201 	orr.w	r2, r2, #1
 8005bae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb0:	e008      	b.n	8005bc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f042 0201 	orr.w	r2, r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	e000      	b.n	8005bc6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	40012c00 	.word	0x40012c00
 8005bd8:	40000400 	.word	0x40000400
 8005bdc:	40000800 	.word	0x40000800
 8005be0:	40000c00 	.word	0x40000c00
 8005be4:	40013400 	.word	0x40013400
 8005be8:	40014000 	.word	0x40014000
 8005bec:	00010007 	.word	0x00010007

08005bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d122      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d11b      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f06f 0202 	mvn.w	r2, #2
 8005c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f9be 	bl	8005fb4 <HAL_TIM_IC_CaptureCallback>
 8005c38:	e005      	b.n	8005c46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f9b0 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f9c1 	bl	8005fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d122      	bne.n	8005ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d11b      	bne.n	8005ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f06f 0204 	mvn.w	r2, #4
 8005c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2202      	movs	r2, #2
 8005c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f994 	bl	8005fb4 <HAL_TIM_IC_CaptureCallback>
 8005c8c:	e005      	b.n	8005c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f986 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f997 	bl	8005fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	2b08      	cmp	r3, #8
 8005cac:	d122      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d11b      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 0208 	mvn.w	r2, #8
 8005cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2204      	movs	r2, #4
 8005cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f96a 	bl	8005fb4 <HAL_TIM_IC_CaptureCallback>
 8005ce0:	e005      	b.n	8005cee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f95c 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f96d 	bl	8005fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f003 0310 	and.w	r3, r3, #16
 8005cfe:	2b10      	cmp	r3, #16
 8005d00:	d122      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	2b10      	cmp	r3, #16
 8005d0e:	d11b      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f06f 0210 	mvn.w	r2, #16
 8005d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2208      	movs	r2, #8
 8005d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f940 	bl	8005fb4 <HAL_TIM_IC_CaptureCallback>
 8005d34:	e005      	b.n	8005d42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f932 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f943 	bl	8005fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d10e      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d107      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0201 	mvn.w	r2, #1
 8005d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f006 f86c 	bl	800be4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7e:	2b80      	cmp	r3, #128	; 0x80
 8005d80:	d10e      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8c:	2b80      	cmp	r3, #128	; 0x80
 8005d8e:	d107      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 faee 	bl	800637c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dae:	d10e      	bne.n	8005dce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dba:	2b80      	cmp	r3, #128	; 0x80
 8005dbc:	d107      	bne.n	8005dce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 fae1 	bl	8006390 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd8:	2b40      	cmp	r3, #64	; 0x40
 8005dda:	d10e      	bne.n	8005dfa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d107      	bne.n	8005dfa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f8f1 	bl	8005fdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	f003 0320 	and.w	r3, r3, #32
 8005e04:	2b20      	cmp	r3, #32
 8005e06:	d10e      	bne.n	8005e26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	d107      	bne.n	8005e26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f06f 0220 	mvn.w	r2, #32
 8005e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 faa1 	bl	8006368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e26:	bf00      	nop
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b084      	sub	sp, #16
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <HAL_TIM_ConfigClockSource+0x18>
 8005e42:	2302      	movs	r3, #2
 8005e44:	e0a8      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x16a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2202      	movs	r2, #2
 8005e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e64:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e68:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e70:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b40      	cmp	r3, #64	; 0x40
 8005e80:	d067      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0x124>
 8005e82:	2b40      	cmp	r3, #64	; 0x40
 8005e84:	d80b      	bhi.n	8005e9e <HAL_TIM_ConfigClockSource+0x70>
 8005e86:	2b10      	cmp	r3, #16
 8005e88:	d073      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x144>
 8005e8a:	2b10      	cmp	r3, #16
 8005e8c:	d802      	bhi.n	8005e94 <HAL_TIM_ConfigClockSource+0x66>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d06f      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005e92:	e078      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	d06c      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x144>
 8005e98:	2b30      	cmp	r3, #48	; 0x30
 8005e9a:	d06a      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005e9c:	e073      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005e9e:	2b70      	cmp	r3, #112	; 0x70
 8005ea0:	d00d      	beq.n	8005ebe <HAL_TIM_ConfigClockSource+0x90>
 8005ea2:	2b70      	cmp	r3, #112	; 0x70
 8005ea4:	d804      	bhi.n	8005eb0 <HAL_TIM_ConfigClockSource+0x82>
 8005ea6:	2b50      	cmp	r3, #80	; 0x50
 8005ea8:	d033      	beq.n	8005f12 <HAL_TIM_ConfigClockSource+0xe4>
 8005eaa:	2b60      	cmp	r3, #96	; 0x60
 8005eac:	d041      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005eae:	e06a      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb4:	d066      	beq.n	8005f84 <HAL_TIM_ConfigClockSource+0x156>
 8005eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eba:	d017      	beq.n	8005eec <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005ebc:	e063      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6899      	ldr	r1, [r3, #8]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f000 f9a3 	bl	8006218 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ee0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	609a      	str	r2, [r3, #8]
      break;
 8005eea:	e04c      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	6899      	ldr	r1, [r3, #8]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f000 f98c 	bl	8006218 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f0e:	609a      	str	r2, [r3, #8]
      break;
 8005f10:	e039      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	6859      	ldr	r1, [r3, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f000 f900 	bl	8006124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2150      	movs	r1, #80	; 0x50
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 f959 	bl	80061e2 <TIM_ITRx_SetConfig>
      break;
 8005f30:	e029      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6859      	ldr	r1, [r3, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f000 f91f 	bl	8006182 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2160      	movs	r1, #96	; 0x60
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 f949 	bl	80061e2 <TIM_ITRx_SetConfig>
      break;
 8005f50:	e019      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	6859      	ldr	r1, [r3, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f000 f8e0 	bl	8006124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2140      	movs	r1, #64	; 0x40
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 f939 	bl	80061e2 <TIM_ITRx_SetConfig>
      break;
 8005f70:	e009      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	f000 f930 	bl	80061e2 <TIM_ITRx_SetConfig>
        break;
 8005f82:	e000      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005f84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a40      	ldr	r2, [pc, #256]	; (8006104 <TIM_Base_SetConfig+0x114>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d013      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600e:	d00f      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a3d      	ldr	r2, [pc, #244]	; (8006108 <TIM_Base_SetConfig+0x118>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d00b      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a3c      	ldr	r2, [pc, #240]	; (800610c <TIM_Base_SetConfig+0x11c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d007      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a3b      	ldr	r2, [pc, #236]	; (8006110 <TIM_Base_SetConfig+0x120>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a3a      	ldr	r2, [pc, #232]	; (8006114 <TIM_Base_SetConfig+0x124>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d108      	bne.n	8006042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2f      	ldr	r2, [pc, #188]	; (8006104 <TIM_Base_SetConfig+0x114>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d01f      	beq.n	800608a <TIM_Base_SetConfig+0x9a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006050:	d01b      	beq.n	800608a <TIM_Base_SetConfig+0x9a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a2c      	ldr	r2, [pc, #176]	; (8006108 <TIM_Base_SetConfig+0x118>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d017      	beq.n	800608a <TIM_Base_SetConfig+0x9a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a2b      	ldr	r2, [pc, #172]	; (800610c <TIM_Base_SetConfig+0x11c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d013      	beq.n	800608a <TIM_Base_SetConfig+0x9a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a2a      	ldr	r2, [pc, #168]	; (8006110 <TIM_Base_SetConfig+0x120>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00f      	beq.n	800608a <TIM_Base_SetConfig+0x9a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a29      	ldr	r2, [pc, #164]	; (8006114 <TIM_Base_SetConfig+0x124>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d00b      	beq.n	800608a <TIM_Base_SetConfig+0x9a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a28      	ldr	r2, [pc, #160]	; (8006118 <TIM_Base_SetConfig+0x128>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d007      	beq.n	800608a <TIM_Base_SetConfig+0x9a>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a27      	ldr	r2, [pc, #156]	; (800611c <TIM_Base_SetConfig+0x12c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d003      	beq.n	800608a <TIM_Base_SetConfig+0x9a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a26      	ldr	r2, [pc, #152]	; (8006120 <TIM_Base_SetConfig+0x130>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d108      	bne.n	800609c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a10      	ldr	r2, [pc, #64]	; (8006104 <TIM_Base_SetConfig+0x114>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00f      	beq.n	80060e8 <TIM_Base_SetConfig+0xf8>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a12      	ldr	r2, [pc, #72]	; (8006114 <TIM_Base_SetConfig+0x124>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d00b      	beq.n	80060e8 <TIM_Base_SetConfig+0xf8>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a11      	ldr	r2, [pc, #68]	; (8006118 <TIM_Base_SetConfig+0x128>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d007      	beq.n	80060e8 <TIM_Base_SetConfig+0xf8>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a10      	ldr	r2, [pc, #64]	; (800611c <TIM_Base_SetConfig+0x12c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d003      	beq.n	80060e8 <TIM_Base_SetConfig+0xf8>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a0f      	ldr	r2, [pc, #60]	; (8006120 <TIM_Base_SetConfig+0x130>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d103      	bne.n	80060f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	615a      	str	r2, [r3, #20]
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40012c00 	.word	0x40012c00
 8006108:	40000400 	.word	0x40000400
 800610c:	40000800 	.word	0x40000800
 8006110:	40000c00 	.word	0x40000c00
 8006114:	40013400 	.word	0x40013400
 8006118:	40014000 	.word	0x40014000
 800611c:	40014400 	.word	0x40014400
 8006120:	40014800 	.word	0x40014800

08006124 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f023 0201 	bic.w	r2, r3, #1
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800614e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	4313      	orrs	r3, r2
 8006158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f023 030a 	bic.w	r3, r3, #10
 8006160:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006182:	b480      	push	{r7}
 8006184:	b087      	sub	sp, #28
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	f023 0210 	bic.w	r2, r3, #16
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	031b      	lsls	r3, r3, #12
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	621a      	str	r2, [r3, #32]
}
 80061d6:	bf00      	nop
 80061d8:	371c      	adds	r7, #28
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b085      	sub	sp, #20
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	f043 0307 	orr.w	r3, r3, #7
 8006204:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	609a      	str	r2, [r3, #8]
}
 800620c:	bf00      	nop
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006232:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	021a      	lsls	r2, r3, #8
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	431a      	orrs	r2, r3
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	4313      	orrs	r3, r2
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	4313      	orrs	r3, r2
 8006244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	609a      	str	r2, [r3, #8]
}
 800624c:	bf00      	nop
 800624e:	371c      	adds	r7, #28
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006268:	2b01      	cmp	r3, #1
 800626a:	d101      	bne.n	8006270 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800626c:	2302      	movs	r3, #2
 800626e:	e068      	b.n	8006342 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a2e      	ldr	r2, [pc, #184]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d004      	beq.n	80062a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a2d      	ldr	r2, [pc, #180]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d108      	bne.n	80062b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a1e      	ldr	r2, [pc, #120]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d01d      	beq.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e2:	d018      	beq.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a1b      	ldr	r2, [pc, #108]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d013      	beq.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a1a      	ldr	r2, [pc, #104]	; (800635c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00e      	beq.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a18      	ldr	r2, [pc, #96]	; (8006360 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d009      	beq.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a13      	ldr	r2, [pc, #76]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d004      	beq.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a14      	ldr	r2, [pc, #80]	; (8006364 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d10c      	bne.n	8006330 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800631c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	4313      	orrs	r3, r2
 8006326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	40012c00 	.word	0x40012c00
 8006354:	40013400 	.word	0x40013400
 8006358:	40000400 	.word	0x40000400
 800635c:	40000800 	.word	0x40000800
 8006360:	40000c00 	.word	0x40000c00
 8006364:	40014000 	.word	0x40014000

08006368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e042      	b.n	800643c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d106      	bne.n	80063ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f006 f939 	bl	800c640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2224      	movs	r2, #36	; 0x24
 80063d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f8c4 	bl	8006574 <UART_SetConfig>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e022      	b.n	800643c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fb8a 	bl	8006b18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fc11 	bl	8006c5c <UART_CheckIdleState>
 800643a:	4603      	mov	r3, r0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08a      	sub	sp, #40	; 0x28
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	4613      	mov	r3, r2
 8006452:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800645a:	2b20      	cmp	r3, #32
 800645c:	f040 8084 	bne.w	8006568 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <HAL_UART_Transmit+0x28>
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e07c      	b.n	800656a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_UART_Transmit+0x3a>
 800647a:	2302      	movs	r3, #2
 800647c:	e075      	b.n	800656a <HAL_UART_Transmit+0x126>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2221      	movs	r2, #33	; 0x21
 8006492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006496:	f7fa fcf5 	bl	8000e84 <HAL_GetTick>
 800649a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	88fa      	ldrh	r2, [r7, #6]
 80064a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	88fa      	ldrh	r2, [r7, #6]
 80064a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b4:	d108      	bne.n	80064c8 <HAL_UART_Transmit+0x84>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	e003      	b.n	80064d0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80064d8:	e02d      	b.n	8006536 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2200      	movs	r2, #0
 80064e2:	2180      	movs	r1, #128	; 0x80
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 fc01 	bl	8006cec <UART_WaitOnFlagUntilTimeout>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e03a      	b.n	800656a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10b      	bne.n	8006512 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	881a      	ldrh	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006506:	b292      	uxth	r2, r2
 8006508:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	3302      	adds	r3, #2
 800650e:	61bb      	str	r3, [r7, #24]
 8006510:	e008      	b.n	8006524 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	781a      	ldrb	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	b292      	uxth	r2, r2
 800651c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	3301      	adds	r3, #1
 8006522:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800652a:	b29b      	uxth	r3, r3
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800653c:	b29b      	uxth	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1cb      	bne.n	80064da <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2200      	movs	r2, #0
 800654a:	2140      	movs	r1, #64	; 0x40
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 fbcd 	bl	8006cec <UART_WaitOnFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e006      	b.n	800656a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2220      	movs	r2, #32
 8006560:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006564:	2300      	movs	r3, #0
 8006566:	e000      	b.n	800656a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006568:	2302      	movs	r3, #2
  }
}
 800656a:	4618      	mov	r0, r3
 800656c:	3720      	adds	r7, #32
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006574:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006578:	b088      	sub	sp, #32
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689a      	ldr	r2, [r3, #8]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	431a      	orrs	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	431a      	orrs	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	4313      	orrs	r3, r2
 8006598:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800659e:	69fa      	ldr	r2, [r7, #28]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4bb1      	ldr	r3, [pc, #708]	; (8006870 <UART_SetConfig+0x2fc>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6812      	ldr	r2, [r2, #0]
 80065b2:	69f9      	ldr	r1, [r7, #28]
 80065b4:	430b      	orrs	r3, r1
 80065b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4aa6      	ldr	r2, [pc, #664]	; (8006874 <UART_SetConfig+0x300>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d004      	beq.n	80065e8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80065f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6812      	ldr	r2, [r2, #0]
 80065fa:	69f9      	ldr	r1, [r7, #28]
 80065fc:	430b      	orrs	r3, r1
 80065fe:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006606:	f023 010f 	bic.w	r1, r3, #15
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a97      	ldr	r2, [pc, #604]	; (8006878 <UART_SetConfig+0x304>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d121      	bne.n	8006664 <UART_SetConfig+0xf0>
 8006620:	4b96      	ldr	r3, [pc, #600]	; (800687c <UART_SetConfig+0x308>)
 8006622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006626:	f003 0303 	and.w	r3, r3, #3
 800662a:	2b03      	cmp	r3, #3
 800662c:	d816      	bhi.n	800665c <UART_SetConfig+0xe8>
 800662e:	a201      	add	r2, pc, #4	; (adr r2, 8006634 <UART_SetConfig+0xc0>)
 8006630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006634:	08006645 	.word	0x08006645
 8006638:	08006651 	.word	0x08006651
 800663c:	0800664b 	.word	0x0800664b
 8006640:	08006657 	.word	0x08006657
 8006644:	2301      	movs	r3, #1
 8006646:	76fb      	strb	r3, [r7, #27]
 8006648:	e0e8      	b.n	800681c <UART_SetConfig+0x2a8>
 800664a:	2302      	movs	r3, #2
 800664c:	76fb      	strb	r3, [r7, #27]
 800664e:	e0e5      	b.n	800681c <UART_SetConfig+0x2a8>
 8006650:	2304      	movs	r3, #4
 8006652:	76fb      	strb	r3, [r7, #27]
 8006654:	e0e2      	b.n	800681c <UART_SetConfig+0x2a8>
 8006656:	2308      	movs	r3, #8
 8006658:	76fb      	strb	r3, [r7, #27]
 800665a:	e0df      	b.n	800681c <UART_SetConfig+0x2a8>
 800665c:	2310      	movs	r3, #16
 800665e:	76fb      	strb	r3, [r7, #27]
 8006660:	bf00      	nop
 8006662:	e0db      	b.n	800681c <UART_SetConfig+0x2a8>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a85      	ldr	r2, [pc, #532]	; (8006880 <UART_SetConfig+0x30c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d134      	bne.n	80066d8 <UART_SetConfig+0x164>
 800666e:	4b83      	ldr	r3, [pc, #524]	; (800687c <UART_SetConfig+0x308>)
 8006670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006674:	f003 030c 	and.w	r3, r3, #12
 8006678:	2b0c      	cmp	r3, #12
 800667a:	d829      	bhi.n	80066d0 <UART_SetConfig+0x15c>
 800667c:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <UART_SetConfig+0x110>)
 800667e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006682:	bf00      	nop
 8006684:	080066b9 	.word	0x080066b9
 8006688:	080066d1 	.word	0x080066d1
 800668c:	080066d1 	.word	0x080066d1
 8006690:	080066d1 	.word	0x080066d1
 8006694:	080066c5 	.word	0x080066c5
 8006698:	080066d1 	.word	0x080066d1
 800669c:	080066d1 	.word	0x080066d1
 80066a0:	080066d1 	.word	0x080066d1
 80066a4:	080066bf 	.word	0x080066bf
 80066a8:	080066d1 	.word	0x080066d1
 80066ac:	080066d1 	.word	0x080066d1
 80066b0:	080066d1 	.word	0x080066d1
 80066b4:	080066cb 	.word	0x080066cb
 80066b8:	2300      	movs	r3, #0
 80066ba:	76fb      	strb	r3, [r7, #27]
 80066bc:	e0ae      	b.n	800681c <UART_SetConfig+0x2a8>
 80066be:	2302      	movs	r3, #2
 80066c0:	76fb      	strb	r3, [r7, #27]
 80066c2:	e0ab      	b.n	800681c <UART_SetConfig+0x2a8>
 80066c4:	2304      	movs	r3, #4
 80066c6:	76fb      	strb	r3, [r7, #27]
 80066c8:	e0a8      	b.n	800681c <UART_SetConfig+0x2a8>
 80066ca:	2308      	movs	r3, #8
 80066cc:	76fb      	strb	r3, [r7, #27]
 80066ce:	e0a5      	b.n	800681c <UART_SetConfig+0x2a8>
 80066d0:	2310      	movs	r3, #16
 80066d2:	76fb      	strb	r3, [r7, #27]
 80066d4:	bf00      	nop
 80066d6:	e0a1      	b.n	800681c <UART_SetConfig+0x2a8>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a69      	ldr	r2, [pc, #420]	; (8006884 <UART_SetConfig+0x310>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d120      	bne.n	8006724 <UART_SetConfig+0x1b0>
 80066e2:	4b66      	ldr	r3, [pc, #408]	; (800687c <UART_SetConfig+0x308>)
 80066e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066ec:	2b10      	cmp	r3, #16
 80066ee:	d00f      	beq.n	8006710 <UART_SetConfig+0x19c>
 80066f0:	2b10      	cmp	r3, #16
 80066f2:	d802      	bhi.n	80066fa <UART_SetConfig+0x186>
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <UART_SetConfig+0x190>
 80066f8:	e010      	b.n	800671c <UART_SetConfig+0x1a8>
 80066fa:	2b20      	cmp	r3, #32
 80066fc:	d005      	beq.n	800670a <UART_SetConfig+0x196>
 80066fe:	2b30      	cmp	r3, #48	; 0x30
 8006700:	d009      	beq.n	8006716 <UART_SetConfig+0x1a2>
 8006702:	e00b      	b.n	800671c <UART_SetConfig+0x1a8>
 8006704:	2300      	movs	r3, #0
 8006706:	76fb      	strb	r3, [r7, #27]
 8006708:	e088      	b.n	800681c <UART_SetConfig+0x2a8>
 800670a:	2302      	movs	r3, #2
 800670c:	76fb      	strb	r3, [r7, #27]
 800670e:	e085      	b.n	800681c <UART_SetConfig+0x2a8>
 8006710:	2304      	movs	r3, #4
 8006712:	76fb      	strb	r3, [r7, #27]
 8006714:	e082      	b.n	800681c <UART_SetConfig+0x2a8>
 8006716:	2308      	movs	r3, #8
 8006718:	76fb      	strb	r3, [r7, #27]
 800671a:	e07f      	b.n	800681c <UART_SetConfig+0x2a8>
 800671c:	2310      	movs	r3, #16
 800671e:	76fb      	strb	r3, [r7, #27]
 8006720:	bf00      	nop
 8006722:	e07b      	b.n	800681c <UART_SetConfig+0x2a8>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a57      	ldr	r2, [pc, #348]	; (8006888 <UART_SetConfig+0x314>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d120      	bne.n	8006770 <UART_SetConfig+0x1fc>
 800672e:	4b53      	ldr	r3, [pc, #332]	; (800687c <UART_SetConfig+0x308>)
 8006730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006734:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006738:	2b40      	cmp	r3, #64	; 0x40
 800673a:	d00f      	beq.n	800675c <UART_SetConfig+0x1e8>
 800673c:	2b40      	cmp	r3, #64	; 0x40
 800673e:	d802      	bhi.n	8006746 <UART_SetConfig+0x1d2>
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <UART_SetConfig+0x1dc>
 8006744:	e010      	b.n	8006768 <UART_SetConfig+0x1f4>
 8006746:	2b80      	cmp	r3, #128	; 0x80
 8006748:	d005      	beq.n	8006756 <UART_SetConfig+0x1e2>
 800674a:	2bc0      	cmp	r3, #192	; 0xc0
 800674c:	d009      	beq.n	8006762 <UART_SetConfig+0x1ee>
 800674e:	e00b      	b.n	8006768 <UART_SetConfig+0x1f4>
 8006750:	2300      	movs	r3, #0
 8006752:	76fb      	strb	r3, [r7, #27]
 8006754:	e062      	b.n	800681c <UART_SetConfig+0x2a8>
 8006756:	2302      	movs	r3, #2
 8006758:	76fb      	strb	r3, [r7, #27]
 800675a:	e05f      	b.n	800681c <UART_SetConfig+0x2a8>
 800675c:	2304      	movs	r3, #4
 800675e:	76fb      	strb	r3, [r7, #27]
 8006760:	e05c      	b.n	800681c <UART_SetConfig+0x2a8>
 8006762:	2308      	movs	r3, #8
 8006764:	76fb      	strb	r3, [r7, #27]
 8006766:	e059      	b.n	800681c <UART_SetConfig+0x2a8>
 8006768:	2310      	movs	r3, #16
 800676a:	76fb      	strb	r3, [r7, #27]
 800676c:	bf00      	nop
 800676e:	e055      	b.n	800681c <UART_SetConfig+0x2a8>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a45      	ldr	r2, [pc, #276]	; (800688c <UART_SetConfig+0x318>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d124      	bne.n	80067c4 <UART_SetConfig+0x250>
 800677a:	4b40      	ldr	r3, [pc, #256]	; (800687c <UART_SetConfig+0x308>)
 800677c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006788:	d012      	beq.n	80067b0 <UART_SetConfig+0x23c>
 800678a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800678e:	d802      	bhi.n	8006796 <UART_SetConfig+0x222>
 8006790:	2b00      	cmp	r3, #0
 8006792:	d007      	beq.n	80067a4 <UART_SetConfig+0x230>
 8006794:	e012      	b.n	80067bc <UART_SetConfig+0x248>
 8006796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800679a:	d006      	beq.n	80067aa <UART_SetConfig+0x236>
 800679c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067a0:	d009      	beq.n	80067b6 <UART_SetConfig+0x242>
 80067a2:	e00b      	b.n	80067bc <UART_SetConfig+0x248>
 80067a4:	2300      	movs	r3, #0
 80067a6:	76fb      	strb	r3, [r7, #27]
 80067a8:	e038      	b.n	800681c <UART_SetConfig+0x2a8>
 80067aa:	2302      	movs	r3, #2
 80067ac:	76fb      	strb	r3, [r7, #27]
 80067ae:	e035      	b.n	800681c <UART_SetConfig+0x2a8>
 80067b0:	2304      	movs	r3, #4
 80067b2:	76fb      	strb	r3, [r7, #27]
 80067b4:	e032      	b.n	800681c <UART_SetConfig+0x2a8>
 80067b6:	2308      	movs	r3, #8
 80067b8:	76fb      	strb	r3, [r7, #27]
 80067ba:	e02f      	b.n	800681c <UART_SetConfig+0x2a8>
 80067bc:	2310      	movs	r3, #16
 80067be:	76fb      	strb	r3, [r7, #27]
 80067c0:	bf00      	nop
 80067c2:	e02b      	b.n	800681c <UART_SetConfig+0x2a8>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a2a      	ldr	r2, [pc, #168]	; (8006874 <UART_SetConfig+0x300>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d124      	bne.n	8006818 <UART_SetConfig+0x2a4>
 80067ce:	4b2b      	ldr	r3, [pc, #172]	; (800687c <UART_SetConfig+0x308>)
 80067d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067dc:	d012      	beq.n	8006804 <UART_SetConfig+0x290>
 80067de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e2:	d802      	bhi.n	80067ea <UART_SetConfig+0x276>
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d007      	beq.n	80067f8 <UART_SetConfig+0x284>
 80067e8:	e012      	b.n	8006810 <UART_SetConfig+0x29c>
 80067ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ee:	d006      	beq.n	80067fe <UART_SetConfig+0x28a>
 80067f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067f4:	d009      	beq.n	800680a <UART_SetConfig+0x296>
 80067f6:	e00b      	b.n	8006810 <UART_SetConfig+0x29c>
 80067f8:	2300      	movs	r3, #0
 80067fa:	76fb      	strb	r3, [r7, #27]
 80067fc:	e00e      	b.n	800681c <UART_SetConfig+0x2a8>
 80067fe:	2302      	movs	r3, #2
 8006800:	76fb      	strb	r3, [r7, #27]
 8006802:	e00b      	b.n	800681c <UART_SetConfig+0x2a8>
 8006804:	2304      	movs	r3, #4
 8006806:	76fb      	strb	r3, [r7, #27]
 8006808:	e008      	b.n	800681c <UART_SetConfig+0x2a8>
 800680a:	2308      	movs	r3, #8
 800680c:	76fb      	strb	r3, [r7, #27]
 800680e:	e005      	b.n	800681c <UART_SetConfig+0x2a8>
 8006810:	2310      	movs	r3, #16
 8006812:	76fb      	strb	r3, [r7, #27]
 8006814:	bf00      	nop
 8006816:	e001      	b.n	800681c <UART_SetConfig+0x2a8>
 8006818:	2310      	movs	r3, #16
 800681a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a14      	ldr	r2, [pc, #80]	; (8006874 <UART_SetConfig+0x300>)
 8006822:	4293      	cmp	r3, r2
 8006824:	f040 80a1 	bne.w	800696a <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006828:	7efb      	ldrb	r3, [r7, #27]
 800682a:	2b08      	cmp	r3, #8
 800682c:	d836      	bhi.n	800689c <UART_SetConfig+0x328>
 800682e:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <UART_SetConfig+0x2c0>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	08006859 	.word	0x08006859
 8006838:	0800689d 	.word	0x0800689d
 800683c:	08006861 	.word	0x08006861
 8006840:	0800689d 	.word	0x0800689d
 8006844:	08006867 	.word	0x08006867
 8006848:	0800689d 	.word	0x0800689d
 800684c:	0800689d 	.word	0x0800689d
 8006850:	0800689d 	.word	0x0800689d
 8006854:	08006895 	.word	0x08006895
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006858:	f7fe fa72 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 800685c:	6178      	str	r0, [r7, #20]
        break;
 800685e:	e022      	b.n	80068a6 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006860:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <UART_SetConfig+0x31c>)
 8006862:	617b      	str	r3, [r7, #20]
        break;
 8006864:	e01f      	b.n	80068a6 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006866:	f7fe f9d5 	bl	8004c14 <HAL_RCC_GetSysClockFreq>
 800686a:	6178      	str	r0, [r7, #20]
        break;
 800686c:	e01b      	b.n	80068a6 <UART_SetConfig+0x332>
 800686e:	bf00      	nop
 8006870:	cfff69f3 	.word	0xcfff69f3
 8006874:	40008000 	.word	0x40008000
 8006878:	40013800 	.word	0x40013800
 800687c:	40021000 	.word	0x40021000
 8006880:	40004400 	.word	0x40004400
 8006884:	40004800 	.word	0x40004800
 8006888:	40004c00 	.word	0x40004c00
 800688c:	40005000 	.word	0x40005000
 8006890:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006894:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006898:	617b      	str	r3, [r7, #20]
        break;
 800689a:	e004      	b.n	80068a6 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	76bb      	strb	r3, [r7, #26]
        break;
 80068a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 811d 	beq.w	8006ae8 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	4a97      	ldr	r2, [pc, #604]	; (8006b10 <UART_SetConfig+0x59c>)
 80068b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068b8:	461a      	mov	r2, r3
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80068c0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	4613      	mov	r3, r2
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	4413      	add	r3, r2
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d305      	bcc.n	80068de <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d902      	bls.n	80068e4 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	76bb      	strb	r3, [r7, #26]
 80068e2:	e101      	b.n	8006ae8 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f04f 0100 	mov.w	r1, #0
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	4a87      	ldr	r2, [pc, #540]	; (8006b10 <UART_SetConfig+0x59c>)
 80068f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	f04f 0400 	mov.w	r4, #0
 80068fc:	461a      	mov	r2, r3
 80068fe:	4623      	mov	r3, r4
 8006900:	f7fa f914 	bl	8000b2c <__aeabi_uldivmod>
 8006904:	4603      	mov	r3, r0
 8006906:	460c      	mov	r4, r1
 8006908:	4619      	mov	r1, r3
 800690a:	4622      	mov	r2, r4
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	f04f 0400 	mov.w	r4, #0
 8006914:	0214      	lsls	r4, r2, #8
 8006916:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800691a:	020b      	lsls	r3, r1, #8
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	6852      	ldr	r2, [r2, #4]
 8006920:	0852      	lsrs	r2, r2, #1
 8006922:	4611      	mov	r1, r2
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	eb13 0b01 	adds.w	fp, r3, r1
 800692c:	eb44 0c02 	adc.w	ip, r4, r2
 8006930:	4658      	mov	r0, fp
 8006932:	4661      	mov	r1, ip
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f04f 0400 	mov.w	r4, #0
 800693c:	461a      	mov	r2, r3
 800693e:	4623      	mov	r3, r4
 8006940:	f7fa f8f4 	bl	8000b2c <__aeabi_uldivmod>
 8006944:	4603      	mov	r3, r0
 8006946:	460c      	mov	r4, r1
 8006948:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006950:	d308      	bcc.n	8006964 <UART_SetConfig+0x3f0>
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006958:	d204      	bcs.n	8006964 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	60da      	str	r2, [r3, #12]
 8006962:	e0c1      	b.n	8006ae8 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	76bb      	strb	r3, [r7, #26]
 8006968:	e0be      	b.n	8006ae8 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006972:	d164      	bne.n	8006a3e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8006974:	7efb      	ldrb	r3, [r7, #27]
 8006976:	2b08      	cmp	r3, #8
 8006978:	d827      	bhi.n	80069ca <UART_SetConfig+0x456>
 800697a:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <UART_SetConfig+0x40c>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	080069a5 	.word	0x080069a5
 8006984:	080069ad 	.word	0x080069ad
 8006988:	080069b5 	.word	0x080069b5
 800698c:	080069cb 	.word	0x080069cb
 8006990:	080069bb 	.word	0x080069bb
 8006994:	080069cb 	.word	0x080069cb
 8006998:	080069cb 	.word	0x080069cb
 800699c:	080069cb 	.word	0x080069cb
 80069a0:	080069c3 	.word	0x080069c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069a4:	f7fe f9cc 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 80069a8:	6178      	str	r0, [r7, #20]
        break;
 80069aa:	e013      	b.n	80069d4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069ac:	f7fe f9de 	bl	8004d6c <HAL_RCC_GetPCLK2Freq>
 80069b0:	6178      	str	r0, [r7, #20]
        break;
 80069b2:	e00f      	b.n	80069d4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069b4:	4b57      	ldr	r3, [pc, #348]	; (8006b14 <UART_SetConfig+0x5a0>)
 80069b6:	617b      	str	r3, [r7, #20]
        break;
 80069b8:	e00c      	b.n	80069d4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ba:	f7fe f92b 	bl	8004c14 <HAL_RCC_GetSysClockFreq>
 80069be:	6178      	str	r0, [r7, #20]
        break;
 80069c0:	e008      	b.n	80069d4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069c6:	617b      	str	r3, [r7, #20]
        break;
 80069c8:	e004      	b.n	80069d4 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	76bb      	strb	r3, [r7, #26]
        break;
 80069d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 8086 	beq.w	8006ae8 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	4a4b      	ldr	r2, [pc, #300]	; (8006b10 <UART_SetConfig+0x59c>)
 80069e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069e6:	461a      	mov	r2, r3
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80069ee:	005a      	lsls	r2, r3, #1
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	085b      	lsrs	r3, r3, #1
 80069f6:	441a      	add	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2b0f      	cmp	r3, #15
 8006a08:	d916      	bls.n	8006a38 <UART_SetConfig+0x4c4>
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a10:	d212      	bcs.n	8006a38 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	f023 030f 	bic.w	r3, r3, #15
 8006a1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	085b      	lsrs	r3, r3, #1
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	f003 0307 	and.w	r3, r3, #7
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	89fb      	ldrh	r3, [r7, #14]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	89fa      	ldrh	r2, [r7, #14]
 8006a34:	60da      	str	r2, [r3, #12]
 8006a36:	e057      	b.n	8006ae8 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	76bb      	strb	r3, [r7, #26]
 8006a3c:	e054      	b.n	8006ae8 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a3e:	7efb      	ldrb	r3, [r7, #27]
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d828      	bhi.n	8006a96 <UART_SetConfig+0x522>
 8006a44:	a201      	add	r2, pc, #4	; (adr r2, 8006a4c <UART_SetConfig+0x4d8>)
 8006a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4a:	bf00      	nop
 8006a4c:	08006a71 	.word	0x08006a71
 8006a50:	08006a79 	.word	0x08006a79
 8006a54:	08006a81 	.word	0x08006a81
 8006a58:	08006a97 	.word	0x08006a97
 8006a5c:	08006a87 	.word	0x08006a87
 8006a60:	08006a97 	.word	0x08006a97
 8006a64:	08006a97 	.word	0x08006a97
 8006a68:	08006a97 	.word	0x08006a97
 8006a6c:	08006a8f 	.word	0x08006a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a70:	f7fe f966 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 8006a74:	6178      	str	r0, [r7, #20]
        break;
 8006a76:	e013      	b.n	8006aa0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a78:	f7fe f978 	bl	8004d6c <HAL_RCC_GetPCLK2Freq>
 8006a7c:	6178      	str	r0, [r7, #20]
        break;
 8006a7e:	e00f      	b.n	8006aa0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a80:	4b24      	ldr	r3, [pc, #144]	; (8006b14 <UART_SetConfig+0x5a0>)
 8006a82:	617b      	str	r3, [r7, #20]
        break;
 8006a84:	e00c      	b.n	8006aa0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a86:	f7fe f8c5 	bl	8004c14 <HAL_RCC_GetSysClockFreq>
 8006a8a:	6178      	str	r0, [r7, #20]
        break;
 8006a8c:	e008      	b.n	8006aa0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a92:	617b      	str	r3, [r7, #20]
        break;
 8006a94:	e004      	b.n	8006aa0 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	76bb      	strb	r3, [r7, #26]
        break;
 8006a9e:	bf00      	nop
    }

    if (pclk != 0U)
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d020      	beq.n	8006ae8 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	4a19      	ldr	r2, [pc, #100]	; (8006b10 <UART_SetConfig+0x59c>)
 8006aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	441a      	add	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2b0f      	cmp	r3, #15
 8006ad0:	d908      	bls.n	8006ae4 <UART_SetConfig+0x570>
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad8:	d204      	bcs.n	8006ae4 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	60da      	str	r2, [r3, #12]
 8006ae2:	e001      	b.n	8006ae8 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006b04:	7ebb      	ldrb	r3, [r7, #26]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3720      	adds	r7, #32
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006b10:	0800d304 	.word	0x0800d304
 8006b14:	00f42400 	.word	0x00f42400

08006b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00a      	beq.n	8006b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00a      	beq.n	8006b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	f003 0308 	and.w	r3, r3, #8
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00a      	beq.n	8006ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	f003 0310 	and.w	r3, r3, #16
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00a      	beq.n	8006bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00a      	beq.n	8006bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01a      	beq.n	8006c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c16:	d10a      	bne.n	8006c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	605a      	str	r2, [r3, #4]
  }
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af02      	add	r7, sp, #8
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006c6c:	f7fa f90a 	bl	8000e84 <HAL_GetTick>
 8006c70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d10e      	bne.n	8006c9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f82c 	bl	8006cec <UART_WaitOnFlagUntilTimeout>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e022      	b.n	8006ce4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0304 	and.w	r3, r3, #4
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d10e      	bne.n	8006cca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f816 	bl	8006cec <UART_WaitOnFlagUntilTimeout>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e00c      	b.n	8006ce4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	603b      	str	r3, [r7, #0]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cfc:	e062      	b.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d04:	d05e      	beq.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d06:	f7fa f8bd 	bl	8000e84 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d302      	bcc.n	8006d1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d11d      	bne.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d2a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689a      	ldr	r2, [r3, #8]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 0201 	bic.w	r2, r2, #1
 8006d3a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e045      	b.n	8006de4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0304 	and.w	r3, r3, #4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d02e      	beq.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69db      	ldr	r3, [r3, #28]
 8006d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d74:	d126      	bne.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d7e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d8e:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0201 	bic.w	r2, r2, #1
 8006d9e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e00f      	b.n	8006de4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69da      	ldr	r2, [r3, #28]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	bf0c      	ite	eq
 8006dd4:	2301      	moveq	r3, #1
 8006dd6:	2300      	movne	r3, #0
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	461a      	mov	r2, r3
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d08d      	beq.n	8006cfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d101      	bne.n	8006e02 <HAL_UARTEx_DisableFifoMode+0x16>
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e027      	b.n	8006e52 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2224      	movs	r2, #36	; 0x24
 8006e0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f022 0201 	bic.w	r2, r2, #1
 8006e28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d101      	bne.n	8006e76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e72:	2302      	movs	r3, #2
 8006e74:	e02d      	b.n	8006ed2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2224      	movs	r2, #36	; 0x24
 8006e82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0201 	bic.w	r2, r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f850 	bl	8006f58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e02d      	b.n	8006f4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2224      	movs	r2, #36	; 0x24
 8006efe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 0201 	bic.w	r2, r2, #1
 8006f18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f812 	bl	8006f58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
	...

08006f58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b089      	sub	sp, #36	; 0x24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006f60:	4a2f      	ldr	r2, [pc, #188]	; (8007020 <UARTEx_SetNbDataToProcess+0xc8>)
 8006f62:	f107 0314 	add.w	r3, r7, #20
 8006f66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f6a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006f6e:	4a2d      	ldr	r2, [pc, #180]	; (8007024 <UARTEx_SetNbDataToProcess+0xcc>)
 8006f70:	f107 030c 	add.w	r3, r7, #12
 8006f74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f78:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d108      	bne.n	8006f96 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f94:	e03d      	b.n	8007012 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f96:	2308      	movs	r3, #8
 8006f98:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f9a:	2308      	movs	r3, #8
 8006f9c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	0e5b      	lsrs	r3, r3, #25
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	0f5b      	lsrs	r3, r3, #29
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006fbe:	7fbb      	ldrb	r3, [r7, #30]
 8006fc0:	7f3a      	ldrb	r2, [r7, #28]
 8006fc2:	f107 0120 	add.w	r1, r7, #32
 8006fc6:	440a      	add	r2, r1
 8006fc8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006fcc:	fb02 f303 	mul.w	r3, r2, r3
 8006fd0:	7f3a      	ldrb	r2, [r7, #28]
 8006fd2:	f107 0120 	add.w	r1, r7, #32
 8006fd6:	440a      	add	r2, r1
 8006fd8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006fdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006fe8:	7ffb      	ldrb	r3, [r7, #31]
 8006fea:	7f7a      	ldrb	r2, [r7, #29]
 8006fec:	f107 0120 	add.w	r1, r7, #32
 8006ff0:	440a      	add	r2, r1
 8006ff2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006ff6:	fb02 f303 	mul.w	r3, r2, r3
 8006ffa:	7f7a      	ldrb	r2, [r7, #29]
 8006ffc:	f107 0120 	add.w	r1, r7, #32
 8007000:	440a      	add	r2, r1
 8007002:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007006:	fb93 f3f2 	sdiv	r3, r3, r2
 800700a:	b29a      	uxth	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007012:	bf00      	nop
 8007014:	3724      	adds	r7, #36	; 0x24
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	0800d238 	.word	0x0800d238
 8007024:	0800d240 	.word	0x0800d240

08007028 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007032:	2300      	movs	r3, #0
 8007034:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800703a:	2b84      	cmp	r3, #132	; 0x84
 800703c:	d005      	beq.n	800704a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800703e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	4413      	add	r3, r2
 8007046:	3303      	adds	r3, #3
 8007048:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800704a:	68fb      	ldr	r3, [r7, #12]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800705e:	f3ef 8305 	mrs	r3, IPSR
 8007062:	607b      	str	r3, [r7, #4]
  return(result);
 8007064:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007066:	2b00      	cmp	r3, #0
 8007068:	bf14      	ite	ne
 800706a:	2301      	movne	r3, #1
 800706c:	2300      	moveq	r3, #0
 800706e:	b2db      	uxtb	r3, r3
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007080:	f001 fc3e 	bl	8008900 <vTaskStartScheduler>
  
  return osOK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	bd80      	pop	{r7, pc}

0800708a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800708a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800708c:	b089      	sub	sp, #36	; 0x24
 800708e:	af04      	add	r7, sp, #16
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d020      	beq.n	80070de <osThreadCreate+0x54>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d01c      	beq.n	80070de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685c      	ldr	r4, [r3, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681d      	ldr	r5, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691e      	ldr	r6, [r3, #16]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff ffb6 	bl	8007028 <makeFreeRtosPriority>
 80070bc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070c6:	9202      	str	r2, [sp, #8]
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	9100      	str	r1, [sp, #0]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	4632      	mov	r2, r6
 80070d0:	4629      	mov	r1, r5
 80070d2:	4620      	mov	r0, r4
 80070d4:	f001 fa50 	bl	8008578 <xTaskCreateStatic>
 80070d8:	4603      	mov	r3, r0
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	e01c      	b.n	8007118 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685c      	ldr	r4, [r3, #4]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070ea:	b29e      	uxth	r6, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7ff ff98 	bl	8007028 <makeFreeRtosPriority>
 80070f8:	4602      	mov	r2, r0
 80070fa:	f107 030c 	add.w	r3, r7, #12
 80070fe:	9301      	str	r3, [sp, #4]
 8007100:	9200      	str	r2, [sp, #0]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	4632      	mov	r2, r6
 8007106:	4629      	mov	r1, r5
 8007108:	4620      	mov	r0, r4
 800710a:	f001 fa8f 	bl	800862c <xTaskCreate>
 800710e:	4603      	mov	r3, r0
 8007110:	2b01      	cmp	r3, #1
 8007112:	d001      	beq.n	8007118 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007114:	2300      	movs	r3, #0
 8007116:	e000      	b.n	800711a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007118:	68fb      	ldr	r3, [r7, #12]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007122 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <osDelay+0x16>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	e000      	b.n	800713a <osDelay+0x18>
 8007138:	2301      	movs	r3, #1
 800713a:	4618      	mov	r0, r3
 800713c:	f001 fbac 	bl	8008898 <vTaskDelay>
  
  return osOK;
 8007140:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af02      	add	r7, sp, #8
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	460b      	mov	r3, r1
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d013      	beq.n	800718a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8007162:	7afb      	ldrb	r3, [r7, #11]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d101      	bne.n	800716c <osTimerCreate+0x20>
 8007168:	2101      	movs	r1, #1
 800716a:	e000      	b.n	800716e <osTimerCreate+0x22>
 800716c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8007176:	9201      	str	r2, [sp, #4]
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	460a      	mov	r2, r1
 800717e:	2101      	movs	r1, #1
 8007180:	480b      	ldr	r0, [pc, #44]	; (80071b0 <osTimerCreate+0x64>)
 8007182:	f002 fc72 	bl	8009a6a <xTimerCreateStatic>
 8007186:	4603      	mov	r3, r0
 8007188:	e00e      	b.n	80071a8 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800718a:	7afb      	ldrb	r3, [r7, #11]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d101      	bne.n	8007194 <osTimerCreate+0x48>
 8007190:	2201      	movs	r2, #1
 8007192:	e000      	b.n	8007196 <osTimerCreate+0x4a>
 8007194:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2101      	movs	r1, #1
 80071a0:	4803      	ldr	r0, [pc, #12]	; (80071b0 <osTimerCreate+0x64>)
 80071a2:	f002 fc41 	bl	8009a28 <xTimerCreate>
 80071a6:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	0800d248 	.word	0x0800d248

080071b4 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af02      	add	r7, sp, #8
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80071be:	2300      	movs	r3, #0
 80071c0:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80071c2:	2300      	movs	r3, #0
 80071c4:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <osTimerStart+0x20>
    ticks = 1;
 80071d0:	2301      	movs	r3, #1
 80071d2:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80071d4:	f7ff ff40 	bl	8007058 <inHandlerMode>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d01b      	beq.n	8007216 <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80071de:	f107 020c 	add.w	r2, r7, #12
 80071e2:	2300      	movs	r3, #0
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	4613      	mov	r3, r2
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	2109      	movs	r1, #9
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f002 fcb3 	bl	8009b58 <xTimerGenericCommand>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d002      	beq.n	80071fe <osTimerStart+0x4a>
    {
      result = osErrorOS;
 80071f8:	23ff      	movs	r3, #255	; 0xff
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	e018      	b.n	8007230 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d015      	beq.n	8007230 <osTimerStart+0x7c>
 8007204:	4b0d      	ldr	r3, [pc, #52]	; (800723c <osTimerStart+0x88>)
 8007206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	e00c      	b.n	8007230 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8007216:	2300      	movs	r3, #0
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	2300      	movs	r3, #0
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	2104      	movs	r1, #4
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f002 fc99 	bl	8009b58 <xTimerGenericCommand>
 8007226:	4603      	mov	r3, r0
 8007228:	2b01      	cmp	r3, #1
 800722a:	d001      	beq.n	8007230 <osTimerStart+0x7c>
      result = osErrorOS;
 800722c:	23ff      	movs	r3, #255	; 0xff
 800722e:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8007230:	697b      	ldr	r3, [r7, #20]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	e000ed04 	.word	0xe000ed04

08007240 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af02      	add	r7, sp, #8
 8007246:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007248:	2300      	movs	r3, #0
 800724a:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800724c:	2300      	movs	r3, #0
 800724e:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8007250:	f7ff ff02 	bl	8007058 <inHandlerMode>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d01a      	beq.n	8007290 <osTimerStop+0x50>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800725a:	f107 0208 	add.w	r2, r7, #8
 800725e:	2300      	movs	r3, #0
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	4613      	mov	r3, r2
 8007264:	2200      	movs	r2, #0
 8007266:	2108      	movs	r1, #8
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f002 fc75 	bl	8009b58 <xTimerGenericCommand>
 800726e:	4603      	mov	r3, r0
 8007270:	2b01      	cmp	r3, #1
 8007272:	d001      	beq.n	8007278 <osTimerStop+0x38>
      return osErrorOS;
 8007274:	23ff      	movs	r3, #255	; 0xff
 8007276:	e019      	b.n	80072ac <osTimerStop+0x6c>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d015      	beq.n	80072aa <osTimerStop+0x6a>
 800727e:	4b0d      	ldr	r3, [pc, #52]	; (80072b4 <osTimerStop+0x74>)
 8007280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	e00c      	b.n	80072aa <osTimerStop+0x6a>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8007290:	2300      	movs	r3, #0
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	2300      	movs	r3, #0
 8007296:	2200      	movs	r2, #0
 8007298:	2103      	movs	r1, #3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f002 fc5c 	bl	8009b58 <xTimerGenericCommand>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d001      	beq.n	80072aa <osTimerStop+0x6a>
      result = osErrorOS;
 80072a6:	23ff      	movs	r3, #255	; 0xff
 80072a8:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 80072aa:	68fb      	ldr	r3, [r7, #12]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	e000ed04 	.word	0xe000ed04

080072b8 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af02      	add	r7, sp, #8
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80072ca:	f7ff fec5 	bl	8007058 <inHandlerMode>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d01c      	beq.n	800730e <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	f107 0208 	add.w	r2, r7, #8
 80072da:	f107 030c 	add.w	r3, r7, #12
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	4613      	mov	r3, r2
 80072e2:	2201      	movs	r2, #1
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f002 fa19 	bl	800971c <xTaskGenericNotifyFromISR>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d002      	beq.n	80072f6 <osSignalSet+0x3e>
      return 0x80000000;
 80072f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072f4:	e019      	b.n	800732a <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d015      	beq.n	8007328 <osSignalSet+0x70>
 80072fc:	4b0d      	ldr	r3, [pc, #52]	; (8007334 <osSignalSet+0x7c>)
 80072fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	e00c      	b.n	8007328 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	f107 0308 	add.w	r3, r7, #8
 8007314:	2201      	movs	r2, #1
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f002 f94e 	bl	80095b8 <xTaskGenericNotify>
 800731c:	4603      	mov	r3, r0
 800731e:	2b01      	cmp	r3, #1
 8007320:	d002      	beq.n	8007328 <osSignalSet+0x70>
    return 0x80000000;
 8007322:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007326:	e000      	b.n	800732a <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8007328:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	e000ed04 	.word	0xe000ed04

08007338 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8007338:	b590      	push	{r4, r7, lr}
 800733a:	b089      	sub	sp, #36	; 0x24
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8007344:	2300      	movs	r3, #0
 8007346:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007352:	d103      	bne.n	800735c <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8007354:	f04f 33ff 	mov.w	r3, #4294967295
 8007358:	61fb      	str	r3, [r7, #28]
 800735a:	e009      	b.n	8007370 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d006      	beq.n	8007370 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <osSignalWait+0x38>
      ticks = 1;
 800736c:	2301      	movs	r3, #1
 800736e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8007370:	f7ff fe72 	bl	8007058 <inHandlerMode>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d002      	beq.n	8007380 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800737a:	2382      	movs	r3, #130	; 0x82
 800737c:	613b      	str	r3, [r7, #16]
 800737e:	e01b      	b.n	80073b8 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8007380:	68b9      	ldr	r1, [r7, #8]
 8007382:	f107 0310 	add.w	r3, r7, #16
 8007386:	1d1a      	adds	r2, r3, #4
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	2000      	movs	r0, #0
 800738c:	f002 f8ba 	bl	8009504 <xTaskNotifyWait>
 8007390:	4603      	mov	r3, r0
 8007392:	2b01      	cmp	r3, #1
 8007394:	d008      	beq.n	80073a8 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d102      	bne.n	80073a2 <osSignalWait+0x6a>
 800739c:	2300      	movs	r3, #0
 800739e:	613b      	str	r3, [r7, #16]
 80073a0:	e00a      	b.n	80073b8 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80073a2:	2340      	movs	r3, #64	; 0x40
 80073a4:	613b      	str	r3, [r7, #16]
 80073a6:	e007      	b.n	80073b8 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	da02      	bge.n	80073b4 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80073ae:	2386      	movs	r3, #134	; 0x86
 80073b0:	613b      	str	r3, [r7, #16]
 80073b2:	e001      	b.n	80073b8 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80073b4:	2308      	movs	r3, #8
 80073b6:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	461c      	mov	r4, r3
 80073bc:	f107 0310 	add.w	r3, r7, #16
 80073c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80073c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	3724      	adds	r7, #36	; 0x24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd90      	pop	{r4, r7, pc}

080073d0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d007      	beq.n	80073f0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	4619      	mov	r1, r3
 80073e6:	2001      	movs	r0, #1
 80073e8:	f000 faad 	bl	8007946 <xQueueCreateMutexStatic>
 80073ec:	4603      	mov	r3, r0
 80073ee:	e003      	b.n	80073f8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80073f0:	2001      	movs	r0, #1
 80073f2:	f000 fa90 	bl	8007916 <xQueueCreateMutex>
 80073f6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800740a:	2300      	movs	r3, #0
 800740c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <osMutexWait+0x18>
    return osErrorParameter;
 8007414:	2380      	movs	r3, #128	; 0x80
 8007416:	e03a      	b.n	800748e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007418:	2300      	movs	r3, #0
 800741a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007422:	d103      	bne.n	800742c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007424:	f04f 33ff 	mov.w	r3, #4294967295
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	e009      	b.n	8007440 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d006      	beq.n	8007440 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <osMutexWait+0x40>
      ticks = 1;
 800743c:	2301      	movs	r3, #1
 800743e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007440:	f7ff fe0a 	bl	8007058 <inHandlerMode>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d017      	beq.n	800747a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800744a:	f107 0308 	add.w	r3, r7, #8
 800744e:	461a      	mov	r2, r3
 8007450:	2100      	movs	r1, #0
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fe8e 	bl	8008174 <xQueueReceiveFromISR>
 8007458:	4603      	mov	r3, r0
 800745a:	2b01      	cmp	r3, #1
 800745c:	d001      	beq.n	8007462 <osMutexWait+0x62>
      return osErrorOS;
 800745e:	23ff      	movs	r3, #255	; 0xff
 8007460:	e015      	b.n	800748e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d011      	beq.n	800748c <osMutexWait+0x8c>
 8007468:	4b0b      	ldr	r3, [pc, #44]	; (8007498 <osMutexWait+0x98>)
 800746a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800746e:	601a      	str	r2, [r3, #0]
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	e008      	b.n	800748c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800747a:	68f9      	ldr	r1, [r7, #12]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fd71 	bl	8007f64 <xQueueSemaphoreTake>
 8007482:	4603      	mov	r3, r0
 8007484:	2b01      	cmp	r3, #1
 8007486:	d001      	beq.n	800748c <osMutexWait+0x8c>
    return osErrorOS;
 8007488:	23ff      	movs	r3, #255	; 0xff
 800748a:	e000      	b.n	800748e <osMutexWait+0x8e>
  }
  
  return osOK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	e000ed04 	.word	0xe000ed04

0800749c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80074ac:	f7ff fdd4 	bl	8007058 <inHandlerMode>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d016      	beq.n	80074e4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80074b6:	f107 0308 	add.w	r3, r7, #8
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fbeb 	bl	8007c98 <xQueueGiveFromISR>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d001      	beq.n	80074cc <osMutexRelease+0x30>
      return osErrorOS;
 80074c8:	23ff      	movs	r3, #255	; 0xff
 80074ca:	e017      	b.n	80074fc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d013      	beq.n	80074fa <osMutexRelease+0x5e>
 80074d2:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <osMutexRelease+0x68>)
 80074d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	e00a      	b.n	80074fa <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80074e4:	2300      	movs	r3, #0
 80074e6:	2200      	movs	r2, #0
 80074e8:	2100      	movs	r1, #0
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fa46 	bl	800797c <xQueueGenericSend>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d001      	beq.n	80074fa <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80074f6:	23ff      	movs	r3, #255	; 0xff
 80074f8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80074fa:	68fb      	ldr	r3, [r7, #12]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	e000ed04 	.word	0xe000ed04

08007508 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f103 0208 	add.w	r2, r3, #8
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f04f 32ff 	mov.w	r2, #4294967295
 8007520:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f103 0208 	add.w	r2, r3, #8
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f103 0208 	add.w	r2, r3, #8
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007556:	bf00      	nop
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007562:	b480      	push	{r7}
 8007564:	b085      	sub	sp, #20
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	689a      	ldr	r2, [r3, #8]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	601a      	str	r2, [r3, #0]
}
 800759e:	bf00      	nop
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075aa:	b480      	push	{r7}
 80075ac:	b085      	sub	sp, #20
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c0:	d103      	bne.n	80075ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	e00c      	b.n	80075e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3308      	adds	r3, #8
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	e002      	b.n	80075d8 <vListInsert+0x2e>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d2f6      	bcs.n	80075d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	1c5a      	adds	r2, r3, #1
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	601a      	str	r2, [r3, #0]
}
 8007610:	bf00      	nop
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	6892      	ldr	r2, [r2, #8]
 8007632:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6852      	ldr	r2, [r2, #4]
 800763c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	429a      	cmp	r2, r3
 8007646:	d103      	bne.n	8007650 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	1e5a      	subs	r2, r3, #1
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d109      	bne.n	8007698 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	60bb      	str	r3, [r7, #8]
 8007696:	e7fe      	b.n	8007696 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007698:	f002 fe68 	bl	800a36c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a4:	68f9      	ldr	r1, [r7, #12]
 80076a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076a8:	fb01 f303 	mul.w	r3, r1, r3
 80076ac:	441a      	add	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c8:	3b01      	subs	r3, #1
 80076ca:	68f9      	ldr	r1, [r7, #12]
 80076cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076ce:	fb01 f303 	mul.w	r3, r1, r3
 80076d2:	441a      	add	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	22ff      	movs	r2, #255	; 0xff
 80076dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	22ff      	movs	r2, #255	; 0xff
 80076e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d114      	bne.n	8007718 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d01a      	beq.n	800772c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3310      	adds	r3, #16
 80076fa:	4618      	mov	r0, r3
 80076fc:	f001 fb7e 	bl	8008dfc <xTaskRemoveFromEventList>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d012      	beq.n	800772c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007706:	4b0d      	ldr	r3, [pc, #52]	; (800773c <xQueueGenericReset+0xcc>)
 8007708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800770c:	601a      	str	r2, [r3, #0]
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	e009      	b.n	800772c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3310      	adds	r3, #16
 800771c:	4618      	mov	r0, r3
 800771e:	f7ff fef3 	bl	8007508 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3324      	adds	r3, #36	; 0x24
 8007726:	4618      	mov	r0, r3
 8007728:	f7ff feee 	bl	8007508 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800772c:	f002 fe4c 	bl	800a3c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007730:	2301      	movs	r3, #1
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	e000ed04 	.word	0xe000ed04

08007740 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08e      	sub	sp, #56	; 0x38
 8007744:	af02      	add	r7, sp, #8
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d109      	bne.n	8007768 <xQueueGenericCreateStatic+0x28>
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	62bb      	str	r3, [r7, #40]	; 0x28
 8007766:	e7fe      	b.n	8007766 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d109      	bne.n	8007782 <xQueueGenericCreateStatic+0x42>
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	627b      	str	r3, [r7, #36]	; 0x24
 8007780:	e7fe      	b.n	8007780 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <xQueueGenericCreateStatic+0x4e>
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <xQueueGenericCreateStatic+0x52>
 800778e:	2301      	movs	r3, #1
 8007790:	e000      	b.n	8007794 <xQueueGenericCreateStatic+0x54>
 8007792:	2300      	movs	r3, #0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d109      	bne.n	80077ac <xQueueGenericCreateStatic+0x6c>
 8007798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779c:	f383 8811 	msr	BASEPRI, r3
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	623b      	str	r3, [r7, #32]
 80077aa:	e7fe      	b.n	80077aa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d102      	bne.n	80077b8 <xQueueGenericCreateStatic+0x78>
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <xQueueGenericCreateStatic+0x7c>
 80077b8:	2301      	movs	r3, #1
 80077ba:	e000      	b.n	80077be <xQueueGenericCreateStatic+0x7e>
 80077bc:	2300      	movs	r3, #0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d109      	bne.n	80077d6 <xQueueGenericCreateStatic+0x96>
 80077c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	61fb      	str	r3, [r7, #28]
 80077d4:	e7fe      	b.n	80077d4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80077d6:	2348      	movs	r3, #72	; 0x48
 80077d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2b48      	cmp	r3, #72	; 0x48
 80077de:	d009      	beq.n	80077f4 <xQueueGenericCreateStatic+0xb4>
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	61bb      	str	r3, [r7, #24]
 80077f2:	e7fe      	b.n	80077f2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80077f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80077fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00d      	beq.n	800781c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007808:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800780c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	4613      	mov	r3, r2
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f000 f844 	bl	80078a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800781c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800781e:	4618      	mov	r0, r3
 8007820:	3730      	adds	r7, #48	; 0x30
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007826:	b580      	push	{r7, lr}
 8007828:	b08a      	sub	sp, #40	; 0x28
 800782a:	af02      	add	r7, sp, #8
 800782c:	60f8      	str	r0, [r7, #12]
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	4613      	mov	r3, r2
 8007832:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d109      	bne.n	800784e <xQueueGenericCreate+0x28>
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	e7fe      	b.n	800784c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d102      	bne.n	800785a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007854:	2300      	movs	r3, #0
 8007856:	61fb      	str	r3, [r7, #28]
 8007858:	e004      	b.n	8007864 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	fb02 f303 	mul.w	r3, r2, r3
 8007862:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	3348      	adds	r3, #72	; 0x48
 8007868:	4618      	mov	r0, r3
 800786a:	f002 fe99 	bl	800a5a0 <pvPortMalloc>
 800786e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d011      	beq.n	800789a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	3348      	adds	r3, #72	; 0x48
 800787e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007888:	79fa      	ldrb	r2, [r7, #7]
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	4613      	mov	r3, r2
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	68b9      	ldr	r1, [r7, #8]
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 f805 	bl	80078a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800789a:	69bb      	ldr	r3, [r7, #24]
	}
 800789c:	4618      	mov	r0, r3
 800789e:	3720      	adds	r7, #32
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
 80078b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d103      	bne.n	80078c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	e002      	b.n	80078c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078d2:	2101      	movs	r1, #1
 80078d4:	69b8      	ldr	r0, [r7, #24]
 80078d6:	f7ff fecb 	bl	8007670 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80078da:	bf00      	nop
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b082      	sub	sp, #8
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00e      	beq.n	800790e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007902:	2300      	movs	r3, #0
 8007904:	2200      	movs	r2, #0
 8007906:	2100      	movs	r1, #0
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f837 	bl	800797c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800790e:	bf00      	nop
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007916:	b580      	push	{r7, lr}
 8007918:	b086      	sub	sp, #24
 800791a:	af00      	add	r7, sp, #0
 800791c:	4603      	mov	r3, r0
 800791e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007920:	2301      	movs	r3, #1
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	2300      	movs	r3, #0
 8007926:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007928:	79fb      	ldrb	r3, [r7, #7]
 800792a:	461a      	mov	r2, r3
 800792c:	6939      	ldr	r1, [r7, #16]
 800792e:	6978      	ldr	r0, [r7, #20]
 8007930:	f7ff ff79 	bl	8007826 <xQueueGenericCreate>
 8007934:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f7ff ffd3 	bl	80078e2 <prvInitialiseMutex>

		return xNewQueue;
 800793c:	68fb      	ldr	r3, [r7, #12]
	}
 800793e:	4618      	mov	r0, r3
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007946:	b580      	push	{r7, lr}
 8007948:	b088      	sub	sp, #32
 800794a:	af02      	add	r7, sp, #8
 800794c:	4603      	mov	r3, r0
 800794e:	6039      	str	r1, [r7, #0]
 8007950:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007952:	2301      	movs	r3, #1
 8007954:	617b      	str	r3, [r7, #20]
 8007956:	2300      	movs	r3, #0
 8007958:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800795a:	79fb      	ldrb	r3, [r7, #7]
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2200      	movs	r2, #0
 8007962:	6939      	ldr	r1, [r7, #16]
 8007964:	6978      	ldr	r0, [r7, #20]
 8007966:	f7ff feeb 	bl	8007740 <xQueueGenericCreateStatic>
 800796a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f7ff ffb8 	bl	80078e2 <prvInitialiseMutex>

		return xNewQueue;
 8007972:	68fb      	ldr	r3, [r7, #12]
	}
 8007974:	4618      	mov	r0, r3
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b08e      	sub	sp, #56	; 0x38
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
 8007988:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800798a:	2300      	movs	r3, #0
 800798c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	2b00      	cmp	r3, #0
 8007996:	d109      	bne.n	80079ac <xQueueGenericSend+0x30>
 8007998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80079aa:	e7fe      	b.n	80079aa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d103      	bne.n	80079ba <xQueueGenericSend+0x3e>
 80079b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <xQueueGenericSend+0x42>
 80079ba:	2301      	movs	r3, #1
 80079bc:	e000      	b.n	80079c0 <xQueueGenericSend+0x44>
 80079be:	2300      	movs	r3, #0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d109      	bne.n	80079d8 <xQueueGenericSend+0x5c>
 80079c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24
 80079d6:	e7fe      	b.n	80079d6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d103      	bne.n	80079e6 <xQueueGenericSend+0x6a>
 80079de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d101      	bne.n	80079ea <xQueueGenericSend+0x6e>
 80079e6:	2301      	movs	r3, #1
 80079e8:	e000      	b.n	80079ec <xQueueGenericSend+0x70>
 80079ea:	2300      	movs	r3, #0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d109      	bne.n	8007a04 <xQueueGenericSend+0x88>
 80079f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	623b      	str	r3, [r7, #32]
 8007a02:	e7fe      	b.n	8007a02 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a04:	f001 fbb0 	bl	8009168 <xTaskGetSchedulerState>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d102      	bne.n	8007a14 <xQueueGenericSend+0x98>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <xQueueGenericSend+0x9c>
 8007a14:	2301      	movs	r3, #1
 8007a16:	e000      	b.n	8007a1a <xQueueGenericSend+0x9e>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d109      	bne.n	8007a32 <xQueueGenericSend+0xb6>
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	61fb      	str	r3, [r7, #28]
 8007a30:	e7fe      	b.n	8007a30 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a32:	f002 fc9b 	bl	800a36c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d302      	bcc.n	8007a48 <xQueueGenericSend+0xcc>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d129      	bne.n	8007a9c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	68b9      	ldr	r1, [r7, #8]
 8007a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a4e:	f000 fc26 	bl	800829e <prvCopyDataToQueue>
 8007a52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d010      	beq.n	8007a7e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	3324      	adds	r3, #36	; 0x24
 8007a60:	4618      	mov	r0, r3
 8007a62:	f001 f9cb 	bl	8008dfc <xTaskRemoveFromEventList>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d013      	beq.n	8007a94 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a6c:	4b3f      	ldr	r3, [pc, #252]	; (8007b6c <xQueueGenericSend+0x1f0>)
 8007a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	e00a      	b.n	8007a94 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d007      	beq.n	8007a94 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a84:	4b39      	ldr	r3, [pc, #228]	; (8007b6c <xQueueGenericSend+0x1f0>)
 8007a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a94:	f002 fc98 	bl	800a3c8 <vPortExitCritical>
				return pdPASS;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e063      	b.n	8007b64 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d103      	bne.n	8007aaa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007aa2:	f002 fc91 	bl	800a3c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	e05c      	b.n	8007b64 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d106      	bne.n	8007abe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ab0:	f107 0314 	add.w	r3, r7, #20
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f001 fa03 	bl	8008ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007aba:	2301      	movs	r3, #1
 8007abc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007abe:	f002 fc83 	bl	800a3c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ac2:	f000 ff81 	bl	80089c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ac6:	f002 fc51 	bl	800a36c <vPortEnterCritical>
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ad0:	b25b      	sxtb	r3, r3
 8007ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad6:	d103      	bne.n	8007ae0 <xQueueGenericSend+0x164>
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ae6:	b25b      	sxtb	r3, r3
 8007ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aec:	d103      	bne.n	8007af6 <xQueueGenericSend+0x17a>
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007af6:	f002 fc67 	bl	800a3c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007afa:	1d3a      	adds	r2, r7, #4
 8007afc:	f107 0314 	add.w	r3, r7, #20
 8007b00:	4611      	mov	r1, r2
 8007b02:	4618      	mov	r0, r3
 8007b04:	f001 f9f2 	bl	8008eec <xTaskCheckForTimeOut>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d124      	bne.n	8007b58 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b10:	f000 fcbd 	bl	800848e <prvIsQueueFull>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d018      	beq.n	8007b4c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	3310      	adds	r3, #16
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	4611      	mov	r1, r2
 8007b22:	4618      	mov	r0, r3
 8007b24:	f001 f91c 	bl	8008d60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b2a:	f000 fc48 	bl	80083be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b2e:	f000 ff59 	bl	80089e4 <xTaskResumeAll>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f47f af7c 	bne.w	8007a32 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007b3a:	4b0c      	ldr	r3, [pc, #48]	; (8007b6c <xQueueGenericSend+0x1f0>)
 8007b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	e772      	b.n	8007a32 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b4e:	f000 fc36 	bl	80083be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b52:	f000 ff47 	bl	80089e4 <xTaskResumeAll>
 8007b56:	e76c      	b.n	8007a32 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b5a:	f000 fc30 	bl	80083be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b5e:	f000 ff41 	bl	80089e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3738      	adds	r7, #56	; 0x38
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	e000ed04 	.word	0xe000ed04

08007b70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b08e      	sub	sp, #56	; 0x38
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
 8007b7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d109      	bne.n	8007b9c <xQueueGenericSendFromISR+0x2c>
 8007b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24
 8007b9a:	e7fe      	b.n	8007b9a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d103      	bne.n	8007baa <xQueueGenericSendFromISR+0x3a>
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <xQueueGenericSendFromISR+0x3e>
 8007baa:	2301      	movs	r3, #1
 8007bac:	e000      	b.n	8007bb0 <xQueueGenericSendFromISR+0x40>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d109      	bne.n	8007bc8 <xQueueGenericSendFromISR+0x58>
 8007bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	623b      	str	r3, [r7, #32]
 8007bc6:	e7fe      	b.n	8007bc6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d103      	bne.n	8007bd6 <xQueueGenericSendFromISR+0x66>
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d101      	bne.n	8007bda <xQueueGenericSendFromISR+0x6a>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e000      	b.n	8007bdc <xQueueGenericSendFromISR+0x6c>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d109      	bne.n	8007bf4 <xQueueGenericSendFromISR+0x84>
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	61fb      	str	r3, [r7, #28]
 8007bf2:	e7fe      	b.n	8007bf2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bf4:	f002 fc96 	bl	800a524 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007bf8:	f3ef 8211 	mrs	r2, BASEPRI
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	61ba      	str	r2, [r7, #24]
 8007c0e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007c10:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c12:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d302      	bcc.n	8007c26 <xQueueGenericSendFromISR+0xb6>
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d12c      	bne.n	8007c80 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	68b9      	ldr	r1, [r7, #8]
 8007c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c36:	f000 fb32 	bl	800829e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c3a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c42:	d112      	bne.n	8007c6a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d016      	beq.n	8007c7a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4e:	3324      	adds	r3, #36	; 0x24
 8007c50:	4618      	mov	r0, r3
 8007c52:	f001 f8d3 	bl	8008dfc <xTaskRemoveFromEventList>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00e      	beq.n	8007c7a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00b      	beq.n	8007c7a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	e007      	b.n	8007c7a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c6e:	3301      	adds	r3, #1
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	b25a      	sxtb	r2, r3
 8007c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007c7e:	e001      	b.n	8007c84 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c80:	2300      	movs	r3, #0
 8007c82:	637b      	str	r3, [r7, #52]	; 0x34
 8007c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c86:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3738      	adds	r7, #56	; 0x38
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08e      	sub	sp, #56	; 0x38
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d109      	bne.n	8007cc0 <xQueueGiveFromISR+0x28>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	623b      	str	r3, [r7, #32]
 8007cbe:	e7fe      	b.n	8007cbe <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d009      	beq.n	8007cdc <xQueueGiveFromISR+0x44>
 8007cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	61fb      	str	r3, [r7, #28]
 8007cda:	e7fe      	b.n	8007cda <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d103      	bne.n	8007cec <xQueueGiveFromISR+0x54>
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <xQueueGiveFromISR+0x58>
 8007cec:	2301      	movs	r3, #1
 8007cee:	e000      	b.n	8007cf2 <xQueueGiveFromISR+0x5a>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d109      	bne.n	8007d0a <xQueueGiveFromISR+0x72>
 8007cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	61bb      	str	r3, [r7, #24]
 8007d08:	e7fe      	b.n	8007d08 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d0a:	f002 fc0b 	bl	800a524 <vPortValidateInterruptPriority>
	__asm volatile
 8007d0e:	f3ef 8211 	mrs	r2, BASEPRI
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	617a      	str	r2, [r7, #20]
 8007d24:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007d26:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d22b      	bcs.n	8007d92 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d54:	d112      	bne.n	8007d7c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d016      	beq.n	8007d8c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	3324      	adds	r3, #36	; 0x24
 8007d62:	4618      	mov	r0, r3
 8007d64:	f001 f84a 	bl	8008dfc <xTaskRemoveFromEventList>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00e      	beq.n	8007d8c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00b      	beq.n	8007d8c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2201      	movs	r2, #1
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	e007      	b.n	8007d8c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d80:	3301      	adds	r3, #1
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	b25a      	sxtb	r2, r3
 8007d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d90:	e001      	b.n	8007d96 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d92:	2300      	movs	r3, #0
 8007d94:	637b      	str	r3, [r7, #52]	; 0x34
 8007d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d98:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3738      	adds	r7, #56	; 0x38
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08c      	sub	sp, #48	; 0x30
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007db8:	2300      	movs	r3, #0
 8007dba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d109      	bne.n	8007dda <xQueueReceive+0x2e>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	623b      	str	r3, [r7, #32]
 8007dd8:	e7fe      	b.n	8007dd8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d103      	bne.n	8007de8 <xQueueReceive+0x3c>
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <xQueueReceive+0x40>
 8007de8:	2301      	movs	r3, #1
 8007dea:	e000      	b.n	8007dee <xQueueReceive+0x42>
 8007dec:	2300      	movs	r3, #0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d109      	bne.n	8007e06 <xQueueReceive+0x5a>
 8007df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	61fb      	str	r3, [r7, #28]
 8007e04:	e7fe      	b.n	8007e04 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e06:	f001 f9af 	bl	8009168 <xTaskGetSchedulerState>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d102      	bne.n	8007e16 <xQueueReceive+0x6a>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <xQueueReceive+0x6e>
 8007e16:	2301      	movs	r3, #1
 8007e18:	e000      	b.n	8007e1c <xQueueReceive+0x70>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d109      	bne.n	8007e34 <xQueueReceive+0x88>
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	61bb      	str	r3, [r7, #24]
 8007e32:	e7fe      	b.n	8007e32 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e34:	f002 fa9a 	bl	800a36c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d01f      	beq.n	8007e84 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e44:	68b9      	ldr	r1, [r7, #8]
 8007e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e48:	f000 fa93 	bl	8008372 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	1e5a      	subs	r2, r3, #1
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00f      	beq.n	8007e7c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	3310      	adds	r3, #16
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 ffcb 	bl	8008dfc <xTaskRemoveFromEventList>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d007      	beq.n	8007e7c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e6c:	4b3c      	ldr	r3, [pc, #240]	; (8007f60 <xQueueReceive+0x1b4>)
 8007e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e7c:	f002 faa4 	bl	800a3c8 <vPortExitCritical>
				return pdPASS;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e069      	b.n	8007f58 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d103      	bne.n	8007e92 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e8a:	f002 fa9d 	bl	800a3c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	e062      	b.n	8007f58 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d106      	bne.n	8007ea6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e98:	f107 0310 	add.w	r3, r7, #16
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f001 f80f 	bl	8008ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ea6:	f002 fa8f 	bl	800a3c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007eaa:	f000 fd8d 	bl	80089c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007eae:	f002 fa5d 	bl	800a36c <vPortEnterCritical>
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007eb8:	b25b      	sxtb	r3, r3
 8007eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ebe:	d103      	bne.n	8007ec8 <xQueueReceive+0x11c>
 8007ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ece:	b25b      	sxtb	r3, r3
 8007ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed4:	d103      	bne.n	8007ede <xQueueReceive+0x132>
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ede:	f002 fa73 	bl	800a3c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ee2:	1d3a      	adds	r2, r7, #4
 8007ee4:	f107 0310 	add.w	r3, r7, #16
 8007ee8:	4611      	mov	r1, r2
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fffe 	bl	8008eec <xTaskCheckForTimeOut>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d123      	bne.n	8007f3e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ef8:	f000 fab3 	bl	8008462 <prvIsQueueEmpty>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d017      	beq.n	8007f32 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f04:	3324      	adds	r3, #36	; 0x24
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	4611      	mov	r1, r2
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 ff28 	bl	8008d60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f12:	f000 fa54 	bl	80083be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f16:	f000 fd65 	bl	80089e4 <xTaskResumeAll>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d189      	bne.n	8007e34 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007f20:	4b0f      	ldr	r3, [pc, #60]	; (8007f60 <xQueueReceive+0x1b4>)
 8007f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f26:	601a      	str	r2, [r3, #0]
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	e780      	b.n	8007e34 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f34:	f000 fa43 	bl	80083be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f38:	f000 fd54 	bl	80089e4 <xTaskResumeAll>
 8007f3c:	e77a      	b.n	8007e34 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f40:	f000 fa3d 	bl	80083be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f44:	f000 fd4e 	bl	80089e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f4a:	f000 fa8a 	bl	8008462 <prvIsQueueEmpty>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f43f af6f 	beq.w	8007e34 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3730      	adds	r7, #48	; 0x30
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	e000ed04 	.word	0xe000ed04

08007f64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b08e      	sub	sp, #56	; 0x38
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007f76:	2300      	movs	r3, #0
 8007f78:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d109      	bne.n	8007f94 <xQueueSemaphoreTake+0x30>
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	623b      	str	r3, [r7, #32]
 8007f92:	e7fe      	b.n	8007f92 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d009      	beq.n	8007fb0 <xQueueSemaphoreTake+0x4c>
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	61fb      	str	r3, [r7, #28]
 8007fae:	e7fe      	b.n	8007fae <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fb0:	f001 f8da 	bl	8009168 <xTaskGetSchedulerState>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d102      	bne.n	8007fc0 <xQueueSemaphoreTake+0x5c>
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <xQueueSemaphoreTake+0x60>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e000      	b.n	8007fc6 <xQueueSemaphoreTake+0x62>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d109      	bne.n	8007fde <xQueueSemaphoreTake+0x7a>
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	61bb      	str	r3, [r7, #24]
 8007fdc:	e7fe      	b.n	8007fdc <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fde:	f002 f9c5 	bl	800a36c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d024      	beq.n	8008038 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff0:	1e5a      	subs	r2, r3, #1
 8007ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d104      	bne.n	8008008 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007ffe:	f001 fa6d 	bl	80094dc <pvTaskIncrementMutexHeldCount>
 8008002:	4602      	mov	r2, r0
 8008004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008006:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00f      	beq.n	8008030 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008012:	3310      	adds	r3, #16
 8008014:	4618      	mov	r0, r3
 8008016:	f000 fef1 	bl	8008dfc <xTaskRemoveFromEventList>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d007      	beq.n	8008030 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008020:	4b53      	ldr	r3, [pc, #332]	; (8008170 <xQueueSemaphoreTake+0x20c>)
 8008022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008026:	601a      	str	r2, [r3, #0]
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008030:	f002 f9ca 	bl	800a3c8 <vPortExitCritical>
				return pdPASS;
 8008034:	2301      	movs	r3, #1
 8008036:	e096      	b.n	8008166 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d110      	bne.n	8008060 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	2b00      	cmp	r3, #0
 8008042:	d009      	beq.n	8008058 <xQueueSemaphoreTake+0xf4>
 8008044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	617b      	str	r3, [r7, #20]
 8008056:	e7fe      	b.n	8008056 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008058:	f002 f9b6 	bl	800a3c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800805c:	2300      	movs	r3, #0
 800805e:	e082      	b.n	8008166 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008062:	2b00      	cmp	r3, #0
 8008064:	d106      	bne.n	8008074 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008066:	f107 030c 	add.w	r3, r7, #12
 800806a:	4618      	mov	r0, r3
 800806c:	f000 ff28 	bl	8008ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008070:	2301      	movs	r3, #1
 8008072:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008074:	f002 f9a8 	bl	800a3c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008078:	f000 fca6 	bl	80089c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800807c:	f002 f976 	bl	800a36c <vPortEnterCritical>
 8008080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008082:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008086:	b25b      	sxtb	r3, r3
 8008088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808c:	d103      	bne.n	8008096 <xQueueSemaphoreTake+0x132>
 800808e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008098:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800809c:	b25b      	sxtb	r3, r3
 800809e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a2:	d103      	bne.n	80080ac <xQueueSemaphoreTake+0x148>
 80080a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080ac:	f002 f98c 	bl	800a3c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080b0:	463a      	mov	r2, r7
 80080b2:	f107 030c 	add.w	r3, r7, #12
 80080b6:	4611      	mov	r1, r2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 ff17 	bl	8008eec <xTaskCheckForTimeOut>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d132      	bne.n	800812a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080c6:	f000 f9cc 	bl	8008462 <prvIsQueueEmpty>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d026      	beq.n	800811e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d109      	bne.n	80080ec <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80080d8:	f002 f948 	bl	800a36c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f001 f85f 	bl	80091a4 <xTaskPriorityInherit>
 80080e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80080e8:	f002 f96e 	bl	800a3c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ee:	3324      	adds	r3, #36	; 0x24
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	4611      	mov	r1, r2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 fe33 	bl	8008d60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080fc:	f000 f95f 	bl	80083be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008100:	f000 fc70 	bl	80089e4 <xTaskResumeAll>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	f47f af69 	bne.w	8007fde <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800810c:	4b18      	ldr	r3, [pc, #96]	; (8008170 <xQueueSemaphoreTake+0x20c>)
 800810e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	e75f      	b.n	8007fde <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800811e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008120:	f000 f94d 	bl	80083be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008124:	f000 fc5e 	bl	80089e4 <xTaskResumeAll>
 8008128:	e759      	b.n	8007fde <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800812a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800812c:	f000 f947 	bl	80083be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008130:	f000 fc58 	bl	80089e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008134:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008136:	f000 f994 	bl	8008462 <prvIsQueueEmpty>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	f43f af4e 	beq.w	8007fde <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00d      	beq.n	8008164 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008148:	f002 f910 	bl	800a36c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800814c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800814e:	f000 f88e 	bl	800826e <prvGetDisinheritPriorityAfterTimeout>
 8008152:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800815a:	4618      	mov	r0, r3
 800815c:	f001 f926 	bl	80093ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008160:	f002 f932 	bl	800a3c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008164:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008166:	4618      	mov	r0, r3
 8008168:	3738      	adds	r7, #56	; 0x38
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	e000ed04 	.word	0xe000ed04

08008174 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b08e      	sub	sp, #56	; 0x38
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008186:	2b00      	cmp	r3, #0
 8008188:	d109      	bne.n	800819e <xQueueReceiveFromISR+0x2a>
 800818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	623b      	str	r3, [r7, #32]
 800819c:	e7fe      	b.n	800819c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d103      	bne.n	80081ac <xQueueReceiveFromISR+0x38>
 80081a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d101      	bne.n	80081b0 <xQueueReceiveFromISR+0x3c>
 80081ac:	2301      	movs	r3, #1
 80081ae:	e000      	b.n	80081b2 <xQueueReceiveFromISR+0x3e>
 80081b0:	2300      	movs	r3, #0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d109      	bne.n	80081ca <xQueueReceiveFromISR+0x56>
 80081b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	61fb      	str	r3, [r7, #28]
 80081c8:	e7fe      	b.n	80081c8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081ca:	f002 f9ab 	bl	800a524 <vPortValidateInterruptPriority>
	__asm volatile
 80081ce:	f3ef 8211 	mrs	r2, BASEPRI
 80081d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	61ba      	str	r2, [r7, #24]
 80081e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80081e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d02f      	beq.n	8008256 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008200:	68b9      	ldr	r1, [r7, #8]
 8008202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008204:	f000 f8b5 	bl	8008372 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820a:	1e5a      	subs	r2, r3, #1
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008210:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008218:	d112      	bne.n	8008240 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800821a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d016      	beq.n	8008250 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	3310      	adds	r3, #16
 8008226:	4618      	mov	r0, r3
 8008228:	f000 fde8 	bl	8008dfc <xTaskRemoveFromEventList>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00e      	beq.n	8008250 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00b      	beq.n	8008250 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	e007      	b.n	8008250 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008244:	3301      	adds	r3, #1
 8008246:	b2db      	uxtb	r3, r3
 8008248:	b25a      	sxtb	r2, r3
 800824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008250:	2301      	movs	r3, #1
 8008252:	637b      	str	r3, [r7, #52]	; 0x34
 8008254:	e001      	b.n	800825a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8008256:	2300      	movs	r3, #0
 8008258:	637b      	str	r3, [r7, #52]	; 0x34
 800825a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008266:	4618      	mov	r0, r3
 8008268:	3738      	adds	r7, #56	; 0x38
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800826e:	b480      	push	{r7}
 8008270:	b085      	sub	sp, #20
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827a:	2b00      	cmp	r3, #0
 800827c:	d006      	beq.n	800828c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f1c3 0307 	rsb	r3, r3, #7
 8008288:	60fb      	str	r3, [r7, #12]
 800828a:	e001      	b.n	8008290 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800828c:	2300      	movs	r3, #0
 800828e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008290:	68fb      	ldr	r3, [r7, #12]
	}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b086      	sub	sp, #24
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	60b9      	str	r1, [r7, #8]
 80082a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80082aa:	2300      	movs	r3, #0
 80082ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10d      	bne.n	80082d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d14d      	bne.n	8008360 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 ffeb 	bl	80092a4 <xTaskPriorityDisinherit>
 80082ce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	609a      	str	r2, [r3, #8]
 80082d6:	e043      	b.n	8008360 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d119      	bne.n	8008312 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6858      	ldr	r0, [r3, #4]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	461a      	mov	r2, r3
 80082e8:	68b9      	ldr	r1, [r7, #8]
 80082ea:	f004 fb89 	bl	800ca00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	685a      	ldr	r2, [r3, #4]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	441a      	add	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	429a      	cmp	r2, r3
 8008306:	d32b      	bcc.n	8008360 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	605a      	str	r2, [r3, #4]
 8008310:	e026      	b.n	8008360 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	68d8      	ldr	r0, [r3, #12]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831a:	461a      	mov	r2, r3
 800831c:	68b9      	ldr	r1, [r7, #8]
 800831e:	f004 fb6f 	bl	800ca00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	68da      	ldr	r2, [r3, #12]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832a:	425b      	negs	r3, r3
 800832c:	441a      	add	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	68da      	ldr	r2, [r3, #12]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	429a      	cmp	r2, r3
 800833c:	d207      	bcs.n	800834e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	689a      	ldr	r2, [r3, #8]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008346:	425b      	negs	r3, r3
 8008348:	441a      	add	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b02      	cmp	r3, #2
 8008352:	d105      	bne.n	8008360 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d002      	beq.n	8008360 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	3b01      	subs	r3, #1
 800835e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	1c5a      	adds	r2, r3, #1
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008368:	697b      	ldr	r3, [r7, #20]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3718      	adds	r7, #24
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b082      	sub	sp, #8
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008380:	2b00      	cmp	r3, #0
 8008382:	d018      	beq.n	80083b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68da      	ldr	r2, [r3, #12]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838c:	441a      	add	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68da      	ldr	r2, [r3, #12]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	429a      	cmp	r2, r3
 800839c:	d303      	bcc.n	80083a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68d9      	ldr	r1, [r3, #12]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ae:	461a      	mov	r2, r3
 80083b0:	6838      	ldr	r0, [r7, #0]
 80083b2:	f004 fb25 	bl	800ca00 <memcpy>
	}
}
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80083c6:	f001 ffd1 	bl	800a36c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083d2:	e011      	b.n	80083f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d012      	beq.n	8008402 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3324      	adds	r3, #36	; 0x24
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 fd0b 	bl	8008dfc <xTaskRemoveFromEventList>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d001      	beq.n	80083f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80083ec:	f000 fdde 	bl	8008fac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	3b01      	subs	r3, #1
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	dce9      	bgt.n	80083d4 <prvUnlockQueue+0x16>
 8008400:	e000      	b.n	8008404 <prvUnlockQueue+0x46>
					break;
 8008402:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	22ff      	movs	r2, #255	; 0xff
 8008408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800840c:	f001 ffdc 	bl	800a3c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008410:	f001 ffac 	bl	800a36c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800841a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800841c:	e011      	b.n	8008442 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d012      	beq.n	800844c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	3310      	adds	r3, #16
 800842a:	4618      	mov	r0, r3
 800842c:	f000 fce6 	bl	8008dfc <xTaskRemoveFromEventList>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008436:	f000 fdb9 	bl	8008fac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	3b01      	subs	r3, #1
 800843e:	b2db      	uxtb	r3, r3
 8008440:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008446:	2b00      	cmp	r3, #0
 8008448:	dce9      	bgt.n	800841e <prvUnlockQueue+0x60>
 800844a:	e000      	b.n	800844e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800844c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	22ff      	movs	r2, #255	; 0xff
 8008452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008456:	f001 ffb7 	bl	800a3c8 <vPortExitCritical>
}
 800845a:	bf00      	nop
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b084      	sub	sp, #16
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800846a:	f001 ff7f 	bl	800a36c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008472:	2b00      	cmp	r3, #0
 8008474:	d102      	bne.n	800847c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008476:	2301      	movs	r3, #1
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	e001      	b.n	8008480 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800847c:	2300      	movs	r3, #0
 800847e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008480:	f001 ffa2 	bl	800a3c8 <vPortExitCritical>

	return xReturn;
 8008484:	68fb      	ldr	r3, [r7, #12]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008496:	f001 ff69 	bl	800a36c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d102      	bne.n	80084ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80084a6:	2301      	movs	r3, #1
 80084a8:	60fb      	str	r3, [r7, #12]
 80084aa:	e001      	b.n	80084b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084b0:	f001 ff8a 	bl	800a3c8 <vPortExitCritical>

	return xReturn;
 80084b4:	68fb      	ldr	r3, [r7, #12]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084ca:	2300      	movs	r3, #0
 80084cc:	60fb      	str	r3, [r7, #12]
 80084ce:	e014      	b.n	80084fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80084d0:	4a0e      	ldr	r2, [pc, #56]	; (800850c <vQueueAddToRegistry+0x4c>)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10b      	bne.n	80084f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80084dc:	490b      	ldr	r1, [pc, #44]	; (800850c <vQueueAddToRegistry+0x4c>)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	683a      	ldr	r2, [r7, #0]
 80084e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80084e6:	4a09      	ldr	r2, [pc, #36]	; (800850c <vQueueAddToRegistry+0x4c>)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	4413      	add	r3, r2
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80084f2:	e005      	b.n	8008500 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	3301      	adds	r3, #1
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b07      	cmp	r3, #7
 80084fe:	d9e7      	bls.n	80084d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008500:	bf00      	nop
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	200015f0 	.word	0x200015f0

08008510 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008520:	f001 ff24 	bl	800a36c <vPortEnterCritical>
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800852a:	b25b      	sxtb	r3, r3
 800852c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008530:	d103      	bne.n	800853a <vQueueWaitForMessageRestricted+0x2a>
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008540:	b25b      	sxtb	r3, r3
 8008542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008546:	d103      	bne.n	8008550 <vQueueWaitForMessageRestricted+0x40>
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008550:	f001 ff3a 	bl	800a3c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008558:	2b00      	cmp	r3, #0
 800855a:	d106      	bne.n	800856a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	3324      	adds	r3, #36	; 0x24
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	68b9      	ldr	r1, [r7, #8]
 8008564:	4618      	mov	r0, r3
 8008566:	f000 fc1f 	bl	8008da8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800856a:	6978      	ldr	r0, [r7, #20]
 800856c:	f7ff ff27 	bl	80083be <prvUnlockQueue>
	}
 8008570:	bf00      	nop
 8008572:	3718      	adds	r7, #24
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008578:	b580      	push	{r7, lr}
 800857a:	b08e      	sub	sp, #56	; 0x38
 800857c:	af04      	add	r7, sp, #16
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008588:	2b00      	cmp	r3, #0
 800858a:	d109      	bne.n	80085a0 <xTaskCreateStatic+0x28>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	623b      	str	r3, [r7, #32]
 800859e:	e7fe      	b.n	800859e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d109      	bne.n	80085ba <xTaskCreateStatic+0x42>
 80085a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	61fb      	str	r3, [r7, #28]
 80085b8:	e7fe      	b.n	80085b8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80085ba:	2354      	movs	r3, #84	; 0x54
 80085bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	2b54      	cmp	r3, #84	; 0x54
 80085c2:	d009      	beq.n	80085d8 <xTaskCreateStatic+0x60>
 80085c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	61bb      	str	r3, [r7, #24]
 80085d6:	e7fe      	b.n	80085d6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80085d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d01e      	beq.n	800861e <xTaskCreateStatic+0xa6>
 80085e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d01b      	beq.n	800861e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	2202      	movs	r2, #2
 80085f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085f8:	2300      	movs	r3, #0
 80085fa:	9303      	str	r3, [sp, #12]
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	9302      	str	r3, [sp, #8]
 8008600:	f107 0314 	add.w	r3, r7, #20
 8008604:	9301      	str	r3, [sp, #4]
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	68b9      	ldr	r1, [r7, #8]
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f000 f850 	bl	80086b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008618:	f000 f8d4 	bl	80087c4 <prvAddNewTaskToReadyList>
 800861c:	e001      	b.n	8008622 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800861e:	2300      	movs	r3, #0
 8008620:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008622:	697b      	ldr	r3, [r7, #20]
	}
 8008624:	4618      	mov	r0, r3
 8008626:	3728      	adds	r7, #40	; 0x28
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800862c:	b580      	push	{r7, lr}
 800862e:	b08c      	sub	sp, #48	; 0x30
 8008630:	af04      	add	r7, sp, #16
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	603b      	str	r3, [r7, #0]
 8008638:	4613      	mov	r3, r2
 800863a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800863c:	88fb      	ldrh	r3, [r7, #6]
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4618      	mov	r0, r3
 8008642:	f001 ffad 	bl	800a5a0 <pvPortMalloc>
 8008646:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00e      	beq.n	800866c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800864e:	2054      	movs	r0, #84	; 0x54
 8008650:	f001 ffa6 	bl	800a5a0 <pvPortMalloc>
 8008654:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d003      	beq.n	8008664 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	631a      	str	r2, [r3, #48]	; 0x30
 8008662:	e005      	b.n	8008670 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008664:	6978      	ldr	r0, [r7, #20]
 8008666:	f002 f85d 	bl	800a724 <vPortFree>
 800866a:	e001      	b.n	8008670 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800866c:	2300      	movs	r3, #0
 800866e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d017      	beq.n	80086a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800867e:	88fa      	ldrh	r2, [r7, #6]
 8008680:	2300      	movs	r3, #0
 8008682:	9303      	str	r3, [sp, #12]
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	9302      	str	r3, [sp, #8]
 8008688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868a:	9301      	str	r3, [sp, #4]
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	68b9      	ldr	r1, [r7, #8]
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 f80e 	bl	80086b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800869a:	69f8      	ldr	r0, [r7, #28]
 800869c:	f000 f892 	bl	80087c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80086a0:	2301      	movs	r3, #1
 80086a2:	61bb      	str	r3, [r7, #24]
 80086a4:	e002      	b.n	80086ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80086a6:	f04f 33ff 	mov.w	r3, #4294967295
 80086aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80086ac:	69bb      	ldr	r3, [r7, #24]
	}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3720      	adds	r7, #32
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b088      	sub	sp, #32
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	60b9      	str	r1, [r7, #8]
 80086c0:	607a      	str	r2, [r7, #4]
 80086c2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80086c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80086ce:	3b01      	subs	r3, #1
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	f023 0307 	bic.w	r3, r3, #7
 80086dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	f003 0307 	and.w	r3, r3, #7
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d009      	beq.n	80086fc <prvInitialiseNewTask+0x46>
 80086e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ec:	f383 8811 	msr	BASEPRI, r3
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	617b      	str	r3, [r7, #20]
 80086fa:	e7fe      	b.n	80086fa <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d01f      	beq.n	8008742 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008702:	2300      	movs	r3, #0
 8008704:	61fb      	str	r3, [r7, #28]
 8008706:	e012      	b.n	800872e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	4413      	add	r3, r2
 800870e:	7819      	ldrb	r1, [r3, #0]
 8008710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	4413      	add	r3, r2
 8008716:	3334      	adds	r3, #52	; 0x34
 8008718:	460a      	mov	r2, r1
 800871a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	4413      	add	r3, r2
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d006      	beq.n	8008736 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	3301      	adds	r3, #1
 800872c:	61fb      	str	r3, [r7, #28]
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	2b0f      	cmp	r3, #15
 8008732:	d9e9      	bls.n	8008708 <prvInitialiseNewTask+0x52>
 8008734:	e000      	b.n	8008738 <prvInitialiseNewTask+0x82>
			{
				break;
 8008736:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873a:	2200      	movs	r2, #0
 800873c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008740:	e003      	b.n	800874a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800874a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874c:	2b06      	cmp	r3, #6
 800874e:	d901      	bls.n	8008754 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008750:	2306      	movs	r3, #6
 8008752:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008758:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800875a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800875e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008762:	2200      	movs	r2, #0
 8008764:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008768:	3304      	adds	r3, #4
 800876a:	4618      	mov	r0, r3
 800876c:	f7fe feec 	bl	8007548 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008772:	3318      	adds	r3, #24
 8008774:	4618      	mov	r0, r3
 8008776:	f7fe fee7 	bl	8007548 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800877a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800877e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008782:	f1c3 0207 	rsb	r2, r3, #7
 8008786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008788:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800878e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008792:	2200      	movs	r2, #0
 8008794:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800879e:	683a      	ldr	r2, [r7, #0]
 80087a0:	68f9      	ldr	r1, [r7, #12]
 80087a2:	69b8      	ldr	r0, [r7, #24]
 80087a4:	f001 fcbe 	bl	800a124 <pxPortInitialiseStack>
 80087a8:	4602      	mov	r2, r0
 80087aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80087b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087ba:	bf00      	nop
 80087bc:	3720      	adds	r7, #32
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
	...

080087c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80087cc:	f001 fdce 	bl	800a36c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80087d0:	4b2a      	ldr	r3, [pc, #168]	; (800887c <prvAddNewTaskToReadyList+0xb8>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3301      	adds	r3, #1
 80087d6:	4a29      	ldr	r2, [pc, #164]	; (800887c <prvAddNewTaskToReadyList+0xb8>)
 80087d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80087da:	4b29      	ldr	r3, [pc, #164]	; (8008880 <prvAddNewTaskToReadyList+0xbc>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d109      	bne.n	80087f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80087e2:	4a27      	ldr	r2, [pc, #156]	; (8008880 <prvAddNewTaskToReadyList+0xbc>)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80087e8:	4b24      	ldr	r3, [pc, #144]	; (800887c <prvAddNewTaskToReadyList+0xb8>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d110      	bne.n	8008812 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80087f0:	f000 fc00 	bl	8008ff4 <prvInitialiseTaskLists>
 80087f4:	e00d      	b.n	8008812 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80087f6:	4b23      	ldr	r3, [pc, #140]	; (8008884 <prvAddNewTaskToReadyList+0xc0>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d109      	bne.n	8008812 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80087fe:	4b20      	ldr	r3, [pc, #128]	; (8008880 <prvAddNewTaskToReadyList+0xbc>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008808:	429a      	cmp	r2, r3
 800880a:	d802      	bhi.n	8008812 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800880c:	4a1c      	ldr	r2, [pc, #112]	; (8008880 <prvAddNewTaskToReadyList+0xbc>)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008812:	4b1d      	ldr	r3, [pc, #116]	; (8008888 <prvAddNewTaskToReadyList+0xc4>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3301      	adds	r3, #1
 8008818:	4a1b      	ldr	r2, [pc, #108]	; (8008888 <prvAddNewTaskToReadyList+0xc4>)
 800881a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008820:	2201      	movs	r2, #1
 8008822:	409a      	lsls	r2, r3
 8008824:	4b19      	ldr	r3, [pc, #100]	; (800888c <prvAddNewTaskToReadyList+0xc8>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4313      	orrs	r3, r2
 800882a:	4a18      	ldr	r2, [pc, #96]	; (800888c <prvAddNewTaskToReadyList+0xc8>)
 800882c:	6013      	str	r3, [r2, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008832:	4613      	mov	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4a15      	ldr	r2, [pc, #84]	; (8008890 <prvAddNewTaskToReadyList+0xcc>)
 800883c:	441a      	add	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	3304      	adds	r3, #4
 8008842:	4619      	mov	r1, r3
 8008844:	4610      	mov	r0, r2
 8008846:	f7fe fe8c 	bl	8007562 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800884a:	f001 fdbd 	bl	800a3c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800884e:	4b0d      	ldr	r3, [pc, #52]	; (8008884 <prvAddNewTaskToReadyList+0xc0>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00e      	beq.n	8008874 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008856:	4b0a      	ldr	r3, [pc, #40]	; (8008880 <prvAddNewTaskToReadyList+0xbc>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008860:	429a      	cmp	r2, r3
 8008862:	d207      	bcs.n	8008874 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008864:	4b0b      	ldr	r3, [pc, #44]	; (8008894 <prvAddNewTaskToReadyList+0xd0>)
 8008866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008874:	bf00      	nop
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	20000220 	.word	0x20000220
 8008880:	20000120 	.word	0x20000120
 8008884:	2000022c 	.word	0x2000022c
 8008888:	2000023c 	.word	0x2000023c
 800888c:	20000228 	.word	0x20000228
 8008890:	20000124 	.word	0x20000124
 8008894:	e000ed04 	.word	0xe000ed04

08008898 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80088a0:	2300      	movs	r3, #0
 80088a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d016      	beq.n	80088d8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80088aa:	4b13      	ldr	r3, [pc, #76]	; (80088f8 <vTaskDelay+0x60>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d009      	beq.n	80088c6 <vTaskDelay+0x2e>
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	60bb      	str	r3, [r7, #8]
 80088c4:	e7fe      	b.n	80088c4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80088c6:	f000 f87f 	bl	80089c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088ca:	2100      	movs	r1, #0
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fffd 	bl	80098cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80088d2:	f000 f887 	bl	80089e4 <xTaskResumeAll>
 80088d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d107      	bne.n	80088ee <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80088de:	4b07      	ldr	r3, [pc, #28]	; (80088fc <vTaskDelay+0x64>)
 80088e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088ee:	bf00      	nop
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20000248 	.word	0x20000248
 80088fc:	e000ed04 	.word	0xe000ed04

08008900 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08a      	sub	sp, #40	; 0x28
 8008904:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008906:	2300      	movs	r3, #0
 8008908:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800890a:	2300      	movs	r3, #0
 800890c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800890e:	463a      	mov	r2, r7
 8008910:	1d39      	adds	r1, r7, #4
 8008912:	f107 0308 	add.w	r3, r7, #8
 8008916:	4618      	mov	r0, r3
 8008918:	f002 f818 	bl	800a94c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	9202      	str	r2, [sp, #8]
 8008924:	9301      	str	r3, [sp, #4]
 8008926:	2300      	movs	r3, #0
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	2300      	movs	r3, #0
 800892c:	460a      	mov	r2, r1
 800892e:	4920      	ldr	r1, [pc, #128]	; (80089b0 <vTaskStartScheduler+0xb0>)
 8008930:	4820      	ldr	r0, [pc, #128]	; (80089b4 <vTaskStartScheduler+0xb4>)
 8008932:	f7ff fe21 	bl	8008578 <xTaskCreateStatic>
 8008936:	4602      	mov	r2, r0
 8008938:	4b1f      	ldr	r3, [pc, #124]	; (80089b8 <vTaskStartScheduler+0xb8>)
 800893a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800893c:	4b1e      	ldr	r3, [pc, #120]	; (80089b8 <vTaskStartScheduler+0xb8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008944:	2301      	movs	r3, #1
 8008946:	617b      	str	r3, [r7, #20]
 8008948:	e001      	b.n	800894e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800894a:	2300      	movs	r3, #0
 800894c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d102      	bne.n	800895a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008954:	f001 f820 	bl	8009998 <xTimerCreateTimerTask>
 8008958:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d115      	bne.n	800898c <vTaskStartScheduler+0x8c>
 8008960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008972:	4b12      	ldr	r3, [pc, #72]	; (80089bc <vTaskStartScheduler+0xbc>)
 8008974:	f04f 32ff 	mov.w	r2, #4294967295
 8008978:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800897a:	4b11      	ldr	r3, [pc, #68]	; (80089c0 <vTaskStartScheduler+0xc0>)
 800897c:	2201      	movs	r2, #1
 800897e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008980:	4b10      	ldr	r3, [pc, #64]	; (80089c4 <vTaskStartScheduler+0xc4>)
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008986:	f001 fc53 	bl	800a230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800898a:	e00d      	b.n	80089a8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008992:	d109      	bne.n	80089a8 <vTaskStartScheduler+0xa8>
 8008994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	60fb      	str	r3, [r7, #12]
 80089a6:	e7fe      	b.n	80089a6 <vTaskStartScheduler+0xa6>
}
 80089a8:	bf00      	nop
 80089aa:	3718      	adds	r7, #24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	0800d24c 	.word	0x0800d24c
 80089b4:	08008fc5 	.word	0x08008fc5
 80089b8:	20000244 	.word	0x20000244
 80089bc:	20000240 	.word	0x20000240
 80089c0:	2000022c 	.word	0x2000022c
 80089c4:	20000224 	.word	0x20000224

080089c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80089c8:	b480      	push	{r7}
 80089ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80089cc:	4b04      	ldr	r3, [pc, #16]	; (80089e0 <vTaskSuspendAll+0x18>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3301      	adds	r3, #1
 80089d2:	4a03      	ldr	r2, [pc, #12]	; (80089e0 <vTaskSuspendAll+0x18>)
 80089d4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80089d6:	bf00      	nop
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	20000248 	.word	0x20000248

080089e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80089ea:	2300      	movs	r3, #0
 80089ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80089ee:	2300      	movs	r3, #0
 80089f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80089f2:	4b41      	ldr	r3, [pc, #260]	; (8008af8 <xTaskResumeAll+0x114>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d109      	bne.n	8008a0e <xTaskResumeAll+0x2a>
 80089fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	603b      	str	r3, [r7, #0]
 8008a0c:	e7fe      	b.n	8008a0c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a0e:	f001 fcad 	bl	800a36c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a12:	4b39      	ldr	r3, [pc, #228]	; (8008af8 <xTaskResumeAll+0x114>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	4a37      	ldr	r2, [pc, #220]	; (8008af8 <xTaskResumeAll+0x114>)
 8008a1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a1c:	4b36      	ldr	r3, [pc, #216]	; (8008af8 <xTaskResumeAll+0x114>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d161      	bne.n	8008ae8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a24:	4b35      	ldr	r3, [pc, #212]	; (8008afc <xTaskResumeAll+0x118>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d05d      	beq.n	8008ae8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a2c:	e02e      	b.n	8008a8c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a2e:	4b34      	ldr	r3, [pc, #208]	; (8008b00 <xTaskResumeAll+0x11c>)
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3318      	adds	r3, #24
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fe fdee 	bl	800761c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	3304      	adds	r3, #4
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fe fde9 	bl	800761c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4e:	2201      	movs	r2, #1
 8008a50:	409a      	lsls	r2, r3
 8008a52:	4b2c      	ldr	r3, [pc, #176]	; (8008b04 <xTaskResumeAll+0x120>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	4a2a      	ldr	r2, [pc, #168]	; (8008b04 <xTaskResumeAll+0x120>)
 8008a5a:	6013      	str	r3, [r2, #0]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a60:	4613      	mov	r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4413      	add	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4a27      	ldr	r2, [pc, #156]	; (8008b08 <xTaskResumeAll+0x124>)
 8008a6a:	441a      	add	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	3304      	adds	r3, #4
 8008a70:	4619      	mov	r1, r3
 8008a72:	4610      	mov	r0, r2
 8008a74:	f7fe fd75 	bl	8007562 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a7c:	4b23      	ldr	r3, [pc, #140]	; (8008b0c <xTaskResumeAll+0x128>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d302      	bcc.n	8008a8c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008a86:	4b22      	ldr	r3, [pc, #136]	; (8008b10 <xTaskResumeAll+0x12c>)
 8008a88:	2201      	movs	r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a8c:	4b1c      	ldr	r3, [pc, #112]	; (8008b00 <xTaskResumeAll+0x11c>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1cc      	bne.n	8008a2e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a9a:	f000 fb45 	bl	8009128 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008a9e:	4b1d      	ldr	r3, [pc, #116]	; (8008b14 <xTaskResumeAll+0x130>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d010      	beq.n	8008acc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008aaa:	f000 f847 	bl	8008b3c <xTaskIncrementTick>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008ab4:	4b16      	ldr	r3, [pc, #88]	; (8008b10 <xTaskResumeAll+0x12c>)
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	3b01      	subs	r3, #1
 8008abe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1f1      	bne.n	8008aaa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008ac6:	4b13      	ldr	r3, [pc, #76]	; (8008b14 <xTaskResumeAll+0x130>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008acc:	4b10      	ldr	r3, [pc, #64]	; (8008b10 <xTaskResumeAll+0x12c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d009      	beq.n	8008ae8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ad8:	4b0f      	ldr	r3, [pc, #60]	; (8008b18 <xTaskResumeAll+0x134>)
 8008ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ade:	601a      	str	r2, [r3, #0]
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ae8:	f001 fc6e 	bl	800a3c8 <vPortExitCritical>

	return xAlreadyYielded;
 8008aec:	68bb      	ldr	r3, [r7, #8]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20000248 	.word	0x20000248
 8008afc:	20000220 	.word	0x20000220
 8008b00:	200001e0 	.word	0x200001e0
 8008b04:	20000228 	.word	0x20000228
 8008b08:	20000124 	.word	0x20000124
 8008b0c:	20000120 	.word	0x20000120
 8008b10:	20000234 	.word	0x20000234
 8008b14:	20000230 	.word	0x20000230
 8008b18:	e000ed04 	.word	0xe000ed04

08008b1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b22:	4b05      	ldr	r3, [pc, #20]	; (8008b38 <xTaskGetTickCount+0x1c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b28:	687b      	ldr	r3, [r7, #4]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	20000224 	.word	0x20000224

08008b3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b42:	2300      	movs	r3, #0
 8008b44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b46:	4b4e      	ldr	r3, [pc, #312]	; (8008c80 <xTaskIncrementTick+0x144>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f040 8087 	bne.w	8008c5e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b50:	4b4c      	ldr	r3, [pc, #304]	; (8008c84 <xTaskIncrementTick+0x148>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3301      	adds	r3, #1
 8008b56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b58:	4a4a      	ldr	r2, [pc, #296]	; (8008c84 <xTaskIncrementTick+0x148>)
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d11f      	bne.n	8008ba4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b64:	4b48      	ldr	r3, [pc, #288]	; (8008c88 <xTaskIncrementTick+0x14c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d009      	beq.n	8008b82 <xTaskIncrementTick+0x46>
 8008b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	603b      	str	r3, [r7, #0]
 8008b80:	e7fe      	b.n	8008b80 <xTaskIncrementTick+0x44>
 8008b82:	4b41      	ldr	r3, [pc, #260]	; (8008c88 <xTaskIncrementTick+0x14c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	60fb      	str	r3, [r7, #12]
 8008b88:	4b40      	ldr	r3, [pc, #256]	; (8008c8c <xTaskIncrementTick+0x150>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a3e      	ldr	r2, [pc, #248]	; (8008c88 <xTaskIncrementTick+0x14c>)
 8008b8e:	6013      	str	r3, [r2, #0]
 8008b90:	4a3e      	ldr	r2, [pc, #248]	; (8008c8c <xTaskIncrementTick+0x150>)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	4b3e      	ldr	r3, [pc, #248]	; (8008c90 <xTaskIncrementTick+0x154>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	4a3c      	ldr	r2, [pc, #240]	; (8008c90 <xTaskIncrementTick+0x154>)
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	f000 fac2 	bl	8009128 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ba4:	4b3b      	ldr	r3, [pc, #236]	; (8008c94 <xTaskIncrementTick+0x158>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d348      	bcc.n	8008c40 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bae:	4b36      	ldr	r3, [pc, #216]	; (8008c88 <xTaskIncrementTick+0x14c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d104      	bne.n	8008bc2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bb8:	4b36      	ldr	r3, [pc, #216]	; (8008c94 <xTaskIncrementTick+0x158>)
 8008bba:	f04f 32ff 	mov.w	r2, #4294967295
 8008bbe:	601a      	str	r2, [r3, #0]
					break;
 8008bc0:	e03e      	b.n	8008c40 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bc2:	4b31      	ldr	r3, [pc, #196]	; (8008c88 <xTaskIncrementTick+0x14c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d203      	bcs.n	8008be2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008bda:	4a2e      	ldr	r2, [pc, #184]	; (8008c94 <xTaskIncrementTick+0x158>)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008be0:	e02e      	b.n	8008c40 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	3304      	adds	r3, #4
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe fd18 	bl	800761c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d004      	beq.n	8008bfe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	3318      	adds	r3, #24
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fe fd0f 	bl	800761c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c02:	2201      	movs	r2, #1
 8008c04:	409a      	lsls	r2, r3
 8008c06:	4b24      	ldr	r3, [pc, #144]	; (8008c98 <xTaskIncrementTick+0x15c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	4a22      	ldr	r2, [pc, #136]	; (8008c98 <xTaskIncrementTick+0x15c>)
 8008c0e:	6013      	str	r3, [r2, #0]
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c14:	4613      	mov	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4413      	add	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4a1f      	ldr	r2, [pc, #124]	; (8008c9c <xTaskIncrementTick+0x160>)
 8008c1e:	441a      	add	r2, r3
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	3304      	adds	r3, #4
 8008c24:	4619      	mov	r1, r3
 8008c26:	4610      	mov	r0, r2
 8008c28:	f7fe fc9b 	bl	8007562 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c30:	4b1b      	ldr	r3, [pc, #108]	; (8008ca0 <xTaskIncrementTick+0x164>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d3b9      	bcc.n	8008bae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c3e:	e7b6      	b.n	8008bae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c40:	4b17      	ldr	r3, [pc, #92]	; (8008ca0 <xTaskIncrementTick+0x164>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c46:	4915      	ldr	r1, [pc, #84]	; (8008c9c <xTaskIncrementTick+0x160>)
 8008c48:	4613      	mov	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	440b      	add	r3, r1
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d907      	bls.n	8008c68 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	617b      	str	r3, [r7, #20]
 8008c5c:	e004      	b.n	8008c68 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008c5e:	4b11      	ldr	r3, [pc, #68]	; (8008ca4 <xTaskIncrementTick+0x168>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3301      	adds	r3, #1
 8008c64:	4a0f      	ldr	r2, [pc, #60]	; (8008ca4 <xTaskIncrementTick+0x168>)
 8008c66:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008c68:	4b0f      	ldr	r3, [pc, #60]	; (8008ca8 <xTaskIncrementTick+0x16c>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008c70:	2301      	movs	r3, #1
 8008c72:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008c74:	697b      	ldr	r3, [r7, #20]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20000248 	.word	0x20000248
 8008c84:	20000224 	.word	0x20000224
 8008c88:	200001d8 	.word	0x200001d8
 8008c8c:	200001dc 	.word	0x200001dc
 8008c90:	20000238 	.word	0x20000238
 8008c94:	20000240 	.word	0x20000240
 8008c98:	20000228 	.word	0x20000228
 8008c9c:	20000124 	.word	0x20000124
 8008ca0:	20000120 	.word	0x20000120
 8008ca4:	20000230 	.word	0x20000230
 8008ca8:	20000234 	.word	0x20000234

08008cac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008cac:	b480      	push	{r7}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008cb2:	4b26      	ldr	r3, [pc, #152]	; (8008d4c <vTaskSwitchContext+0xa0>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d003      	beq.n	8008cc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008cba:	4b25      	ldr	r3, [pc, #148]	; (8008d50 <vTaskSwitchContext+0xa4>)
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008cc0:	e03e      	b.n	8008d40 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008cc2:	4b23      	ldr	r3, [pc, #140]	; (8008d50 <vTaskSwitchContext+0xa4>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cc8:	4b22      	ldr	r3, [pc, #136]	; (8008d54 <vTaskSwitchContext+0xa8>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	fab3 f383 	clz	r3, r3
 8008cd4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008cd6:	7afb      	ldrb	r3, [r7, #11]
 8008cd8:	f1c3 031f 	rsb	r3, r3, #31
 8008cdc:	617b      	str	r3, [r7, #20]
 8008cde:	491e      	ldr	r1, [pc, #120]	; (8008d58 <vTaskSwitchContext+0xac>)
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4413      	add	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	440b      	add	r3, r1
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d109      	bne.n	8008d06 <vTaskSwitchContext+0x5a>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	607b      	str	r3, [r7, #4]
 8008d04:	e7fe      	b.n	8008d04 <vTaskSwitchContext+0x58>
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4a11      	ldr	r2, [pc, #68]	; (8008d58 <vTaskSwitchContext+0xac>)
 8008d12:	4413      	add	r3, r2
 8008d14:	613b      	str	r3, [r7, #16]
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	605a      	str	r2, [r3, #4]
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	3308      	adds	r3, #8
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d104      	bne.n	8008d36 <vTaskSwitchContext+0x8a>
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	685a      	ldr	r2, [r3, #4]
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	605a      	str	r2, [r3, #4]
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	4a07      	ldr	r2, [pc, #28]	; (8008d5c <vTaskSwitchContext+0xb0>)
 8008d3e:	6013      	str	r3, [r2, #0]
}
 8008d40:	bf00      	nop
 8008d42:	371c      	adds	r7, #28
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	20000248 	.word	0x20000248
 8008d50:	20000234 	.word	0x20000234
 8008d54:	20000228 	.word	0x20000228
 8008d58:	20000124 	.word	0x20000124
 8008d5c:	20000120 	.word	0x20000120

08008d60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d109      	bne.n	8008d84 <vTaskPlaceOnEventList+0x24>
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	60fb      	str	r3, [r7, #12]
 8008d82:	e7fe      	b.n	8008d82 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d84:	4b07      	ldr	r3, [pc, #28]	; (8008da4 <vTaskPlaceOnEventList+0x44>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	3318      	adds	r3, #24
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7fe fc0c 	bl	80075aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d92:	2101      	movs	r1, #1
 8008d94:	6838      	ldr	r0, [r7, #0]
 8008d96:	f000 fd99 	bl	80098cc <prvAddCurrentTaskToDelayedList>
}
 8008d9a:	bf00      	nop
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	20000120 	.word	0x20000120

08008da8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d109      	bne.n	8008dce <vTaskPlaceOnEventListRestricted+0x26>
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	617b      	str	r3, [r7, #20]
 8008dcc:	e7fe      	b.n	8008dcc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008dce:	4b0a      	ldr	r3, [pc, #40]	; (8008df8 <vTaskPlaceOnEventListRestricted+0x50>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	3318      	adds	r3, #24
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f7fe fbc3 	bl	8007562 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008de2:	f04f 33ff 	mov.w	r3, #4294967295
 8008de6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	68b8      	ldr	r0, [r7, #8]
 8008dec:	f000 fd6e 	bl	80098cc <prvAddCurrentTaskToDelayedList>
	}
 8008df0:	bf00      	nop
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	20000120 	.word	0x20000120

08008dfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d109      	bne.n	8008e26 <xTaskRemoveFromEventList+0x2a>
 8008e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	e7fe      	b.n	8008e24 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	3318      	adds	r3, #24
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fe fbf6 	bl	800761c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e30:	4b1d      	ldr	r3, [pc, #116]	; (8008ea8 <xTaskRemoveFromEventList+0xac>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d11c      	bne.n	8008e72 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7fe fbed 	bl	800761c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e46:	2201      	movs	r2, #1
 8008e48:	409a      	lsls	r2, r3
 8008e4a:	4b18      	ldr	r3, [pc, #96]	; (8008eac <xTaskRemoveFromEventList+0xb0>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	4a16      	ldr	r2, [pc, #88]	; (8008eac <xTaskRemoveFromEventList+0xb0>)
 8008e52:	6013      	str	r3, [r2, #0]
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e58:	4613      	mov	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4413      	add	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4a13      	ldr	r2, [pc, #76]	; (8008eb0 <xTaskRemoveFromEventList+0xb4>)
 8008e62:	441a      	add	r2, r3
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	3304      	adds	r3, #4
 8008e68:	4619      	mov	r1, r3
 8008e6a:	4610      	mov	r0, r2
 8008e6c:	f7fe fb79 	bl	8007562 <vListInsertEnd>
 8008e70:	e005      	b.n	8008e7e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	3318      	adds	r3, #24
 8008e76:	4619      	mov	r1, r3
 8008e78:	480e      	ldr	r0, [pc, #56]	; (8008eb4 <xTaskRemoveFromEventList+0xb8>)
 8008e7a:	f7fe fb72 	bl	8007562 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e82:	4b0d      	ldr	r3, [pc, #52]	; (8008eb8 <xTaskRemoveFromEventList+0xbc>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d905      	bls.n	8008e98 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e90:	4b0a      	ldr	r3, [pc, #40]	; (8008ebc <xTaskRemoveFromEventList+0xc0>)
 8008e92:	2201      	movs	r2, #1
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	e001      	b.n	8008e9c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e9c:	697b      	ldr	r3, [r7, #20]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3718      	adds	r7, #24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20000248 	.word	0x20000248
 8008eac:	20000228 	.word	0x20000228
 8008eb0:	20000124 	.word	0x20000124
 8008eb4:	200001e0 	.word	0x200001e0
 8008eb8:	20000120 	.word	0x20000120
 8008ebc:	20000234 	.word	0x20000234

08008ec0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ec8:	4b06      	ldr	r3, [pc, #24]	; (8008ee4 <vTaskInternalSetTimeOutState+0x24>)
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ed0:	4b05      	ldr	r3, [pc, #20]	; (8008ee8 <vTaskInternalSetTimeOutState+0x28>)
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	605a      	str	r2, [r3, #4]
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	20000238 	.word	0x20000238
 8008ee8:	20000224 	.word	0x20000224

08008eec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b088      	sub	sp, #32
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d109      	bne.n	8008f10 <xTaskCheckForTimeOut+0x24>
 8008efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	613b      	str	r3, [r7, #16]
 8008f0e:	e7fe      	b.n	8008f0e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d109      	bne.n	8008f2a <xTaskCheckForTimeOut+0x3e>
 8008f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	e7fe      	b.n	8008f28 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008f2a:	f001 fa1f 	bl	800a36c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f2e:	4b1d      	ldr	r3, [pc, #116]	; (8008fa4 <xTaskCheckForTimeOut+0xb8>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	69ba      	ldr	r2, [r7, #24]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f46:	d102      	bne.n	8008f4e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	61fb      	str	r3, [r7, #28]
 8008f4c:	e023      	b.n	8008f96 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	4b15      	ldr	r3, [pc, #84]	; (8008fa8 <xTaskCheckForTimeOut+0xbc>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d007      	beq.n	8008f6a <xTaskCheckForTimeOut+0x7e>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	69ba      	ldr	r2, [r7, #24]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d302      	bcc.n	8008f6a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f64:	2301      	movs	r3, #1
 8008f66:	61fb      	str	r3, [r7, #28]
 8008f68:	e015      	b.n	8008f96 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d20b      	bcs.n	8008f8c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	1ad2      	subs	r2, r2, r3
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7ff ff9d 	bl	8008ec0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f86:	2300      	movs	r3, #0
 8008f88:	61fb      	str	r3, [r7, #28]
 8008f8a:	e004      	b.n	8008f96 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f92:	2301      	movs	r3, #1
 8008f94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f96:	f001 fa17 	bl	800a3c8 <vPortExitCritical>

	return xReturn;
 8008f9a:	69fb      	ldr	r3, [r7, #28]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3720      	adds	r7, #32
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	20000224 	.word	0x20000224
 8008fa8:	20000238 	.word	0x20000238

08008fac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008fac:	b480      	push	{r7}
 8008fae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008fb0:	4b03      	ldr	r3, [pc, #12]	; (8008fc0 <vTaskMissedYield+0x14>)
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	601a      	str	r2, [r3, #0]
}
 8008fb6:	bf00      	nop
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr
 8008fc0:	20000234 	.word	0x20000234

08008fc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008fcc:	f000 f852 	bl	8009074 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008fd0:	4b06      	ldr	r3, [pc, #24]	; (8008fec <prvIdleTask+0x28>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d9f9      	bls.n	8008fcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008fd8:	4b05      	ldr	r3, [pc, #20]	; (8008ff0 <prvIdleTask+0x2c>)
 8008fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fde:	601a      	str	r2, [r3, #0]
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008fe8:	e7f0      	b.n	8008fcc <prvIdleTask+0x8>
 8008fea:	bf00      	nop
 8008fec:	20000124 	.word	0x20000124
 8008ff0:	e000ed04 	.word	0xe000ed04

08008ff4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	607b      	str	r3, [r7, #4]
 8008ffe:	e00c      	b.n	800901a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	4613      	mov	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4413      	add	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4a12      	ldr	r2, [pc, #72]	; (8009054 <prvInitialiseTaskLists+0x60>)
 800900c:	4413      	add	r3, r2
 800900e:	4618      	mov	r0, r3
 8009010:	f7fe fa7a 	bl	8007508 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	3301      	adds	r3, #1
 8009018:	607b      	str	r3, [r7, #4]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2b06      	cmp	r3, #6
 800901e:	d9ef      	bls.n	8009000 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009020:	480d      	ldr	r0, [pc, #52]	; (8009058 <prvInitialiseTaskLists+0x64>)
 8009022:	f7fe fa71 	bl	8007508 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009026:	480d      	ldr	r0, [pc, #52]	; (800905c <prvInitialiseTaskLists+0x68>)
 8009028:	f7fe fa6e 	bl	8007508 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800902c:	480c      	ldr	r0, [pc, #48]	; (8009060 <prvInitialiseTaskLists+0x6c>)
 800902e:	f7fe fa6b 	bl	8007508 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009032:	480c      	ldr	r0, [pc, #48]	; (8009064 <prvInitialiseTaskLists+0x70>)
 8009034:	f7fe fa68 	bl	8007508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009038:	480b      	ldr	r0, [pc, #44]	; (8009068 <prvInitialiseTaskLists+0x74>)
 800903a:	f7fe fa65 	bl	8007508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800903e:	4b0b      	ldr	r3, [pc, #44]	; (800906c <prvInitialiseTaskLists+0x78>)
 8009040:	4a05      	ldr	r2, [pc, #20]	; (8009058 <prvInitialiseTaskLists+0x64>)
 8009042:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009044:	4b0a      	ldr	r3, [pc, #40]	; (8009070 <prvInitialiseTaskLists+0x7c>)
 8009046:	4a05      	ldr	r2, [pc, #20]	; (800905c <prvInitialiseTaskLists+0x68>)
 8009048:	601a      	str	r2, [r3, #0]
}
 800904a:	bf00      	nop
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20000124 	.word	0x20000124
 8009058:	200001b0 	.word	0x200001b0
 800905c:	200001c4 	.word	0x200001c4
 8009060:	200001e0 	.word	0x200001e0
 8009064:	200001f4 	.word	0x200001f4
 8009068:	2000020c 	.word	0x2000020c
 800906c:	200001d8 	.word	0x200001d8
 8009070:	200001dc 	.word	0x200001dc

08009074 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800907a:	e019      	b.n	80090b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800907c:	f001 f976 	bl	800a36c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009080:	4b0f      	ldr	r3, [pc, #60]	; (80090c0 <prvCheckTasksWaitingTermination+0x4c>)
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	3304      	adds	r3, #4
 800908c:	4618      	mov	r0, r3
 800908e:	f7fe fac5 	bl	800761c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009092:	4b0c      	ldr	r3, [pc, #48]	; (80090c4 <prvCheckTasksWaitingTermination+0x50>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3b01      	subs	r3, #1
 8009098:	4a0a      	ldr	r2, [pc, #40]	; (80090c4 <prvCheckTasksWaitingTermination+0x50>)
 800909a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800909c:	4b0a      	ldr	r3, [pc, #40]	; (80090c8 <prvCheckTasksWaitingTermination+0x54>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3b01      	subs	r3, #1
 80090a2:	4a09      	ldr	r2, [pc, #36]	; (80090c8 <prvCheckTasksWaitingTermination+0x54>)
 80090a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80090a6:	f001 f98f 	bl	800a3c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f80e 	bl	80090cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090b0:	4b05      	ldr	r3, [pc, #20]	; (80090c8 <prvCheckTasksWaitingTermination+0x54>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d1e1      	bne.n	800907c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80090b8:	bf00      	nop
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	200001f4 	.word	0x200001f4
 80090c4:	20000220 	.word	0x20000220
 80090c8:	20000208 	.word	0x20000208

080090cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d108      	bne.n	80090f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e2:	4618      	mov	r0, r3
 80090e4:	f001 fb1e 	bl	800a724 <vPortFree>
				vPortFree( pxTCB );
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f001 fb1b 	bl	800a724 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090ee:	e017      	b.n	8009120 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d103      	bne.n	8009102 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f001 fb12 	bl	800a724 <vPortFree>
	}
 8009100:	e00e      	b.n	8009120 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009108:	2b02      	cmp	r3, #2
 800910a:	d009      	beq.n	8009120 <prvDeleteTCB+0x54>
 800910c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	60fb      	str	r3, [r7, #12]
 800911e:	e7fe      	b.n	800911e <prvDeleteTCB+0x52>
	}
 8009120:	bf00      	nop
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800912e:	4b0c      	ldr	r3, [pc, #48]	; (8009160 <prvResetNextTaskUnblockTime+0x38>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d104      	bne.n	8009142 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009138:	4b0a      	ldr	r3, [pc, #40]	; (8009164 <prvResetNextTaskUnblockTime+0x3c>)
 800913a:	f04f 32ff 	mov.w	r2, #4294967295
 800913e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009140:	e008      	b.n	8009154 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009142:	4b07      	ldr	r3, [pc, #28]	; (8009160 <prvResetNextTaskUnblockTime+0x38>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	4a04      	ldr	r2, [pc, #16]	; (8009164 <prvResetNextTaskUnblockTime+0x3c>)
 8009152:	6013      	str	r3, [r2, #0]
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	200001d8 	.word	0x200001d8
 8009164:	20000240 	.word	0x20000240

08009168 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800916e:	4b0b      	ldr	r3, [pc, #44]	; (800919c <xTaskGetSchedulerState+0x34>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d102      	bne.n	800917c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009176:	2301      	movs	r3, #1
 8009178:	607b      	str	r3, [r7, #4]
 800917a:	e008      	b.n	800918e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800917c:	4b08      	ldr	r3, [pc, #32]	; (80091a0 <xTaskGetSchedulerState+0x38>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d102      	bne.n	800918a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009184:	2302      	movs	r3, #2
 8009186:	607b      	str	r3, [r7, #4]
 8009188:	e001      	b.n	800918e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800918a:	2300      	movs	r3, #0
 800918c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800918e:	687b      	ldr	r3, [r7, #4]
	}
 8009190:	4618      	mov	r0, r3
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	2000022c 	.word	0x2000022c
 80091a0:	20000248 	.word	0x20000248

080091a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80091b0:	2300      	movs	r3, #0
 80091b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d069      	beq.n	800928e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091be:	4b36      	ldr	r3, [pc, #216]	; (8009298 <xTaskPriorityInherit+0xf4>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d259      	bcs.n	800927c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	db06      	blt.n	80091de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091d0:	4b31      	ldr	r3, [pc, #196]	; (8009298 <xTaskPriorityInherit+0xf4>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d6:	f1c3 0207 	rsb	r2, r3, #7
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	6959      	ldr	r1, [r3, #20]
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e6:	4613      	mov	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4a2b      	ldr	r2, [pc, #172]	; (800929c <xTaskPriorityInherit+0xf8>)
 80091f0:	4413      	add	r3, r2
 80091f2:	4299      	cmp	r1, r3
 80091f4:	d13a      	bne.n	800926c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	3304      	adds	r3, #4
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe fa0e 	bl	800761c <uxListRemove>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d115      	bne.n	8009232 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800920a:	4924      	ldr	r1, [pc, #144]	; (800929c <xTaskPriorityInherit+0xf8>)
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	440b      	add	r3, r1
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10a      	bne.n	8009232 <xTaskPriorityInherit+0x8e>
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	2201      	movs	r2, #1
 8009222:	fa02 f303 	lsl.w	r3, r2, r3
 8009226:	43da      	mvns	r2, r3
 8009228:	4b1d      	ldr	r3, [pc, #116]	; (80092a0 <xTaskPriorityInherit+0xfc>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4013      	ands	r3, r2
 800922e:	4a1c      	ldr	r2, [pc, #112]	; (80092a0 <xTaskPriorityInherit+0xfc>)
 8009230:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009232:	4b19      	ldr	r3, [pc, #100]	; (8009298 <xTaskPriorityInherit+0xf4>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009240:	2201      	movs	r2, #1
 8009242:	409a      	lsls	r2, r3
 8009244:	4b16      	ldr	r3, [pc, #88]	; (80092a0 <xTaskPriorityInherit+0xfc>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4313      	orrs	r3, r2
 800924a:	4a15      	ldr	r2, [pc, #84]	; (80092a0 <xTaskPriorityInherit+0xfc>)
 800924c:	6013      	str	r3, [r2, #0]
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009252:	4613      	mov	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4413      	add	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4a10      	ldr	r2, [pc, #64]	; (800929c <xTaskPriorityInherit+0xf8>)
 800925c:	441a      	add	r2, r3
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	3304      	adds	r3, #4
 8009262:	4619      	mov	r1, r3
 8009264:	4610      	mov	r0, r2
 8009266:	f7fe f97c 	bl	8007562 <vListInsertEnd>
 800926a:	e004      	b.n	8009276 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800926c:	4b0a      	ldr	r3, [pc, #40]	; (8009298 <xTaskPriorityInherit+0xf4>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009276:	2301      	movs	r3, #1
 8009278:	60fb      	str	r3, [r7, #12]
 800927a:	e008      	b.n	800928e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009280:	4b05      	ldr	r3, [pc, #20]	; (8009298 <xTaskPriorityInherit+0xf4>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009286:	429a      	cmp	r2, r3
 8009288:	d201      	bcs.n	800928e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800928a:	2301      	movs	r3, #1
 800928c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800928e:	68fb      	ldr	r3, [r7, #12]
	}
 8009290:	4618      	mov	r0, r3
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	20000120 	.word	0x20000120
 800929c:	20000124 	.word	0x20000124
 80092a0:	20000228 	.word	0x20000228

080092a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80092b0:	2300      	movs	r3, #0
 80092b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d06c      	beq.n	8009394 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80092ba:	4b39      	ldr	r3, [pc, #228]	; (80093a0 <xTaskPriorityDisinherit+0xfc>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d009      	beq.n	80092d8 <xTaskPriorityDisinherit+0x34>
 80092c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c8:	f383 8811 	msr	BASEPRI, r3
 80092cc:	f3bf 8f6f 	isb	sy
 80092d0:	f3bf 8f4f 	dsb	sy
 80092d4:	60fb      	str	r3, [r7, #12]
 80092d6:	e7fe      	b.n	80092d6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d109      	bne.n	80092f4 <xTaskPriorityDisinherit+0x50>
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	60bb      	str	r3, [r7, #8]
 80092f2:	e7fe      	b.n	80092f2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092f8:	1e5a      	subs	r2, r3, #1
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009306:	429a      	cmp	r2, r3
 8009308:	d044      	beq.n	8009394 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800930e:	2b00      	cmp	r3, #0
 8009310:	d140      	bne.n	8009394 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	3304      	adds	r3, #4
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe f980 	bl	800761c <uxListRemove>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d115      	bne.n	800934e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009326:	491f      	ldr	r1, [pc, #124]	; (80093a4 <xTaskPriorityDisinherit+0x100>)
 8009328:	4613      	mov	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4413      	add	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	440b      	add	r3, r1
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10a      	bne.n	800934e <xTaskPriorityDisinherit+0xaa>
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933c:	2201      	movs	r2, #1
 800933e:	fa02 f303 	lsl.w	r3, r2, r3
 8009342:	43da      	mvns	r2, r3
 8009344:	4b18      	ldr	r3, [pc, #96]	; (80093a8 <xTaskPriorityDisinherit+0x104>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4013      	ands	r3, r2
 800934a:	4a17      	ldr	r2, [pc, #92]	; (80093a8 <xTaskPriorityDisinherit+0x104>)
 800934c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935a:	f1c3 0207 	rsb	r2, r3, #7
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009366:	2201      	movs	r2, #1
 8009368:	409a      	lsls	r2, r3
 800936a:	4b0f      	ldr	r3, [pc, #60]	; (80093a8 <xTaskPriorityDisinherit+0x104>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4313      	orrs	r3, r2
 8009370:	4a0d      	ldr	r2, [pc, #52]	; (80093a8 <xTaskPriorityDisinherit+0x104>)
 8009372:	6013      	str	r3, [r2, #0]
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009378:	4613      	mov	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4a08      	ldr	r2, [pc, #32]	; (80093a4 <xTaskPriorityDisinherit+0x100>)
 8009382:	441a      	add	r2, r3
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	3304      	adds	r3, #4
 8009388:	4619      	mov	r1, r3
 800938a:	4610      	mov	r0, r2
 800938c:	f7fe f8e9 	bl	8007562 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009390:	2301      	movs	r3, #1
 8009392:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009394:	697b      	ldr	r3, [r7, #20]
	}
 8009396:	4618      	mov	r0, r3
 8009398:	3718      	adds	r7, #24
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	20000120 	.word	0x20000120
 80093a4:	20000124 	.word	0x20000124
 80093a8:	20000228 	.word	0x20000228

080093ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b088      	sub	sp, #32
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80093ba:	2301      	movs	r3, #1
 80093bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 8081 	beq.w	80094c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d109      	bne.n	80093e2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	e7fe      	b.n	80093e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d902      	bls.n	80093f2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	61fb      	str	r3, [r7, #28]
 80093f0:	e002      	b.n	80093f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fc:	69fa      	ldr	r2, [r7, #28]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d062      	beq.n	80094c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	429a      	cmp	r2, r3
 800940a:	d15d      	bne.n	80094c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800940c:	4b30      	ldr	r3, [pc, #192]	; (80094d0 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	429a      	cmp	r2, r3
 8009414:	d109      	bne.n	800942a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8009416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	60bb      	str	r3, [r7, #8]
 8009428:	e7fe      	b.n	8009428 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	69fa      	ldr	r2, [r7, #28]
 8009434:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	2b00      	cmp	r3, #0
 800943c:	db04      	blt.n	8009448 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	f1c3 0207 	rsb	r2, r3, #7
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	6959      	ldr	r1, [r3, #20]
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	4613      	mov	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4413      	add	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4a1f      	ldr	r2, [pc, #124]	; (80094d4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8009458:	4413      	add	r3, r2
 800945a:	4299      	cmp	r1, r3
 800945c:	d134      	bne.n	80094c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	3304      	adds	r3, #4
 8009462:	4618      	mov	r0, r3
 8009464:	f7fe f8da 	bl	800761c <uxListRemove>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d115      	bne.n	800949a <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009472:	4918      	ldr	r1, [pc, #96]	; (80094d4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8009474:	4613      	mov	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	440b      	add	r3, r1
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10a      	bne.n	800949a <vTaskPriorityDisinheritAfterTimeout+0xee>
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009488:	2201      	movs	r2, #1
 800948a:	fa02 f303 	lsl.w	r3, r2, r3
 800948e:	43da      	mvns	r2, r3
 8009490:	4b11      	ldr	r3, [pc, #68]	; (80094d8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4013      	ands	r3, r2
 8009496:	4a10      	ldr	r2, [pc, #64]	; (80094d8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009498:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949e:	2201      	movs	r2, #1
 80094a0:	409a      	lsls	r2, r3
 80094a2:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	4a0b      	ldr	r2, [pc, #44]	; (80094d8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80094aa:	6013      	str	r3, [r2, #0]
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b0:	4613      	mov	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4a06      	ldr	r2, [pc, #24]	; (80094d4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80094ba:	441a      	add	r2, r3
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	3304      	adds	r3, #4
 80094c0:	4619      	mov	r1, r3
 80094c2:	4610      	mov	r0, r2
 80094c4:	f7fe f84d 	bl	8007562 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094c8:	bf00      	nop
 80094ca:	3720      	adds	r7, #32
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	20000120 	.word	0x20000120
 80094d4:	20000124 	.word	0x20000124
 80094d8:	20000228 	.word	0x20000228

080094dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80094dc:	b480      	push	{r7}
 80094de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80094e0:	4b07      	ldr	r3, [pc, #28]	; (8009500 <pvTaskIncrementMutexHeldCount+0x24>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d004      	beq.n	80094f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80094e8:	4b05      	ldr	r3, [pc, #20]	; (8009500 <pvTaskIncrementMutexHeldCount+0x24>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094ee:	3201      	adds	r2, #1
 80094f0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80094f2:	4b03      	ldr	r3, [pc, #12]	; (8009500 <pvTaskIncrementMutexHeldCount+0x24>)
 80094f4:	681b      	ldr	r3, [r3, #0]
	}
 80094f6:	4618      	mov	r0, r3
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	20000120 	.word	0x20000120

08009504 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
 8009510:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009512:	f000 ff2b 	bl	800a36c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009516:	4b26      	ldr	r3, [pc, #152]	; (80095b0 <xTaskNotifyWait+0xac>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b02      	cmp	r3, #2
 8009522:	d01a      	beq.n	800955a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009524:	4b22      	ldr	r3, [pc, #136]	; (80095b0 <xTaskNotifyWait+0xac>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	43d2      	mvns	r2, r2
 800952e:	400a      	ands	r2, r1
 8009530:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009532:	4b1f      	ldr	r3, [pc, #124]	; (80095b0 <xTaskNotifyWait+0xac>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00b      	beq.n	800955a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009542:	2101      	movs	r1, #1
 8009544:	6838      	ldr	r0, [r7, #0]
 8009546:	f000 f9c1 	bl	80098cc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800954a:	4b1a      	ldr	r3, [pc, #104]	; (80095b4 <xTaskNotifyWait+0xb0>)
 800954c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800955a:	f000 ff35 	bl	800a3c8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800955e:	f000 ff05 	bl	800a36c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d004      	beq.n	8009572 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009568:	4b11      	ldr	r3, [pc, #68]	; (80095b0 <xTaskNotifyWait+0xac>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009572:	4b0f      	ldr	r3, [pc, #60]	; (80095b0 <xTaskNotifyWait+0xac>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b02      	cmp	r3, #2
 800957e:	d002      	beq.n	8009586 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009580:	2300      	movs	r3, #0
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	e008      	b.n	8009598 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009586:	4b0a      	ldr	r3, [pc, #40]	; (80095b0 <xTaskNotifyWait+0xac>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	43d2      	mvns	r2, r2
 8009590:	400a      	ands	r2, r1
 8009592:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8009594:	2301      	movs	r3, #1
 8009596:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009598:	4b05      	ldr	r3, [pc, #20]	; (80095b0 <xTaskNotifyWait+0xac>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80095a2:	f000 ff11 	bl	800a3c8 <vPortExitCritical>

		return xReturn;
 80095a6:	697b      	ldr	r3, [r7, #20]
	}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20000120 	.word	0x20000120
 80095b4:	e000ed04 	.word	0xe000ed04

080095b8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b08a      	sub	sp, #40	; 0x28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	603b      	str	r3, [r7, #0]
 80095c4:	4613      	mov	r3, r2
 80095c6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80095c8:	2301      	movs	r3, #1
 80095ca:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d109      	bne.n	80095e6 <xTaskGenericNotify+0x2e>
 80095d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	61bb      	str	r3, [r7, #24]
 80095e4:	e7fe      	b.n	80095e4 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80095ea:	f000 febf 	bl	800a36c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d003      	beq.n	80095fc <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80095f4:	6a3b      	ldr	r3, [r7, #32]
 80095f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009602:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009604:	6a3b      	ldr	r3, [r7, #32]
 8009606:	2202      	movs	r2, #2
 8009608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800960c:	79fb      	ldrb	r3, [r7, #7]
 800960e:	2b04      	cmp	r3, #4
 8009610:	d827      	bhi.n	8009662 <xTaskGenericNotify+0xaa>
 8009612:	a201      	add	r2, pc, #4	; (adr r2, 8009618 <xTaskGenericNotify+0x60>)
 8009614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009618:	08009681 	.word	0x08009681
 800961c:	0800962d 	.word	0x0800962d
 8009620:	0800963b 	.word	0x0800963b
 8009624:	08009647 	.word	0x08009647
 8009628:	0800964f 	.word	0x0800964f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800962c:	6a3b      	ldr	r3, [r7, #32]
 800962e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	431a      	orrs	r2, r3
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8009638:	e025      	b.n	8009686 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800963a:	6a3b      	ldr	r3, [r7, #32]
 800963c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800963e:	1c5a      	adds	r2, r3, #1
 8009640:	6a3b      	ldr	r3, [r7, #32]
 8009642:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8009644:	e01f      	b.n	8009686 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800964c:	e01b      	b.n	8009686 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800964e:	7ffb      	ldrb	r3, [r7, #31]
 8009650:	2b02      	cmp	r3, #2
 8009652:	d003      	beq.n	800965c <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800965a:	e014      	b.n	8009686 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800965c:	2300      	movs	r3, #0
 800965e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009660:	e011      	b.n	8009686 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966a:	d00b      	beq.n	8009684 <xTaskGenericNotify+0xcc>
 800966c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	617b      	str	r3, [r7, #20]
 800967e:	e7fe      	b.n	800967e <xTaskGenericNotify+0xc6>
					break;
 8009680:	bf00      	nop
 8009682:	e000      	b.n	8009686 <xTaskGenericNotify+0xce>

					break;
 8009684:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009686:	7ffb      	ldrb	r3, [r7, #31]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d138      	bne.n	80096fe <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800968c:	6a3b      	ldr	r3, [r7, #32]
 800968e:	3304      	adds	r3, #4
 8009690:	4618      	mov	r0, r3
 8009692:	f7fd ffc3 	bl	800761c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009696:	6a3b      	ldr	r3, [r7, #32]
 8009698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969a:	2201      	movs	r2, #1
 800969c:	409a      	lsls	r2, r3
 800969e:	4b1b      	ldr	r3, [pc, #108]	; (800970c <xTaskGenericNotify+0x154>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	4a19      	ldr	r2, [pc, #100]	; (800970c <xTaskGenericNotify+0x154>)
 80096a6:	6013      	str	r3, [r2, #0]
 80096a8:	6a3b      	ldr	r3, [r7, #32]
 80096aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ac:	4613      	mov	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4413      	add	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	4a16      	ldr	r2, [pc, #88]	; (8009710 <xTaskGenericNotify+0x158>)
 80096b6:	441a      	add	r2, r3
 80096b8:	6a3b      	ldr	r3, [r7, #32]
 80096ba:	3304      	adds	r3, #4
 80096bc:	4619      	mov	r1, r3
 80096be:	4610      	mov	r0, r2
 80096c0:	f7fd ff4f 	bl	8007562 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d009      	beq.n	80096e0 <xTaskGenericNotify+0x128>
 80096cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d0:	f383 8811 	msr	BASEPRI, r3
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	613b      	str	r3, [r7, #16]
 80096de:	e7fe      	b.n	80096de <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e4:	4b0b      	ldr	r3, [pc, #44]	; (8009714 <xTaskGenericNotify+0x15c>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d907      	bls.n	80096fe <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80096ee:	4b0a      	ldr	r3, [pc, #40]	; (8009718 <xTaskGenericNotify+0x160>)
 80096f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096f4:	601a      	str	r2, [r3, #0]
 80096f6:	f3bf 8f4f 	dsb	sy
 80096fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80096fe:	f000 fe63 	bl	800a3c8 <vPortExitCritical>

		return xReturn;
 8009702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009704:	4618      	mov	r0, r3
 8009706:	3728      	adds	r7, #40	; 0x28
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	20000228 	.word	0x20000228
 8009710:	20000124 	.word	0x20000124
 8009714:	20000120 	.word	0x20000120
 8009718:	e000ed04 	.word	0xe000ed04

0800971c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800971c:	b580      	push	{r7, lr}
 800971e:	b08e      	sub	sp, #56	; 0x38
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	603b      	str	r3, [r7, #0]
 8009728:	4613      	mov	r3, r2
 800972a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800972c:	2301      	movs	r3, #1
 800972e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d109      	bne.n	800974a <xTaskGenericNotifyFromISR+0x2e>
 8009736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	627b      	str	r3, [r7, #36]	; 0x24
 8009748:	e7fe      	b.n	8009748 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800974a:	f000 feeb 	bl	800a524 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8009752:	f3ef 8211 	mrs	r2, BASEPRI
 8009756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	623a      	str	r2, [r7, #32]
 8009768:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800976a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800976c:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d003      	beq.n	800977c <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009776:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	2202      	movs	r2, #2
 800978a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800978e:	79fb      	ldrb	r3, [r7, #7]
 8009790:	2b04      	cmp	r3, #4
 8009792:	d829      	bhi.n	80097e8 <xTaskGenericNotifyFromISR+0xcc>
 8009794:	a201      	add	r2, pc, #4	; (adr r2, 800979c <xTaskGenericNotifyFromISR+0x80>)
 8009796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979a:	bf00      	nop
 800979c:	08009807 	.word	0x08009807
 80097a0:	080097b1 	.word	0x080097b1
 80097a4:	080097bf 	.word	0x080097bf
 80097a8:	080097cb 	.word	0x080097cb
 80097ac:	080097d3 	.word	0x080097d3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80097b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	431a      	orrs	r2, r3
 80097b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ba:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80097bc:	e026      	b.n	800980c <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80097c8:	e020      	b.n	800980c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80097ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80097d0:	e01c      	b.n	800980c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80097d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d003      	beq.n	80097e2 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80097da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80097e0:	e014      	b.n	800980c <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 80097e2:	2300      	movs	r3, #0
 80097e4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80097e6:	e011      	b.n	800980c <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f0:	d00b      	beq.n	800980a <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	61bb      	str	r3, [r7, #24]
 8009804:	e7fe      	b.n	8009804 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8009806:	bf00      	nop
 8009808:	e000      	b.n	800980c <xTaskGenericNotifyFromISR+0xf0>
					break;
 800980a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800980c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009810:	2b01      	cmp	r3, #1
 8009812:	d144      	bne.n	800989e <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009818:	2b00      	cmp	r3, #0
 800981a:	d009      	beq.n	8009830 <xTaskGenericNotifyFromISR+0x114>
 800981c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009820:	f383 8811 	msr	BASEPRI, r3
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	617b      	str	r3, [r7, #20]
 800982e:	e7fe      	b.n	800982e <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009830:	4b20      	ldr	r3, [pc, #128]	; (80098b4 <xTaskGenericNotifyFromISR+0x198>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d11c      	bne.n	8009872 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	3304      	adds	r3, #4
 800983c:	4618      	mov	r0, r3
 800983e:	f7fd feed 	bl	800761c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009846:	2201      	movs	r2, #1
 8009848:	409a      	lsls	r2, r3
 800984a:	4b1b      	ldr	r3, [pc, #108]	; (80098b8 <xTaskGenericNotifyFromISR+0x19c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4313      	orrs	r3, r2
 8009850:	4a19      	ldr	r2, [pc, #100]	; (80098b8 <xTaskGenericNotifyFromISR+0x19c>)
 8009852:	6013      	str	r3, [r2, #0]
 8009854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009858:	4613      	mov	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4413      	add	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4a16      	ldr	r2, [pc, #88]	; (80098bc <xTaskGenericNotifyFromISR+0x1a0>)
 8009862:	441a      	add	r2, r3
 8009864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009866:	3304      	adds	r3, #4
 8009868:	4619      	mov	r1, r3
 800986a:	4610      	mov	r0, r2
 800986c:	f7fd fe79 	bl	8007562 <vListInsertEnd>
 8009870:	e005      	b.n	800987e <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009874:	3318      	adds	r3, #24
 8009876:	4619      	mov	r1, r3
 8009878:	4811      	ldr	r0, [pc, #68]	; (80098c0 <xTaskGenericNotifyFromISR+0x1a4>)
 800987a:	f7fd fe72 	bl	8007562 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009882:	4b10      	ldr	r3, [pc, #64]	; (80098c4 <xTaskGenericNotifyFromISR+0x1a8>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009888:	429a      	cmp	r2, r3
 800988a:	d908      	bls.n	800989e <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800988c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800988e:	2b00      	cmp	r3, #0
 8009890:	d002      	beq.n	8009898 <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009894:	2201      	movs	r2, #1
 8009896:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009898:	4b0b      	ldr	r3, [pc, #44]	; (80098c8 <xTaskGenericNotifyFromISR+0x1ac>)
 800989a:	2201      	movs	r2, #1
 800989c:	601a      	str	r2, [r3, #0]
 800989e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80098a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3738      	adds	r7, #56	; 0x38
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	20000248 	.word	0x20000248
 80098b8:	20000228 	.word	0x20000228
 80098bc:	20000124 	.word	0x20000124
 80098c0:	200001e0 	.word	0x200001e0
 80098c4:	20000120 	.word	0x20000120
 80098c8:	20000234 	.word	0x20000234

080098cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80098d6:	4b29      	ldr	r3, [pc, #164]	; (800997c <prvAddCurrentTaskToDelayedList+0xb0>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098dc:	4b28      	ldr	r3, [pc, #160]	; (8009980 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	3304      	adds	r3, #4
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fd fe9a 	bl	800761c <uxListRemove>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10b      	bne.n	8009906 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80098ee:	4b24      	ldr	r3, [pc, #144]	; (8009980 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f4:	2201      	movs	r2, #1
 80098f6:	fa02 f303 	lsl.w	r3, r2, r3
 80098fa:	43da      	mvns	r2, r3
 80098fc:	4b21      	ldr	r3, [pc, #132]	; (8009984 <prvAddCurrentTaskToDelayedList+0xb8>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4013      	ands	r3, r2
 8009902:	4a20      	ldr	r2, [pc, #128]	; (8009984 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009904:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990c:	d10a      	bne.n	8009924 <prvAddCurrentTaskToDelayedList+0x58>
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d007      	beq.n	8009924 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009914:	4b1a      	ldr	r3, [pc, #104]	; (8009980 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3304      	adds	r3, #4
 800991a:	4619      	mov	r1, r3
 800991c:	481a      	ldr	r0, [pc, #104]	; (8009988 <prvAddCurrentTaskToDelayedList+0xbc>)
 800991e:	f7fd fe20 	bl	8007562 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009922:	e026      	b.n	8009972 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4413      	add	r3, r2
 800992a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800992c:	4b14      	ldr	r3, [pc, #80]	; (8009980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	429a      	cmp	r2, r3
 800993a:	d209      	bcs.n	8009950 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800993c:	4b13      	ldr	r3, [pc, #76]	; (800998c <prvAddCurrentTaskToDelayedList+0xc0>)
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	4b0f      	ldr	r3, [pc, #60]	; (8009980 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	3304      	adds	r3, #4
 8009946:	4619      	mov	r1, r3
 8009948:	4610      	mov	r0, r2
 800994a:	f7fd fe2e 	bl	80075aa <vListInsert>
}
 800994e:	e010      	b.n	8009972 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009950:	4b0f      	ldr	r3, [pc, #60]	; (8009990 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	4b0a      	ldr	r3, [pc, #40]	; (8009980 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	3304      	adds	r3, #4
 800995a:	4619      	mov	r1, r3
 800995c:	4610      	mov	r0, r2
 800995e:	f7fd fe24 	bl	80075aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009962:	4b0c      	ldr	r3, [pc, #48]	; (8009994 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	429a      	cmp	r2, r3
 800996a:	d202      	bcs.n	8009972 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800996c:	4a09      	ldr	r2, [pc, #36]	; (8009994 <prvAddCurrentTaskToDelayedList+0xc8>)
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	6013      	str	r3, [r2, #0]
}
 8009972:	bf00      	nop
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	20000224 	.word	0x20000224
 8009980:	20000120 	.word	0x20000120
 8009984:	20000228 	.word	0x20000228
 8009988:	2000020c 	.word	0x2000020c
 800998c:	200001dc 	.word	0x200001dc
 8009990:	200001d8 	.word	0x200001d8
 8009994:	20000240 	.word	0x20000240

08009998 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b08a      	sub	sp, #40	; 0x28
 800999c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800999e:	2300      	movs	r3, #0
 80099a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80099a2:	f000 fb7f 	bl	800a0a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80099a6:	4b1c      	ldr	r3, [pc, #112]	; (8009a18 <xTimerCreateTimerTask+0x80>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d021      	beq.n	80099f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80099ae:	2300      	movs	r3, #0
 80099b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099b2:	2300      	movs	r3, #0
 80099b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099b6:	1d3a      	adds	r2, r7, #4
 80099b8:	f107 0108 	add.w	r1, r7, #8
 80099bc:	f107 030c 	add.w	r3, r7, #12
 80099c0:	4618      	mov	r0, r3
 80099c2:	f000 ffdd 	bl	800a980 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80099c6:	6879      	ldr	r1, [r7, #4]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	9202      	str	r2, [sp, #8]
 80099ce:	9301      	str	r3, [sp, #4]
 80099d0:	2302      	movs	r3, #2
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	2300      	movs	r3, #0
 80099d6:	460a      	mov	r2, r1
 80099d8:	4910      	ldr	r1, [pc, #64]	; (8009a1c <xTimerCreateTimerTask+0x84>)
 80099da:	4811      	ldr	r0, [pc, #68]	; (8009a20 <xTimerCreateTimerTask+0x88>)
 80099dc:	f7fe fdcc 	bl	8008578 <xTaskCreateStatic>
 80099e0:	4602      	mov	r2, r0
 80099e2:	4b10      	ldr	r3, [pc, #64]	; (8009a24 <xTimerCreateTimerTask+0x8c>)
 80099e4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80099e6:	4b0f      	ldr	r3, [pc, #60]	; (8009a24 <xTimerCreateTimerTask+0x8c>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80099ee:	2301      	movs	r3, #1
 80099f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d109      	bne.n	8009a0c <xTimerCreateTimerTask+0x74>
	__asm volatile
 80099f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fc:	f383 8811 	msr	BASEPRI, r3
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	613b      	str	r3, [r7, #16]
 8009a0a:	e7fe      	b.n	8009a0a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8009a0c:	697b      	ldr	r3, [r7, #20]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3718      	adds	r7, #24
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	2000027c 	.word	0x2000027c
 8009a1c:	0800d254 	.word	0x0800d254
 8009a20:	08009c89 	.word	0x08009c89
 8009a24:	20000280 	.word	0x20000280

08009a28 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b088      	sub	sp, #32
 8009a2c:	af02      	add	r7, sp, #8
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
 8009a34:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009a36:	2028      	movs	r0, #40	; 0x28
 8009a38:	f000 fdb2 	bl	800a5a0 <pvPortMalloc>
 8009a3c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00d      	beq.n	8009a60 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	9301      	str	r3, [sp, #4]
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	9300      	str	r3, [sp, #0]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	68b9      	ldr	r1, [r7, #8]
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f000 f841 	bl	8009ae2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009a60:	697b      	ldr	r3, [r7, #20]
	}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b08a      	sub	sp, #40	; 0x28
 8009a6e:	af02      	add	r7, sp, #8
 8009a70:	60f8      	str	r0, [r7, #12]
 8009a72:	60b9      	str	r1, [r7, #8]
 8009a74:	607a      	str	r2, [r7, #4]
 8009a76:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009a78:	2328      	movs	r3, #40	; 0x28
 8009a7a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	2b28      	cmp	r3, #40	; 0x28
 8009a80:	d009      	beq.n	8009a96 <xTimerCreateStatic+0x2c>
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	61bb      	str	r3, [r7, #24]
 8009a94:	e7fe      	b.n	8009a94 <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d109      	bne.n	8009ab2 <xTimerCreateStatic+0x48>
 8009a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	617b      	str	r3, [r7, #20]
 8009ab0:	e7fe      	b.n	8009ab0 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00d      	beq.n	8009ad8 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	9301      	str	r3, [sp, #4]
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	68b9      	ldr	r1, [r7, #8]
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f000 f805 	bl	8009ae2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009ad8:	69fb      	ldr	r3, [r7, #28]
	}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3720      	adds	r7, #32
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b086      	sub	sp, #24
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	60f8      	str	r0, [r7, #12]
 8009aea:	60b9      	str	r1, [r7, #8]
 8009aec:	607a      	str	r2, [r7, #4]
 8009aee:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d109      	bne.n	8009b0a <prvInitialiseNewTimer+0x28>
 8009af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	617b      	str	r3, [r7, #20]
 8009b08:	e7fe      	b.n	8009b08 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d01e      	beq.n	8009b4e <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009b10:	f000 fac8 	bl	800a0a4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	6a3a      	ldr	r2, [r7, #32]
 8009b2a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2e:	3304      	adds	r3, #4
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7fd fd09 	bl	8007548 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d008      	beq.n	8009b4e <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b42:	f043 0304 	orr.w	r3, r3, #4
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009b4e:	bf00      	nop
 8009b50:	3718      	adds	r7, #24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
	...

08009b58 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08a      	sub	sp, #40	; 0x28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
 8009b64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d109      	bne.n	8009b84 <xTimerGenericCommand+0x2c>
 8009b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	623b      	str	r3, [r7, #32]
 8009b82:	e7fe      	b.n	8009b82 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b84:	4b19      	ldr	r3, [pc, #100]	; (8009bec <xTimerGenericCommand+0x94>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d02a      	beq.n	8009be2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	2b05      	cmp	r3, #5
 8009b9c:	dc18      	bgt.n	8009bd0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b9e:	f7ff fae3 	bl	8009168 <xTaskGetSchedulerState>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d109      	bne.n	8009bbc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ba8:	4b10      	ldr	r3, [pc, #64]	; (8009bec <xTimerGenericCommand+0x94>)
 8009baa:	6818      	ldr	r0, [r3, #0]
 8009bac:	f107 0114 	add.w	r1, r7, #20
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bb4:	f7fd fee2 	bl	800797c <xQueueGenericSend>
 8009bb8:	6278      	str	r0, [r7, #36]	; 0x24
 8009bba:	e012      	b.n	8009be2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009bbc:	4b0b      	ldr	r3, [pc, #44]	; (8009bec <xTimerGenericCommand+0x94>)
 8009bbe:	6818      	ldr	r0, [r3, #0]
 8009bc0:	f107 0114 	add.w	r1, r7, #20
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f7fd fed8 	bl	800797c <xQueueGenericSend>
 8009bcc:	6278      	str	r0, [r7, #36]	; 0x24
 8009bce:	e008      	b.n	8009be2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009bd0:	4b06      	ldr	r3, [pc, #24]	; (8009bec <xTimerGenericCommand+0x94>)
 8009bd2:	6818      	ldr	r0, [r3, #0]
 8009bd4:	f107 0114 	add.w	r1, r7, #20
 8009bd8:	2300      	movs	r3, #0
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	f7fd ffc8 	bl	8007b70 <xQueueGenericSendFromISR>
 8009be0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3728      	adds	r7, #40	; 0x28
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	2000027c 	.word	0x2000027c

08009bf0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af02      	add	r7, sp, #8
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bfa:	4b22      	ldr	r3, [pc, #136]	; (8009c84 <prvProcessExpiredTimer+0x94>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	3304      	adds	r3, #4
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fd fd07 	bl	800761c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c14:	f003 0304 	and.w	r3, r3, #4
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d021      	beq.n	8009c60 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	699a      	ldr	r2, [r3, #24]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	18d1      	adds	r1, r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	683a      	ldr	r2, [r7, #0]
 8009c28:	6978      	ldr	r0, [r7, #20]
 8009c2a:	f000 f8d1 	bl	8009dd0 <prvInsertTimerInActiveList>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d01e      	beq.n	8009c72 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c34:	2300      	movs	r3, #0
 8009c36:	9300      	str	r3, [sp, #0]
 8009c38:	2300      	movs	r3, #0
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	6978      	ldr	r0, [r7, #20]
 8009c40:	f7ff ff8a 	bl	8009b58 <xTimerGenericCommand>
 8009c44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d112      	bne.n	8009c72 <prvProcessExpiredTimer+0x82>
 8009c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	60fb      	str	r3, [r7, #12]
 8009c5e:	e7fe      	b.n	8009c5e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c66:	f023 0301 	bic.w	r3, r3, #1
 8009c6a:	b2da      	uxtb	r2, r3
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	6978      	ldr	r0, [r7, #20]
 8009c78:	4798      	blx	r3
}
 8009c7a:	bf00      	nop
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	20000274 	.word	0x20000274

08009c88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c90:	f107 0308 	add.w	r3, r7, #8
 8009c94:	4618      	mov	r0, r3
 8009c96:	f000 f857 	bl	8009d48 <prvGetNextExpireTime>
 8009c9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 f803 	bl	8009cac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009ca6:	f000 f8d5 	bl	8009e54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009caa:	e7f1      	b.n	8009c90 <prvTimerTask+0x8>

08009cac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009cb6:	f7fe fe87 	bl	80089c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009cba:	f107 0308 	add.w	r3, r7, #8
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f000 f866 	bl	8009d90 <prvSampleTimeNow>
 8009cc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d130      	bne.n	8009d2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10a      	bne.n	8009ce8 <prvProcessTimerOrBlockTask+0x3c>
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d806      	bhi.n	8009ce8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009cda:	f7fe fe83 	bl	80089e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009cde:	68f9      	ldr	r1, [r7, #12]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f7ff ff85 	bl	8009bf0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ce6:	e024      	b.n	8009d32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d008      	beq.n	8009d00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009cee:	4b13      	ldr	r3, [pc, #76]	; (8009d3c <prvProcessTimerOrBlockTask+0x90>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d101      	bne.n	8009cfc <prvProcessTimerOrBlockTask+0x50>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e000      	b.n	8009cfe <prvProcessTimerOrBlockTask+0x52>
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d00:	4b0f      	ldr	r3, [pc, #60]	; (8009d40 <prvProcessTimerOrBlockTask+0x94>)
 8009d02:	6818      	ldr	r0, [r3, #0]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	f7fe fbff 	bl	8008510 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d12:	f7fe fe67 	bl	80089e4 <xTaskResumeAll>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10a      	bne.n	8009d32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d1c:	4b09      	ldr	r3, [pc, #36]	; (8009d44 <prvProcessTimerOrBlockTask+0x98>)
 8009d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d22:	601a      	str	r2, [r3, #0]
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	f3bf 8f6f 	isb	sy
}
 8009d2c:	e001      	b.n	8009d32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d2e:	f7fe fe59 	bl	80089e4 <xTaskResumeAll>
}
 8009d32:	bf00      	nop
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	20000278 	.word	0x20000278
 8009d40:	2000027c 	.word	0x2000027c
 8009d44:	e000ed04 	.word	0xe000ed04

08009d48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d50:	4b0e      	ldr	r3, [pc, #56]	; (8009d8c <prvGetNextExpireTime+0x44>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d101      	bne.n	8009d5e <prvGetNextExpireTime+0x16>
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	e000      	b.n	8009d60 <prvGetNextExpireTime+0x18>
 8009d5e:	2200      	movs	r2, #0
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d105      	bne.n	8009d78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d6c:	4b07      	ldr	r3, [pc, #28]	; (8009d8c <prvGetNextExpireTime+0x44>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	60fb      	str	r3, [r7, #12]
 8009d76:	e001      	b.n	8009d7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	20000274 	.word	0x20000274

08009d90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d98:	f7fe fec0 	bl	8008b1c <xTaskGetTickCount>
 8009d9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d9e:	4b0b      	ldr	r3, [pc, #44]	; (8009dcc <prvSampleTimeNow+0x3c>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d205      	bcs.n	8009db4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009da8:	f000 f918 	bl	8009fdc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	601a      	str	r2, [r3, #0]
 8009db2:	e002      	b.n	8009dba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009dba:	4a04      	ldr	r2, [pc, #16]	; (8009dcc <prvSampleTimeNow+0x3c>)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20000284 	.word	0x20000284

08009dd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009dde:	2300      	movs	r3, #0
 8009de0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d812      	bhi.n	8009e1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	1ad2      	subs	r2, r2, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	699b      	ldr	r3, [r3, #24]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d302      	bcc.n	8009e0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e04:	2301      	movs	r3, #1
 8009e06:	617b      	str	r3, [r7, #20]
 8009e08:	e01b      	b.n	8009e42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e0a:	4b10      	ldr	r3, [pc, #64]	; (8009e4c <prvInsertTimerInActiveList+0x7c>)
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	3304      	adds	r3, #4
 8009e12:	4619      	mov	r1, r3
 8009e14:	4610      	mov	r0, r2
 8009e16:	f7fd fbc8 	bl	80075aa <vListInsert>
 8009e1a:	e012      	b.n	8009e42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d206      	bcs.n	8009e32 <prvInsertTimerInActiveList+0x62>
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d302      	bcc.n	8009e32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	617b      	str	r3, [r7, #20]
 8009e30:	e007      	b.n	8009e42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e32:	4b07      	ldr	r3, [pc, #28]	; (8009e50 <prvInsertTimerInActiveList+0x80>)
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	3304      	adds	r3, #4
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	f7fd fbb4 	bl	80075aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e42:	697b      	ldr	r3, [r7, #20]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3718      	adds	r7, #24
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	20000278 	.word	0x20000278
 8009e50:	20000274 	.word	0x20000274

08009e54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b08c      	sub	sp, #48	; 0x30
 8009e58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e5a:	e0ac      	b.n	8009fb6 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f2c0 80a8 	blt.w	8009fb4 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	695b      	ldr	r3, [r3, #20]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d004      	beq.n	8009e7a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	3304      	adds	r3, #4
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7fd fbd1 	bl	800761c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e7a:	1d3b      	adds	r3, r7, #4
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7ff ff87 	bl	8009d90 <prvSampleTimeNow>
 8009e82:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	2b09      	cmp	r3, #9
 8009e88:	f200 8095 	bhi.w	8009fb6 <prvProcessReceivedCommands+0x162>
 8009e8c:	a201      	add	r2, pc, #4	; (adr r2, 8009e94 <prvProcessReceivedCommands+0x40>)
 8009e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e92:	bf00      	nop
 8009e94:	08009ebd 	.word	0x08009ebd
 8009e98:	08009ebd 	.word	0x08009ebd
 8009e9c:	08009ebd 	.word	0x08009ebd
 8009ea0:	08009f2f 	.word	0x08009f2f
 8009ea4:	08009f43 	.word	0x08009f43
 8009ea8:	08009f8b 	.word	0x08009f8b
 8009eac:	08009ebd 	.word	0x08009ebd
 8009eb0:	08009ebd 	.word	0x08009ebd
 8009eb4:	08009f2f 	.word	0x08009f2f
 8009eb8:	08009f43 	.word	0x08009f43
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ec2:	f043 0301 	orr.w	r3, r3, #1
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed2:	699b      	ldr	r3, [r3, #24]
 8009ed4:	18d1      	adds	r1, r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6a3a      	ldr	r2, [r7, #32]
 8009eda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009edc:	f7ff ff78 	bl	8009dd0 <prvInsertTimerInActiveList>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d067      	beq.n	8009fb6 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	6a1b      	ldr	r3, [r3, #32]
 8009eea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009eec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ef4:	f003 0304 	and.w	r3, r3, #4
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d05c      	beq.n	8009fb6 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	441a      	add	r2, r3
 8009f04:	2300      	movs	r3, #0
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	2300      	movs	r3, #0
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f0e:	f7ff fe23 	bl	8009b58 <xTimerGenericCommand>
 8009f12:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d14d      	bne.n	8009fb6 <prvProcessReceivedCommands+0x162>
 8009f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1e:	f383 8811 	msr	BASEPRI, r3
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	f3bf 8f4f 	dsb	sy
 8009f2a:	61bb      	str	r3, [r7, #24]
 8009f2c:	e7fe      	b.n	8009f2c <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009f34:	f023 0301 	bic.w	r3, r3, #1
 8009f38:	b2da      	uxtb	r2, r3
 8009f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8009f40:	e039      	b.n	8009fb6 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009f48:	f043 0301 	orr.w	r3, r3, #1
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f58:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d109      	bne.n	8009f76 <prvProcessReceivedCommands+0x122>
 8009f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	617b      	str	r3, [r7, #20]
 8009f74:	e7fe      	b.n	8009f74 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	699a      	ldr	r2, [r3, #24]
 8009f7a:	6a3b      	ldr	r3, [r7, #32]
 8009f7c:	18d1      	adds	r1, r2, r3
 8009f7e:	6a3b      	ldr	r3, [r7, #32]
 8009f80:	6a3a      	ldr	r2, [r7, #32]
 8009f82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f84:	f7ff ff24 	bl	8009dd0 <prvInsertTimerInActiveList>
					break;
 8009f88:	e015      	b.n	8009fb6 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009f90:	f003 0302 	and.w	r3, r3, #2
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d103      	bne.n	8009fa0 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8009f98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f9a:	f000 fbc3 	bl	800a724 <vPortFree>
 8009f9e:	e00a      	b.n	8009fb6 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009fa6:	f023 0301 	bic.w	r3, r3, #1
 8009faa:	b2da      	uxtb	r2, r3
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009fb2:	e000      	b.n	8009fb6 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009fb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fb6:	4b08      	ldr	r3, [pc, #32]	; (8009fd8 <prvProcessReceivedCommands+0x184>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f107 0108 	add.w	r1, r7, #8
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7fd fef3 	bl	8007dac <xQueueReceive>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f47f af47 	bne.w	8009e5c <prvProcessReceivedCommands+0x8>
	}
}
 8009fce:	bf00      	nop
 8009fd0:	3728      	adds	r7, #40	; 0x28
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	2000027c 	.word	0x2000027c

08009fdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b088      	sub	sp, #32
 8009fe0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fe2:	e047      	b.n	800a074 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fe4:	4b2d      	ldr	r3, [pc, #180]	; (800a09c <prvSwitchTimerLists+0xc0>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fee:	4b2b      	ldr	r3, [pc, #172]	; (800a09c <prvSwitchTimerLists+0xc0>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	3304      	adds	r3, #4
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7fd fb0d 	bl	800761c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a010:	f003 0304 	and.w	r3, r3, #4
 800a014:	2b00      	cmp	r3, #0
 800a016:	d02d      	beq.n	800a074 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	699b      	ldr	r3, [r3, #24]
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	4413      	add	r3, r2
 800a020:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	429a      	cmp	r2, r3
 800a028:	d90e      	bls.n	800a048 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a036:	4b19      	ldr	r3, [pc, #100]	; (800a09c <prvSwitchTimerLists+0xc0>)
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	3304      	adds	r3, #4
 800a03e:	4619      	mov	r1, r3
 800a040:	4610      	mov	r0, r2
 800a042:	f7fd fab2 	bl	80075aa <vListInsert>
 800a046:	e015      	b.n	800a074 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a048:	2300      	movs	r3, #0
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	2300      	movs	r3, #0
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	2100      	movs	r1, #0
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f7ff fd80 	bl	8009b58 <xTimerGenericCommand>
 800a058:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d109      	bne.n	800a074 <prvSwitchTimerLists+0x98>
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	603b      	str	r3, [r7, #0]
 800a072:	e7fe      	b.n	800a072 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a074:	4b09      	ldr	r3, [pc, #36]	; (800a09c <prvSwitchTimerLists+0xc0>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1b2      	bne.n	8009fe4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a07e:	4b07      	ldr	r3, [pc, #28]	; (800a09c <prvSwitchTimerLists+0xc0>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a084:	4b06      	ldr	r3, [pc, #24]	; (800a0a0 <prvSwitchTimerLists+0xc4>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a04      	ldr	r2, [pc, #16]	; (800a09c <prvSwitchTimerLists+0xc0>)
 800a08a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a08c:	4a04      	ldr	r2, [pc, #16]	; (800a0a0 <prvSwitchTimerLists+0xc4>)
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	6013      	str	r3, [r2, #0]
}
 800a092:	bf00      	nop
 800a094:	3718      	adds	r7, #24
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	20000274 	.word	0x20000274
 800a0a0:	20000278 	.word	0x20000278

0800a0a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a0aa:	f000 f95f 	bl	800a36c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a0ae:	4b15      	ldr	r3, [pc, #84]	; (800a104 <prvCheckForValidListAndQueue+0x60>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d120      	bne.n	800a0f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a0b6:	4814      	ldr	r0, [pc, #80]	; (800a108 <prvCheckForValidListAndQueue+0x64>)
 800a0b8:	f7fd fa26 	bl	8007508 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a0bc:	4813      	ldr	r0, [pc, #76]	; (800a10c <prvCheckForValidListAndQueue+0x68>)
 800a0be:	f7fd fa23 	bl	8007508 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a0c2:	4b13      	ldr	r3, [pc, #76]	; (800a110 <prvCheckForValidListAndQueue+0x6c>)
 800a0c4:	4a10      	ldr	r2, [pc, #64]	; (800a108 <prvCheckForValidListAndQueue+0x64>)
 800a0c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a0c8:	4b12      	ldr	r3, [pc, #72]	; (800a114 <prvCheckForValidListAndQueue+0x70>)
 800a0ca:	4a10      	ldr	r2, [pc, #64]	; (800a10c <prvCheckForValidListAndQueue+0x68>)
 800a0cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	4b11      	ldr	r3, [pc, #68]	; (800a118 <prvCheckForValidListAndQueue+0x74>)
 800a0d4:	4a11      	ldr	r2, [pc, #68]	; (800a11c <prvCheckForValidListAndQueue+0x78>)
 800a0d6:	210c      	movs	r1, #12
 800a0d8:	200a      	movs	r0, #10
 800a0da:	f7fd fb31 	bl	8007740 <xQueueGenericCreateStatic>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	4b08      	ldr	r3, [pc, #32]	; (800a104 <prvCheckForValidListAndQueue+0x60>)
 800a0e2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a0e4:	4b07      	ldr	r3, [pc, #28]	; (800a104 <prvCheckForValidListAndQueue+0x60>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d005      	beq.n	800a0f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a0ec:	4b05      	ldr	r3, [pc, #20]	; (800a104 <prvCheckForValidListAndQueue+0x60>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	490b      	ldr	r1, [pc, #44]	; (800a120 <prvCheckForValidListAndQueue+0x7c>)
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fe f9e4 	bl	80084c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0f8:	f000 f966 	bl	800a3c8 <vPortExitCritical>
}
 800a0fc:	bf00      	nop
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	2000027c 	.word	0x2000027c
 800a108:	2000024c 	.word	0x2000024c
 800a10c:	20000260 	.word	0x20000260
 800a110:	20000274 	.word	0x20000274
 800a114:	20000278 	.word	0x20000278
 800a118:	20000300 	.word	0x20000300
 800a11c:	20000288 	.word	0x20000288
 800a120:	0800d25c 	.word	0x0800d25c

0800a124 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	3b04      	subs	r3, #4
 800a134:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a13c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	3b04      	subs	r3, #4
 800a142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	f023 0201 	bic.w	r2, r3, #1
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3b04      	subs	r3, #4
 800a152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a154:	4a0c      	ldr	r2, [pc, #48]	; (800a188 <pxPortInitialiseStack+0x64>)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	3b14      	subs	r3, #20
 800a15e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	3b04      	subs	r3, #4
 800a16a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f06f 0202 	mvn.w	r2, #2
 800a172:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	3b20      	subs	r3, #32
 800a178:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a17a:	68fb      	ldr	r3, [r7, #12]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3714      	adds	r7, #20
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr
 800a188:	0800a18d 	.word	0x0800a18d

0800a18c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a192:	2300      	movs	r3, #0
 800a194:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a196:	4b11      	ldr	r3, [pc, #68]	; (800a1dc <prvTaskExitError+0x50>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a19e:	d009      	beq.n	800a1b4 <prvTaskExitError+0x28>
 800a1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a4:	f383 8811 	msr	BASEPRI, r3
 800a1a8:	f3bf 8f6f 	isb	sy
 800a1ac:	f3bf 8f4f 	dsb	sy
 800a1b0:	60fb      	str	r3, [r7, #12]
 800a1b2:	e7fe      	b.n	800a1b2 <prvTaskExitError+0x26>
 800a1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a1c6:	bf00      	nop
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0fc      	beq.n	800a1c8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a1ce:	bf00      	nop
 800a1d0:	3714      	adds	r7, #20
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	20000008 	.word	0x20000008

0800a1e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a1e0:	4b07      	ldr	r3, [pc, #28]	; (800a200 <pxCurrentTCBConst2>)
 800a1e2:	6819      	ldr	r1, [r3, #0]
 800a1e4:	6808      	ldr	r0, [r1, #0]
 800a1e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ea:	f380 8809 	msr	PSP, r0
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	f04f 0000 	mov.w	r0, #0
 800a1f6:	f380 8811 	msr	BASEPRI, r0
 800a1fa:	4770      	bx	lr
 800a1fc:	f3af 8000 	nop.w

0800a200 <pxCurrentTCBConst2>:
 800a200:	20000120 	.word	0x20000120
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a204:	bf00      	nop
 800a206:	bf00      	nop

0800a208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a208:	4808      	ldr	r0, [pc, #32]	; (800a22c <prvPortStartFirstTask+0x24>)
 800a20a:	6800      	ldr	r0, [r0, #0]
 800a20c:	6800      	ldr	r0, [r0, #0]
 800a20e:	f380 8808 	msr	MSP, r0
 800a212:	f04f 0000 	mov.w	r0, #0
 800a216:	f380 8814 	msr	CONTROL, r0
 800a21a:	b662      	cpsie	i
 800a21c:	b661      	cpsie	f
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	df00      	svc	0
 800a228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a22a:	bf00      	nop
 800a22c:	e000ed08 	.word	0xe000ed08

0800a230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a236:	4b44      	ldr	r3, [pc, #272]	; (800a348 <xPortStartScheduler+0x118>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a44      	ldr	r2, [pc, #272]	; (800a34c <xPortStartScheduler+0x11c>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d109      	bne.n	800a254 <xPortStartScheduler+0x24>
 800a240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	613b      	str	r3, [r7, #16]
 800a252:	e7fe      	b.n	800a252 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a254:	4b3c      	ldr	r3, [pc, #240]	; (800a348 <xPortStartScheduler+0x118>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a3d      	ldr	r2, [pc, #244]	; (800a350 <xPortStartScheduler+0x120>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d109      	bne.n	800a272 <xPortStartScheduler+0x42>
 800a25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	60fb      	str	r3, [r7, #12]
 800a270:	e7fe      	b.n	800a270 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a272:	4b38      	ldr	r3, [pc, #224]	; (800a354 <xPortStartScheduler+0x124>)
 800a274:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	22ff      	movs	r2, #255	; 0xff
 800a282:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a28c:	78fb      	ldrb	r3, [r7, #3]
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a294:	b2da      	uxtb	r2, r3
 800a296:	4b30      	ldr	r3, [pc, #192]	; (800a358 <xPortStartScheduler+0x128>)
 800a298:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a29a:	4b30      	ldr	r3, [pc, #192]	; (800a35c <xPortStartScheduler+0x12c>)
 800a29c:	2207      	movs	r2, #7
 800a29e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2a0:	e009      	b.n	800a2b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a2a2:	4b2e      	ldr	r3, [pc, #184]	; (800a35c <xPortStartScheduler+0x12c>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	4a2c      	ldr	r2, [pc, #176]	; (800a35c <xPortStartScheduler+0x12c>)
 800a2aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a2ac:	78fb      	ldrb	r3, [r7, #3]
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	005b      	lsls	r3, r3, #1
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2b6:	78fb      	ldrb	r3, [r7, #3]
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2be:	2b80      	cmp	r3, #128	; 0x80
 800a2c0:	d0ef      	beq.n	800a2a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a2c2:	4b26      	ldr	r3, [pc, #152]	; (800a35c <xPortStartScheduler+0x12c>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f1c3 0307 	rsb	r3, r3, #7
 800a2ca:	2b04      	cmp	r3, #4
 800a2cc:	d009      	beq.n	800a2e2 <xPortStartScheduler+0xb2>
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	60bb      	str	r3, [r7, #8]
 800a2e0:	e7fe      	b.n	800a2e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a2e2:	4b1e      	ldr	r3, [pc, #120]	; (800a35c <xPortStartScheduler+0x12c>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	021b      	lsls	r3, r3, #8
 800a2e8:	4a1c      	ldr	r2, [pc, #112]	; (800a35c <xPortStartScheduler+0x12c>)
 800a2ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a2ec:	4b1b      	ldr	r3, [pc, #108]	; (800a35c <xPortStartScheduler+0x12c>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2f4:	4a19      	ldr	r2, [pc, #100]	; (800a35c <xPortStartScheduler+0x12c>)
 800a2f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	b2da      	uxtb	r2, r3
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a300:	4b17      	ldr	r3, [pc, #92]	; (800a360 <xPortStartScheduler+0x130>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a16      	ldr	r2, [pc, #88]	; (800a360 <xPortStartScheduler+0x130>)
 800a306:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a30a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a30c:	4b14      	ldr	r3, [pc, #80]	; (800a360 <xPortStartScheduler+0x130>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a13      	ldr	r2, [pc, #76]	; (800a360 <xPortStartScheduler+0x130>)
 800a312:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a316:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a318:	f000 f8d6 	bl	800a4c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a31c:	4b11      	ldr	r3, [pc, #68]	; (800a364 <xPortStartScheduler+0x134>)
 800a31e:	2200      	movs	r2, #0
 800a320:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a322:	f000 f8f5 	bl	800a510 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a326:	4b10      	ldr	r3, [pc, #64]	; (800a368 <xPortStartScheduler+0x138>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a0f      	ldr	r2, [pc, #60]	; (800a368 <xPortStartScheduler+0x138>)
 800a32c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a330:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a332:	f7ff ff69 	bl	800a208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a336:	f7fe fcb9 	bl	8008cac <vTaskSwitchContext>
	prvTaskExitError();
 800a33a:	f7ff ff27 	bl	800a18c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3718      	adds	r7, #24
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	e000ed00 	.word	0xe000ed00
 800a34c:	410fc271 	.word	0x410fc271
 800a350:	410fc270 	.word	0x410fc270
 800a354:	e000e400 	.word	0xe000e400
 800a358:	20000348 	.word	0x20000348
 800a35c:	2000034c 	.word	0x2000034c
 800a360:	e000ed20 	.word	0xe000ed20
 800a364:	20000008 	.word	0x20000008
 800a368:	e000ef34 	.word	0xe000ef34

0800a36c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a384:	4b0e      	ldr	r3, [pc, #56]	; (800a3c0 <vPortEnterCritical+0x54>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	3301      	adds	r3, #1
 800a38a:	4a0d      	ldr	r2, [pc, #52]	; (800a3c0 <vPortEnterCritical+0x54>)
 800a38c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a38e:	4b0c      	ldr	r3, [pc, #48]	; (800a3c0 <vPortEnterCritical+0x54>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b01      	cmp	r3, #1
 800a394:	d10e      	bne.n	800a3b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a396:	4b0b      	ldr	r3, [pc, #44]	; (800a3c4 <vPortEnterCritical+0x58>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d009      	beq.n	800a3b4 <vPortEnterCritical+0x48>
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	603b      	str	r3, [r7, #0]
 800a3b2:	e7fe      	b.n	800a3b2 <vPortEnterCritical+0x46>
	}
}
 800a3b4:	bf00      	nop
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr
 800a3c0:	20000008 	.word	0x20000008
 800a3c4:	e000ed04 	.word	0xe000ed04

0800a3c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a3ce:	4b11      	ldr	r3, [pc, #68]	; (800a414 <vPortExitCritical+0x4c>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d109      	bne.n	800a3ea <vPortExitCritical+0x22>
 800a3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3da:	f383 8811 	msr	BASEPRI, r3
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	607b      	str	r3, [r7, #4]
 800a3e8:	e7fe      	b.n	800a3e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a3ea:	4b0a      	ldr	r3, [pc, #40]	; (800a414 <vPortExitCritical+0x4c>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	4a08      	ldr	r2, [pc, #32]	; (800a414 <vPortExitCritical+0x4c>)
 800a3f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a3f4:	4b07      	ldr	r3, [pc, #28]	; (800a414 <vPortExitCritical+0x4c>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d104      	bne.n	800a406 <vPortExitCritical+0x3e>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a406:	bf00      	nop
 800a408:	370c      	adds	r7, #12
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	20000008 	.word	0x20000008
	...

0800a420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a420:	f3ef 8009 	mrs	r0, PSP
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	4b15      	ldr	r3, [pc, #84]	; (800a480 <pxCurrentTCBConst>)
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	f01e 0f10 	tst.w	lr, #16
 800a430:	bf08      	it	eq
 800a432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43a:	6010      	str	r0, [r2, #0]
 800a43c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a440:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a444:	f380 8811 	msr	BASEPRI, r0
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	f7fe fc2c 	bl	8008cac <vTaskSwitchContext>
 800a454:	f04f 0000 	mov.w	r0, #0
 800a458:	f380 8811 	msr	BASEPRI, r0
 800a45c:	bc09      	pop	{r0, r3}
 800a45e:	6819      	ldr	r1, [r3, #0]
 800a460:	6808      	ldr	r0, [r1, #0]
 800a462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a466:	f01e 0f10 	tst.w	lr, #16
 800a46a:	bf08      	it	eq
 800a46c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a470:	f380 8809 	msr	PSP, r0
 800a474:	f3bf 8f6f 	isb	sy
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	f3af 8000 	nop.w

0800a480 <pxCurrentTCBConst>:
 800a480:	20000120 	.word	0x20000120
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a484:	bf00      	nop
 800a486:	bf00      	nop

0800a488 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
	__asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a4a0:	f7fe fb4c 	bl	8008b3c <xTaskIncrementTick>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d003      	beq.n	800a4b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a4aa:	4b06      	ldr	r3, [pc, #24]	; (800a4c4 <SysTick_Handler+0x3c>)
 800a4ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4b0:	601a      	str	r2, [r3, #0]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a4bc:	bf00      	nop
 800a4be:	3708      	adds	r7, #8
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	e000ed04 	.word	0xe000ed04

0800a4c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a4cc:	4b0b      	ldr	r3, [pc, #44]	; (800a4fc <vPortSetupTimerInterrupt+0x34>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a4d2:	4b0b      	ldr	r3, [pc, #44]	; (800a500 <vPortSetupTimerInterrupt+0x38>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a4d8:	4b0a      	ldr	r3, [pc, #40]	; (800a504 <vPortSetupTimerInterrupt+0x3c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a0a      	ldr	r2, [pc, #40]	; (800a508 <vPortSetupTimerInterrupt+0x40>)
 800a4de:	fba2 2303 	umull	r2, r3, r2, r3
 800a4e2:	099b      	lsrs	r3, r3, #6
 800a4e4:	4a09      	ldr	r2, [pc, #36]	; (800a50c <vPortSetupTimerInterrupt+0x44>)
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a4ea:	4b04      	ldr	r3, [pc, #16]	; (800a4fc <vPortSetupTimerInterrupt+0x34>)
 800a4ec:	2207      	movs	r2, #7
 800a4ee:	601a      	str	r2, [r3, #0]
}
 800a4f0:	bf00      	nop
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	e000e010 	.word	0xe000e010
 800a500:	e000e018 	.word	0xe000e018
 800a504:	2000009c 	.word	0x2000009c
 800a508:	10624dd3 	.word	0x10624dd3
 800a50c:	e000e014 	.word	0xe000e014

0800a510 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a510:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a520 <vPortEnableVFP+0x10>
 800a514:	6801      	ldr	r1, [r0, #0]
 800a516:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a51a:	6001      	str	r1, [r0, #0]
 800a51c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a51e:	bf00      	nop
 800a520:	e000ed88 	.word	0xe000ed88

0800a524 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a52a:	f3ef 8305 	mrs	r3, IPSR
 800a52e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2b0f      	cmp	r3, #15
 800a534:	d913      	bls.n	800a55e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a536:	4a16      	ldr	r2, [pc, #88]	; (800a590 <vPortValidateInterruptPriority+0x6c>)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	4413      	add	r3, r2
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a540:	4b14      	ldr	r3, [pc, #80]	; (800a594 <vPortValidateInterruptPriority+0x70>)
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	7afa      	ldrb	r2, [r7, #11]
 800a546:	429a      	cmp	r2, r3
 800a548:	d209      	bcs.n	800a55e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54e:	f383 8811 	msr	BASEPRI, r3
 800a552:	f3bf 8f6f 	isb	sy
 800a556:	f3bf 8f4f 	dsb	sy
 800a55a:	607b      	str	r3, [r7, #4]
 800a55c:	e7fe      	b.n	800a55c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a55e:	4b0e      	ldr	r3, [pc, #56]	; (800a598 <vPortValidateInterruptPriority+0x74>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a566:	4b0d      	ldr	r3, [pc, #52]	; (800a59c <vPortValidateInterruptPriority+0x78>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d909      	bls.n	800a582 <vPortValidateInterruptPriority+0x5e>
 800a56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	603b      	str	r3, [r7, #0]
 800a580:	e7fe      	b.n	800a580 <vPortValidateInterruptPriority+0x5c>
	}
 800a582:	bf00      	nop
 800a584:	3714      	adds	r7, #20
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	e000e3f0 	.word	0xe000e3f0
 800a594:	20000348 	.word	0x20000348
 800a598:	e000ed0c 	.word	0xe000ed0c
 800a59c:	2000034c 	.word	0x2000034c

0800a5a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08a      	sub	sp, #40	; 0x28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a5ac:	f7fe fa0c 	bl	80089c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a5b0:	4b57      	ldr	r3, [pc, #348]	; (800a710 <pvPortMalloc+0x170>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d101      	bne.n	800a5bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a5b8:	f000 f90c 	bl	800a7d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a5bc:	4b55      	ldr	r3, [pc, #340]	; (800a714 <pvPortMalloc+0x174>)
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4013      	ands	r3, r2
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f040 808c 	bne.w	800a6e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d01c      	beq.n	800a60a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a5d0:	2208      	movs	r2, #8
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f003 0307 	and.w	r3, r3, #7
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d013      	beq.n	800a60a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f023 0307 	bic.w	r3, r3, #7
 800a5e8:	3308      	adds	r3, #8
 800a5ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f003 0307 	and.w	r3, r3, #7
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d009      	beq.n	800a60a <pvPortMalloc+0x6a>
 800a5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fa:	f383 8811 	msr	BASEPRI, r3
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	f3bf 8f4f 	dsb	sy
 800a606:	617b      	str	r3, [r7, #20]
 800a608:	e7fe      	b.n	800a608 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d068      	beq.n	800a6e2 <pvPortMalloc+0x142>
 800a610:	4b41      	ldr	r3, [pc, #260]	; (800a718 <pvPortMalloc+0x178>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	429a      	cmp	r2, r3
 800a618:	d863      	bhi.n	800a6e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a61a:	4b40      	ldr	r3, [pc, #256]	; (800a71c <pvPortMalloc+0x17c>)
 800a61c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a61e:	4b3f      	ldr	r3, [pc, #252]	; (800a71c <pvPortMalloc+0x17c>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a624:	e004      	b.n	800a630 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a628:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	429a      	cmp	r2, r3
 800a638:	d903      	bls.n	800a642 <pvPortMalloc+0xa2>
 800a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1f1      	bne.n	800a626 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a642:	4b33      	ldr	r3, [pc, #204]	; (800a710 <pvPortMalloc+0x170>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a648:	429a      	cmp	r2, r3
 800a64a:	d04a      	beq.n	800a6e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a64c:	6a3b      	ldr	r3, [r7, #32]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2208      	movs	r2, #8
 800a652:	4413      	add	r3, r2
 800a654:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	6a3b      	ldr	r3, [r7, #32]
 800a65c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	1ad2      	subs	r2, r2, r3
 800a666:	2308      	movs	r3, #8
 800a668:	005b      	lsls	r3, r3, #1
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d91e      	bls.n	800a6ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a66e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	4413      	add	r3, r2
 800a674:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	f003 0307 	and.w	r3, r3, #7
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d009      	beq.n	800a694 <pvPortMalloc+0xf4>
 800a680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a684:	f383 8811 	msr	BASEPRI, r3
 800a688:	f3bf 8f6f 	isb	sy
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	613b      	str	r3, [r7, #16]
 800a692:	e7fe      	b.n	800a692 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	1ad2      	subs	r2, r2, r3
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a6a6:	69b8      	ldr	r0, [r7, #24]
 800a6a8:	f000 f8f6 	bl	800a898 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6ac:	4b1a      	ldr	r3, [pc, #104]	; (800a718 <pvPortMalloc+0x178>)
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	1ad3      	subs	r3, r2, r3
 800a6b6:	4a18      	ldr	r2, [pc, #96]	; (800a718 <pvPortMalloc+0x178>)
 800a6b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6ba:	4b17      	ldr	r3, [pc, #92]	; (800a718 <pvPortMalloc+0x178>)
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	4b18      	ldr	r3, [pc, #96]	; (800a720 <pvPortMalloc+0x180>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d203      	bcs.n	800a6ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a6c6:	4b14      	ldr	r3, [pc, #80]	; (800a718 <pvPortMalloc+0x178>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a15      	ldr	r2, [pc, #84]	; (800a720 <pvPortMalloc+0x180>)
 800a6cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d0:	685a      	ldr	r2, [r3, #4]
 800a6d2:	4b10      	ldr	r3, [pc, #64]	; (800a714 <pvPortMalloc+0x174>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	431a      	orrs	r2, r3
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6de:	2200      	movs	r2, #0
 800a6e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6e2:	f7fe f97f 	bl	80089e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	f003 0307 	and.w	r3, r3, #7
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d009      	beq.n	800a704 <pvPortMalloc+0x164>
 800a6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	60fb      	str	r3, [r7, #12]
 800a702:	e7fe      	b.n	800a702 <pvPortMalloc+0x162>
	return pvReturn;
 800a704:	69fb      	ldr	r3, [r7, #28]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3728      	adds	r7, #40	; 0x28
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	20000f10 	.word	0x20000f10
 800a714:	20000f1c 	.word	0x20000f1c
 800a718:	20000f14 	.word	0x20000f14
 800a71c:	20000f08 	.word	0x20000f08
 800a720:	20000f18 	.word	0x20000f18

0800a724 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d046      	beq.n	800a7c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a736:	2308      	movs	r3, #8
 800a738:	425b      	negs	r3, r3
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	4413      	add	r3, r2
 800a73e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	685a      	ldr	r2, [r3, #4]
 800a748:	4b20      	ldr	r3, [pc, #128]	; (800a7cc <vPortFree+0xa8>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4013      	ands	r3, r2
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d109      	bne.n	800a766 <vPortFree+0x42>
 800a752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	60fb      	str	r3, [r7, #12]
 800a764:	e7fe      	b.n	800a764 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d009      	beq.n	800a782 <vPortFree+0x5e>
 800a76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	60bb      	str	r3, [r7, #8]
 800a780:	e7fe      	b.n	800a780 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	685a      	ldr	r2, [r3, #4]
 800a786:	4b11      	ldr	r3, [pc, #68]	; (800a7cc <vPortFree+0xa8>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4013      	ands	r3, r2
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d019      	beq.n	800a7c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d115      	bne.n	800a7c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	4b0b      	ldr	r3, [pc, #44]	; (800a7cc <vPortFree+0xa8>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	43db      	mvns	r3, r3
 800a7a2:	401a      	ands	r2, r3
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a7a8:	f7fe f90e 	bl	80089c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	685a      	ldr	r2, [r3, #4]
 800a7b0:	4b07      	ldr	r3, [pc, #28]	; (800a7d0 <vPortFree+0xac>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	4a06      	ldr	r2, [pc, #24]	; (800a7d0 <vPortFree+0xac>)
 800a7b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7ba:	6938      	ldr	r0, [r7, #16]
 800a7bc:	f000 f86c 	bl	800a898 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a7c0:	f7fe f910 	bl	80089e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7c4:	bf00      	nop
 800a7c6:	3718      	adds	r7, #24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	20000f1c 	.word	0x20000f1c
 800a7d0:	20000f14 	.word	0x20000f14

0800a7d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a7de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7e0:	4b27      	ldr	r3, [pc, #156]	; (800a880 <prvHeapInit+0xac>)
 800a7e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f003 0307 	and.w	r3, r3, #7
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00c      	beq.n	800a808 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	3307      	adds	r3, #7
 800a7f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f023 0307 	bic.w	r3, r3, #7
 800a7fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	4a1f      	ldr	r2, [pc, #124]	; (800a880 <prvHeapInit+0xac>)
 800a804:	4413      	add	r3, r2
 800a806:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a80c:	4a1d      	ldr	r2, [pc, #116]	; (800a884 <prvHeapInit+0xb0>)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a812:	4b1c      	ldr	r3, [pc, #112]	; (800a884 <prvHeapInit+0xb0>)
 800a814:	2200      	movs	r2, #0
 800a816:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	4413      	add	r3, r2
 800a81e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a820:	2208      	movs	r2, #8
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	1a9b      	subs	r3, r3, r2
 800a826:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f023 0307 	bic.w	r3, r3, #7
 800a82e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	4a15      	ldr	r2, [pc, #84]	; (800a888 <prvHeapInit+0xb4>)
 800a834:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a836:	4b14      	ldr	r3, [pc, #80]	; (800a888 <prvHeapInit+0xb4>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2200      	movs	r2, #0
 800a83c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a83e:	4b12      	ldr	r3, [pc, #72]	; (800a888 <prvHeapInit+0xb4>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2200      	movs	r2, #0
 800a844:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	1ad2      	subs	r2, r2, r3
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a854:	4b0c      	ldr	r3, [pc, #48]	; (800a888 <prvHeapInit+0xb4>)
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	4a0a      	ldr	r2, [pc, #40]	; (800a88c <prvHeapInit+0xb8>)
 800a862:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	4a09      	ldr	r2, [pc, #36]	; (800a890 <prvHeapInit+0xbc>)
 800a86a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a86c:	4b09      	ldr	r3, [pc, #36]	; (800a894 <prvHeapInit+0xc0>)
 800a86e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a872:	601a      	str	r2, [r3, #0]
}
 800a874:	bf00      	nop
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	20000350 	.word	0x20000350
 800a884:	20000f08 	.word	0x20000f08
 800a888:	20000f10 	.word	0x20000f10
 800a88c:	20000f18 	.word	0x20000f18
 800a890:	20000f14 	.word	0x20000f14
 800a894:	20000f1c 	.word	0x20000f1c

0800a898 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a8a0:	4b28      	ldr	r3, [pc, #160]	; (800a944 <prvInsertBlockIntoFreeList+0xac>)
 800a8a2:	60fb      	str	r3, [r7, #12]
 800a8a4:	e002      	b.n	800a8ac <prvInsertBlockIntoFreeList+0x14>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	60fb      	str	r3, [r7, #12]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d8f7      	bhi.n	800a8a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d108      	bne.n	800a8da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	685a      	ldr	r2, [r3, #4]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	441a      	add	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	441a      	add	r2, r3
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d118      	bne.n	800a920 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	4b15      	ldr	r3, [pc, #84]	; (800a948 <prvInsertBlockIntoFreeList+0xb0>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d00d      	beq.n	800a916 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	685a      	ldr	r2, [r3, #4]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	441a      	add	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	e008      	b.n	800a928 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a916:	4b0c      	ldr	r3, [pc, #48]	; (800a948 <prvInsertBlockIntoFreeList+0xb0>)
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	601a      	str	r2, [r3, #0]
 800a91e:	e003      	b.n	800a928 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d002      	beq.n	800a936 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a936:	bf00      	nop
 800a938:	3714      	adds	r7, #20
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	20000f08 	.word	0x20000f08
 800a948:	20000f10 	.word	0x20000f10

0800a94c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	4a07      	ldr	r2, [pc, #28]	; (800a978 <vApplicationGetIdleTaskMemory+0x2c>)
 800a95c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	4a06      	ldr	r2, [pc, #24]	; (800a97c <vApplicationGetIdleTaskMemory+0x30>)
 800a962:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2280      	movs	r2, #128	; 0x80
 800a968:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800a96a:	bf00      	nop
 800a96c:	3714      	adds	r7, #20
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	20000f20 	.word	0x20000f20
 800a97c:	20000f74 	.word	0x20000f74

0800a980 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	4a07      	ldr	r2, [pc, #28]	; (800a9ac <vApplicationGetTimerTaskMemory+0x2c>)
 800a990:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	4a06      	ldr	r2, [pc, #24]	; (800a9b0 <vApplicationGetTimerTaskMemory+0x30>)
 800a996:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a99e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800a9a0:	bf00      	nop
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	20001174 	.word	0x20001174
 800a9b0:	200011c8 	.word	0x200011c8

0800a9b4 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800a9be:	88fb      	ldrh	r3, [r7, #6]
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	2120      	movs	r1, #32
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f001 fb6b 	bl	800c0a0 <SENSOR_IO_Read>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800a9ce:	7bfb      	ldrb	r3, [r7, #15]
 800a9d0:	f023 0304 	bic.w	r3, r3, #4
 800a9d4:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
 800a9d8:	f043 0304 	orr.w	r3, r3, #4
 800a9dc:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
 800a9e0:	f023 0303 	bic.w	r3, r3, #3
 800a9e4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800a9e6:	7bfb      	ldrb	r3, [r7, #15]
 800a9e8:	f043 0301 	orr.w	r3, r3, #1
 800a9ec:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800a9ee:	7bfb      	ldrb	r3, [r7, #15]
 800a9f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a9f4:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800a9f6:	88fb      	ldrh	r3, [r7, #6]
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	7bfa      	ldrb	r2, [r7, #15]
 800a9fc:	2120      	movs	r1, #32
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f001 fb34 	bl	800c06c <SENSOR_IO_Write>
}
 800aa04:	bf00      	nop
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	4603      	mov	r3, r0
 800aa14:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800aa16:	2300      	movs	r3, #0
 800aa18:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800aa1a:	f001 fb1d 	bl	800c058 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800aa1e:	88fb      	ldrh	r3, [r7, #6]
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	210f      	movs	r1, #15
 800aa24:	4618      	mov	r0, r3
 800aa26:	f001 fb3b 	bl	800c0a0 <SENSOR_IO_Read>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800aa2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b088      	sub	sp, #32
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	4603      	mov	r3, r0
 800aa40:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800aa42:	88fb      	ldrh	r3, [r7, #6]
 800aa44:	b2d8      	uxtb	r0, r3
 800aa46:	f107 020c 	add.w	r2, r7, #12
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	21b0      	movs	r1, #176	; 0xb0
 800aa4e:	f001 fb45 	bl	800c0dc <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800aa52:	7b3b      	ldrb	r3, [r7, #12]
 800aa54:	085b      	lsrs	r3, r3, #1
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800aa5a:	7b7b      	ldrb	r3, [r7, #13]
 800aa5c:	085b      	lsrs	r3, r3, #1
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800aa62:	88fb      	ldrh	r3, [r7, #6]
 800aa64:	b2d8      	uxtb	r0, r3
 800aa66:	f107 020c 	add.w	r2, r7, #12
 800aa6a:	2302      	movs	r3, #2
 800aa6c:	21b6      	movs	r1, #182	; 0xb6
 800aa6e:	f001 fb35 	bl	800c0dc <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800aa72:	7b7b      	ldrb	r3, [r7, #13]
 800aa74:	021b      	lsls	r3, r3, #8
 800aa76:	b21a      	sxth	r2, r3
 800aa78:	7b3b      	ldrb	r3, [r7, #12]
 800aa7a:	b21b      	sxth	r3, r3
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800aa80:	88fb      	ldrh	r3, [r7, #6]
 800aa82:	b2d8      	uxtb	r0, r3
 800aa84:	f107 020c 	add.w	r2, r7, #12
 800aa88:	2302      	movs	r3, #2
 800aa8a:	21ba      	movs	r1, #186	; 0xba
 800aa8c:	f001 fb26 	bl	800c0dc <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800aa90:	7b7b      	ldrb	r3, [r7, #13]
 800aa92:	021b      	lsls	r3, r3, #8
 800aa94:	b21a      	sxth	r2, r3
 800aa96:	7b3b      	ldrb	r3, [r7, #12]
 800aa98:	b21b      	sxth	r3, r3
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800aa9e:	88fb      	ldrh	r3, [r7, #6]
 800aaa0:	b2d8      	uxtb	r0, r3
 800aaa2:	f107 020c 	add.w	r2, r7, #12
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	21a8      	movs	r1, #168	; 0xa8
 800aaaa:	f001 fb17 	bl	800c0dc <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800aaae:	7b7b      	ldrb	r3, [r7, #13]
 800aab0:	021b      	lsls	r3, r3, #8
 800aab2:	b21a      	sxth	r2, r3
 800aab4:	7b3b      	ldrb	r3, [r7, #12]
 800aab6:	b21b      	sxth	r3, r3
 800aab8:	4313      	orrs	r3, r2
 800aaba:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800aabc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800aac0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800aac4:	1ad3      	subs	r3, r2, r3
 800aac6:	ee07 3a90 	vmov	s15, r3
 800aaca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aace:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800aad2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	ee07 3a90 	vmov	s15, r3
 800aadc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aae0:	ee67 6a27 	vmul.f32	s13, s14, s15
 800aae4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800aae8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800aaec:	1ad3      	subs	r3, r2, r3
 800aaee:	ee07 3a90 	vmov	s15, r3
 800aaf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aaf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aafa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800aafe:	ee07 3a90 	vmov	s15, r3
 800ab02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab0a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800ab0e:	edd7 7a04 	vldr	s15, [r7, #16]
 800ab12:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ab16:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab1a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800ab1e:	edd7 7a04 	vldr	s15, [r7, #16]
 800ab22:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800ab68 <HTS221_H_ReadHumidity+0x130>
 800ab26:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab2e:	dd01      	ble.n	800ab34 <HTS221_H_ReadHumidity+0xfc>
 800ab30:	4b0e      	ldr	r3, [pc, #56]	; (800ab6c <HTS221_H_ReadHumidity+0x134>)
 800ab32:	e00a      	b.n	800ab4a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 800ab34:	edd7 7a04 	vldr	s15, [r7, #16]
 800ab38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ab3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab40:	d502      	bpl.n	800ab48 <HTS221_H_ReadHumidity+0x110>
 800ab42:	f04f 0300 	mov.w	r3, #0
 800ab46:	e000      	b.n	800ab4a <HTS221_H_ReadHumidity+0x112>
 800ab48:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800ab4a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800ab4c:	edd7 7a04 	vldr	s15, [r7, #16]
 800ab50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ab54:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ab58:	eef0 7a66 	vmov.f32	s15, s13
}
 800ab5c:	eeb0 0a67 	vmov.f32	s0, s15
 800ab60:	3720      	adds	r7, #32
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	447a0000 	.word	0x447a0000
 800ab6c:	447a0000 	.word	0x447a0000

0800ab70 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	4603      	mov	r3, r0
 800ab78:	6039      	str	r1, [r7, #0]
 800ab7a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800ab7c:	88fb      	ldrh	r3, [r7, #6]
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	2120      	movs	r1, #32
 800ab82:	4618      	mov	r0, r3
 800ab84:	f001 fa8c 	bl	800c0a0 <SENSOR_IO_Read>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
 800ab8e:	f023 0304 	bic.w	r3, r3, #4
 800ab92:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800ab94:	7bfb      	ldrb	r3, [r7, #15]
 800ab96:	f043 0304 	orr.w	r3, r3, #4
 800ab9a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
 800ab9e:	f023 0303 	bic.w	r3, r3, #3
 800aba2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800aba4:	7bfb      	ldrb	r3, [r7, #15]
 800aba6:	f043 0301 	orr.w	r3, r3, #1
 800abaa:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800abac:	7bfb      	ldrb	r3, [r7, #15]
 800abae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800abb2:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800abb4:	88fb      	ldrh	r3, [r7, #6]
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	7bfa      	ldrb	r2, [r7, #15]
 800abba:	2120      	movs	r1, #32
 800abbc:	4618      	mov	r0, r3
 800abbe:	f001 fa55 	bl	800c06c <SENSOR_IO_Write>
}
 800abc2:	bf00      	nop
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b088      	sub	sp, #32
 800abce:	af00      	add	r7, sp, #0
 800abd0:	4603      	mov	r3, r0
 800abd2:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800abd4:	88fb      	ldrh	r3, [r7, #6]
 800abd6:	b2d8      	uxtb	r0, r3
 800abd8:	f107 0208 	add.w	r2, r7, #8
 800abdc:	2302      	movs	r3, #2
 800abde:	21b2      	movs	r1, #178	; 0xb2
 800abe0:	f001 fa7c 	bl	800c0dc <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800abe4:	88fb      	ldrh	r3, [r7, #6]
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	2135      	movs	r1, #53	; 0x35
 800abea:	4618      	mov	r0, r3
 800abec:	f001 fa58 	bl	800c0a0 <SENSOR_IO_Read>
 800abf0:	4603      	mov	r3, r0
 800abf2:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800abf4:	7ffb      	ldrb	r3, [r7, #31]
 800abf6:	021b      	lsls	r3, r3, #8
 800abf8:	b21b      	sxth	r3, r3
 800abfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abfe:	b21a      	sxth	r2, r3
 800ac00:	7a3b      	ldrb	r3, [r7, #8]
 800ac02:	b21b      	sxth	r3, r3
 800ac04:	4313      	orrs	r3, r2
 800ac06:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800ac08:	7ffb      	ldrb	r3, [r7, #31]
 800ac0a:	019b      	lsls	r3, r3, #6
 800ac0c:	b21b      	sxth	r3, r3
 800ac0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac12:	b21a      	sxth	r2, r3
 800ac14:	7a7b      	ldrb	r3, [r7, #9]
 800ac16:	b21b      	sxth	r3, r3
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800ac1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ac20:	10db      	asrs	r3, r3, #3
 800ac22:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800ac24:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ac28:	10db      	asrs	r3, r3, #3
 800ac2a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800ac2c:	88fb      	ldrh	r3, [r7, #6]
 800ac2e:	b2d8      	uxtb	r0, r3
 800ac30:	f107 0208 	add.w	r2, r7, #8
 800ac34:	2304      	movs	r3, #4
 800ac36:	21bc      	movs	r1, #188	; 0xbc
 800ac38:	f001 fa50 	bl	800c0dc <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800ac3c:	7a7b      	ldrb	r3, [r7, #9]
 800ac3e:	021b      	lsls	r3, r3, #8
 800ac40:	b21a      	sxth	r2, r3
 800ac42:	7a3b      	ldrb	r3, [r7, #8]
 800ac44:	b21b      	sxth	r3, r3
 800ac46:	4313      	orrs	r3, r2
 800ac48:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800ac4a:	7afb      	ldrb	r3, [r7, #11]
 800ac4c:	021b      	lsls	r3, r3, #8
 800ac4e:	b21a      	sxth	r2, r3
 800ac50:	7abb      	ldrb	r3, [r7, #10]
 800ac52:	b21b      	sxth	r3, r3
 800ac54:	4313      	orrs	r3, r2
 800ac56:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800ac58:	88fb      	ldrh	r3, [r7, #6]
 800ac5a:	b2d8      	uxtb	r0, r3
 800ac5c:	f107 0208 	add.w	r2, r7, #8
 800ac60:	2302      	movs	r3, #2
 800ac62:	21aa      	movs	r1, #170	; 0xaa
 800ac64:	f001 fa3a 	bl	800c0dc <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800ac68:	7a7b      	ldrb	r3, [r7, #9]
 800ac6a:	021b      	lsls	r3, r3, #8
 800ac6c:	b21a      	sxth	r2, r3
 800ac6e:	7a3b      	ldrb	r3, [r7, #8]
 800ac70:	b21b      	sxth	r3, r3
 800ac72:	4313      	orrs	r3, r2
 800ac74:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800ac76:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800ac7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ac7e:	1ad3      	subs	r3, r2, r3
 800ac80:	ee07 3a90 	vmov	s15, r3
 800ac84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ac88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ac8c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	ee07 3a90 	vmov	s15, r3
 800ac96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac9a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800ac9e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800aca2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800aca6:	1ad3      	subs	r3, r2, r3
 800aca8:	ee07 3a90 	vmov	s15, r3
 800acac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acb4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800acb8:	ee07 3a90 	vmov	s15, r3
 800acbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acc4:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	ee07 3a90 	vmov	s15, r3
}
 800acce:	eeb0 0a67 	vmov.f32	s0, s15
 800acd2:	3720      	adds	r7, #32
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	4603      	mov	r3, r0
 800ace0:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800ace2:	88fb      	ldrh	r3, [r7, #6]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f000 f87b 	bl	800ade0 <LPS22HB_Init>
}
 800acea:	bf00      	nop
 800acec:	3708      	adds	r7, #8
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b084      	sub	sp, #16
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	4603      	mov	r3, r0
 800acfa:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800acfc:	2300      	movs	r3, #0
 800acfe:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 800ad00:	f001 f9aa 	bl	800c058 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800ad04:	88fb      	ldrh	r3, [r7, #6]
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	210f      	movs	r1, #15
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f001 f9c8 	bl	800c0a0 <SENSOR_IO_Read>
 800ad10:	4603      	mov	r3, r0
 800ad12:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800ad14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
	...

0800ad20 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 800ad20:	b590      	push	{r4, r7, lr}
 800ad22:	b087      	sub	sp, #28
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	4603      	mov	r3, r0
 800ad28:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800ad2e:	2300      	movs	r3, #0
 800ad30:	74fb      	strb	r3, [r7, #19]
 800ad32:	e013      	b.n	800ad5c <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800ad34:	88fb      	ldrh	r3, [r7, #6]
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	7cfb      	ldrb	r3, [r7, #19]
 800ad3a:	3328      	adds	r3, #40	; 0x28
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	7cfc      	ldrb	r4, [r7, #19]
 800ad40:	4619      	mov	r1, r3
 800ad42:	4610      	mov	r0, r2
 800ad44:	f001 f9ac 	bl	800c0a0 <SENSOR_IO_Read>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f107 0318 	add.w	r3, r7, #24
 800ad50:	4423      	add	r3, r4
 800ad52:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800ad56:	7cfb      	ldrb	r3, [r7, #19]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	74fb      	strb	r3, [r7, #19]
 800ad5c:	7cfb      	ldrb	r3, [r7, #19]
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d9e8      	bls.n	800ad34 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800ad62:	2300      	movs	r3, #0
 800ad64:	74fb      	strb	r3, [r7, #19]
 800ad66:	e010      	b.n	800ad8a <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 800ad68:	7cfb      	ldrb	r3, [r7, #19]
 800ad6a:	f107 0218 	add.w	r2, r7, #24
 800ad6e:	4413      	add	r3, r2
 800ad70:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800ad74:	461a      	mov	r2, r3
 800ad76:	7cfb      	ldrb	r3, [r7, #19]
 800ad78:	00db      	lsls	r3, r3, #3
 800ad7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad7e:	697a      	ldr	r2, [r7, #20]
 800ad80:	4313      	orrs	r3, r2
 800ad82:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800ad84:	7cfb      	ldrb	r3, [r7, #19]
 800ad86:	3301      	adds	r3, #1
 800ad88:	74fb      	strb	r3, [r7, #19]
 800ad8a:	7cfb      	ldrb	r3, [r7, #19]
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d9eb      	bls.n	800ad68 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d003      	beq.n	800ada2 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ada0:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2264      	movs	r2, #100	; 0x64
 800adaa:	fb02 f303 	mul.w	r3, r2, r3
 800adae:	2b00      	cmp	r3, #0
 800adb0:	da01      	bge.n	800adb6 <LPS22HB_P_ReadPressure+0x96>
 800adb2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800adb6:	131b      	asrs	r3, r3, #12
 800adb8:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	ee07 3a90 	vmov	s15, r3
 800adc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adc4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800addc <LPS22HB_P_ReadPressure+0xbc>
 800adc8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800adcc:	eef0 7a66 	vmov.f32	s15, s13
}
 800add0:	eeb0 0a67 	vmov.f32	s0, s15
 800add4:	371c      	adds	r7, #28
 800add6:	46bd      	mov	sp, r7
 800add8:	bd90      	pop	{r4, r7, pc}
 800adda:	bf00      	nop
 800addc:	42c80000 	.word	0x42c80000

0800ade0 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	4603      	mov	r3, r0
 800ade8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800adea:	88fb      	ldrh	r3, [r7, #6]
 800adec:	b2db      	uxtb	r3, r3
 800adee:	211a      	movs	r1, #26
 800adf0:	4618      	mov	r0, r3
 800adf2:	f001 f955 	bl	800c0a0 <SENSOR_IO_Read>
 800adf6:	4603      	mov	r3, r0
 800adf8:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800adfa:	7bfb      	ldrb	r3, [r7, #15]
 800adfc:	f023 0301 	bic.w	r3, r3, #1
 800ae00:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
 800ae04:	f043 0301 	orr.w	r3, r3, #1
 800ae08:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800ae0a:	88fb      	ldrh	r3, [r7, #6]
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	7bfa      	ldrb	r2, [r7, #15]
 800ae10:	211a      	movs	r1, #26
 800ae12:	4618      	mov	r0, r3
 800ae14:	f001 f92a 	bl	800c06c <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 800ae18:	88fb      	ldrh	r3, [r7, #6]
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	2110      	movs	r1, #16
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f001 f93e 	bl	800c0a0 <SENSOR_IO_Read>
 800ae24:	4603      	mov	r3, r0
 800ae26:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 800ae28:	7bfb      	ldrb	r3, [r7, #15]
 800ae2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae2e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 800ae30:	7bfb      	ldrb	r3, [r7, #15]
 800ae32:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800ae36:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 800ae38:	7bfb      	ldrb	r3, [r7, #15]
 800ae3a:	f023 0302 	bic.w	r3, r3, #2
 800ae3e:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 800ae40:	7bfb      	ldrb	r3, [r7, #15]
 800ae42:	f043 0302 	orr.w	r3, r3, #2
 800ae46:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800ae48:	88fb      	ldrh	r3, [r7, #6]
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	7bfa      	ldrb	r2, [r7, #15]
 800ae4e:	2110      	movs	r1, #16
 800ae50:	4618      	mov	r0, r3
 800ae52:	f001 f90b 	bl	800c06c <SENSOR_IO_Write>
}  
 800ae56:	bf00      	nop
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b084      	sub	sp, #16
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	4603      	mov	r3, r0
 800ae66:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800ae6c:	2110      	movs	r1, #16
 800ae6e:	20d4      	movs	r0, #212	; 0xd4
 800ae70:	f001 f916 	bl	800c0a0 <SENSOR_IO_Read>
 800ae74:	4603      	mov	r3, r0
 800ae76:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800ae78:	88fb      	ldrh	r3, [r7, #6]
 800ae7a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800ae7c:	7bbb      	ldrb	r3, [r7, #14]
 800ae7e:	f003 0303 	and.w	r3, r3, #3
 800ae82:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800ae84:	7bba      	ldrb	r2, [r7, #14]
 800ae86:	7bfb      	ldrb	r3, [r7, #15]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800ae8c:	7bbb      	ldrb	r3, [r7, #14]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	2110      	movs	r1, #16
 800ae92:	20d4      	movs	r0, #212	; 0xd4
 800ae94:	f001 f8ea 	bl	800c06c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800ae98:	2112      	movs	r1, #18
 800ae9a:	20d4      	movs	r0, #212	; 0xd4
 800ae9c:	f001 f900 	bl	800c0a0 <SENSOR_IO_Read>
 800aea0:	4603      	mov	r3, r0
 800aea2:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800aea4:	88fb      	ldrh	r3, [r7, #6]
 800aea6:	0a1b      	lsrs	r3, r3, #8
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800aeac:	7bbb      	ldrb	r3, [r7, #14]
 800aeae:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800aeb2:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800aeb4:	7bba      	ldrb	r2, [r7, #14]
 800aeb6:	7bfb      	ldrb	r3, [r7, #15]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800aebc:	7bbb      	ldrb	r3, [r7, #14]
 800aebe:	461a      	mov	r2, r3
 800aec0:	2112      	movs	r1, #18
 800aec2:	20d4      	movs	r0, #212	; 0xd4
 800aec4:	f001 f8d2 	bl	800c06c <SENSOR_IO_Write>
}
 800aec8:	bf00      	nop
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800aed6:	2300      	movs	r3, #0
 800aed8:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800aeda:	2110      	movs	r1, #16
 800aedc:	20d4      	movs	r0, #212	; 0xd4
 800aede:	f001 f8df 	bl	800c0a0 <SENSOR_IO_Read>
 800aee2:	4603      	mov	r3, r0
 800aee4:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800aee6:	79fb      	ldrb	r3, [r7, #7]
 800aee8:	f003 030f 	and.w	r3, r3, #15
 800aeec:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800aeee:	79fb      	ldrb	r3, [r7, #7]
 800aef0:	461a      	mov	r2, r3
 800aef2:	2110      	movs	r1, #16
 800aef4:	20d4      	movs	r0, #212	; 0xd4
 800aef6:	f001 f8b9 	bl	800c06c <SENSOR_IO_Write>
}
 800aefa:	bf00      	nop
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800af02:	b580      	push	{r7, lr}
 800af04:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800af06:	f001 f8a7 	bl	800c058 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800af0a:	210f      	movs	r1, #15
 800af0c:	20d4      	movs	r0, #212	; 0xd4
 800af0e:	f001 f8c7 	bl	800c0a0 <SENSOR_IO_Read>
 800af12:	4603      	mov	r3, r0
}
 800af14:	4618      	mov	r0, r3
 800af16:	bd80      	pop	{r7, pc}

0800af18 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	4603      	mov	r3, r0
 800af20:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800af22:	2300      	movs	r3, #0
 800af24:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800af26:	2115      	movs	r1, #21
 800af28:	20d4      	movs	r0, #212	; 0xd4
 800af2a:	f001 f8b9 	bl	800c0a0 <SENSOR_IO_Read>
 800af2e:	4603      	mov	r3, r0
 800af30:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800af32:	7bfb      	ldrb	r3, [r7, #15]
 800af34:	f023 0310 	bic.w	r3, r3, #16
 800af38:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800af3a:	88fb      	ldrh	r3, [r7, #6]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d003      	beq.n	800af48 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800af40:	7bfb      	ldrb	r3, [r7, #15]
 800af42:	f043 0310 	orr.w	r3, r3, #16
 800af46:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800af48:	7bfb      	ldrb	r3, [r7, #15]
 800af4a:	461a      	mov	r2, r3
 800af4c:	2115      	movs	r1, #21
 800af4e:	20d4      	movs	r0, #212	; 0xd4
 800af50:	f001 f88c 	bl	800c06c <SENSOR_IO_Write>
}
 800af54:	bf00      	nop
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b088      	sub	sp, #32
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800af64:	2300      	movs	r3, #0
 800af66:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800af68:	2300      	movs	r3, #0
 800af6a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800af6c:	f04f 0300 	mov.w	r3, #0
 800af70:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800af72:	2110      	movs	r1, #16
 800af74:	20d4      	movs	r0, #212	; 0xd4
 800af76:	f001 f893 	bl	800c0a0 <SENSOR_IO_Read>
 800af7a:	4603      	mov	r3, r0
 800af7c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800af7e:	f107 0208 	add.w	r2, r7, #8
 800af82:	2306      	movs	r3, #6
 800af84:	2128      	movs	r1, #40	; 0x28
 800af86:	20d4      	movs	r0, #212	; 0xd4
 800af88:	f001 f8a8 	bl	800c0dc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800af8c:	2300      	movs	r3, #0
 800af8e:	77fb      	strb	r3, [r7, #31]
 800af90:	e01f      	b.n	800afd2 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800af92:	7ffb      	ldrb	r3, [r7, #31]
 800af94:	005b      	lsls	r3, r3, #1
 800af96:	3301      	adds	r3, #1
 800af98:	f107 0220 	add.w	r2, r7, #32
 800af9c:	4413      	add	r3, r2
 800af9e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	021b      	lsls	r3, r3, #8
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	7ffb      	ldrb	r3, [r7, #31]
 800afaa:	005b      	lsls	r3, r3, #1
 800afac:	f107 0120 	add.w	r1, r7, #32
 800afb0:	440b      	add	r3, r1
 800afb2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	4413      	add	r3, r2
 800afba:	b29a      	uxth	r2, r3
 800afbc:	7ffb      	ldrb	r3, [r7, #31]
 800afbe:	b212      	sxth	r2, r2
 800afc0:	005b      	lsls	r3, r3, #1
 800afc2:	f107 0120 	add.w	r1, r7, #32
 800afc6:	440b      	add	r3, r1
 800afc8:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800afcc:	7ffb      	ldrb	r3, [r7, #31]
 800afce:	3301      	adds	r3, #1
 800afd0:	77fb      	strb	r3, [r7, #31]
 800afd2:	7ffb      	ldrb	r3, [r7, #31]
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d9dc      	bls.n	800af92 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800afd8:	7dfb      	ldrb	r3, [r7, #23]
 800afda:	f003 030c 	and.w	r3, r3, #12
 800afde:	2b0c      	cmp	r3, #12
 800afe0:	d828      	bhi.n	800b034 <LSM6DSL_AccReadXYZ+0xd8>
 800afe2:	a201      	add	r2, pc, #4	; (adr r2, 800afe8 <LSM6DSL_AccReadXYZ+0x8c>)
 800afe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe8:	0800b01d 	.word	0x0800b01d
 800afec:	0800b035 	.word	0x0800b035
 800aff0:	0800b035 	.word	0x0800b035
 800aff4:	0800b035 	.word	0x0800b035
 800aff8:	0800b02f 	.word	0x0800b02f
 800affc:	0800b035 	.word	0x0800b035
 800b000:	0800b035 	.word	0x0800b035
 800b004:	0800b035 	.word	0x0800b035
 800b008:	0800b023 	.word	0x0800b023
 800b00c:	0800b035 	.word	0x0800b035
 800b010:	0800b035 	.word	0x0800b035
 800b014:	0800b035 	.word	0x0800b035
 800b018:	0800b029 	.word	0x0800b029
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800b01c:	4b18      	ldr	r3, [pc, #96]	; (800b080 <LSM6DSL_AccReadXYZ+0x124>)
 800b01e:	61bb      	str	r3, [r7, #24]
    break;
 800b020:	e008      	b.n	800b034 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800b022:	4b18      	ldr	r3, [pc, #96]	; (800b084 <LSM6DSL_AccReadXYZ+0x128>)
 800b024:	61bb      	str	r3, [r7, #24]
    break;
 800b026:	e005      	b.n	800b034 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800b028:	4b17      	ldr	r3, [pc, #92]	; (800b088 <LSM6DSL_AccReadXYZ+0x12c>)
 800b02a:	61bb      	str	r3, [r7, #24]
    break;
 800b02c:	e002      	b.n	800b034 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800b02e:	4b17      	ldr	r3, [pc, #92]	; (800b08c <LSM6DSL_AccReadXYZ+0x130>)
 800b030:	61bb      	str	r3, [r7, #24]
    break;    
 800b032:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800b034:	2300      	movs	r3, #0
 800b036:	77fb      	strb	r3, [r7, #31]
 800b038:	e01b      	b.n	800b072 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800b03a:	7ffb      	ldrb	r3, [r7, #31]
 800b03c:	005b      	lsls	r3, r3, #1
 800b03e:	f107 0220 	add.w	r2, r7, #32
 800b042:	4413      	add	r3, r2
 800b044:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800b048:	ee07 3a90 	vmov	s15, r3
 800b04c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b050:	edd7 7a06 	vldr	s15, [r7, #24]
 800b054:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b058:	7ffb      	ldrb	r3, [r7, #31]
 800b05a:	005b      	lsls	r3, r3, #1
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	4413      	add	r3, r2
 800b060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b064:	ee17 2a90 	vmov	r2, s15
 800b068:	b212      	sxth	r2, r2
 800b06a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800b06c:	7ffb      	ldrb	r3, [r7, #31]
 800b06e:	3301      	adds	r3, #1
 800b070:	77fb      	strb	r3, [r7, #31]
 800b072:	7ffb      	ldrb	r3, [r7, #31]
 800b074:	2b02      	cmp	r3, #2
 800b076:	d9e0      	bls.n	800b03a <LSM6DSL_AccReadXYZ+0xde>
  }
}
 800b078:	bf00      	nop
 800b07a:	3720      	adds	r7, #32
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	3d79db23 	.word	0x3d79db23
 800b084:	3df9db23 	.word	0x3df9db23
 800b088:	3e79db23 	.word	0x3e79db23
 800b08c:	3ef9db23 	.word	0x3ef9db23

0800b090 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	4603      	mov	r3, r0
 800b098:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800b09a:	2300      	movs	r3, #0
 800b09c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800b09e:	2111      	movs	r1, #17
 800b0a0:	20d4      	movs	r0, #212	; 0xd4
 800b0a2:	f000 fffd 	bl	800c0a0 <SENSOR_IO_Read>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800b0aa:	88fb      	ldrh	r3, [r7, #6]
 800b0ac:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800b0ae:	7bbb      	ldrb	r3, [r7, #14]
 800b0b0:	f003 0303 	and.w	r3, r3, #3
 800b0b4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800b0b6:	7bba      	ldrb	r2, [r7, #14]
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800b0be:	7bbb      	ldrb	r3, [r7, #14]
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	2111      	movs	r1, #17
 800b0c4:	20d4      	movs	r0, #212	; 0xd4
 800b0c6:	f000 ffd1 	bl	800c06c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800b0ca:	2112      	movs	r1, #18
 800b0cc:	20d4      	movs	r0, #212	; 0xd4
 800b0ce:	f000 ffe7 	bl	800c0a0 <SENSOR_IO_Read>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800b0d6:	88fb      	ldrh	r3, [r7, #6]
 800b0d8:	0a1b      	lsrs	r3, r3, #8
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800b0de:	7bbb      	ldrb	r3, [r7, #14]
 800b0e0:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800b0e4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800b0e6:	7bba      	ldrb	r2, [r7, #14]
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800b0ee:	7bbb      	ldrb	r3, [r7, #14]
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	2112      	movs	r1, #18
 800b0f4:	20d4      	movs	r0, #212	; 0xd4
 800b0f6:	f000 ffb9 	bl	800c06c <SENSOR_IO_Write>
}
 800b0fa:	bf00      	nop
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b082      	sub	sp, #8
 800b106:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800b108:	2300      	movs	r3, #0
 800b10a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800b10c:	2111      	movs	r1, #17
 800b10e:	20d4      	movs	r0, #212	; 0xd4
 800b110:	f000 ffc6 	bl	800c0a0 <SENSOR_IO_Read>
 800b114:	4603      	mov	r3, r0
 800b116:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800b118:	79fb      	ldrb	r3, [r7, #7]
 800b11a:	f003 030f 	and.w	r3, r3, #15
 800b11e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 800b120:	79fb      	ldrb	r3, [r7, #7]
 800b122:	461a      	mov	r2, r3
 800b124:	2111      	movs	r1, #17
 800b126:	20d4      	movs	r0, #212	; 0xd4
 800b128:	f000 ffa0 	bl	800c06c <SENSOR_IO_Write>
}
 800b12c:	bf00      	nop
 800b12e:	3708      	adds	r7, #8
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800b138:	f000 ff8e 	bl	800c058 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 800b13c:	210f      	movs	r1, #15
 800b13e:	20d4      	movs	r0, #212	; 0xd4
 800b140:	f000 ffae 	bl	800c0a0 <SENSOR_IO_Read>
 800b144:	4603      	mov	r3, r0
}
 800b146:	4618      	mov	r0, r3
 800b148:	bd80      	pop	{r7, pc}

0800b14a <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b084      	sub	sp, #16
 800b14e:	af00      	add	r7, sp, #0
 800b150:	4603      	mov	r3, r0
 800b152:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800b154:	2300      	movs	r3, #0
 800b156:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800b158:	2116      	movs	r1, #22
 800b15a:	20d4      	movs	r0, #212	; 0xd4
 800b15c:	f000 ffa0 	bl	800c0a0 <SENSOR_IO_Read>
 800b160:	4603      	mov	r3, r0
 800b162:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 800b164:	7bfb      	ldrb	r3, [r7, #15]
 800b166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b16a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800b16c:	88fb      	ldrh	r3, [r7, #6]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d003      	beq.n	800b17a <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800b172:	7bfb      	ldrb	r3, [r7, #15]
 800b174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b178:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800b17a:	7bfb      	ldrb	r3, [r7, #15]
 800b17c:	461a      	mov	r2, r3
 800b17e:	2116      	movs	r1, #22
 800b180:	20d4      	movs	r0, #212	; 0xd4
 800b182:	f000 ff73 	bl	800c06c <SENSOR_IO_Write>
}
 800b186:	bf00      	nop
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
	...

0800b190 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b088      	sub	sp, #32
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 800b198:	2300      	movs	r3, #0
 800b19a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800b19c:	2300      	movs	r3, #0
 800b19e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800b1a0:	f04f 0300 	mov.w	r3, #0
 800b1a4:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800b1a6:	2111      	movs	r1, #17
 800b1a8:	20d4      	movs	r0, #212	; 0xd4
 800b1aa:	f000 ff79 	bl	800c0a0 <SENSOR_IO_Read>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800b1b2:	f107 0208 	add.w	r2, r7, #8
 800b1b6:	2306      	movs	r3, #6
 800b1b8:	2122      	movs	r1, #34	; 0x22
 800b1ba:	20d4      	movs	r0, #212	; 0xd4
 800b1bc:	f000 ff8e 	bl	800c0dc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	77fb      	strb	r3, [r7, #31]
 800b1c4:	e01f      	b.n	800b206 <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800b1c6:	7ffb      	ldrb	r3, [r7, #31]
 800b1c8:	005b      	lsls	r3, r3, #1
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	f107 0220 	add.w	r2, r7, #32
 800b1d0:	4413      	add	r3, r2
 800b1d2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	021b      	lsls	r3, r3, #8
 800b1da:	b29a      	uxth	r2, r3
 800b1dc:	7ffb      	ldrb	r3, [r7, #31]
 800b1de:	005b      	lsls	r3, r3, #1
 800b1e0:	f107 0120 	add.w	r1, r7, #32
 800b1e4:	440b      	add	r3, r1
 800b1e6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	4413      	add	r3, r2
 800b1ee:	b29a      	uxth	r2, r3
 800b1f0:	7ffb      	ldrb	r3, [r7, #31]
 800b1f2:	b212      	sxth	r2, r2
 800b1f4:	005b      	lsls	r3, r3, #1
 800b1f6:	f107 0120 	add.w	r1, r7, #32
 800b1fa:	440b      	add	r3, r1
 800b1fc:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800b200:	7ffb      	ldrb	r3, [r7, #31]
 800b202:	3301      	adds	r3, #1
 800b204:	77fb      	strb	r3, [r7, #31]
 800b206:	7ffb      	ldrb	r3, [r7, #31]
 800b208:	2b02      	cmp	r3, #2
 800b20a:	d9dc      	bls.n	800b1c6 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800b20c:	7dfb      	ldrb	r3, [r7, #23]
 800b20e:	f003 030c 	and.w	r3, r3, #12
 800b212:	2b0c      	cmp	r3, #12
 800b214:	d828      	bhi.n	800b268 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 800b216:	a201      	add	r2, pc, #4	; (adr r2, 800b21c <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 800b218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21c:	0800b251 	.word	0x0800b251
 800b220:	0800b269 	.word	0x0800b269
 800b224:	0800b269 	.word	0x0800b269
 800b228:	0800b269 	.word	0x0800b269
 800b22c:	0800b257 	.word	0x0800b257
 800b230:	0800b269 	.word	0x0800b269
 800b234:	0800b269 	.word	0x0800b269
 800b238:	0800b269 	.word	0x0800b269
 800b23c:	0800b25d 	.word	0x0800b25d
 800b240:	0800b269 	.word	0x0800b269
 800b244:	0800b269 	.word	0x0800b269
 800b248:	0800b269 	.word	0x0800b269
 800b24c:	0800b263 	.word	0x0800b263
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 800b250:	4b16      	ldr	r3, [pc, #88]	; (800b2ac <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 800b252:	61bb      	str	r3, [r7, #24]
    break;
 800b254:	e008      	b.n	800b268 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800b256:	4b16      	ldr	r3, [pc, #88]	; (800b2b0 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 800b258:	61bb      	str	r3, [r7, #24]
    break;
 800b25a:	e005      	b.n	800b268 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 800b25c:	4b15      	ldr	r3, [pc, #84]	; (800b2b4 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 800b25e:	61bb      	str	r3, [r7, #24]
    break;
 800b260:	e002      	b.n	800b268 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800b262:	4b15      	ldr	r3, [pc, #84]	; (800b2b8 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 800b264:	61bb      	str	r3, [r7, #24]
    break;    
 800b266:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800b268:	2300      	movs	r3, #0
 800b26a:	77fb      	strb	r3, [r7, #31]
 800b26c:	e017      	b.n	800b29e <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800b26e:	7ffb      	ldrb	r3, [r7, #31]
 800b270:	005b      	lsls	r3, r3, #1
 800b272:	f107 0220 	add.w	r2, r7, #32
 800b276:	4413      	add	r3, r2
 800b278:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800b27c:	ee07 3a90 	vmov	s15, r3
 800b280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b284:	7ffb      	ldrb	r3, [r7, #31]
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	4413      	add	r3, r2
 800b28c:	edd7 7a06 	vldr	s15, [r7, #24]
 800b290:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b294:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800b298:	7ffb      	ldrb	r3, [r7, #31]
 800b29a:	3301      	adds	r3, #1
 800b29c:	77fb      	strb	r3, [r7, #31]
 800b29e:	7ffb      	ldrb	r3, [r7, #31]
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d9e4      	bls.n	800b26e <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 800b2a4:	bf00      	nop
 800b2a6:	3720      	adds	r7, #32
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	410c0000 	.word	0x410c0000
 800b2b0:	418c0000 	.word	0x418c0000
 800b2b4:	420c0000 	.word	0x420c0000
 800b2b8:	428c0000 	.word	0x428c0000
 800b2bc:	00000000 	.word	0x00000000

0800b2c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b2c0:	b5b0      	push	{r4, r5, r7, lr}
 800b2c2:	b09e      	sub	sp, #120	; 0x78
 800b2c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int lookup_len = sizeof(sin_lookup_C6) / sizeof(sin_lookup_C6[0]);
 800b2c6:	23b4      	movs	r3, #180	; 0xb4
 800b2c8:	667b      	str	r3, [r7, #100]	; 0x64
	for (int i = 0; i < lookup_len; i++) {
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	677b      	str	r3, [r7, #116]	; 0x74
 800b2ce:	e039      	b.n	800b344 <main+0x84>
		sin_lookup_C6[i] = (MAX_12 * 0.6 * (arm_sin_f32(6.283 * i / 45) + 1));
 800b2d0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b2d2:	f7f5 f93f 	bl	8000554 <__aeabi_i2d>
 800b2d6:	a3be      	add	r3, pc, #760	; (adr r3, 800b5d0 <main+0x310>)
 800b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2dc:	f7f5 f9a4 	bl	8000628 <__aeabi_dmul>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	460c      	mov	r4, r1
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	f04f 0200 	mov.w	r2, #0
 800b2ec:	4bba      	ldr	r3, [pc, #744]	; (800b5d8 <main+0x318>)
 800b2ee:	f7f5 fac5 	bl	800087c <__aeabi_ddiv>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	460c      	mov	r4, r1
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	4621      	mov	r1, r4
 800b2fa:	f7f5 fbc7 	bl	8000a8c <__aeabi_d2f>
 800b2fe:	4603      	mov	r3, r0
 800b300:	ee00 3a10 	vmov	s0, r3
 800b304:	f001 fb0c 	bl	800c920 <arm_sin_f32>
 800b308:	eeb0 7a40 	vmov.f32	s14, s0
 800b30c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b310:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b314:	ee17 0a90 	vmov	r0, s15
 800b318:	f7f5 f92e 	bl	8000578 <__aeabi_f2d>
 800b31c:	a3aa      	add	r3, pc, #680	; (adr r3, 800b5c8 <main+0x308>)
 800b31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b322:	f7f5 f981 	bl	8000628 <__aeabi_dmul>
 800b326:	4603      	mov	r3, r0
 800b328:	460c      	mov	r4, r1
 800b32a:	4618      	mov	r0, r3
 800b32c:	4621      	mov	r1, r4
 800b32e:	f7f5 fb8d 	bl	8000a4c <__aeabi_d2uiz>
 800b332:	4603      	mov	r3, r0
 800b334:	b299      	uxth	r1, r3
 800b336:	4aa9      	ldr	r2, [pc, #676]	; (800b5dc <main+0x31c>)
 800b338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b33a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < lookup_len; i++) {
 800b33e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b340:	3301      	adds	r3, #1
 800b342:	677b      	str	r3, [r7, #116]	; 0x74
 800b344:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b348:	429a      	cmp	r2, r3
 800b34a:	dbc1      	blt.n	800b2d0 <main+0x10>
	}
	lookup_len = sizeof(sin_lookup_E6) / sizeof(sin_lookup_E6[0]);
 800b34c:	23b4      	movs	r3, #180	; 0xb4
 800b34e:	667b      	str	r3, [r7, #100]	; 0x64
	for (int i = 0; i < lookup_len; i++) {
 800b350:	2300      	movs	r3, #0
 800b352:	673b      	str	r3, [r7, #112]	; 0x70
 800b354:	e039      	b.n	800b3ca <main+0x10a>
		sin_lookup_E6[i] = (MAX_12 * 0.6 * (arm_sin_f32(6.283 * i / 36) + 1));
 800b356:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b358:	f7f5 f8fc 	bl	8000554 <__aeabi_i2d>
 800b35c:	a39c      	add	r3, pc, #624	; (adr r3, 800b5d0 <main+0x310>)
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	f7f5 f961 	bl	8000628 <__aeabi_dmul>
 800b366:	4603      	mov	r3, r0
 800b368:	460c      	mov	r4, r1
 800b36a:	4618      	mov	r0, r3
 800b36c:	4621      	mov	r1, r4
 800b36e:	f04f 0200 	mov.w	r2, #0
 800b372:	4b9b      	ldr	r3, [pc, #620]	; (800b5e0 <main+0x320>)
 800b374:	f7f5 fa82 	bl	800087c <__aeabi_ddiv>
 800b378:	4603      	mov	r3, r0
 800b37a:	460c      	mov	r4, r1
 800b37c:	4618      	mov	r0, r3
 800b37e:	4621      	mov	r1, r4
 800b380:	f7f5 fb84 	bl	8000a8c <__aeabi_d2f>
 800b384:	4603      	mov	r3, r0
 800b386:	ee00 3a10 	vmov	s0, r3
 800b38a:	f001 fac9 	bl	800c920 <arm_sin_f32>
 800b38e:	eeb0 7a40 	vmov.f32	s14, s0
 800b392:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b39a:	ee17 0a90 	vmov	r0, s15
 800b39e:	f7f5 f8eb 	bl	8000578 <__aeabi_f2d>
 800b3a2:	a389      	add	r3, pc, #548	; (adr r3, 800b5c8 <main+0x308>)
 800b3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a8:	f7f5 f93e 	bl	8000628 <__aeabi_dmul>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	460c      	mov	r4, r1
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	4621      	mov	r1, r4
 800b3b4:	f7f5 fb4a 	bl	8000a4c <__aeabi_d2uiz>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	b299      	uxth	r1, r3
 800b3bc:	4a89      	ldr	r2, [pc, #548]	; (800b5e4 <main+0x324>)
 800b3be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < lookup_len; i++) {
 800b3c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	673b      	str	r3, [r7, #112]	; 0x70
 800b3ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b3cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	dbc1      	blt.n	800b356 <main+0x96>
	}
	lookup_len = sizeof(sin_lookup_G6) / sizeof(sin_lookup_G6[0]);
 800b3d2:	23b4      	movs	r3, #180	; 0xb4
 800b3d4:	667b      	str	r3, [r7, #100]	; 0x64
	for (int i = 0; i < lookup_len; i++) {
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3da:	e039      	b.n	800b450 <main+0x190>
		sin_lookup_G6[i] = (MAX_12 * 0.6 * (arm_sin_f32(6.283 * i / 30) + 1));
 800b3dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b3de:	f7f5 f8b9 	bl	8000554 <__aeabi_i2d>
 800b3e2:	a37b      	add	r3, pc, #492	; (adr r3, 800b5d0 <main+0x310>)
 800b3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e8:	f7f5 f91e 	bl	8000628 <__aeabi_dmul>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	460c      	mov	r4, r1
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	4621      	mov	r1, r4
 800b3f4:	f04f 0200 	mov.w	r2, #0
 800b3f8:	4b7b      	ldr	r3, [pc, #492]	; (800b5e8 <main+0x328>)
 800b3fa:	f7f5 fa3f 	bl	800087c <__aeabi_ddiv>
 800b3fe:	4603      	mov	r3, r0
 800b400:	460c      	mov	r4, r1
 800b402:	4618      	mov	r0, r3
 800b404:	4621      	mov	r1, r4
 800b406:	f7f5 fb41 	bl	8000a8c <__aeabi_d2f>
 800b40a:	4603      	mov	r3, r0
 800b40c:	ee00 3a10 	vmov	s0, r3
 800b410:	f001 fa86 	bl	800c920 <arm_sin_f32>
 800b414:	eeb0 7a40 	vmov.f32	s14, s0
 800b418:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b41c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b420:	ee17 0a90 	vmov	r0, s15
 800b424:	f7f5 f8a8 	bl	8000578 <__aeabi_f2d>
 800b428:	a367      	add	r3, pc, #412	; (adr r3, 800b5c8 <main+0x308>)
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	f7f5 f8fb 	bl	8000628 <__aeabi_dmul>
 800b432:	4603      	mov	r3, r0
 800b434:	460c      	mov	r4, r1
 800b436:	4618      	mov	r0, r3
 800b438:	4621      	mov	r1, r4
 800b43a:	f7f5 fb07 	bl	8000a4c <__aeabi_d2uiz>
 800b43e:	4603      	mov	r3, r0
 800b440:	b299      	uxth	r1, r3
 800b442:	4a6a      	ldr	r2, [pc, #424]	; (800b5ec <main+0x32c>)
 800b444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b446:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < lookup_len; i++) {
 800b44a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b44c:	3301      	adds	r3, #1
 800b44e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b450:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b454:	429a      	cmp	r2, r3
 800b456:	dbc1      	blt.n	800b3dc <main+0x11c>
	}
	lookup_len = sizeof(sin_lookup_chord) / sizeof(sin_lookup_chord[0]);
 800b458:	23b4      	movs	r3, #180	; 0xb4
 800b45a:	667b      	str	r3, [r7, #100]	; 0x64
	for (int i = 0; i < lookup_len; i++) {
 800b45c:	2300      	movs	r3, #0
 800b45e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b460:	e039      	b.n	800b4d6 <main+0x216>
		sin_lookup_chord[i] =
				(MAX_12 * 0.6 * (arm_sin_f32(6.283 * i / 45) + 1));
 800b462:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800b464:	f7f5 f876 	bl	8000554 <__aeabi_i2d>
 800b468:	a359      	add	r3, pc, #356	; (adr r3, 800b5d0 <main+0x310>)
 800b46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46e:	f7f5 f8db 	bl	8000628 <__aeabi_dmul>
 800b472:	4603      	mov	r3, r0
 800b474:	460c      	mov	r4, r1
 800b476:	4618      	mov	r0, r3
 800b478:	4621      	mov	r1, r4
 800b47a:	f04f 0200 	mov.w	r2, #0
 800b47e:	4b56      	ldr	r3, [pc, #344]	; (800b5d8 <main+0x318>)
 800b480:	f7f5 f9fc 	bl	800087c <__aeabi_ddiv>
 800b484:	4603      	mov	r3, r0
 800b486:	460c      	mov	r4, r1
 800b488:	4618      	mov	r0, r3
 800b48a:	4621      	mov	r1, r4
 800b48c:	f7f5 fafe 	bl	8000a8c <__aeabi_d2f>
 800b490:	4603      	mov	r3, r0
 800b492:	ee00 3a10 	vmov	s0, r3
 800b496:	f001 fa43 	bl	800c920 <arm_sin_f32>
 800b49a:	eeb0 7a40 	vmov.f32	s14, s0
 800b49e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b4a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4a6:	ee17 0a90 	vmov	r0, s15
 800b4aa:	f7f5 f865 	bl	8000578 <__aeabi_f2d>
 800b4ae:	a346      	add	r3, pc, #280	; (adr r3, 800b5c8 <main+0x308>)
 800b4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b4:	f7f5 f8b8 	bl	8000628 <__aeabi_dmul>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	460c      	mov	r4, r1
		sin_lookup_chord[i] =
 800b4bc:	4618      	mov	r0, r3
 800b4be:	4621      	mov	r1, r4
 800b4c0:	f7f5 fac4 	bl	8000a4c <__aeabi_d2uiz>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	b299      	uxth	r1, r3
 800b4c8:	4a49      	ldr	r2, [pc, #292]	; (800b5f0 <main+0x330>)
 800b4ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < lookup_len; i++) {
 800b4d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b4d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	dbc1      	blt.n	800b462 <main+0x1a2>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b4de:	f7f5 fca5 	bl	8000e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b4e2:	f000 f89d 	bl	800b620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b4e6:	f000 fac3 	bl	800ba70 <MX_GPIO_Init>
  MX_DMA_Init();
 800b4ea:	f000 fa97 	bl	800ba1c <MX_DMA_Init>
  MX_I2C2_Init();
 800b4ee:	f000 f9bb 	bl	800b868 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800b4f2:	f000 fa47 	bl	800b984 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800b4f6:	f000 f9f7 	bl	800b8e8 <MX_TIM2_Init>
  MX_ADC1_Init();
 800b4fa:	f000 f91d 	bl	800b738 <MX_ADC1_Init>
  MX_DAC1_Init();
 800b4fe:	f000 f97f 	bl	800b800 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
	// Initialize peripherals
	BSP_ACCELERO_Init();
 800b502:	f000 fe09 	bl	800c118 <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 800b506:	f000 fe5d 	bl	800c1c4 <BSP_GYRO_Init>
	BSP_HSENSOR_Init();
 800b50a:	f000 feb5 	bl	800c278 <BSP_HSENSOR_Init>
	BSP_PSENSOR_Init();
 800b50e:	f000 fed3 	bl	800c2b8 <BSP_PSENSOR_Init>
	BSP_TSENSOR_Init();
 800b512:	f000 feff 	bl	800c314 <BSP_TSENSOR_Init>
	//HAL_TIM_Base_Start_IT(&htim2);
	// Initialize Sound Effect Player
	HAL_TIM_Base_Start(&htim2);
 800b516:	4837      	ldr	r0, [pc, #220]	; (800b5f4 <main+0x334>)
 800b518:	f7fa fa92 	bl	8005a40 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of consoleMutex */
  osMutexDef(consoleMutex);
 800b51c:	2300      	movs	r3, #0
 800b51e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b520:	2300      	movs	r3, #0
 800b522:	663b      	str	r3, [r7, #96]	; 0x60
  consoleMutexHandle = osMutexCreate(osMutex(consoleMutex));
 800b524:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b528:	4618      	mov	r0, r3
 800b52a:	f7fb ff51 	bl	80073d0 <osMutexCreate>
 800b52e:	4602      	mov	r2, r0
 800b530:	4b31      	ldr	r3, [pc, #196]	; (800b5f8 <main+0x338>)
 800b532:	601a      	str	r2, [r3, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of SoundEffectTimer */
  osTimerDef(SoundEffectTimer, CallbackSoundEffectTimer);
 800b534:	4b31      	ldr	r3, [pc, #196]	; (800b5fc <main+0x33c>)
 800b536:	657b      	str	r3, [r7, #84]	; 0x54
 800b538:	2300      	movs	r3, #0
 800b53a:	65bb      	str	r3, [r7, #88]	; 0x58
  SoundEffectTimerHandle = osTimerCreate(osTimer(SoundEffectTimer), osTimerPeriodic, &mode);
 800b53c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b540:	4a2f      	ldr	r2, [pc, #188]	; (800b600 <main+0x340>)
 800b542:	2101      	movs	r1, #1
 800b544:	4618      	mov	r0, r3
 800b546:	f7fb fe01 	bl	800714c <osTimerCreate>
 800b54a:	4602      	mov	r2, r0
 800b54c:	4b2d      	ldr	r3, [pc, #180]	; (800b604 <main+0x344>)
 800b54e:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of measure */
  osThreadDef(measure, StartMeasureTask, osPriorityNormal, 0, 256);
 800b550:	4b2d      	ldr	r3, [pc, #180]	; (800b608 <main+0x348>)
 800b552:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800b556:	461d      	mov	r5, r3
 800b558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b55a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b55c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  measureHandle = osThreadCreate(osThread(measure), NULL);
 800b564:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b568:	2100      	movs	r1, #0
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fb fd8d 	bl	800708a <osThreadCreate>
 800b570:	4602      	mov	r2, r0
 800b572:	4b26      	ldr	r3, [pc, #152]	; (800b60c <main+0x34c>)
 800b574:	601a      	str	r2, [r3, #0]

  /* definition and creation of transmit */
  osThreadDef(transmit, StartTransmitTask, osPriorityIdle, 0, 128);
 800b576:	4b26      	ldr	r3, [pc, #152]	; (800b610 <main+0x350>)
 800b578:	f107 041c 	add.w	r4, r7, #28
 800b57c:	461d      	mov	r5, r3
 800b57e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b582:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitHandle = osThreadCreate(osThread(transmit), NULL);
 800b58a:	f107 031c 	add.w	r3, r7, #28
 800b58e:	2100      	movs	r1, #0
 800b590:	4618      	mov	r0, r3
 800b592:	f7fb fd7a 	bl	800708a <osThreadCreate>
 800b596:	4602      	mov	r2, r0
 800b598:	4b1e      	ldr	r3, [pc, #120]	; (800b614 <main+0x354>)
 800b59a:	601a      	str	r2, [r3, #0]

  /* definition and creation of listen */
  osThreadDef(listen, StartListenTask, osPriorityIdle, 0, 128);
 800b59c:	4b1e      	ldr	r3, [pc, #120]	; (800b618 <main+0x358>)
 800b59e:	463c      	mov	r4, r7
 800b5a0:	461d      	mov	r5, r3
 800b5a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b5aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  listenHandle = osThreadCreate(osThread(listen), NULL);
 800b5ae:	463b      	mov	r3, r7
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fb fd69 	bl	800708a <osThreadCreate>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	4b18      	ldr	r3, [pc, #96]	; (800b61c <main+0x35c>)
 800b5bc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800b5be:	f7fb fd5d 	bl	800707c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800b5c2:	e7fe      	b.n	800b5c2 <main+0x302>
 800b5c4:	f3af 8000 	nop.w
 800b5c8:	00000000 	.word	0x00000000
 800b5cc:	40a33200 	.word	0x40a33200
 800b5d0:	c083126f 	.word	0xc083126f
 800b5d4:	401921ca 	.word	0x401921ca
 800b5d8:	40468000 	.word	0x40468000
 800b5dc:	200019c8 	.word	0x200019c8
 800b5e0:	40420000 	.word	0x40420000
 800b5e4:	20001cec 	.word	0x20001cec
 800b5e8:	403e0000 	.word	0x403e0000
 800b5ec:	200016f0 	.word	0x200016f0
 800b5f0:	20001b34 	.word	0x20001b34
 800b5f4:	20001ca0 	.word	0x20001ca0
 800b5f8:	20001e60 	.word	0x20001e60
 800b5fc:	0800bd99 	.word	0x0800bd99
 800b600:	200015c8 	.word	0x200015c8
 800b604:	20001b30 	.word	0x20001b30
 800b608:	0800d26c 	.word	0x0800d26c
 800b60c:	20001c9c 	.word	0x20001c9c
 800b610:	0800d294 	.word	0x0800d294
 800b614:	200018d4 	.word	0x200018d4
 800b618:	0800d2b8 	.word	0x0800d2b8
 800b61c:	20001e54 	.word	0x20001e54

0800b620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b0bc      	sub	sp, #240	; 0xf0
 800b624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b626:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800b62a:	2244      	movs	r2, #68	; 0x44
 800b62c:	2100      	movs	r1, #0
 800b62e:	4618      	mov	r0, r3
 800b630:	f001 f9f1 	bl	800ca16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b634:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b638:	2200      	movs	r2, #0
 800b63a:	601a      	str	r2, [r3, #0]
 800b63c:	605a      	str	r2, [r3, #4]
 800b63e:	609a      	str	r2, [r3, #8]
 800b640:	60da      	str	r2, [r3, #12]
 800b642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b644:	1d3b      	adds	r3, r7, #4
 800b646:	2294      	movs	r2, #148	; 0x94
 800b648:	2100      	movs	r1, #0
 800b64a:	4618      	mov	r0, r3
 800b64c:	f001 f9e3 	bl	800ca16 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800b650:	2000      	movs	r0, #0
 800b652:	f7f8 fce9 	bl	8004028 <HAL_PWREx_ControlVoltageScaling>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d001      	beq.n	800b660 <SystemClock_Config+0x40>
  {
    Error_Handler();
 800b65c:	f000 fc08 	bl	800be70 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800b660:	2310      	movs	r3, #16
 800b662:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800b666:	2301      	movs	r3, #1
 800b668:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800b66c:	2300      	movs	r3, #0
 800b66e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800b672:	2360      	movs	r3, #96	; 0x60
 800b674:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b678:	2302      	movs	r3, #2
 800b67a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800b67e:	2301      	movs	r3, #1
 800b680:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800b684:	2301      	movs	r3, #1
 800b686:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 800b68a:	233c      	movs	r3, #60	; 0x3c
 800b68c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b690:	2302      	movs	r3, #2
 800b692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800b696:	2302      	movs	r3, #2
 800b698:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800b69c:	2302      	movs	r3, #2
 800b69e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b6a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7f8 fd62 	bl	8004170 <HAL_RCC_OscConfig>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800b6b2:	f000 fbdd 	bl	800be70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b6b6:	230f      	movs	r3, #15
 800b6b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b6bc:	2303      	movs	r3, #3
 800b6be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800b6d4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b6d8:	2105      	movs	r1, #5
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7f9 f96e 	bl	80049bc <HAL_RCC_ClockConfig>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d001      	beq.n	800b6ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 800b6e6:	f000 fbc3 	bl	800be70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2
 800b6ea:	f244 0381 	movw	r3, #16513	; 0x4081
 800b6ee:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800b6f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b6fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800b700:	2301      	movs	r3, #1
 800b702:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800b704:	2301      	movs	r3, #1
 800b706:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800b708:	2318      	movs	r3, #24
 800b70a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800b70c:	2302      	movs	r3, #2
 800b70e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800b710:	2302      	movs	r3, #2
 800b712:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800b714:	2302      	movs	r3, #2
 800b716:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800b718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b71c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b71e:	1d3b      	adds	r3, r7, #4
 800b720:	4618      	mov	r0, r3
 800b722:	f7f9 fc2d 	bl	8004f80 <HAL_RCCEx_PeriphCLKConfig>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d001      	beq.n	800b730 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800b72c:	f000 fba0 	bl	800be70 <Error_Handler>
  }
}
 800b730:	bf00      	nop
 800b732:	37f0      	adds	r7, #240	; 0xf0
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b086      	sub	sp, #24
 800b73c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800b73e:	463b      	mov	r3, r7
 800b740:	2200      	movs	r2, #0
 800b742:	601a      	str	r2, [r3, #0]
 800b744:	605a      	str	r2, [r3, #4]
 800b746:	609a      	str	r2, [r3, #8]
 800b748:	60da      	str	r2, [r3, #12]
 800b74a:	611a      	str	r2, [r3, #16]
 800b74c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800b74e:	4b29      	ldr	r3, [pc, #164]	; (800b7f4 <MX_ADC1_Init+0xbc>)
 800b750:	4a29      	ldr	r2, [pc, #164]	; (800b7f8 <MX_ADC1_Init+0xc0>)
 800b752:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800b754:	4b27      	ldr	r3, [pc, #156]	; (800b7f4 <MX_ADC1_Init+0xbc>)
 800b756:	2200      	movs	r2, #0
 800b758:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800b75a:	4b26      	ldr	r3, [pc, #152]	; (800b7f4 <MX_ADC1_Init+0xbc>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b760:	4b24      	ldr	r3, [pc, #144]	; (800b7f4 <MX_ADC1_Init+0xbc>)
 800b762:	2200      	movs	r2, #0
 800b764:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b766:	4b23      	ldr	r3, [pc, #140]	; (800b7f4 <MX_ADC1_Init+0xbc>)
 800b768:	2200      	movs	r2, #0
 800b76a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b76c:	4b21      	ldr	r3, [pc, #132]	; (800b7f4 <MX_ADC1_Init+0xbc>)
 800b76e:	2204      	movs	r2, #4
 800b770:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800b772:	4b20      	ldr	r3, [pc, #128]	; (800b7f4 <MX_ADC1_Init+0xbc>)
 800b774:	2200      	movs	r2, #0
 800b776:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b778:	4b1e      	ldr	r3, [pc, #120]	; (800b7f4 <MX_ADC1_Init+0xbc>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800b77e:	4b1d      	ldr	r3, [pc, #116]	; (800b7f4 <MX_ADC1_Init+0xbc>)
 800b780:	2201      	movs	r2, #1
 800b782:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b784:	4b1b      	ldr	r3, [pc, #108]	; (800b7f4 <MX_ADC1_Init+0xbc>)
 800b786:	2200      	movs	r2, #0
 800b788:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b78c:	4b19      	ldr	r3, [pc, #100]	; (800b7f4 <MX_ADC1_Init+0xbc>)
 800b78e:	2200      	movs	r2, #0
 800b790:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b792:	4b18      	ldr	r3, [pc, #96]	; (800b7f4 <MX_ADC1_Init+0xbc>)
 800b794:	2200      	movs	r2, #0
 800b796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800b798:	4b16      	ldr	r3, [pc, #88]	; (800b7f4 <MX_ADC1_Init+0xbc>)
 800b79a:	2200      	movs	r2, #0
 800b79c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800b7a0:	4b14      	ldr	r3, [pc, #80]	; (800b7f4 <MX_ADC1_Init+0xbc>)
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800b7a6:	4b13      	ldr	r3, [pc, #76]	; (800b7f4 <MX_ADC1_Init+0xbc>)
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b7ae:	4811      	ldr	r0, [pc, #68]	; (800b7f4 <MX_ADC1_Init+0xbc>)
 800b7b0:	f7f5 fd5c 	bl	800126c <HAL_ADC_Init>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d001      	beq.n	800b7be <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800b7ba:	f000 fb59 	bl	800be70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800b7be:	4b0f      	ldr	r3, [pc, #60]	; (800b7fc <MX_ADC1_Init+0xc4>)
 800b7c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b7c2:	2306      	movs	r3, #6
 800b7c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800b7ca:	237f      	movs	r3, #127	; 0x7f
 800b7cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b7ce:	2304      	movs	r3, #4
 800b7d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b7d6:	463b      	mov	r3, r7
 800b7d8:	4619      	mov	r1, r3
 800b7da:	4806      	ldr	r0, [pc, #24]	; (800b7f4 <MX_ADC1_Init+0xbc>)
 800b7dc:	f7f6 f862 	bl	80018a4 <HAL_ADC_ConfigChannel>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800b7e6:	f000 fb43 	bl	800be70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800b7ea:	bf00      	nop
 800b7ec:	3718      	adds	r7, #24
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	20001860 	.word	0x20001860
 800b7f8:	50040000 	.word	0x50040000
 800b7fc:	04300002 	.word	0x04300002

0800b800 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b08a      	sub	sp, #40	; 0x28
 800b804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800b806:	463b      	mov	r3, r7
 800b808:	2228      	movs	r2, #40	; 0x28
 800b80a:	2100      	movs	r1, #0
 800b80c:	4618      	mov	r0, r3
 800b80e:	f001 f902 	bl	800ca16 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800b812:	4b13      	ldr	r3, [pc, #76]	; (800b860 <MX_DAC1_Init+0x60>)
 800b814:	4a13      	ldr	r2, [pc, #76]	; (800b864 <MX_DAC1_Init+0x64>)
 800b816:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800b818:	4811      	ldr	r0, [pc, #68]	; (800b860 <MX_DAC1_Init+0x60>)
 800b81a:	f7f6 fd51 	bl	80022c0 <HAL_DAC_Init>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d001      	beq.n	800b828 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800b824:	f000 fb24 	bl	800be70 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800b828:	2300      	movs	r3, #0
 800b82a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800b82c:	230a      	movs	r3, #10
 800b82e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800b830:	2300      	movs	r3, #0
 800b832:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800b834:	2300      	movs	r3, #0
 800b836:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800b838:	2300      	movs	r3, #0
 800b83a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800b83c:	2300      	movs	r3, #0
 800b83e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800b840:	463b      	mov	r3, r7
 800b842:	2200      	movs	r2, #0
 800b844:	4619      	mov	r1, r3
 800b846:	4806      	ldr	r0, [pc, #24]	; (800b860 <MX_DAC1_Init+0x60>)
 800b848:	f7f6 fed8 	bl	80025fc <HAL_DAC_ConfigChannel>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d001      	beq.n	800b856 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800b852:	f000 fb0d 	bl	800be70 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800b856:	bf00      	nop
 800b858:	3728      	adds	r7, #40	; 0x28
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	20001630 	.word	0x20001630
 800b864:	40007400 	.word	0x40007400

0800b868 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800b86c:	4b1b      	ldr	r3, [pc, #108]	; (800b8dc <MX_I2C2_Init+0x74>)
 800b86e:	4a1c      	ldr	r2, [pc, #112]	; (800b8e0 <MX_I2C2_Init+0x78>)
 800b870:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800b872:	4b1a      	ldr	r3, [pc, #104]	; (800b8dc <MX_I2C2_Init+0x74>)
 800b874:	4a1b      	ldr	r2, [pc, #108]	; (800b8e4 <MX_I2C2_Init+0x7c>)
 800b876:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800b878:	4b18      	ldr	r3, [pc, #96]	; (800b8dc <MX_I2C2_Init+0x74>)
 800b87a:	2200      	movs	r2, #0
 800b87c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b87e:	4b17      	ldr	r3, [pc, #92]	; (800b8dc <MX_I2C2_Init+0x74>)
 800b880:	2201      	movs	r2, #1
 800b882:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b884:	4b15      	ldr	r3, [pc, #84]	; (800b8dc <MX_I2C2_Init+0x74>)
 800b886:	2200      	movs	r2, #0
 800b888:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800b88a:	4b14      	ldr	r3, [pc, #80]	; (800b8dc <MX_I2C2_Init+0x74>)
 800b88c:	2200      	movs	r2, #0
 800b88e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b890:	4b12      	ldr	r3, [pc, #72]	; (800b8dc <MX_I2C2_Init+0x74>)
 800b892:	2200      	movs	r2, #0
 800b894:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b896:	4b11      	ldr	r3, [pc, #68]	; (800b8dc <MX_I2C2_Init+0x74>)
 800b898:	2200      	movs	r2, #0
 800b89a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b89c:	4b0f      	ldr	r3, [pc, #60]	; (800b8dc <MX_I2C2_Init+0x74>)
 800b89e:	2200      	movs	r2, #0
 800b8a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b8a2:	480e      	ldr	r0, [pc, #56]	; (800b8dc <MX_I2C2_Init+0x74>)
 800b8a4:	f7f7 fe00 	bl	80034a8 <HAL_I2C_Init>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d001      	beq.n	800b8b2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800b8ae:	f000 fadf 	bl	800be70 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b8b2:	2100      	movs	r1, #0
 800b8b4:	4809      	ldr	r0, [pc, #36]	; (800b8dc <MX_I2C2_Init+0x74>)
 800b8b6:	f7f8 faff 	bl	8003eb8 <HAL_I2CEx_ConfigAnalogFilter>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d001      	beq.n	800b8c4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800b8c0:	f000 fad6 	bl	800be70 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	4805      	ldr	r0, [pc, #20]	; (800b8dc <MX_I2C2_Init+0x74>)
 800b8c8:	f7f8 fb41 	bl	8003f4e <HAL_I2CEx_ConfigDigitalFilter>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d001      	beq.n	800b8d6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800b8d2:	f000 facd 	bl	800be70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800b8d6:	bf00      	nop
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	20001644 	.word	0x20001644
 800b8e0:	40005800 	.word	0x40005800
 800b8e4:	307075b1 	.word	0x307075b1

0800b8e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b088      	sub	sp, #32
 800b8ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b8ee:	f107 0310 	add.w	r3, r7, #16
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	601a      	str	r2, [r3, #0]
 800b8f6:	605a      	str	r2, [r3, #4]
 800b8f8:	609a      	str	r2, [r3, #8]
 800b8fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b8fc:	1d3b      	adds	r3, r7, #4
 800b8fe:	2200      	movs	r2, #0
 800b900:	601a      	str	r2, [r3, #0]
 800b902:	605a      	str	r2, [r3, #4]
 800b904:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b906:	4b1e      	ldr	r3, [pc, #120]	; (800b980 <MX_TIM2_Init+0x98>)
 800b908:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b90c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800b90e:	4b1c      	ldr	r3, [pc, #112]	; (800b980 <MX_TIM2_Init+0x98>)
 800b910:	2200      	movs	r2, #0
 800b912:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b914:	4b1a      	ldr	r3, [pc, #104]	; (800b980 <MX_TIM2_Init+0x98>)
 800b916:	2200      	movs	r2, #0
 800b918:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2500;
 800b91a:	4b19      	ldr	r3, [pc, #100]	; (800b980 <MX_TIM2_Init+0x98>)
 800b91c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b920:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b922:	4b17      	ldr	r3, [pc, #92]	; (800b980 <MX_TIM2_Init+0x98>)
 800b924:	2200      	movs	r2, #0
 800b926:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b928:	4b15      	ldr	r3, [pc, #84]	; (800b980 <MX_TIM2_Init+0x98>)
 800b92a:	2200      	movs	r2, #0
 800b92c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b92e:	4814      	ldr	r0, [pc, #80]	; (800b980 <MX_TIM2_Init+0x98>)
 800b930:	f7fa f82e 	bl	8005990 <HAL_TIM_Base_Init>
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d001      	beq.n	800b93e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b93a:	f000 fa99 	bl	800be70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b93e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b942:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b944:	f107 0310 	add.w	r3, r7, #16
 800b948:	4619      	mov	r1, r3
 800b94a:	480d      	ldr	r0, [pc, #52]	; (800b980 <MX_TIM2_Init+0x98>)
 800b94c:	f7fa fa6f 	bl	8005e2e <HAL_TIM_ConfigClockSource>
 800b950:	4603      	mov	r3, r0
 800b952:	2b00      	cmp	r3, #0
 800b954:	d001      	beq.n	800b95a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b956:	f000 fa8b 	bl	800be70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800b95a:	2320      	movs	r3, #32
 800b95c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b95e:	2300      	movs	r3, #0
 800b960:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b962:	1d3b      	adds	r3, r7, #4
 800b964:	4619      	mov	r1, r3
 800b966:	4806      	ldr	r0, [pc, #24]	; (800b980 <MX_TIM2_Init+0x98>)
 800b968:	f7fa fc76 	bl	8006258 <HAL_TIMEx_MasterConfigSynchronization>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d001      	beq.n	800b976 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b972:	f000 fa7d 	bl	800be70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800b976:	bf00      	nop
 800b978:	3720      	adds	r7, #32
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	20001ca0 	.word	0x20001ca0

0800b984 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b988:	4b22      	ldr	r3, [pc, #136]	; (800ba14 <MX_USART1_UART_Init+0x90>)
 800b98a:	4a23      	ldr	r2, [pc, #140]	; (800ba18 <MX_USART1_UART_Init+0x94>)
 800b98c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b98e:	4b21      	ldr	r3, [pc, #132]	; (800ba14 <MX_USART1_UART_Init+0x90>)
 800b990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b994:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b996:	4b1f      	ldr	r3, [pc, #124]	; (800ba14 <MX_USART1_UART_Init+0x90>)
 800b998:	2200      	movs	r2, #0
 800b99a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b99c:	4b1d      	ldr	r3, [pc, #116]	; (800ba14 <MX_USART1_UART_Init+0x90>)
 800b99e:	2200      	movs	r2, #0
 800b9a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b9a2:	4b1c      	ldr	r3, [pc, #112]	; (800ba14 <MX_USART1_UART_Init+0x90>)
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b9a8:	4b1a      	ldr	r3, [pc, #104]	; (800ba14 <MX_USART1_UART_Init+0x90>)
 800b9aa:	220c      	movs	r2, #12
 800b9ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b9ae:	4b19      	ldr	r3, [pc, #100]	; (800ba14 <MX_USART1_UART_Init+0x90>)
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b9b4:	4b17      	ldr	r3, [pc, #92]	; (800ba14 <MX_USART1_UART_Init+0x90>)
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b9ba:	4b16      	ldr	r3, [pc, #88]	; (800ba14 <MX_USART1_UART_Init+0x90>)
 800b9bc:	2200      	movs	r2, #0
 800b9be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b9c0:	4b14      	ldr	r3, [pc, #80]	; (800ba14 <MX_USART1_UART_Init+0x90>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b9c6:	4b13      	ldr	r3, [pc, #76]	; (800ba14 <MX_USART1_UART_Init+0x90>)
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b9cc:	4811      	ldr	r0, [pc, #68]	; (800ba14 <MX_USART1_UART_Init+0x90>)
 800b9ce:	f7fa fce9 	bl	80063a4 <HAL_UART_Init>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d001      	beq.n	800b9dc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800b9d8:	f000 fa4a 	bl	800be70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b9dc:	2100      	movs	r1, #0
 800b9de:	480d      	ldr	r0, [pc, #52]	; (800ba14 <MX_USART1_UART_Init+0x90>)
 800b9e0:	f7fb fa3d 	bl	8006e5e <HAL_UARTEx_SetTxFifoThreshold>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d001      	beq.n	800b9ee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800b9ea:	f000 fa41 	bl	800be70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	4808      	ldr	r0, [pc, #32]	; (800ba14 <MX_USART1_UART_Init+0x90>)
 800b9f2:	f7fb fa72 	bl	8006eda <HAL_UARTEx_SetRxFifoThreshold>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d001      	beq.n	800ba00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800b9fc:	f000 fa38 	bl	800be70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800ba00:	4804      	ldr	r0, [pc, #16]	; (800ba14 <MX_USART1_UART_Init+0x90>)
 800ba02:	f7fb f9f3 	bl	8006dec <HAL_UARTEx_DisableFifoMode>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d001      	beq.n	800ba10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800ba0c:	f000 fa30 	bl	800be70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ba10:	bf00      	nop
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	200018d8 	.word	0x200018d8
 800ba18:	40013800 	.word	0x40013800

0800ba1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800ba22:	4b12      	ldr	r3, [pc, #72]	; (800ba6c <MX_DMA_Init+0x50>)
 800ba24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba26:	4a11      	ldr	r2, [pc, #68]	; (800ba6c <MX_DMA_Init+0x50>)
 800ba28:	f043 0304 	orr.w	r3, r3, #4
 800ba2c:	6493      	str	r3, [r2, #72]	; 0x48
 800ba2e:	4b0f      	ldr	r3, [pc, #60]	; (800ba6c <MX_DMA_Init+0x50>)
 800ba30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba32:	f003 0304 	and.w	r3, r3, #4
 800ba36:	607b      	str	r3, [r7, #4]
 800ba38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800ba3a:	4b0c      	ldr	r3, [pc, #48]	; (800ba6c <MX_DMA_Init+0x50>)
 800ba3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba3e:	4a0b      	ldr	r2, [pc, #44]	; (800ba6c <MX_DMA_Init+0x50>)
 800ba40:	f043 0301 	orr.w	r3, r3, #1
 800ba44:	6493      	str	r3, [r2, #72]	; 0x48
 800ba46:	4b09      	ldr	r3, [pc, #36]	; (800ba6c <MX_DMA_Init+0x50>)
 800ba48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba4a:	f003 0301 	and.w	r3, r3, #1
 800ba4e:	603b      	str	r3, [r7, #0]
 800ba50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800ba52:	2200      	movs	r2, #0
 800ba54:	2105      	movs	r1, #5
 800ba56:	200b      	movs	r0, #11
 800ba58:	f7f6 fc08 	bl	800226c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800ba5c:	200b      	movs	r0, #11
 800ba5e:	f7f6 fc21 	bl	80022a4 <HAL_NVIC_EnableIRQ>

}
 800ba62:	bf00      	nop
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	40021000 	.word	0x40021000

0800ba70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b08a      	sub	sp, #40	; 0x28
 800ba74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba76:	f107 0314 	add.w	r3, r7, #20
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	601a      	str	r2, [r3, #0]
 800ba7e:	605a      	str	r2, [r3, #4]
 800ba80:	609a      	str	r2, [r3, #8]
 800ba82:	60da      	str	r2, [r3, #12]
 800ba84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ba86:	4b38      	ldr	r3, [pc, #224]	; (800bb68 <MX_GPIO_Init+0xf8>)
 800ba88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba8a:	4a37      	ldr	r2, [pc, #220]	; (800bb68 <MX_GPIO_Init+0xf8>)
 800ba8c:	f043 0310 	orr.w	r3, r3, #16
 800ba90:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba92:	4b35      	ldr	r3, [pc, #212]	; (800bb68 <MX_GPIO_Init+0xf8>)
 800ba94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba96:	f003 0310 	and.w	r3, r3, #16
 800ba9a:	613b      	str	r3, [r7, #16]
 800ba9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ba9e:	4b32      	ldr	r3, [pc, #200]	; (800bb68 <MX_GPIO_Init+0xf8>)
 800baa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baa2:	4a31      	ldr	r2, [pc, #196]	; (800bb68 <MX_GPIO_Init+0xf8>)
 800baa4:	f043 0304 	orr.w	r3, r3, #4
 800baa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800baaa:	4b2f      	ldr	r3, [pc, #188]	; (800bb68 <MX_GPIO_Init+0xf8>)
 800baac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baae:	f003 0304 	and.w	r3, r3, #4
 800bab2:	60fb      	str	r3, [r7, #12]
 800bab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bab6:	4b2c      	ldr	r3, [pc, #176]	; (800bb68 <MX_GPIO_Init+0xf8>)
 800bab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baba:	4a2b      	ldr	r2, [pc, #172]	; (800bb68 <MX_GPIO_Init+0xf8>)
 800babc:	f043 0301 	orr.w	r3, r3, #1
 800bac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bac2:	4b29      	ldr	r3, [pc, #164]	; (800bb68 <MX_GPIO_Init+0xf8>)
 800bac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bac6:	f003 0301 	and.w	r3, r3, #1
 800baca:	60bb      	str	r3, [r7, #8]
 800bacc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bace:	4b26      	ldr	r3, [pc, #152]	; (800bb68 <MX_GPIO_Init+0xf8>)
 800bad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bad2:	4a25      	ldr	r2, [pc, #148]	; (800bb68 <MX_GPIO_Init+0xf8>)
 800bad4:	f043 0302 	orr.w	r3, r3, #2
 800bad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bada:	4b23      	ldr	r3, [pc, #140]	; (800bb68 <MX_GPIO_Init+0xf8>)
 800badc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bade:	f003 0302 	and.w	r3, r3, #2
 800bae2:	607b      	str	r3, [r7, #4]
 800bae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800bae6:	2200      	movs	r2, #0
 800bae8:	2108      	movs	r1, #8
 800baea:	4820      	ldr	r0, [pc, #128]	; (800bb6c <MX_GPIO_Init+0xfc>)
 800baec:	f7f7 fcac 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800baf0:	2200      	movs	r2, #0
 800baf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800baf6:	481e      	ldr	r0, [pc, #120]	; (800bb70 <MX_GPIO_Init+0x100>)
 800baf8:	f7f7 fca6 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 800bafc:	2308      	movs	r3, #8
 800bafe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bb00:	2301      	movs	r3, #1
 800bb02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb04:	2300      	movs	r3, #0
 800bb06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800bb0c:	f107 0314 	add.w	r3, r7, #20
 800bb10:	4619      	mov	r1, r3
 800bb12:	4816      	ldr	r0, [pc, #88]	; (800bb6c <MX_GPIO_Init+0xfc>)
 800bb14:	f7f7 fa14 	bl	8002f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800bb18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bb1e:	4b15      	ldr	r3, [pc, #84]	; (800bb74 <MX_GPIO_Init+0x104>)
 800bb20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb22:	2300      	movs	r3, #0
 800bb24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800bb26:	f107 0314 	add.w	r3, r7, #20
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	4812      	ldr	r0, [pc, #72]	; (800bb78 <MX_GPIO_Init+0x108>)
 800bb2e:	f7f7 fa07 	bl	8002f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800bb32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb40:	2300      	movs	r3, #0
 800bb42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800bb44:	f107 0314 	add.w	r3, r7, #20
 800bb48:	4619      	mov	r1, r3
 800bb4a:	4809      	ldr	r0, [pc, #36]	; (800bb70 <MX_GPIO_Init+0x100>)
 800bb4c:	f7f7 f9f8 	bl	8002f40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800bb50:	2200      	movs	r2, #0
 800bb52:	2105      	movs	r1, #5
 800bb54:	2028      	movs	r0, #40	; 0x28
 800bb56:	f7f6 fb89 	bl	800226c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800bb5a:	2028      	movs	r0, #40	; 0x28
 800bb5c:	f7f6 fba2 	bl	80022a4 <HAL_NVIC_EnableIRQ>

}
 800bb60:	bf00      	nop
 800bb62:	3728      	adds	r7, #40	; 0x28
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	40021000 	.word	0x40021000
 800bb6c:	48001000 	.word	0x48001000
 800bb70:	48000400 	.word	0x48000400
 800bb74:	10110000 	.word	0x10110000
 800bb78:	48000800 	.word	0x48000800

0800bb7c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { // detect when the button is pressed
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	4603      	mov	r3, r0
 800bb84:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_BUTTON_Pin) {
 800bb86:	88fb      	ldrh	r3, [r7, #6]
 800bb88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb8c:	d10a      	bne.n	800bba4 <HAL_GPIO_EXTI_Callback+0x28>
		osSignalSet(listenHandle, 0x0002);
 800bb8e:	4b07      	ldr	r3, [pc, #28]	; (800bbac <HAL_GPIO_EXTI_Callback+0x30>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2102      	movs	r1, #2
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fb fb8f 	bl	80072b8 <osSignalSet>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	2108      	movs	r1, #8
 800bb9e:	4804      	ldr	r0, [pc, #16]	; (800bbb0 <HAL_GPIO_EXTI_Callback+0x34>)
 800bba0:	f7f7 fc52 	bl	8003448 <HAL_GPIO_WritePin>
	}
}
 800bba4:	bf00      	nop
 800bba6:	3708      	adds	r7, #8
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	20001e54 	.word	0x20001e54
 800bbb0:	48001000 	.word	0x48001000

0800bbb4 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
	ITM_Port32(31) = 11111;
 800bbbc:	4b04      	ldr	r3, [pc, #16]	; (800bbd0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 800bbbe:	f642 3267 	movw	r2, #11111	; 0x2b67
 800bbc2:	601a      	str	r2, [r3, #0]
}
 800bbc4:	bf00      	nop
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr
 800bbd0:	e000007c 	.word	0xe000007c

0800bbd4 <StartMeasureTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMeasureTask */
void StartMeasureTask(void const * argument)
{
 800bbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbd6:	b089      	sub	sp, #36	; 0x24
 800bbd8:	af06      	add	r7, sp, #24
 800bbda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(50);
 800bbdc:	2032      	movs	r0, #50	; 0x32
 800bbde:	f7fb faa0 	bl	8007122 <osDelay>

		osMutexWait(consoleMutexHandle, osWaitForever);
 800bbe2:	4b38      	ldr	r3, [pc, #224]	; (800bcc4 <StartMeasureTask+0xf0>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f04f 31ff 	mov.w	r1, #4294967295
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fb fc08 	bl	8007400 <osMutexWait>

		memset(buffer, 0, strlen(buffer));
 800bbf0:	4835      	ldr	r0, [pc, #212]	; (800bcc8 <StartMeasureTask+0xf4>)
 800bbf2:	f7f4 fb05 	bl	8000200 <strlen>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	4832      	ldr	r0, [pc, #200]	; (800bcc8 <StartMeasureTask+0xf4>)
 800bbfe:	f000 ff0a 	bl	800ca16 <memset>
		BSP_ACCELERO_AccGetXYZ(acceleration);
 800bc02:	4832      	ldr	r0, [pc, #200]	; (800bccc <StartMeasureTask+0xf8>)
 800bc04:	f000 fac6 	bl	800c194 <BSP_ACCELERO_AccGetXYZ>
		BSP_GYRO_GetXYZ(gyro);
 800bc08:	4831      	ldr	r0, [pc, #196]	; (800bcd0 <StartMeasureTask+0xfc>)
 800bc0a:	f000 fb1d 	bl	800c248 <BSP_GYRO_GetXYZ>
		pressure = BSP_PSENSOR_ReadPressure();
 800bc0e:	f000 fb73 	bl	800c2f8 <BSP_PSENSOR_ReadPressure>
 800bc12:	eef0 7a40 	vmov.f32	s15, s0
 800bc16:	4b2f      	ldr	r3, [pc, #188]	; (800bcd4 <StartMeasureTask+0x100>)
 800bc18:	edc3 7a00 	vstr	s15, [r3]
		temperature = BSP_TSENSOR_ReadTemp();
 800bc1c:	f000 fb96 	bl	800c34c <BSP_TSENSOR_ReadTemp>
 800bc20:	eef0 7a40 	vmov.f32	s15, s0
 800bc24:	4b2c      	ldr	r3, [pc, #176]	; (800bcd8 <StartMeasureTask+0x104>)
 800bc26:	edc3 7a00 	vstr	s15, [r3]
		sprintf((char*) buffer,
				"Ac=[%d, %d, %d]\nAngAc=[%d, %d, %d]\nP=%d\nT=%d\n",
				(int) acceleration[0], (int) acceleration[1],
 800bc2a:	4b28      	ldr	r3, [pc, #160]	; (800bccc <StartMeasureTask+0xf8>)
 800bc2c:	f9b3 3000 	ldrsh.w	r3, [r3]
		sprintf((char*) buffer,
 800bc30:	461e      	mov	r6, r3
				(int) acceleration[0], (int) acceleration[1],
 800bc32:	4b26      	ldr	r3, [pc, #152]	; (800bccc <StartMeasureTask+0xf8>)
 800bc34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		sprintf((char*) buffer,
 800bc38:	469c      	mov	ip, r3
				(int) acceleration[2], (int) (gyro[0]), (int) (gyro[1]),
 800bc3a:	4b24      	ldr	r3, [pc, #144]	; (800bccc <StartMeasureTask+0xf8>)
 800bc3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		sprintf((char*) buffer,
 800bc40:	461a      	mov	r2, r3
				(int) acceleration[2], (int) (gyro[0]), (int) (gyro[1]),
 800bc42:	4b23      	ldr	r3, [pc, #140]	; (800bcd0 <StartMeasureTask+0xfc>)
 800bc44:	edd3 7a00 	vldr	s15, [r3]
		sprintf((char*) buffer,
 800bc48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc4c:	ee17 1a90 	vmov	r1, s15
				(int) acceleration[2], (int) (gyro[0]), (int) (gyro[1]),
 800bc50:	4b1f      	ldr	r3, [pc, #124]	; (800bcd0 <StartMeasureTask+0xfc>)
 800bc52:	edd3 7a01 	vldr	s15, [r3, #4]
		sprintf((char*) buffer,
 800bc56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc5a:	ee17 0a90 	vmov	r0, s15
				(int) (gyro[2]), (int) pressure, (int) temperature);
 800bc5e:	4b1c      	ldr	r3, [pc, #112]	; (800bcd0 <StartMeasureTask+0xfc>)
 800bc60:	edd3 7a02 	vldr	s15, [r3, #8]
		sprintf((char*) buffer,
 800bc64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc68:	ee17 4a90 	vmov	r4, s15
 800bc6c:	4b19      	ldr	r3, [pc, #100]	; (800bcd4 <StartMeasureTask+0x100>)
 800bc6e:	edd3 7a00 	vldr	s15, [r3]
 800bc72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc76:	ee17 5a90 	vmov	r5, s15
 800bc7a:	4b17      	ldr	r3, [pc, #92]	; (800bcd8 <StartMeasureTask+0x104>)
 800bc7c:	edd3 7a00 	vldr	s15, [r3]
 800bc80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc84:	ee17 3a90 	vmov	r3, s15
 800bc88:	9305      	str	r3, [sp, #20]
 800bc8a:	9504      	str	r5, [sp, #16]
 800bc8c:	9403      	str	r4, [sp, #12]
 800bc8e:	9002      	str	r0, [sp, #8]
 800bc90:	9101      	str	r1, [sp, #4]
 800bc92:	9200      	str	r2, [sp, #0]
 800bc94:	4663      	mov	r3, ip
 800bc96:	4632      	mov	r2, r6
 800bc98:	4910      	ldr	r1, [pc, #64]	; (800bcdc <StartMeasureTask+0x108>)
 800bc9a:	480b      	ldr	r0, [pc, #44]	; (800bcc8 <StartMeasureTask+0xf4>)
 800bc9c:	f000 fec4 	bl	800ca28 <siprintf>

		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800bca0:	2201      	movs	r2, #1
 800bca2:	2108      	movs	r1, #8
 800bca4:	480e      	ldr	r0, [pc, #56]	; (800bce0 <StartMeasureTask+0x10c>)
 800bca6:	f7f7 fbcf 	bl	8003448 <HAL_GPIO_WritePin>
#ifdef USE_SIGNAL
		//		if (osThreadResume(transmitHandle) != osOK){
		//			Error_Handler();
		//		}
#else
		osSignalSet(transmitHandle, 0x0001);
 800bcaa:	4b0e      	ldr	r3, [pc, #56]	; (800bce4 <StartMeasureTask+0x110>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2101      	movs	r1, #1
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7fb fb01 	bl	80072b8 <osSignalSet>
		osMutexRelease(consoleMutexHandle);
 800bcb6:	4b03      	ldr	r3, [pc, #12]	; (800bcc4 <StartMeasureTask+0xf0>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7fb fbee 	bl	800749c <osMutexRelease>
		osDelay(50);
 800bcc0:	e78c      	b.n	800bbdc <StartMeasureTask+0x8>
 800bcc2:	bf00      	nop
 800bcc4:	20001e60 	.word	0x20001e60
 800bcc8:	20001964 	.word	0x20001964
 800bccc:	20001e58 	.word	0x20001e58
 800bcd0:	200018c8 	.word	0x200018c8
 800bcd4:	2000185c 	.word	0x2000185c
 800bcd8:	20001858 	.word	0x20001858
 800bcdc:	0800d2d4 	.word	0x0800d2d4
 800bce0:	48001000 	.word	0x48001000
 800bce4:	200018d4 	.word	0x200018d4

0800bce8 <StartTransmitTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTransmitTask */
void StartTransmitTask(void const * argument)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b086      	sub	sp, #24
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTransmitTask */
	/* Infinite loop */
	for (;;) {
		osDelay(10);
 800bcf0:	200a      	movs	r0, #10
 800bcf2:	f7fb fa16 	bl	8007122 <osDelay>

		osSignalWait(0x0001, osWaitForever);
 800bcf6:	463b      	mov	r3, r7
 800bcf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bcfc:	2101      	movs	r1, #1
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fb fb1a 	bl	8007338 <osSignalWait>
		osMutexWait(consoleMutexHandle, osWaitForever);
 800bd04:	4b0b      	ldr	r3, [pc, #44]	; (800bd34 <StartTransmitTask+0x4c>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f04f 31ff 	mov.w	r1, #4294967295
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fb fb77 	bl	8007400 <osMutexWait>

		HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 5);
 800bd12:	4809      	ldr	r0, [pc, #36]	; (800bd38 <StartTransmitTask+0x50>)
 800bd14:	f7f4 fa74 	bl	8000200 <strlen>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	2305      	movs	r3, #5
 800bd1e:	4906      	ldr	r1, [pc, #24]	; (800bd38 <StartTransmitTask+0x50>)
 800bd20:	4806      	ldr	r0, [pc, #24]	; (800bd3c <StartTransmitTask+0x54>)
 800bd22:	f7fa fb8f 	bl	8006444 <HAL_UART_Transmit>

		osMutexRelease(consoleMutexHandle);
 800bd26:	4b03      	ldr	r3, [pc, #12]	; (800bd34 <StartTransmitTask+0x4c>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fb fbb6 	bl	800749c <osMutexRelease>
		osDelay(10);
 800bd30:	e7de      	b.n	800bcf0 <StartTransmitTask+0x8>
 800bd32:	bf00      	nop
 800bd34:	20001e60 	.word	0x20001e60
 800bd38:	20001964 	.word	0x20001964
 800bd3c:	200018d8 	.word	0x200018d8

0800bd40 <StartListenTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartListenTask */
void StartListenTask(void const * argument)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af02      	add	r7, sp, #8
 800bd46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartListenTask */
	/* Infinite loop */
	for (;;) {
		osDelay(500);
 800bd48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bd4c:	f7fb f9e9 	bl	8007122 <osDelay>
		//osSignalWait(0x0002, osWaitForever);
		osMutexWait(consoleMutexHandle, osWaitForever);
 800bd50:	4b0d      	ldr	r3, [pc, #52]	; (800bd88 <StartListenTask+0x48>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f04f 31ff 	mov.w	r1, #4294967295
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7fb fb51 	bl	8007400 <osMutexWait>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sin_lookup_chord, 180, DAC_ALIGN_12B_R);
 800bd5e:	2300      	movs	r3, #0
 800bd60:	9300      	str	r3, [sp, #0]
 800bd62:	23b4      	movs	r3, #180	; 0xb4
 800bd64:	4a09      	ldr	r2, [pc, #36]	; (800bd8c <StartListenTask+0x4c>)
 800bd66:	2100      	movs	r1, #0
 800bd68:	4809      	ldr	r0, [pc, #36]	; (800bd90 <StartListenTask+0x50>)
 800bd6a:	f7f6 facb 	bl	8002304 <HAL_DAC_Start_DMA>
		osTimerStart (SoundEffectTimerHandle, 250);
 800bd6e:	4b09      	ldr	r3, [pc, #36]	; (800bd94 <StartListenTask+0x54>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	21fa      	movs	r1, #250	; 0xfa
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7fb fa1d 	bl	80071b4 <osTimerStart>
		osMutexRelease(consoleMutexHandle);
 800bd7a:	4b03      	ldr	r3, [pc, #12]	; (800bd88 <StartListenTask+0x48>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fb fb8c 	bl	800749c <osMutexRelease>
		osDelay(500);
 800bd84:	e7e0      	b.n	800bd48 <StartListenTask+0x8>
 800bd86:	bf00      	nop
 800bd88:	20001e60 	.word	0x20001e60
 800bd8c:	20001b34 	.word	0x20001b34
 800bd90:	20001630 	.word	0x20001630
 800bd94:	20001b30 	.word	0x20001b30

0800bd98 <CallbackSoundEffectTimer>:
  /* USER CODE END StartListenTask */
}

/* CallbackSoundEffectTimer function */
void CallbackSoundEffectTimer(void const * argument)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackSoundEffectTimer */
	switch(mode) {
 800bda0:	4b23      	ldr	r3, [pc, #140]	; (800be30 <CallbackSoundEffectTimer+0x98>)
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d013      	beq.n	800bdd0 <CallbackSoundEffectTimer+0x38>
 800bda8:	2b02      	cmp	r3, #2
 800bdaa:	d021      	beq.n	800bdf0 <CallbackSoundEffectTimer+0x58>
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d12e      	bne.n	800be0e <CallbackSoundEffectTimer+0x76>
	case 0:
		memcpy(sin_lookup_chord, sin_lookup_C6, sizeof(sin_lookup_chord));
 800bdb0:	4a20      	ldr	r2, [pc, #128]	; (800be34 <CallbackSoundEffectTimer+0x9c>)
 800bdb2:	4b21      	ldr	r3, [pc, #132]	; (800be38 <CallbackSoundEffectTimer+0xa0>)
 800bdb4:	4610      	mov	r0, r2
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	f000 fe1f 	bl	800ca00 <memcpy>
		mode += 1;
 800bdc2:	4b1b      	ldr	r3, [pc, #108]	; (800be30 <CallbackSoundEffectTimer+0x98>)
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	b2da      	uxtb	r2, r3
 800bdca:	4b19      	ldr	r3, [pc, #100]	; (800be30 <CallbackSoundEffectTimer+0x98>)
 800bdcc:	701a      	strb	r2, [r3, #0]
		break;
 800bdce:	e02a      	b.n	800be26 <CallbackSoundEffectTimer+0x8e>
	case 1:
		memcpy(sin_lookup_chord, sin_lookup_E6, sizeof(sin_lookup_chord));
 800bdd0:	4a18      	ldr	r2, [pc, #96]	; (800be34 <CallbackSoundEffectTimer+0x9c>)
 800bdd2:	4b1a      	ldr	r3, [pc, #104]	; (800be3c <CallbackSoundEffectTimer+0xa4>)
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800bddc:	461a      	mov	r2, r3
 800bdde:	f000 fe0f 	bl	800ca00 <memcpy>
		mode += 1;
 800bde2:	4b13      	ldr	r3, [pc, #76]	; (800be30 <CallbackSoundEffectTimer+0x98>)
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	3301      	adds	r3, #1
 800bde8:	b2da      	uxtb	r2, r3
 800bdea:	4b11      	ldr	r3, [pc, #68]	; (800be30 <CallbackSoundEffectTimer+0x98>)
 800bdec:	701a      	strb	r2, [r3, #0]
		break;
 800bdee:	e01a      	b.n	800be26 <CallbackSoundEffectTimer+0x8e>
	case 2:
		memcpy(sin_lookup_chord, sin_lookup_G6, sizeof(sin_lookup_chord));
 800bdf0:	4a10      	ldr	r2, [pc, #64]	; (800be34 <CallbackSoundEffectTimer+0x9c>)
 800bdf2:	4b13      	ldr	r3, [pc, #76]	; (800be40 <CallbackSoundEffectTimer+0xa8>)
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	f000 fdff 	bl	800ca00 <memcpy>
		mode += 1;
 800be02:	4b0b      	ldr	r3, [pc, #44]	; (800be30 <CallbackSoundEffectTimer+0x98>)
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	3301      	adds	r3, #1
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	4b09      	ldr	r3, [pc, #36]	; (800be30 <CallbackSoundEffectTimer+0x98>)
 800be0c:	701a      	strb	r2, [r3, #0]
	default:
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800be0e:	2100      	movs	r1, #0
 800be10:	480c      	ldr	r0, [pc, #48]	; (800be44 <CallbackSoundEffectTimer+0xac>)
 800be12:	f7f6 fb35 	bl	8002480 <HAL_DAC_Stop_DMA>
		osTimerStop (SoundEffectTimerHandle);
 800be16:	4b0c      	ldr	r3, [pc, #48]	; (800be48 <CallbackSoundEffectTimer+0xb0>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7fb fa10 	bl	8007240 <osTimerStop>
		mode = 0;
 800be20:	4b03      	ldr	r3, [pc, #12]	; (800be30 <CallbackSoundEffectTimer+0x98>)
 800be22:	2200      	movs	r2, #0
 800be24:	701a      	strb	r2, [r3, #0]

	}

  /* USER CODE END CallbackSoundEffectTimer */
}
 800be26:	bf00      	nop
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	200015c8 	.word	0x200015c8
 800be34:	20001b34 	.word	0x20001b34
 800be38:	200019c8 	.word	0x200019c8
 800be3c:	20001cec 	.word	0x20001cec
 800be40:	200016f0 	.word	0x200016f0
 800be44:	20001630 	.word	0x20001630
 800be48:	20001b30 	.word	0x20001b30

0800be4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4a04      	ldr	r2, [pc, #16]	; (800be6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d101      	bne.n	800be62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800be5e:	f7f4 fffd 	bl	8000e5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800be62:	bf00      	nop
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	40001000 	.word	0x40001000

0800be70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800be70:	b480      	push	{r7}
 800be72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800be74:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800be76:	e7fe      	b.n	800be76 <Error_Handler+0x6>

0800be78 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b08a      	sub	sp, #40	; 0x28
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800be80:	4b27      	ldr	r3, [pc, #156]	; (800bf20 <I2Cx_MspInit+0xa8>)
 800be82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be84:	4a26      	ldr	r2, [pc, #152]	; (800bf20 <I2Cx_MspInit+0xa8>)
 800be86:	f043 0302 	orr.w	r3, r3, #2
 800be8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800be8c:	4b24      	ldr	r3, [pc, #144]	; (800bf20 <I2Cx_MspInit+0xa8>)
 800be8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be90:	f003 0302 	and.w	r3, r3, #2
 800be94:	613b      	str	r3, [r7, #16]
 800be96:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800be98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800be9c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800be9e:	2312      	movs	r3, #18
 800bea0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800bea2:	2301      	movs	r3, #1
 800bea4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bea6:	2303      	movs	r3, #3
 800bea8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800beaa:	2304      	movs	r3, #4
 800beac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800beae:	f107 0314 	add.w	r3, r7, #20
 800beb2:	4619      	mov	r1, r3
 800beb4:	481b      	ldr	r0, [pc, #108]	; (800bf24 <I2Cx_MspInit+0xac>)
 800beb6:	f7f7 f843 	bl	8002f40 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800beba:	f107 0314 	add.w	r3, r7, #20
 800bebe:	4619      	mov	r1, r3
 800bec0:	4818      	ldr	r0, [pc, #96]	; (800bf24 <I2Cx_MspInit+0xac>)
 800bec2:	f7f7 f83d 	bl	8002f40 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800bec6:	4b16      	ldr	r3, [pc, #88]	; (800bf20 <I2Cx_MspInit+0xa8>)
 800bec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beca:	4a15      	ldr	r2, [pc, #84]	; (800bf20 <I2Cx_MspInit+0xa8>)
 800becc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bed0:	6593      	str	r3, [r2, #88]	; 0x58
 800bed2:	4b13      	ldr	r3, [pc, #76]	; (800bf20 <I2Cx_MspInit+0xa8>)
 800bed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800beda:	60fb      	str	r3, [r7, #12]
 800bedc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800bede:	4b10      	ldr	r3, [pc, #64]	; (800bf20 <I2Cx_MspInit+0xa8>)
 800bee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee2:	4a0f      	ldr	r2, [pc, #60]	; (800bf20 <I2Cx_MspInit+0xa8>)
 800bee4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bee8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800beea:	4b0d      	ldr	r3, [pc, #52]	; (800bf20 <I2Cx_MspInit+0xa8>)
 800beec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beee:	4a0c      	ldr	r2, [pc, #48]	; (800bf20 <I2Cx_MspInit+0xa8>)
 800bef0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800bef4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800bef6:	2200      	movs	r2, #0
 800bef8:	210f      	movs	r1, #15
 800befa:	2021      	movs	r0, #33	; 0x21
 800befc:	f7f6 f9b6 	bl	800226c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800bf00:	2021      	movs	r0, #33	; 0x21
 800bf02:	f7f6 f9cf 	bl	80022a4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800bf06:	2200      	movs	r2, #0
 800bf08:	210f      	movs	r1, #15
 800bf0a:	2022      	movs	r0, #34	; 0x22
 800bf0c:	f7f6 f9ae 	bl	800226c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800bf10:	2022      	movs	r0, #34	; 0x22
 800bf12:	f7f6 f9c7 	bl	80022a4 <HAL_NVIC_EnableIRQ>
}
 800bf16:	bf00      	nop
 800bf18:	3728      	adds	r7, #40	; 0x28
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	40021000 	.word	0x40021000
 800bf24:	48000400 	.word	0x48000400

0800bf28 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	4a12      	ldr	r2, [pc, #72]	; (800bf7c <I2Cx_Init+0x54>)
 800bf34:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4a11      	ldr	r2, [pc, #68]	; (800bf80 <I2Cx_Init+0x58>)
 800bf3a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2201      	movs	r2, #1
 800bf46:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2200      	movs	r2, #0
 800bf52:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f7ff ff89 	bl	800be78 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f7f7 fa9e 	bl	80034a8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800bf6c:	2100      	movs	r1, #0
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f7f7 ffa2 	bl	8003eb8 <HAL_I2CEx_ConfigAnalogFilter>
}
 800bf74:	bf00      	nop
 800bf76:	3708      	adds	r7, #8
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	40005800 	.word	0x40005800
 800bf80:	00702681 	.word	0x00702681

0800bf84 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b08a      	sub	sp, #40	; 0x28
 800bf88:	af04      	add	r7, sp, #16
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	4608      	mov	r0, r1
 800bf8e:	4611      	mov	r1, r2
 800bf90:	461a      	mov	r2, r3
 800bf92:	4603      	mov	r3, r0
 800bf94:	72fb      	strb	r3, [r7, #11]
 800bf96:	460b      	mov	r3, r1
 800bf98:	813b      	strh	r3, [r7, #8]
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800bfa2:	7afb      	ldrb	r3, [r7, #11]
 800bfa4:	b299      	uxth	r1, r3
 800bfa6:	88f8      	ldrh	r0, [r7, #6]
 800bfa8:	893a      	ldrh	r2, [r7, #8]
 800bfaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bfae:	9302      	str	r3, [sp, #8]
 800bfb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfb2:	9301      	str	r3, [sp, #4]
 800bfb4:	6a3b      	ldr	r3, [r7, #32]
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	4603      	mov	r3, r0
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f7f7 fc46 	bl	800384c <HAL_I2C_Mem_Read>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800bfc4:	7dfb      	ldrb	r3, [r7, #23]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d004      	beq.n	800bfd4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800bfca:	7afb      	ldrb	r3, [r7, #11]
 800bfcc:	4619      	mov	r1, r3
 800bfce:	68f8      	ldr	r0, [r7, #12]
 800bfd0:	f000 f832 	bl	800c038 <I2Cx_Error>
  }
  return status;
 800bfd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3718      	adds	r7, #24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b08a      	sub	sp, #40	; 0x28
 800bfe2:	af04      	add	r7, sp, #16
 800bfe4:	60f8      	str	r0, [r7, #12]
 800bfe6:	4608      	mov	r0, r1
 800bfe8:	4611      	mov	r1, r2
 800bfea:	461a      	mov	r2, r3
 800bfec:	4603      	mov	r3, r0
 800bfee:	72fb      	strb	r3, [r7, #11]
 800bff0:	460b      	mov	r3, r1
 800bff2:	813b      	strh	r3, [r7, #8]
 800bff4:	4613      	mov	r3, r2
 800bff6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800bff8:	2300      	movs	r3, #0
 800bffa:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800bffc:	7afb      	ldrb	r3, [r7, #11]
 800bffe:	b299      	uxth	r1, r3
 800c000:	88f8      	ldrh	r0, [r7, #6]
 800c002:	893a      	ldrh	r2, [r7, #8]
 800c004:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c008:	9302      	str	r3, [sp, #8]
 800c00a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c00c:	9301      	str	r3, [sp, #4]
 800c00e:	6a3b      	ldr	r3, [r7, #32]
 800c010:	9300      	str	r3, [sp, #0]
 800c012:	4603      	mov	r3, r0
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f7f7 fb05 	bl	8003624 <HAL_I2C_Mem_Write>
 800c01a:	4603      	mov	r3, r0
 800c01c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800c01e:	7dfb      	ldrb	r3, [r7, #23]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d004      	beq.n	800c02e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800c024:	7afb      	ldrb	r3, [r7, #11]
 800c026:	4619      	mov	r1, r3
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f000 f805 	bl	800c038 <I2Cx_Error>
  }
  return status;
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3718      	adds	r7, #24
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	460b      	mov	r3, r1
 800c042:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f7f7 fabe 	bl	80035c6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7ff ff6c 	bl	800bf28 <I2Cx_Init>
}
 800c050:	bf00      	nop
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800c05c:	4802      	ldr	r0, [pc, #8]	; (800c068 <SENSOR_IO_Init+0x10>)
 800c05e:	f7ff ff63 	bl	800bf28 <I2Cx_Init>
}
 800c062:	bf00      	nop
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	20001ef0 	.word	0x20001ef0

0800c06c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af02      	add	r7, sp, #8
 800c072:	4603      	mov	r3, r0
 800c074:	71fb      	strb	r3, [r7, #7]
 800c076:	460b      	mov	r3, r1
 800c078:	71bb      	strb	r3, [r7, #6]
 800c07a:	4613      	mov	r3, r2
 800c07c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800c07e:	79bb      	ldrb	r3, [r7, #6]
 800c080:	b29a      	uxth	r2, r3
 800c082:	79f9      	ldrb	r1, [r7, #7]
 800c084:	2301      	movs	r3, #1
 800c086:	9301      	str	r3, [sp, #4]
 800c088:	1d7b      	adds	r3, r7, #5
 800c08a:	9300      	str	r3, [sp, #0]
 800c08c:	2301      	movs	r3, #1
 800c08e:	4803      	ldr	r0, [pc, #12]	; (800c09c <SENSOR_IO_Write+0x30>)
 800c090:	f7ff ffa5 	bl	800bfde <I2Cx_WriteMultiple>
}
 800c094:	bf00      	nop
 800c096:	3708      	adds	r7, #8
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	20001ef0 	.word	0x20001ef0

0800c0a0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b086      	sub	sp, #24
 800c0a4:	af02      	add	r7, sp, #8
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	460a      	mov	r2, r1
 800c0aa:	71fb      	strb	r3, [r7, #7]
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800c0b4:	79bb      	ldrb	r3, [r7, #6]
 800c0b6:	b29a      	uxth	r2, r3
 800c0b8:	79f9      	ldrb	r1, [r7, #7]
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	9301      	str	r3, [sp, #4]
 800c0be:	f107 030f 	add.w	r3, r7, #15
 800c0c2:	9300      	str	r3, [sp, #0]
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	4804      	ldr	r0, [pc, #16]	; (800c0d8 <SENSOR_IO_Read+0x38>)
 800c0c8:	f7ff ff5c 	bl	800bf84 <I2Cx_ReadMultiple>

  return read_value;
 800c0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3710      	adds	r7, #16
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	20001ef0 	.word	0x20001ef0

0800c0dc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af02      	add	r7, sp, #8
 800c0e2:	603a      	str	r2, [r7, #0]
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	71fb      	strb	r3, [r7, #7]
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	71bb      	strb	r3, [r7, #6]
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800c0f2:	79bb      	ldrb	r3, [r7, #6]
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	79f9      	ldrb	r1, [r7, #7]
 800c0f8:	88bb      	ldrh	r3, [r7, #4]
 800c0fa:	9301      	str	r3, [sp, #4]
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	9300      	str	r3, [sp, #0]
 800c100:	2301      	movs	r3, #1
 800c102:	4804      	ldr	r0, [pc, #16]	; (800c114 <SENSOR_IO_ReadMultiple+0x38>)
 800c104:	f7ff ff3e 	bl	800bf84 <I2Cx_ReadMultiple>
 800c108:	4603      	mov	r3, r0
 800c10a:	b29b      	uxth	r3, r3
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3708      	adds	r7, #8
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	20001ef0 	.word	0x20001ef0

0800c118 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800c11e:	2300      	movs	r3, #0
 800c120:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800c122:	2300      	movs	r3, #0
 800c124:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800c126:	4b19      	ldr	r3, [pc, #100]	; (800c18c <BSP_ACCELERO_Init+0x74>)
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	4798      	blx	r3
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b6a      	cmp	r3, #106	; 0x6a
 800c130:	d002      	beq.n	800c138 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800c132:	2301      	movs	r3, #1
 800c134:	73fb      	strb	r3, [r7, #15]
 800c136:	e024      	b.n	800c182 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800c138:	4b15      	ldr	r3, [pc, #84]	; (800c190 <BSP_ACCELERO_Init+0x78>)
 800c13a:	4a14      	ldr	r2, [pc, #80]	; (800c18c <BSP_ACCELERO_Init+0x74>)
 800c13c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800c13e:	2330      	movs	r3, #48	; 0x30
 800c140:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800c142:	2300      	movs	r3, #0
 800c144:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800c146:	2300      	movs	r3, #0
 800c148:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800c14a:	2340      	movs	r3, #64	; 0x40
 800c14c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800c14e:	2300      	movs	r3, #0
 800c150:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800c152:	2300      	movs	r3, #0
 800c154:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800c156:	797a      	ldrb	r2, [r7, #5]
 800c158:	7abb      	ldrb	r3, [r7, #10]
 800c15a:	4313      	orrs	r3, r2
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800c160:	7a3b      	ldrb	r3, [r7, #8]
 800c162:	f043 0304 	orr.w	r3, r3, #4
 800c166:	b2db      	uxtb	r3, r3
 800c168:	021b      	lsls	r3, r3, #8
 800c16a:	b21a      	sxth	r2, r3
 800c16c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c170:	4313      	orrs	r3, r2
 800c172:	b21b      	sxth	r3, r3
 800c174:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800c176:	4b06      	ldr	r3, [pc, #24]	; (800c190 <BSP_ACCELERO_Init+0x78>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	89ba      	ldrh	r2, [r7, #12]
 800c17e:	4610      	mov	r0, r2
 800c180:	4798      	blx	r3
  }  

  return ret;
 800c182:	7bfb      	ldrb	r3, [r7, #15]
}
 800c184:	4618      	mov	r0, r3
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	20000034 	.word	0x20000034
 800c190:	200015cc 	.word	0x200015cc

0800c194 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800c19c:	4b08      	ldr	r3, [pc, #32]	; (800c1c0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d009      	beq.n	800c1b8 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800c1a4:	4b06      	ldr	r3, [pc, #24]	; (800c1c0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d004      	beq.n	800c1b8 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800c1ae:	4b04      	ldr	r3, [pc, #16]	; (800c1c0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	4798      	blx	r3
    }
  }
}
 800c1b8:	bf00      	nop
 800c1ba:	3708      	adds	r7, #8
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	200015cc 	.word	0x200015cc

0800c1c4 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800c1d2:	4b1b      	ldr	r3, [pc, #108]	; (800c240 <BSP_GYRO_Init+0x7c>)
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	4798      	blx	r3
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b6a      	cmp	r3, #106	; 0x6a
 800c1dc:	d002      	beq.n	800c1e4 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	73fb      	strb	r3, [r7, #15]
 800c1e2:	e028      	b.n	800c236 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800c1e4:	4b17      	ldr	r3, [pc, #92]	; (800c244 <BSP_GYRO_Init+0x80>)
 800c1e6:	4a16      	ldr	r2, [pc, #88]	; (800c240 <BSP_GYRO_Init+0x7c>)
 800c1e8:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800c1ee:	2330      	movs	r3, #48	; 0x30
 800c1f0:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800c1fa:	2340      	movs	r3, #64	; 0x40
 800c1fc:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800c1fe:	2300      	movs	r3, #0
 800c200:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800c202:	230c      	movs	r3, #12
 800c204:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800c206:	7aba      	ldrb	r2, [r7, #10]
 800c208:	797b      	ldrb	r3, [r7, #5]
 800c20a:	4313      	orrs	r3, r2
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800c210:	7a3b      	ldrb	r3, [r7, #8]
 800c212:	f043 0304 	orr.w	r3, r3, #4
 800c216:	b2db      	uxtb	r3, r3
 800c218:	021b      	lsls	r3, r3, #8
 800c21a:	b21a      	sxth	r2, r3
 800c21c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c220:	4313      	orrs	r3, r2
 800c222:	b21b      	sxth	r3, r3
 800c224:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800c226:	4b07      	ldr	r3, [pc, #28]	; (800c244 <BSP_GYRO_Init+0x80>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	89ba      	ldrh	r2, [r7, #12]
 800c22e:	4610      	mov	r0, r2
 800c230:	4798      	blx	r3
    
    ret = GYRO_OK;
 800c232:	2300      	movs	r3, #0
 800c234:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800c236:	7bfb      	ldrb	r3, [r7, #15]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3710      	adds	r7, #16
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	20000068 	.word	0x20000068
 800c244:	200015d0 	.word	0x200015d0

0800c248 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 800c250:	4b08      	ldr	r3, [pc, #32]	; (800c274 <BSP_GYRO_GetXYZ+0x2c>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d009      	beq.n	800c26c <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 800c258:	4b06      	ldr	r3, [pc, #24]	; (800c274 <BSP_GYRO_GetXYZ+0x2c>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d004      	beq.n	800c26c <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800c262:	4b04      	ldr	r3, [pc, #16]	; (800c274 <BSP_GYRO_GetXYZ+0x2c>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	4798      	blx	r3
    }
  }
}
 800c26c:	bf00      	nop
 800c26e:	3708      	adds	r7, #8
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	200015d0 	.word	0x200015d0

0800c278 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800c27e:	4b0c      	ldr	r3, [pc, #48]	; (800c2b0 <BSP_HSENSOR_Init+0x38>)
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	20be      	movs	r0, #190	; 0xbe
 800c284:	4798      	blx	r3
 800c286:	4603      	mov	r3, r0
 800c288:	2bbc      	cmp	r3, #188	; 0xbc
 800c28a:	d002      	beq.n	800c292 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	607b      	str	r3, [r7, #4]
 800c290:	e009      	b.n	800c2a6 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800c292:	4b08      	ldr	r3, [pc, #32]	; (800c2b4 <BSP_HSENSOR_Init+0x3c>)
 800c294:	4a06      	ldr	r2, [pc, #24]	; (800c2b0 <BSP_HSENSOR_Init+0x38>)
 800c296:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800c298:	4b06      	ldr	r3, [pc, #24]	; (800c2b4 <BSP_HSENSOR_Init+0x3c>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	20be      	movs	r0, #190	; 0xbe
 800c2a0:	4798      	blx	r3
    ret = HSENSOR_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800c2a6:	687b      	ldr	r3, [r7, #4]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3708      	adds	r7, #8
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	2000000c 	.word	0x2000000c
 800c2b4:	200015d4 	.word	0x200015d4

0800c2b8 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800c2be:	4b0c      	ldr	r3, [pc, #48]	; (800c2f0 <BSP_PSENSOR_Init+0x38>)
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	20ba      	movs	r0, #186	; 0xba
 800c2c4:	4798      	blx	r3
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	2bb1      	cmp	r3, #177	; 0xb1
 800c2ca:	d002      	beq.n	800c2d2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	607b      	str	r3, [r7, #4]
 800c2d0:	e009      	b.n	800c2e6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800c2d2:	4b08      	ldr	r3, [pc, #32]	; (800c2f4 <BSP_PSENSOR_Init+0x3c>)
 800c2d4:	4a06      	ldr	r2, [pc, #24]	; (800c2f0 <BSP_PSENSOR_Init+0x38>)
 800c2d6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 800c2d8:	4b06      	ldr	r3, [pc, #24]	; (800c2f4 <BSP_PSENSOR_Init+0x3c>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	20ba      	movs	r0, #186	; 0xba
 800c2e0:	4798      	blx	r3
    ret = PSENSOR_OK;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800c2e6:	687b      	ldr	r3, [r7, #4]
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	20000028 	.word	0x20000028
 800c2f4:	200015d8 	.word	0x200015d8

0800c2f8 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 800c2fc:	4b04      	ldr	r3, [pc, #16]	; (800c310 <BSP_PSENSOR_ReadPressure+0x18>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	689b      	ldr	r3, [r3, #8]
 800c302:	20ba      	movs	r0, #186	; 0xba
 800c304:	4798      	blx	r3
 800c306:	eef0 7a40 	vmov.f32	s15, s0
}
 800c30a:	eeb0 0a67 	vmov.f32	s0, s15
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	200015d8 	.word	0x200015d8

0800c314 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800c31a:	2301      	movs	r3, #1
 800c31c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800c31e:	4b09      	ldr	r3, [pc, #36]	; (800c344 <BSP_TSENSOR_Init+0x30>)
 800c320:	4a09      	ldr	r2, [pc, #36]	; (800c348 <BSP_TSENSOR_Init+0x34>)
 800c322:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800c324:	f7ff fe98 	bl	800c058 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800c328:	4b06      	ldr	r3, [pc, #24]	; (800c344 <BSP_TSENSOR_Init+0x30>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2100      	movs	r1, #0
 800c330:	20be      	movs	r0, #190	; 0xbe
 800c332:	4798      	blx	r3

  ret = TSENSOR_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800c338:	79fb      	ldrb	r3, [r7, #7]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3708      	adds	r7, #8
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	200015dc 	.word	0x200015dc
 800c348:	20000018 	.word	0x20000018

0800c34c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800c34c:	b580      	push	{r7, lr}
 800c34e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800c350:	4b04      	ldr	r3, [pc, #16]	; (800c364 <BSP_TSENSOR_ReadTemp+0x18>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	20be      	movs	r0, #190	; 0xbe
 800c358:	4798      	blx	r3
 800c35a:	eef0 7a40 	vmov.f32	s15, s0
}
 800c35e:	eeb0 0a67 	vmov.f32	s0, s15
 800c362:	bd80      	pop	{r7, pc}
 800c364:	200015dc 	.word	0x200015dc

0800c368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c36e:	4b11      	ldr	r3, [pc, #68]	; (800c3b4 <HAL_MspInit+0x4c>)
 800c370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c372:	4a10      	ldr	r2, [pc, #64]	; (800c3b4 <HAL_MspInit+0x4c>)
 800c374:	f043 0301 	orr.w	r3, r3, #1
 800c378:	6613      	str	r3, [r2, #96]	; 0x60
 800c37a:	4b0e      	ldr	r3, [pc, #56]	; (800c3b4 <HAL_MspInit+0x4c>)
 800c37c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c37e:	f003 0301 	and.w	r3, r3, #1
 800c382:	607b      	str	r3, [r7, #4]
 800c384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c386:	4b0b      	ldr	r3, [pc, #44]	; (800c3b4 <HAL_MspInit+0x4c>)
 800c388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c38a:	4a0a      	ldr	r2, [pc, #40]	; (800c3b4 <HAL_MspInit+0x4c>)
 800c38c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c390:	6593      	str	r3, [r2, #88]	; 0x58
 800c392:	4b08      	ldr	r3, [pc, #32]	; (800c3b4 <HAL_MspInit+0x4c>)
 800c394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c39a:	603b      	str	r3, [r7, #0]
 800c39c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800c39e:	2200      	movs	r2, #0
 800c3a0:	210f      	movs	r1, #15
 800c3a2:	f06f 0001 	mvn.w	r0, #1
 800c3a6:	f7f5 ff61 	bl	800226c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c3aa:	bf00      	nop
 800c3ac:	3708      	adds	r7, #8
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	40021000 	.word	0x40021000

0800c3b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b08a      	sub	sp, #40	; 0x28
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3c0:	f107 0314 	add.w	r3, r7, #20
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	601a      	str	r2, [r3, #0]
 800c3c8:	605a      	str	r2, [r3, #4]
 800c3ca:	609a      	str	r2, [r3, #8]
 800c3cc:	60da      	str	r2, [r3, #12]
 800c3ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a19      	ldr	r2, [pc, #100]	; (800c43c <HAL_ADC_MspInit+0x84>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d12b      	bne.n	800c432 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800c3da:	4b19      	ldr	r3, [pc, #100]	; (800c440 <HAL_ADC_MspInit+0x88>)
 800c3dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3de:	4a18      	ldr	r2, [pc, #96]	; (800c440 <HAL_ADC_MspInit+0x88>)
 800c3e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c3e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c3e6:	4b16      	ldr	r3, [pc, #88]	; (800c440 <HAL_ADC_MspInit+0x88>)
 800c3e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c3ee:	613b      	str	r3, [r7, #16]
 800c3f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c3f2:	4b13      	ldr	r3, [pc, #76]	; (800c440 <HAL_ADC_MspInit+0x88>)
 800c3f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3f6:	4a12      	ldr	r2, [pc, #72]	; (800c440 <HAL_ADC_MspInit+0x88>)
 800c3f8:	f043 0304 	orr.w	r3, r3, #4
 800c3fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c3fe:	4b10      	ldr	r3, [pc, #64]	; (800c440 <HAL_ADC_MspInit+0x88>)
 800c400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c402:	f003 0304 	and.w	r3, r3, #4
 800c406:	60fb      	str	r3, [r7, #12]
 800c408:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c40a:	2301      	movs	r3, #1
 800c40c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800c40e:	230b      	movs	r3, #11
 800c410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c412:	2300      	movs	r3, #0
 800c414:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c416:	f107 0314 	add.w	r3, r7, #20
 800c41a:	4619      	mov	r1, r3
 800c41c:	4809      	ldr	r0, [pc, #36]	; (800c444 <HAL_ADC_MspInit+0x8c>)
 800c41e:	f7f6 fd8f 	bl	8002f40 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 800c422:	2200      	movs	r2, #0
 800c424:	2105      	movs	r1, #5
 800c426:	2012      	movs	r0, #18
 800c428:	f7f5 ff20 	bl	800226c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800c42c:	2012      	movs	r0, #18
 800c42e:	f7f5 ff39 	bl	80022a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800c432:	bf00      	nop
 800c434:	3728      	adds	r7, #40	; 0x28
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	50040000 	.word	0x50040000
 800c440:	40021000 	.word	0x40021000
 800c444:	48000800 	.word	0x48000800

0800c448 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b08a      	sub	sp, #40	; 0x28
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c450:	f107 0314 	add.w	r3, r7, #20
 800c454:	2200      	movs	r2, #0
 800c456:	601a      	str	r2, [r3, #0]
 800c458:	605a      	str	r2, [r3, #4]
 800c45a:	609a      	str	r2, [r3, #8]
 800c45c:	60da      	str	r2, [r3, #12]
 800c45e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a2f      	ldr	r2, [pc, #188]	; (800c524 <HAL_DAC_MspInit+0xdc>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d157      	bne.n	800c51a <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800c46a:	4b2f      	ldr	r3, [pc, #188]	; (800c528 <HAL_DAC_MspInit+0xe0>)
 800c46c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c46e:	4a2e      	ldr	r2, [pc, #184]	; (800c528 <HAL_DAC_MspInit+0xe0>)
 800c470:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c474:	6593      	str	r3, [r2, #88]	; 0x58
 800c476:	4b2c      	ldr	r3, [pc, #176]	; (800c528 <HAL_DAC_MspInit+0xe0>)
 800c478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c47a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c47e:	613b      	str	r3, [r7, #16]
 800c480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c482:	4b29      	ldr	r3, [pc, #164]	; (800c528 <HAL_DAC_MspInit+0xe0>)
 800c484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c486:	4a28      	ldr	r2, [pc, #160]	; (800c528 <HAL_DAC_MspInit+0xe0>)
 800c488:	f043 0301 	orr.w	r3, r3, #1
 800c48c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c48e:	4b26      	ldr	r3, [pc, #152]	; (800c528 <HAL_DAC_MspInit+0xe0>)
 800c490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c492:	f003 0301 	and.w	r3, r3, #1
 800c496:	60fb      	str	r3, [r7, #12]
 800c498:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c49a:	2310      	movs	r3, #16
 800c49c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c49e:	2303      	movs	r3, #3
 800c4a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4a6:	f107 0314 	add.w	r3, r7, #20
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c4b0:	f7f6 fd46 	bl	8002f40 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800c4b4:	4b1d      	ldr	r3, [pc, #116]	; (800c52c <HAL_DAC_MspInit+0xe4>)
 800c4b6:	4a1e      	ldr	r2, [pc, #120]	; (800c530 <HAL_DAC_MspInit+0xe8>)
 800c4b8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800c4ba:	4b1c      	ldr	r3, [pc, #112]	; (800c52c <HAL_DAC_MspInit+0xe4>)
 800c4bc:	2206      	movs	r2, #6
 800c4be:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c4c0:	4b1a      	ldr	r3, [pc, #104]	; (800c52c <HAL_DAC_MspInit+0xe4>)
 800c4c2:	2210      	movs	r2, #16
 800c4c4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c4c6:	4b19      	ldr	r3, [pc, #100]	; (800c52c <HAL_DAC_MspInit+0xe4>)
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800c4cc:	4b17      	ldr	r3, [pc, #92]	; (800c52c <HAL_DAC_MspInit+0xe4>)
 800c4ce:	2280      	movs	r2, #128	; 0x80
 800c4d0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c4d2:	4b16      	ldr	r3, [pc, #88]	; (800c52c <HAL_DAC_MspInit+0xe4>)
 800c4d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c4d8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c4da:	4b14      	ldr	r3, [pc, #80]	; (800c52c <HAL_DAC_MspInit+0xe4>)
 800c4dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c4e0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800c4e2:	4b12      	ldr	r3, [pc, #72]	; (800c52c <HAL_DAC_MspInit+0xe4>)
 800c4e4:	2220      	movs	r2, #32
 800c4e6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800c4e8:	4b10      	ldr	r3, [pc, #64]	; (800c52c <HAL_DAC_MspInit+0xe4>)
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800c4ee:	480f      	ldr	r0, [pc, #60]	; (800c52c <HAL_DAC_MspInit+0xe4>)
 800c4f0:	f7f6 fa58 	bl	80029a4 <HAL_DMA_Init>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d001      	beq.n	800c4fe <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800c4fa:	f7ff fcb9 	bl	800be70 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4a0a      	ldr	r2, [pc, #40]	; (800c52c <HAL_DAC_MspInit+0xe4>)
 800c502:	609a      	str	r2, [r3, #8]
 800c504:	4a09      	ldr	r2, [pc, #36]	; (800c52c <HAL_DAC_MspInit+0xe4>)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800c50a:	2200      	movs	r2, #0
 800c50c:	2100      	movs	r1, #0
 800c50e:	2036      	movs	r0, #54	; 0x36
 800c510:	f7f5 feac 	bl	800226c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800c514:	2036      	movs	r0, #54	; 0x36
 800c516:	f7f5 fec5 	bl	80022a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800c51a:	bf00      	nop
 800c51c:	3728      	adds	r7, #40	; 0x28
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	40007400 	.word	0x40007400
 800c528:	40021000 	.word	0x40021000
 800c52c:	20001690 	.word	0x20001690
 800c530:	40020008 	.word	0x40020008

0800c534 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b08a      	sub	sp, #40	; 0x28
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c53c:	f107 0314 	add.w	r3, r7, #20
 800c540:	2200      	movs	r2, #0
 800c542:	601a      	str	r2, [r3, #0]
 800c544:	605a      	str	r2, [r3, #4]
 800c546:	609a      	str	r2, [r3, #8]
 800c548:	60da      	str	r2, [r3, #12]
 800c54a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a17      	ldr	r2, [pc, #92]	; (800c5b0 <HAL_I2C_MspInit+0x7c>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d128      	bne.n	800c5a8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c556:	4b17      	ldr	r3, [pc, #92]	; (800c5b4 <HAL_I2C_MspInit+0x80>)
 800c558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c55a:	4a16      	ldr	r2, [pc, #88]	; (800c5b4 <HAL_I2C_MspInit+0x80>)
 800c55c:	f043 0302 	orr.w	r3, r3, #2
 800c560:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c562:	4b14      	ldr	r3, [pc, #80]	; (800c5b4 <HAL_I2C_MspInit+0x80>)
 800c564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c566:	f003 0302 	and.w	r3, r3, #2
 800c56a:	613b      	str	r3, [r7, #16]
 800c56c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c56e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c574:	2312      	movs	r3, #18
 800c576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c578:	2301      	movs	r3, #1
 800c57a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c57c:	2303      	movs	r3, #3
 800c57e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800c580:	2304      	movs	r3, #4
 800c582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c584:	f107 0314 	add.w	r3, r7, #20
 800c588:	4619      	mov	r1, r3
 800c58a:	480b      	ldr	r0, [pc, #44]	; (800c5b8 <HAL_I2C_MspInit+0x84>)
 800c58c:	f7f6 fcd8 	bl	8002f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800c590:	4b08      	ldr	r3, [pc, #32]	; (800c5b4 <HAL_I2C_MspInit+0x80>)
 800c592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c594:	4a07      	ldr	r2, [pc, #28]	; (800c5b4 <HAL_I2C_MspInit+0x80>)
 800c596:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c59a:	6593      	str	r3, [r2, #88]	; 0x58
 800c59c:	4b05      	ldr	r3, [pc, #20]	; (800c5b4 <HAL_I2C_MspInit+0x80>)
 800c59e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5a4:	60fb      	str	r3, [r7, #12]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800c5a8:	bf00      	nop
 800c5aa:	3728      	adds	r7, #40	; 0x28
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	40005800 	.word	0x40005800
 800c5b4:	40021000 	.word	0x40021000
 800c5b8:	48000400 	.word	0x48000400

0800c5bc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a0b      	ldr	r2, [pc, #44]	; (800c5f8 <HAL_I2C_MspDeInit+0x3c>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d10f      	bne.n	800c5ee <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800c5ce:	4b0b      	ldr	r3, [pc, #44]	; (800c5fc <HAL_I2C_MspDeInit+0x40>)
 800c5d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5d2:	4a0a      	ldr	r2, [pc, #40]	; (800c5fc <HAL_I2C_MspDeInit+0x40>)
 800c5d4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800c5d8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800c5da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c5de:	4808      	ldr	r0, [pc, #32]	; (800c600 <HAL_I2C_MspDeInit+0x44>)
 800c5e0:	f7f6 fe40 	bl	8003264 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800c5e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c5e8:	4805      	ldr	r0, [pc, #20]	; (800c600 <HAL_I2C_MspDeInit+0x44>)
 800c5ea:	f7f6 fe3b 	bl	8003264 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800c5ee:	bf00      	nop
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	40005800 	.word	0x40005800
 800c5fc:	40021000 	.word	0x40021000
 800c600:	48000400 	.word	0x48000400

0800c604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c614:	d10b      	bne.n	800c62e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c616:	4b09      	ldr	r3, [pc, #36]	; (800c63c <HAL_TIM_Base_MspInit+0x38>)
 800c618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c61a:	4a08      	ldr	r2, [pc, #32]	; (800c63c <HAL_TIM_Base_MspInit+0x38>)
 800c61c:	f043 0301 	orr.w	r3, r3, #1
 800c620:	6593      	str	r3, [r2, #88]	; 0x58
 800c622:	4b06      	ldr	r3, [pc, #24]	; (800c63c <HAL_TIM_Base_MspInit+0x38>)
 800c624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c626:	f003 0301 	and.w	r3, r3, #1
 800c62a:	60fb      	str	r3, [r7, #12]
 800c62c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800c62e:	bf00      	nop
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	40021000 	.word	0x40021000

0800c640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b08a      	sub	sp, #40	; 0x28
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c648:	f107 0314 	add.w	r3, r7, #20
 800c64c:	2200      	movs	r2, #0
 800c64e:	601a      	str	r2, [r3, #0]
 800c650:	605a      	str	r2, [r3, #4]
 800c652:	609a      	str	r2, [r3, #8]
 800c654:	60da      	str	r2, [r3, #12]
 800c656:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a17      	ldr	r2, [pc, #92]	; (800c6bc <HAL_UART_MspInit+0x7c>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d127      	bne.n	800c6b2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c662:	4b17      	ldr	r3, [pc, #92]	; (800c6c0 <HAL_UART_MspInit+0x80>)
 800c664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c666:	4a16      	ldr	r2, [pc, #88]	; (800c6c0 <HAL_UART_MspInit+0x80>)
 800c668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c66c:	6613      	str	r3, [r2, #96]	; 0x60
 800c66e:	4b14      	ldr	r3, [pc, #80]	; (800c6c0 <HAL_UART_MspInit+0x80>)
 800c670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c676:	613b      	str	r3, [r7, #16]
 800c678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c67a:	4b11      	ldr	r3, [pc, #68]	; (800c6c0 <HAL_UART_MspInit+0x80>)
 800c67c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c67e:	4a10      	ldr	r2, [pc, #64]	; (800c6c0 <HAL_UART_MspInit+0x80>)
 800c680:	f043 0302 	orr.w	r3, r3, #2
 800c684:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c686:	4b0e      	ldr	r3, [pc, #56]	; (800c6c0 <HAL_UART_MspInit+0x80>)
 800c688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c68a:	f003 0302 	and.w	r3, r3, #2
 800c68e:	60fb      	str	r3, [r7, #12]
 800c690:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c692:	23c0      	movs	r3, #192	; 0xc0
 800c694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c696:	2302      	movs	r3, #2
 800c698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c69a:	2300      	movs	r3, #0
 800c69c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c69e:	2303      	movs	r3, #3
 800c6a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c6a2:	2307      	movs	r3, #7
 800c6a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c6a6:	f107 0314 	add.w	r3, r7, #20
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	4805      	ldr	r0, [pc, #20]	; (800c6c4 <HAL_UART_MspInit+0x84>)
 800c6ae:	f7f6 fc47 	bl	8002f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800c6b2:	bf00      	nop
 800c6b4:	3728      	adds	r7, #40	; 0x28
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	40013800 	.word	0x40013800
 800c6c0:	40021000 	.word	0x40021000
 800c6c4:	48000400 	.word	0x48000400

0800c6c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b08c      	sub	sp, #48	; 0x30
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800c6d8:	2200      	movs	r2, #0
 800c6da:	6879      	ldr	r1, [r7, #4]
 800c6dc:	2036      	movs	r0, #54	; 0x36
 800c6de:	f7f5 fdc5 	bl	800226c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800c6e2:	2036      	movs	r0, #54	; 0x36
 800c6e4:	f7f5 fdde 	bl	80022a4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c6e8:	4b1e      	ldr	r3, [pc, #120]	; (800c764 <HAL_InitTick+0x9c>)
 800c6ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6ec:	4a1d      	ldr	r2, [pc, #116]	; (800c764 <HAL_InitTick+0x9c>)
 800c6ee:	f043 0310 	orr.w	r3, r3, #16
 800c6f2:	6593      	str	r3, [r2, #88]	; 0x58
 800c6f4:	4b1b      	ldr	r3, [pc, #108]	; (800c764 <HAL_InitTick+0x9c>)
 800c6f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6f8:	f003 0310 	and.w	r3, r3, #16
 800c6fc:	60fb      	str	r3, [r7, #12]
 800c6fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c700:	f107 0210 	add.w	r2, r7, #16
 800c704:	f107 0314 	add.w	r3, r7, #20
 800c708:	4611      	mov	r1, r2
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7f8 fb44 	bl	8004d98 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800c710:	f7f8 fb16 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 800c714:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800c716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c718:	4a13      	ldr	r2, [pc, #76]	; (800c768 <HAL_InitTick+0xa0>)
 800c71a:	fba2 2303 	umull	r2, r3, r2, r3
 800c71e:	0c9b      	lsrs	r3, r3, #18
 800c720:	3b01      	subs	r3, #1
 800c722:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800c724:	4b11      	ldr	r3, [pc, #68]	; (800c76c <HAL_InitTick+0xa4>)
 800c726:	4a12      	ldr	r2, [pc, #72]	; (800c770 <HAL_InitTick+0xa8>)
 800c728:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800c72a:	4b10      	ldr	r3, [pc, #64]	; (800c76c <HAL_InitTick+0xa4>)
 800c72c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c730:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800c732:	4a0e      	ldr	r2, [pc, #56]	; (800c76c <HAL_InitTick+0xa4>)
 800c734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c736:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800c738:	4b0c      	ldr	r3, [pc, #48]	; (800c76c <HAL_InitTick+0xa4>)
 800c73a:	2200      	movs	r2, #0
 800c73c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c73e:	4b0b      	ldr	r3, [pc, #44]	; (800c76c <HAL_InitTick+0xa4>)
 800c740:	2200      	movs	r2, #0
 800c742:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800c744:	4809      	ldr	r0, [pc, #36]	; (800c76c <HAL_InitTick+0xa4>)
 800c746:	f7f9 f923 	bl	8005990 <HAL_TIM_Base_Init>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d104      	bne.n	800c75a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800c750:	4806      	ldr	r0, [pc, #24]	; (800c76c <HAL_InitTick+0xa4>)
 800c752:	f7f9 f9dd 	bl	8005b10 <HAL_TIM_Base_Start_IT>
 800c756:	4603      	mov	r3, r0
 800c758:	e000      	b.n	800c75c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800c75a:	2301      	movs	r3, #1
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3730      	adds	r7, #48	; 0x30
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	40021000 	.word	0x40021000
 800c768:	431bde83 	.word	0x431bde83
 800c76c:	20001f3c 	.word	0x20001f3c
 800c770:	40001000 	.word	0x40001000

0800c774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c774:	b480      	push	{r7}
 800c776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800c778:	e7fe      	b.n	800c778 <NMI_Handler+0x4>

0800c77a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c77a:	b480      	push	{r7}
 800c77c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c77e:	e7fe      	b.n	800c77e <HardFault_Handler+0x4>

0800c780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c780:	b480      	push	{r7}
 800c782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c784:	e7fe      	b.n	800c784 <MemManage_Handler+0x4>

0800c786 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c786:	b480      	push	{r7}
 800c788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c78a:	e7fe      	b.n	800c78a <BusFault_Handler+0x4>

0800c78c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c78c:	b480      	push	{r7}
 800c78e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c790:	e7fe      	b.n	800c790 <UsageFault_Handler+0x4>

0800c792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c792:	b480      	push	{r7}
 800c794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c796:	bf00      	nop
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800c7a4:	4802      	ldr	r0, [pc, #8]	; (800c7b0 <DMA1_Channel1_IRQHandler+0x10>)
 800c7a6:	f7f6 fa7c 	bl	8002ca2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800c7aa:	bf00      	nop
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	20001690 	.word	0x20001690

0800c7b4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800c7b8:	4802      	ldr	r0, [pc, #8]	; (800c7c4 <ADC1_IRQHandler+0x10>)
 800c7ba:	f7f4 fea1 	bl	8001500 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800c7be:	bf00      	nop
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	20001860 	.word	0x20001860

0800c7c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800c7cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c7d0:	f7f6 fe52 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800c7d4:	bf00      	nop
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800c7dc:	4803      	ldr	r0, [pc, #12]	; (800c7ec <TIM6_DAC_IRQHandler+0x14>)
 800c7de:	f7f9 fa07 	bl	8005bf0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800c7e2:	4803      	ldr	r0, [pc, #12]	; (800c7f0 <TIM6_DAC_IRQHandler+0x18>)
 800c7e4:	f7f5 fe91 	bl	800250a <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800c7e8:	bf00      	nop
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	20001f3c 	.word	0x20001f3c
 800c7f0:	20001630 	.word	0x20001630

0800c7f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c7fc:	4a14      	ldr	r2, [pc, #80]	; (800c850 <_sbrk+0x5c>)
 800c7fe:	4b15      	ldr	r3, [pc, #84]	; (800c854 <_sbrk+0x60>)
 800c800:	1ad3      	subs	r3, r2, r3
 800c802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c808:	4b13      	ldr	r3, [pc, #76]	; (800c858 <_sbrk+0x64>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d102      	bne.n	800c816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c810:	4b11      	ldr	r3, [pc, #68]	; (800c858 <_sbrk+0x64>)
 800c812:	4a12      	ldr	r2, [pc, #72]	; (800c85c <_sbrk+0x68>)
 800c814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c816:	4b10      	ldr	r3, [pc, #64]	; (800c858 <_sbrk+0x64>)
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	4413      	add	r3, r2
 800c81e:	693a      	ldr	r2, [r7, #16]
 800c820:	429a      	cmp	r2, r3
 800c822:	d207      	bcs.n	800c834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c824:	f000 f8c2 	bl	800c9ac <__errno>
 800c828:	4602      	mov	r2, r0
 800c82a:	230c      	movs	r3, #12
 800c82c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800c82e:	f04f 33ff 	mov.w	r3, #4294967295
 800c832:	e009      	b.n	800c848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c834:	4b08      	ldr	r3, [pc, #32]	; (800c858 <_sbrk+0x64>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c83a:	4b07      	ldr	r3, [pc, #28]	; (800c858 <_sbrk+0x64>)
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	4413      	add	r3, r2
 800c842:	4a05      	ldr	r2, [pc, #20]	; (800c858 <_sbrk+0x64>)
 800c844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800c846:	68fb      	ldr	r3, [r7, #12]
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3718      	adds	r7, #24
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	200a0000 	.word	0x200a0000
 800c854:	00000400 	.word	0x00000400
 800c858:	200015e0 	.word	0x200015e0
 800c85c:	20001f90 	.word	0x20001f90

0800c860 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800c860:	b480      	push	{r7}
 800c862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c864:	4b17      	ldr	r3, [pc, #92]	; (800c8c4 <SystemInit+0x64>)
 800c866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c86a:	4a16      	ldr	r2, [pc, #88]	; (800c8c4 <SystemInit+0x64>)
 800c86c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800c874:	4b14      	ldr	r3, [pc, #80]	; (800c8c8 <SystemInit+0x68>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a13      	ldr	r2, [pc, #76]	; (800c8c8 <SystemInit+0x68>)
 800c87a:	f043 0301 	orr.w	r3, r3, #1
 800c87e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800c880:	4b11      	ldr	r3, [pc, #68]	; (800c8c8 <SystemInit+0x68>)
 800c882:	2200      	movs	r2, #0
 800c884:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800c886:	4b10      	ldr	r3, [pc, #64]	; (800c8c8 <SystemInit+0x68>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a0f      	ldr	r2, [pc, #60]	; (800c8c8 <SystemInit+0x68>)
 800c88c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800c890:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800c894:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800c896:	4b0c      	ldr	r3, [pc, #48]	; (800c8c8 <SystemInit+0x68>)
 800c898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c89c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800c89e:	4b0a      	ldr	r3, [pc, #40]	; (800c8c8 <SystemInit+0x68>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4a09      	ldr	r2, [pc, #36]	; (800c8c8 <SystemInit+0x68>)
 800c8a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c8a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800c8aa:	4b07      	ldr	r3, [pc, #28]	; (800c8c8 <SystemInit+0x68>)
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c8b0:	4b04      	ldr	r3, [pc, #16]	; (800c8c4 <SystemInit+0x64>)
 800c8b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c8b6:	609a      	str	r2, [r3, #8]
#endif
}
 800c8b8:	bf00      	nop
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr
 800c8c2:	bf00      	nop
 800c8c4:	e000ed00 	.word	0xe000ed00
 800c8c8:	40021000 	.word	0x40021000

0800c8cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800c8cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c904 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800c8d0:	f7ff ffc6 	bl	800c860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800c8d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800c8d6:	e003      	b.n	800c8e0 <LoopCopyDataInit>

0800c8d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800c8d8:	4b0b      	ldr	r3, [pc, #44]	; (800c908 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800c8da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800c8dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800c8de:	3104      	adds	r1, #4

0800c8e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800c8e0:	480a      	ldr	r0, [pc, #40]	; (800c90c <LoopForever+0xa>)
	ldr	r3, =_edata
 800c8e2:	4b0b      	ldr	r3, [pc, #44]	; (800c910 <LoopForever+0xe>)
	adds	r2, r0, r1
 800c8e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800c8e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800c8e8:	d3f6      	bcc.n	800c8d8 <CopyDataInit>
	ldr	r2, =_sbss
 800c8ea:	4a0a      	ldr	r2, [pc, #40]	; (800c914 <LoopForever+0x12>)
	b	LoopFillZerobss
 800c8ec:	e002      	b.n	800c8f4 <LoopFillZerobss>

0800c8ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800c8ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800c8f0:	f842 3b04 	str.w	r3, [r2], #4

0800c8f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800c8f4:	4b08      	ldr	r3, [pc, #32]	; (800c918 <LoopForever+0x16>)
	cmp	r2, r3
 800c8f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800c8f8:	d3f9      	bcc.n	800c8ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800c8fa:	f000 f85d 	bl	800c9b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800c8fe:	f7fe fcdf 	bl	800b2c0 <main>

0800c902 <LoopForever>:

LoopForever:
    b LoopForever
 800c902:	e7fe      	b.n	800c902 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800c904:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800c908:	0800dbac 	.word	0x0800dbac
	ldr	r0, =_sdata
 800c90c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800c910:	20000104 	.word	0x20000104
	ldr	r2, =_sbss
 800c914:	20000104 	.word	0x20000104
	ldr	r3, = _ebss
 800c918:	20001f8c 	.word	0x20001f8c

0800c91c <AES_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c91c:	e7fe      	b.n	800c91c <AES_IRQHandler>
	...

0800c920 <arm_sin_f32>:
 800c920:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c9a0 <arm_sin_f32+0x80>
 800c924:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c928:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c930:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c934:	d504      	bpl.n	800c940 <arm_sin_f32+0x20>
 800c936:	ee17 3a90 	vmov	r3, s15
 800c93a:	3b01      	subs	r3, #1
 800c93c:	ee07 3a90 	vmov	s15, r3
 800c940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c944:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800c9a4 <arm_sin_f32+0x84>
 800c948:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c94c:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c950:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c954:	ee17 3a90 	vmov	r3, s15
 800c958:	b29b      	uxth	r3, r3
 800c95a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c95e:	d21a      	bcs.n	800c996 <arm_sin_f32+0x76>
 800c960:	ee07 3a90 	vmov	s15, r3
 800c964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c968:	1c59      	adds	r1, r3, #1
 800c96a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c96e:	4a0e      	ldr	r2, [pc, #56]	; (800c9a8 <arm_sin_f32+0x88>)
 800c970:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c974:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c978:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c97c:	ed93 7a00 	vldr	s14, [r3]
 800c980:	edd2 6a00 	vldr	s13, [r2]
 800c984:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c988:	ee20 0a26 	vmul.f32	s0, s0, s13
 800c98c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c990:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c994:	4770      	bx	lr
 800c996:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c99a:	2101      	movs	r1, #1
 800c99c:	2300      	movs	r3, #0
 800c99e:	e7e6      	b.n	800c96e <arm_sin_f32+0x4e>
 800c9a0:	3e22f983 	.word	0x3e22f983
 800c9a4:	44000000 	.word	0x44000000
 800c9a8:	0800d364 	.word	0x0800d364

0800c9ac <__errno>:
 800c9ac:	4b01      	ldr	r3, [pc, #4]	; (800c9b4 <__errno+0x8>)
 800c9ae:	6818      	ldr	r0, [r3, #0]
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	200000a0 	.word	0x200000a0

0800c9b8 <__libc_init_array>:
 800c9b8:	b570      	push	{r4, r5, r6, lr}
 800c9ba:	4e0d      	ldr	r6, [pc, #52]	; (800c9f0 <__libc_init_array+0x38>)
 800c9bc:	4c0d      	ldr	r4, [pc, #52]	; (800c9f4 <__libc_init_array+0x3c>)
 800c9be:	1ba4      	subs	r4, r4, r6
 800c9c0:	10a4      	asrs	r4, r4, #2
 800c9c2:	2500      	movs	r5, #0
 800c9c4:	42a5      	cmp	r5, r4
 800c9c6:	d109      	bne.n	800c9dc <__libc_init_array+0x24>
 800c9c8:	4e0b      	ldr	r6, [pc, #44]	; (800c9f8 <__libc_init_array+0x40>)
 800c9ca:	4c0c      	ldr	r4, [pc, #48]	; (800c9fc <__libc_init_array+0x44>)
 800c9cc:	f000 fc28 	bl	800d220 <_init>
 800c9d0:	1ba4      	subs	r4, r4, r6
 800c9d2:	10a4      	asrs	r4, r4, #2
 800c9d4:	2500      	movs	r5, #0
 800c9d6:	42a5      	cmp	r5, r4
 800c9d8:	d105      	bne.n	800c9e6 <__libc_init_array+0x2e>
 800c9da:	bd70      	pop	{r4, r5, r6, pc}
 800c9dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c9e0:	4798      	blx	r3
 800c9e2:	3501      	adds	r5, #1
 800c9e4:	e7ee      	b.n	800c9c4 <__libc_init_array+0xc>
 800c9e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c9ea:	4798      	blx	r3
 800c9ec:	3501      	adds	r5, #1
 800c9ee:	e7f2      	b.n	800c9d6 <__libc_init_array+0x1e>
 800c9f0:	0800dba4 	.word	0x0800dba4
 800c9f4:	0800dba4 	.word	0x0800dba4
 800c9f8:	0800dba4 	.word	0x0800dba4
 800c9fc:	0800dba8 	.word	0x0800dba8

0800ca00 <memcpy>:
 800ca00:	b510      	push	{r4, lr}
 800ca02:	1e43      	subs	r3, r0, #1
 800ca04:	440a      	add	r2, r1
 800ca06:	4291      	cmp	r1, r2
 800ca08:	d100      	bne.n	800ca0c <memcpy+0xc>
 800ca0a:	bd10      	pop	{r4, pc}
 800ca0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca10:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca14:	e7f7      	b.n	800ca06 <memcpy+0x6>

0800ca16 <memset>:
 800ca16:	4402      	add	r2, r0
 800ca18:	4603      	mov	r3, r0
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d100      	bne.n	800ca20 <memset+0xa>
 800ca1e:	4770      	bx	lr
 800ca20:	f803 1b01 	strb.w	r1, [r3], #1
 800ca24:	e7f9      	b.n	800ca1a <memset+0x4>
	...

0800ca28 <siprintf>:
 800ca28:	b40e      	push	{r1, r2, r3}
 800ca2a:	b500      	push	{lr}
 800ca2c:	b09c      	sub	sp, #112	; 0x70
 800ca2e:	ab1d      	add	r3, sp, #116	; 0x74
 800ca30:	9002      	str	r0, [sp, #8]
 800ca32:	9006      	str	r0, [sp, #24]
 800ca34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca38:	4809      	ldr	r0, [pc, #36]	; (800ca60 <siprintf+0x38>)
 800ca3a:	9107      	str	r1, [sp, #28]
 800ca3c:	9104      	str	r1, [sp, #16]
 800ca3e:	4909      	ldr	r1, [pc, #36]	; (800ca64 <siprintf+0x3c>)
 800ca40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca44:	9105      	str	r1, [sp, #20]
 800ca46:	6800      	ldr	r0, [r0, #0]
 800ca48:	9301      	str	r3, [sp, #4]
 800ca4a:	a902      	add	r1, sp, #8
 800ca4c:	f000 f866 	bl	800cb1c <_svfiprintf_r>
 800ca50:	9b02      	ldr	r3, [sp, #8]
 800ca52:	2200      	movs	r2, #0
 800ca54:	701a      	strb	r2, [r3, #0]
 800ca56:	b01c      	add	sp, #112	; 0x70
 800ca58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca5c:	b003      	add	sp, #12
 800ca5e:	4770      	bx	lr
 800ca60:	200000a0 	.word	0x200000a0
 800ca64:	ffff0208 	.word	0xffff0208

0800ca68 <__ssputs_r>:
 800ca68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca6c:	688e      	ldr	r6, [r1, #8]
 800ca6e:	429e      	cmp	r6, r3
 800ca70:	4682      	mov	sl, r0
 800ca72:	460c      	mov	r4, r1
 800ca74:	4690      	mov	r8, r2
 800ca76:	4699      	mov	r9, r3
 800ca78:	d837      	bhi.n	800caea <__ssputs_r+0x82>
 800ca7a:	898a      	ldrh	r2, [r1, #12]
 800ca7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca80:	d031      	beq.n	800cae6 <__ssputs_r+0x7e>
 800ca82:	6825      	ldr	r5, [r4, #0]
 800ca84:	6909      	ldr	r1, [r1, #16]
 800ca86:	1a6f      	subs	r7, r5, r1
 800ca88:	6965      	ldr	r5, [r4, #20]
 800ca8a:	2302      	movs	r3, #2
 800ca8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca90:	fb95 f5f3 	sdiv	r5, r5, r3
 800ca94:	f109 0301 	add.w	r3, r9, #1
 800ca98:	443b      	add	r3, r7
 800ca9a:	429d      	cmp	r5, r3
 800ca9c:	bf38      	it	cc
 800ca9e:	461d      	movcc	r5, r3
 800caa0:	0553      	lsls	r3, r2, #21
 800caa2:	d530      	bpl.n	800cb06 <__ssputs_r+0x9e>
 800caa4:	4629      	mov	r1, r5
 800caa6:	f000 fb21 	bl	800d0ec <_malloc_r>
 800caaa:	4606      	mov	r6, r0
 800caac:	b950      	cbnz	r0, 800cac4 <__ssputs_r+0x5c>
 800caae:	230c      	movs	r3, #12
 800cab0:	f8ca 3000 	str.w	r3, [sl]
 800cab4:	89a3      	ldrh	r3, [r4, #12]
 800cab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caba:	81a3      	strh	r3, [r4, #12]
 800cabc:	f04f 30ff 	mov.w	r0, #4294967295
 800cac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac4:	463a      	mov	r2, r7
 800cac6:	6921      	ldr	r1, [r4, #16]
 800cac8:	f7ff ff9a 	bl	800ca00 <memcpy>
 800cacc:	89a3      	ldrh	r3, [r4, #12]
 800cace:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cad6:	81a3      	strh	r3, [r4, #12]
 800cad8:	6126      	str	r6, [r4, #16]
 800cada:	6165      	str	r5, [r4, #20]
 800cadc:	443e      	add	r6, r7
 800cade:	1bed      	subs	r5, r5, r7
 800cae0:	6026      	str	r6, [r4, #0]
 800cae2:	60a5      	str	r5, [r4, #8]
 800cae4:	464e      	mov	r6, r9
 800cae6:	454e      	cmp	r6, r9
 800cae8:	d900      	bls.n	800caec <__ssputs_r+0x84>
 800caea:	464e      	mov	r6, r9
 800caec:	4632      	mov	r2, r6
 800caee:	4641      	mov	r1, r8
 800caf0:	6820      	ldr	r0, [r4, #0]
 800caf2:	f000 fa93 	bl	800d01c <memmove>
 800caf6:	68a3      	ldr	r3, [r4, #8]
 800caf8:	1b9b      	subs	r3, r3, r6
 800cafa:	60a3      	str	r3, [r4, #8]
 800cafc:	6823      	ldr	r3, [r4, #0]
 800cafe:	441e      	add	r6, r3
 800cb00:	6026      	str	r6, [r4, #0]
 800cb02:	2000      	movs	r0, #0
 800cb04:	e7dc      	b.n	800cac0 <__ssputs_r+0x58>
 800cb06:	462a      	mov	r2, r5
 800cb08:	f000 fb4a 	bl	800d1a0 <_realloc_r>
 800cb0c:	4606      	mov	r6, r0
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	d1e2      	bne.n	800cad8 <__ssputs_r+0x70>
 800cb12:	6921      	ldr	r1, [r4, #16]
 800cb14:	4650      	mov	r0, sl
 800cb16:	f000 fa9b 	bl	800d050 <_free_r>
 800cb1a:	e7c8      	b.n	800caae <__ssputs_r+0x46>

0800cb1c <_svfiprintf_r>:
 800cb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb20:	461d      	mov	r5, r3
 800cb22:	898b      	ldrh	r3, [r1, #12]
 800cb24:	061f      	lsls	r7, r3, #24
 800cb26:	b09d      	sub	sp, #116	; 0x74
 800cb28:	4680      	mov	r8, r0
 800cb2a:	460c      	mov	r4, r1
 800cb2c:	4616      	mov	r6, r2
 800cb2e:	d50f      	bpl.n	800cb50 <_svfiprintf_r+0x34>
 800cb30:	690b      	ldr	r3, [r1, #16]
 800cb32:	b96b      	cbnz	r3, 800cb50 <_svfiprintf_r+0x34>
 800cb34:	2140      	movs	r1, #64	; 0x40
 800cb36:	f000 fad9 	bl	800d0ec <_malloc_r>
 800cb3a:	6020      	str	r0, [r4, #0]
 800cb3c:	6120      	str	r0, [r4, #16]
 800cb3e:	b928      	cbnz	r0, 800cb4c <_svfiprintf_r+0x30>
 800cb40:	230c      	movs	r3, #12
 800cb42:	f8c8 3000 	str.w	r3, [r8]
 800cb46:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4a:	e0c8      	b.n	800ccde <_svfiprintf_r+0x1c2>
 800cb4c:	2340      	movs	r3, #64	; 0x40
 800cb4e:	6163      	str	r3, [r4, #20]
 800cb50:	2300      	movs	r3, #0
 800cb52:	9309      	str	r3, [sp, #36]	; 0x24
 800cb54:	2320      	movs	r3, #32
 800cb56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb5a:	2330      	movs	r3, #48	; 0x30
 800cb5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb60:	9503      	str	r5, [sp, #12]
 800cb62:	f04f 0b01 	mov.w	fp, #1
 800cb66:	4637      	mov	r7, r6
 800cb68:	463d      	mov	r5, r7
 800cb6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cb6e:	b10b      	cbz	r3, 800cb74 <_svfiprintf_r+0x58>
 800cb70:	2b25      	cmp	r3, #37	; 0x25
 800cb72:	d13e      	bne.n	800cbf2 <_svfiprintf_r+0xd6>
 800cb74:	ebb7 0a06 	subs.w	sl, r7, r6
 800cb78:	d00b      	beq.n	800cb92 <_svfiprintf_r+0x76>
 800cb7a:	4653      	mov	r3, sl
 800cb7c:	4632      	mov	r2, r6
 800cb7e:	4621      	mov	r1, r4
 800cb80:	4640      	mov	r0, r8
 800cb82:	f7ff ff71 	bl	800ca68 <__ssputs_r>
 800cb86:	3001      	adds	r0, #1
 800cb88:	f000 80a4 	beq.w	800ccd4 <_svfiprintf_r+0x1b8>
 800cb8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb8e:	4453      	add	r3, sl
 800cb90:	9309      	str	r3, [sp, #36]	; 0x24
 800cb92:	783b      	ldrb	r3, [r7, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	f000 809d 	beq.w	800ccd4 <_svfiprintf_r+0x1b8>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	f04f 32ff 	mov.w	r2, #4294967295
 800cba0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cba4:	9304      	str	r3, [sp, #16]
 800cba6:	9307      	str	r3, [sp, #28]
 800cba8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbac:	931a      	str	r3, [sp, #104]	; 0x68
 800cbae:	462f      	mov	r7, r5
 800cbb0:	2205      	movs	r2, #5
 800cbb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cbb6:	4850      	ldr	r0, [pc, #320]	; (800ccf8 <_svfiprintf_r+0x1dc>)
 800cbb8:	f7f3 fb2a 	bl	8000210 <memchr>
 800cbbc:	9b04      	ldr	r3, [sp, #16]
 800cbbe:	b9d0      	cbnz	r0, 800cbf6 <_svfiprintf_r+0xda>
 800cbc0:	06d9      	lsls	r1, r3, #27
 800cbc2:	bf44      	itt	mi
 800cbc4:	2220      	movmi	r2, #32
 800cbc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cbca:	071a      	lsls	r2, r3, #28
 800cbcc:	bf44      	itt	mi
 800cbce:	222b      	movmi	r2, #43	; 0x2b
 800cbd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cbd4:	782a      	ldrb	r2, [r5, #0]
 800cbd6:	2a2a      	cmp	r2, #42	; 0x2a
 800cbd8:	d015      	beq.n	800cc06 <_svfiprintf_r+0xea>
 800cbda:	9a07      	ldr	r2, [sp, #28]
 800cbdc:	462f      	mov	r7, r5
 800cbde:	2000      	movs	r0, #0
 800cbe0:	250a      	movs	r5, #10
 800cbe2:	4639      	mov	r1, r7
 800cbe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbe8:	3b30      	subs	r3, #48	; 0x30
 800cbea:	2b09      	cmp	r3, #9
 800cbec:	d94d      	bls.n	800cc8a <_svfiprintf_r+0x16e>
 800cbee:	b1b8      	cbz	r0, 800cc20 <_svfiprintf_r+0x104>
 800cbf0:	e00f      	b.n	800cc12 <_svfiprintf_r+0xf6>
 800cbf2:	462f      	mov	r7, r5
 800cbf4:	e7b8      	b.n	800cb68 <_svfiprintf_r+0x4c>
 800cbf6:	4a40      	ldr	r2, [pc, #256]	; (800ccf8 <_svfiprintf_r+0x1dc>)
 800cbf8:	1a80      	subs	r0, r0, r2
 800cbfa:	fa0b f000 	lsl.w	r0, fp, r0
 800cbfe:	4318      	orrs	r0, r3
 800cc00:	9004      	str	r0, [sp, #16]
 800cc02:	463d      	mov	r5, r7
 800cc04:	e7d3      	b.n	800cbae <_svfiprintf_r+0x92>
 800cc06:	9a03      	ldr	r2, [sp, #12]
 800cc08:	1d11      	adds	r1, r2, #4
 800cc0a:	6812      	ldr	r2, [r2, #0]
 800cc0c:	9103      	str	r1, [sp, #12]
 800cc0e:	2a00      	cmp	r2, #0
 800cc10:	db01      	blt.n	800cc16 <_svfiprintf_r+0xfa>
 800cc12:	9207      	str	r2, [sp, #28]
 800cc14:	e004      	b.n	800cc20 <_svfiprintf_r+0x104>
 800cc16:	4252      	negs	r2, r2
 800cc18:	f043 0302 	orr.w	r3, r3, #2
 800cc1c:	9207      	str	r2, [sp, #28]
 800cc1e:	9304      	str	r3, [sp, #16]
 800cc20:	783b      	ldrb	r3, [r7, #0]
 800cc22:	2b2e      	cmp	r3, #46	; 0x2e
 800cc24:	d10c      	bne.n	800cc40 <_svfiprintf_r+0x124>
 800cc26:	787b      	ldrb	r3, [r7, #1]
 800cc28:	2b2a      	cmp	r3, #42	; 0x2a
 800cc2a:	d133      	bne.n	800cc94 <_svfiprintf_r+0x178>
 800cc2c:	9b03      	ldr	r3, [sp, #12]
 800cc2e:	1d1a      	adds	r2, r3, #4
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	9203      	str	r2, [sp, #12]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	bfb8      	it	lt
 800cc38:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc3c:	3702      	adds	r7, #2
 800cc3e:	9305      	str	r3, [sp, #20]
 800cc40:	4d2e      	ldr	r5, [pc, #184]	; (800ccfc <_svfiprintf_r+0x1e0>)
 800cc42:	7839      	ldrb	r1, [r7, #0]
 800cc44:	2203      	movs	r2, #3
 800cc46:	4628      	mov	r0, r5
 800cc48:	f7f3 fae2 	bl	8000210 <memchr>
 800cc4c:	b138      	cbz	r0, 800cc5e <_svfiprintf_r+0x142>
 800cc4e:	2340      	movs	r3, #64	; 0x40
 800cc50:	1b40      	subs	r0, r0, r5
 800cc52:	fa03 f000 	lsl.w	r0, r3, r0
 800cc56:	9b04      	ldr	r3, [sp, #16]
 800cc58:	4303      	orrs	r3, r0
 800cc5a:	3701      	adds	r7, #1
 800cc5c:	9304      	str	r3, [sp, #16]
 800cc5e:	7839      	ldrb	r1, [r7, #0]
 800cc60:	4827      	ldr	r0, [pc, #156]	; (800cd00 <_svfiprintf_r+0x1e4>)
 800cc62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc66:	2206      	movs	r2, #6
 800cc68:	1c7e      	adds	r6, r7, #1
 800cc6a:	f7f3 fad1 	bl	8000210 <memchr>
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	d038      	beq.n	800cce4 <_svfiprintf_r+0x1c8>
 800cc72:	4b24      	ldr	r3, [pc, #144]	; (800cd04 <_svfiprintf_r+0x1e8>)
 800cc74:	bb13      	cbnz	r3, 800ccbc <_svfiprintf_r+0x1a0>
 800cc76:	9b03      	ldr	r3, [sp, #12]
 800cc78:	3307      	adds	r3, #7
 800cc7a:	f023 0307 	bic.w	r3, r3, #7
 800cc7e:	3308      	adds	r3, #8
 800cc80:	9303      	str	r3, [sp, #12]
 800cc82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc84:	444b      	add	r3, r9
 800cc86:	9309      	str	r3, [sp, #36]	; 0x24
 800cc88:	e76d      	b.n	800cb66 <_svfiprintf_r+0x4a>
 800cc8a:	fb05 3202 	mla	r2, r5, r2, r3
 800cc8e:	2001      	movs	r0, #1
 800cc90:	460f      	mov	r7, r1
 800cc92:	e7a6      	b.n	800cbe2 <_svfiprintf_r+0xc6>
 800cc94:	2300      	movs	r3, #0
 800cc96:	3701      	adds	r7, #1
 800cc98:	9305      	str	r3, [sp, #20]
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	250a      	movs	r5, #10
 800cc9e:	4638      	mov	r0, r7
 800cca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cca4:	3a30      	subs	r2, #48	; 0x30
 800cca6:	2a09      	cmp	r2, #9
 800cca8:	d903      	bls.n	800ccb2 <_svfiprintf_r+0x196>
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d0c8      	beq.n	800cc40 <_svfiprintf_r+0x124>
 800ccae:	9105      	str	r1, [sp, #20]
 800ccb0:	e7c6      	b.n	800cc40 <_svfiprintf_r+0x124>
 800ccb2:	fb05 2101 	mla	r1, r5, r1, r2
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	4607      	mov	r7, r0
 800ccba:	e7f0      	b.n	800cc9e <_svfiprintf_r+0x182>
 800ccbc:	ab03      	add	r3, sp, #12
 800ccbe:	9300      	str	r3, [sp, #0]
 800ccc0:	4622      	mov	r2, r4
 800ccc2:	4b11      	ldr	r3, [pc, #68]	; (800cd08 <_svfiprintf_r+0x1ec>)
 800ccc4:	a904      	add	r1, sp, #16
 800ccc6:	4640      	mov	r0, r8
 800ccc8:	f3af 8000 	nop.w
 800cccc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ccd0:	4681      	mov	r9, r0
 800ccd2:	d1d6      	bne.n	800cc82 <_svfiprintf_r+0x166>
 800ccd4:	89a3      	ldrh	r3, [r4, #12]
 800ccd6:	065b      	lsls	r3, r3, #25
 800ccd8:	f53f af35 	bmi.w	800cb46 <_svfiprintf_r+0x2a>
 800ccdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccde:	b01d      	add	sp, #116	; 0x74
 800cce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce4:	ab03      	add	r3, sp, #12
 800cce6:	9300      	str	r3, [sp, #0]
 800cce8:	4622      	mov	r2, r4
 800ccea:	4b07      	ldr	r3, [pc, #28]	; (800cd08 <_svfiprintf_r+0x1ec>)
 800ccec:	a904      	add	r1, sp, #16
 800ccee:	4640      	mov	r0, r8
 800ccf0:	f000 f882 	bl	800cdf8 <_printf_i>
 800ccf4:	e7ea      	b.n	800cccc <_svfiprintf_r+0x1b0>
 800ccf6:	bf00      	nop
 800ccf8:	0800db68 	.word	0x0800db68
 800ccfc:	0800db6e 	.word	0x0800db6e
 800cd00:	0800db72 	.word	0x0800db72
 800cd04:	00000000 	.word	0x00000000
 800cd08:	0800ca69 	.word	0x0800ca69

0800cd0c <_printf_common>:
 800cd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd10:	4691      	mov	r9, r2
 800cd12:	461f      	mov	r7, r3
 800cd14:	688a      	ldr	r2, [r1, #8]
 800cd16:	690b      	ldr	r3, [r1, #16]
 800cd18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	bfb8      	it	lt
 800cd20:	4613      	movlt	r3, r2
 800cd22:	f8c9 3000 	str.w	r3, [r9]
 800cd26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	460c      	mov	r4, r1
 800cd2e:	b112      	cbz	r2, 800cd36 <_printf_common+0x2a>
 800cd30:	3301      	adds	r3, #1
 800cd32:	f8c9 3000 	str.w	r3, [r9]
 800cd36:	6823      	ldr	r3, [r4, #0]
 800cd38:	0699      	lsls	r1, r3, #26
 800cd3a:	bf42      	ittt	mi
 800cd3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cd40:	3302      	addmi	r3, #2
 800cd42:	f8c9 3000 	strmi.w	r3, [r9]
 800cd46:	6825      	ldr	r5, [r4, #0]
 800cd48:	f015 0506 	ands.w	r5, r5, #6
 800cd4c:	d107      	bne.n	800cd5e <_printf_common+0x52>
 800cd4e:	f104 0a19 	add.w	sl, r4, #25
 800cd52:	68e3      	ldr	r3, [r4, #12]
 800cd54:	f8d9 2000 	ldr.w	r2, [r9]
 800cd58:	1a9b      	subs	r3, r3, r2
 800cd5a:	42ab      	cmp	r3, r5
 800cd5c:	dc28      	bgt.n	800cdb0 <_printf_common+0xa4>
 800cd5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cd62:	6822      	ldr	r2, [r4, #0]
 800cd64:	3300      	adds	r3, #0
 800cd66:	bf18      	it	ne
 800cd68:	2301      	movne	r3, #1
 800cd6a:	0692      	lsls	r2, r2, #26
 800cd6c:	d42d      	bmi.n	800cdca <_printf_common+0xbe>
 800cd6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd72:	4639      	mov	r1, r7
 800cd74:	4630      	mov	r0, r6
 800cd76:	47c0      	blx	r8
 800cd78:	3001      	adds	r0, #1
 800cd7a:	d020      	beq.n	800cdbe <_printf_common+0xb2>
 800cd7c:	6823      	ldr	r3, [r4, #0]
 800cd7e:	68e5      	ldr	r5, [r4, #12]
 800cd80:	f8d9 2000 	ldr.w	r2, [r9]
 800cd84:	f003 0306 	and.w	r3, r3, #6
 800cd88:	2b04      	cmp	r3, #4
 800cd8a:	bf08      	it	eq
 800cd8c:	1aad      	subeq	r5, r5, r2
 800cd8e:	68a3      	ldr	r3, [r4, #8]
 800cd90:	6922      	ldr	r2, [r4, #16]
 800cd92:	bf0c      	ite	eq
 800cd94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd98:	2500      	movne	r5, #0
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	bfc4      	itt	gt
 800cd9e:	1a9b      	subgt	r3, r3, r2
 800cda0:	18ed      	addgt	r5, r5, r3
 800cda2:	f04f 0900 	mov.w	r9, #0
 800cda6:	341a      	adds	r4, #26
 800cda8:	454d      	cmp	r5, r9
 800cdaa:	d11a      	bne.n	800cde2 <_printf_common+0xd6>
 800cdac:	2000      	movs	r0, #0
 800cdae:	e008      	b.n	800cdc2 <_printf_common+0xb6>
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	4652      	mov	r2, sl
 800cdb4:	4639      	mov	r1, r7
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	47c0      	blx	r8
 800cdba:	3001      	adds	r0, #1
 800cdbc:	d103      	bne.n	800cdc6 <_printf_common+0xba>
 800cdbe:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdc6:	3501      	adds	r5, #1
 800cdc8:	e7c3      	b.n	800cd52 <_printf_common+0x46>
 800cdca:	18e1      	adds	r1, r4, r3
 800cdcc:	1c5a      	adds	r2, r3, #1
 800cdce:	2030      	movs	r0, #48	; 0x30
 800cdd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdd4:	4422      	add	r2, r4
 800cdd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cdda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cdde:	3302      	adds	r3, #2
 800cde0:	e7c5      	b.n	800cd6e <_printf_common+0x62>
 800cde2:	2301      	movs	r3, #1
 800cde4:	4622      	mov	r2, r4
 800cde6:	4639      	mov	r1, r7
 800cde8:	4630      	mov	r0, r6
 800cdea:	47c0      	blx	r8
 800cdec:	3001      	adds	r0, #1
 800cdee:	d0e6      	beq.n	800cdbe <_printf_common+0xb2>
 800cdf0:	f109 0901 	add.w	r9, r9, #1
 800cdf4:	e7d8      	b.n	800cda8 <_printf_common+0x9c>
	...

0800cdf8 <_printf_i>:
 800cdf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdfc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ce00:	460c      	mov	r4, r1
 800ce02:	7e09      	ldrb	r1, [r1, #24]
 800ce04:	b085      	sub	sp, #20
 800ce06:	296e      	cmp	r1, #110	; 0x6e
 800ce08:	4617      	mov	r7, r2
 800ce0a:	4606      	mov	r6, r0
 800ce0c:	4698      	mov	r8, r3
 800ce0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce10:	f000 80b3 	beq.w	800cf7a <_printf_i+0x182>
 800ce14:	d822      	bhi.n	800ce5c <_printf_i+0x64>
 800ce16:	2963      	cmp	r1, #99	; 0x63
 800ce18:	d036      	beq.n	800ce88 <_printf_i+0x90>
 800ce1a:	d80a      	bhi.n	800ce32 <_printf_i+0x3a>
 800ce1c:	2900      	cmp	r1, #0
 800ce1e:	f000 80b9 	beq.w	800cf94 <_printf_i+0x19c>
 800ce22:	2958      	cmp	r1, #88	; 0x58
 800ce24:	f000 8083 	beq.w	800cf2e <_printf_i+0x136>
 800ce28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ce30:	e032      	b.n	800ce98 <_printf_i+0xa0>
 800ce32:	2964      	cmp	r1, #100	; 0x64
 800ce34:	d001      	beq.n	800ce3a <_printf_i+0x42>
 800ce36:	2969      	cmp	r1, #105	; 0x69
 800ce38:	d1f6      	bne.n	800ce28 <_printf_i+0x30>
 800ce3a:	6820      	ldr	r0, [r4, #0]
 800ce3c:	6813      	ldr	r3, [r2, #0]
 800ce3e:	0605      	lsls	r5, r0, #24
 800ce40:	f103 0104 	add.w	r1, r3, #4
 800ce44:	d52a      	bpl.n	800ce9c <_printf_i+0xa4>
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	6011      	str	r1, [r2, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	da03      	bge.n	800ce56 <_printf_i+0x5e>
 800ce4e:	222d      	movs	r2, #45	; 0x2d
 800ce50:	425b      	negs	r3, r3
 800ce52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ce56:	486f      	ldr	r0, [pc, #444]	; (800d014 <_printf_i+0x21c>)
 800ce58:	220a      	movs	r2, #10
 800ce5a:	e039      	b.n	800ced0 <_printf_i+0xd8>
 800ce5c:	2973      	cmp	r1, #115	; 0x73
 800ce5e:	f000 809d 	beq.w	800cf9c <_printf_i+0x1a4>
 800ce62:	d808      	bhi.n	800ce76 <_printf_i+0x7e>
 800ce64:	296f      	cmp	r1, #111	; 0x6f
 800ce66:	d020      	beq.n	800ceaa <_printf_i+0xb2>
 800ce68:	2970      	cmp	r1, #112	; 0x70
 800ce6a:	d1dd      	bne.n	800ce28 <_printf_i+0x30>
 800ce6c:	6823      	ldr	r3, [r4, #0]
 800ce6e:	f043 0320 	orr.w	r3, r3, #32
 800ce72:	6023      	str	r3, [r4, #0]
 800ce74:	e003      	b.n	800ce7e <_printf_i+0x86>
 800ce76:	2975      	cmp	r1, #117	; 0x75
 800ce78:	d017      	beq.n	800ceaa <_printf_i+0xb2>
 800ce7a:	2978      	cmp	r1, #120	; 0x78
 800ce7c:	d1d4      	bne.n	800ce28 <_printf_i+0x30>
 800ce7e:	2378      	movs	r3, #120	; 0x78
 800ce80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce84:	4864      	ldr	r0, [pc, #400]	; (800d018 <_printf_i+0x220>)
 800ce86:	e055      	b.n	800cf34 <_printf_i+0x13c>
 800ce88:	6813      	ldr	r3, [r2, #0]
 800ce8a:	1d19      	adds	r1, r3, #4
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	6011      	str	r1, [r2, #0]
 800ce90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce98:	2301      	movs	r3, #1
 800ce9a:	e08c      	b.n	800cfb6 <_printf_i+0x1be>
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	6011      	str	r1, [r2, #0]
 800cea0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cea4:	bf18      	it	ne
 800cea6:	b21b      	sxthne	r3, r3
 800cea8:	e7cf      	b.n	800ce4a <_printf_i+0x52>
 800ceaa:	6813      	ldr	r3, [r2, #0]
 800ceac:	6825      	ldr	r5, [r4, #0]
 800ceae:	1d18      	adds	r0, r3, #4
 800ceb0:	6010      	str	r0, [r2, #0]
 800ceb2:	0628      	lsls	r0, r5, #24
 800ceb4:	d501      	bpl.n	800ceba <_printf_i+0xc2>
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	e002      	b.n	800cec0 <_printf_i+0xc8>
 800ceba:	0668      	lsls	r0, r5, #25
 800cebc:	d5fb      	bpl.n	800ceb6 <_printf_i+0xbe>
 800cebe:	881b      	ldrh	r3, [r3, #0]
 800cec0:	4854      	ldr	r0, [pc, #336]	; (800d014 <_printf_i+0x21c>)
 800cec2:	296f      	cmp	r1, #111	; 0x6f
 800cec4:	bf14      	ite	ne
 800cec6:	220a      	movne	r2, #10
 800cec8:	2208      	moveq	r2, #8
 800ceca:	2100      	movs	r1, #0
 800cecc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ced0:	6865      	ldr	r5, [r4, #4]
 800ced2:	60a5      	str	r5, [r4, #8]
 800ced4:	2d00      	cmp	r5, #0
 800ced6:	f2c0 8095 	blt.w	800d004 <_printf_i+0x20c>
 800ceda:	6821      	ldr	r1, [r4, #0]
 800cedc:	f021 0104 	bic.w	r1, r1, #4
 800cee0:	6021      	str	r1, [r4, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d13d      	bne.n	800cf62 <_printf_i+0x16a>
 800cee6:	2d00      	cmp	r5, #0
 800cee8:	f040 808e 	bne.w	800d008 <_printf_i+0x210>
 800ceec:	4665      	mov	r5, ip
 800ceee:	2a08      	cmp	r2, #8
 800cef0:	d10b      	bne.n	800cf0a <_printf_i+0x112>
 800cef2:	6823      	ldr	r3, [r4, #0]
 800cef4:	07db      	lsls	r3, r3, #31
 800cef6:	d508      	bpl.n	800cf0a <_printf_i+0x112>
 800cef8:	6923      	ldr	r3, [r4, #16]
 800cefa:	6862      	ldr	r2, [r4, #4]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	bfde      	ittt	le
 800cf00:	2330      	movle	r3, #48	; 0x30
 800cf02:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf06:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf0a:	ebac 0305 	sub.w	r3, ip, r5
 800cf0e:	6123      	str	r3, [r4, #16]
 800cf10:	f8cd 8000 	str.w	r8, [sp]
 800cf14:	463b      	mov	r3, r7
 800cf16:	aa03      	add	r2, sp, #12
 800cf18:	4621      	mov	r1, r4
 800cf1a:	4630      	mov	r0, r6
 800cf1c:	f7ff fef6 	bl	800cd0c <_printf_common>
 800cf20:	3001      	adds	r0, #1
 800cf22:	d14d      	bne.n	800cfc0 <_printf_i+0x1c8>
 800cf24:	f04f 30ff 	mov.w	r0, #4294967295
 800cf28:	b005      	add	sp, #20
 800cf2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf2e:	4839      	ldr	r0, [pc, #228]	; (800d014 <_printf_i+0x21c>)
 800cf30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cf34:	6813      	ldr	r3, [r2, #0]
 800cf36:	6821      	ldr	r1, [r4, #0]
 800cf38:	1d1d      	adds	r5, r3, #4
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	6015      	str	r5, [r2, #0]
 800cf3e:	060a      	lsls	r2, r1, #24
 800cf40:	d50b      	bpl.n	800cf5a <_printf_i+0x162>
 800cf42:	07ca      	lsls	r2, r1, #31
 800cf44:	bf44      	itt	mi
 800cf46:	f041 0120 	orrmi.w	r1, r1, #32
 800cf4a:	6021      	strmi	r1, [r4, #0]
 800cf4c:	b91b      	cbnz	r3, 800cf56 <_printf_i+0x15e>
 800cf4e:	6822      	ldr	r2, [r4, #0]
 800cf50:	f022 0220 	bic.w	r2, r2, #32
 800cf54:	6022      	str	r2, [r4, #0]
 800cf56:	2210      	movs	r2, #16
 800cf58:	e7b7      	b.n	800ceca <_printf_i+0xd2>
 800cf5a:	064d      	lsls	r5, r1, #25
 800cf5c:	bf48      	it	mi
 800cf5e:	b29b      	uxthmi	r3, r3
 800cf60:	e7ef      	b.n	800cf42 <_printf_i+0x14a>
 800cf62:	4665      	mov	r5, ip
 800cf64:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf68:	fb02 3311 	mls	r3, r2, r1, r3
 800cf6c:	5cc3      	ldrb	r3, [r0, r3]
 800cf6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cf72:	460b      	mov	r3, r1
 800cf74:	2900      	cmp	r1, #0
 800cf76:	d1f5      	bne.n	800cf64 <_printf_i+0x16c>
 800cf78:	e7b9      	b.n	800ceee <_printf_i+0xf6>
 800cf7a:	6813      	ldr	r3, [r2, #0]
 800cf7c:	6825      	ldr	r5, [r4, #0]
 800cf7e:	6961      	ldr	r1, [r4, #20]
 800cf80:	1d18      	adds	r0, r3, #4
 800cf82:	6010      	str	r0, [r2, #0]
 800cf84:	0628      	lsls	r0, r5, #24
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	d501      	bpl.n	800cf8e <_printf_i+0x196>
 800cf8a:	6019      	str	r1, [r3, #0]
 800cf8c:	e002      	b.n	800cf94 <_printf_i+0x19c>
 800cf8e:	066a      	lsls	r2, r5, #25
 800cf90:	d5fb      	bpl.n	800cf8a <_printf_i+0x192>
 800cf92:	8019      	strh	r1, [r3, #0]
 800cf94:	2300      	movs	r3, #0
 800cf96:	6123      	str	r3, [r4, #16]
 800cf98:	4665      	mov	r5, ip
 800cf9a:	e7b9      	b.n	800cf10 <_printf_i+0x118>
 800cf9c:	6813      	ldr	r3, [r2, #0]
 800cf9e:	1d19      	adds	r1, r3, #4
 800cfa0:	6011      	str	r1, [r2, #0]
 800cfa2:	681d      	ldr	r5, [r3, #0]
 800cfa4:	6862      	ldr	r2, [r4, #4]
 800cfa6:	2100      	movs	r1, #0
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	f7f3 f931 	bl	8000210 <memchr>
 800cfae:	b108      	cbz	r0, 800cfb4 <_printf_i+0x1bc>
 800cfb0:	1b40      	subs	r0, r0, r5
 800cfb2:	6060      	str	r0, [r4, #4]
 800cfb4:	6863      	ldr	r3, [r4, #4]
 800cfb6:	6123      	str	r3, [r4, #16]
 800cfb8:	2300      	movs	r3, #0
 800cfba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfbe:	e7a7      	b.n	800cf10 <_printf_i+0x118>
 800cfc0:	6923      	ldr	r3, [r4, #16]
 800cfc2:	462a      	mov	r2, r5
 800cfc4:	4639      	mov	r1, r7
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	47c0      	blx	r8
 800cfca:	3001      	adds	r0, #1
 800cfcc:	d0aa      	beq.n	800cf24 <_printf_i+0x12c>
 800cfce:	6823      	ldr	r3, [r4, #0]
 800cfd0:	079b      	lsls	r3, r3, #30
 800cfd2:	d413      	bmi.n	800cffc <_printf_i+0x204>
 800cfd4:	68e0      	ldr	r0, [r4, #12]
 800cfd6:	9b03      	ldr	r3, [sp, #12]
 800cfd8:	4298      	cmp	r0, r3
 800cfda:	bfb8      	it	lt
 800cfdc:	4618      	movlt	r0, r3
 800cfde:	e7a3      	b.n	800cf28 <_printf_i+0x130>
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	464a      	mov	r2, r9
 800cfe4:	4639      	mov	r1, r7
 800cfe6:	4630      	mov	r0, r6
 800cfe8:	47c0      	blx	r8
 800cfea:	3001      	adds	r0, #1
 800cfec:	d09a      	beq.n	800cf24 <_printf_i+0x12c>
 800cfee:	3501      	adds	r5, #1
 800cff0:	68e3      	ldr	r3, [r4, #12]
 800cff2:	9a03      	ldr	r2, [sp, #12]
 800cff4:	1a9b      	subs	r3, r3, r2
 800cff6:	42ab      	cmp	r3, r5
 800cff8:	dcf2      	bgt.n	800cfe0 <_printf_i+0x1e8>
 800cffa:	e7eb      	b.n	800cfd4 <_printf_i+0x1dc>
 800cffc:	2500      	movs	r5, #0
 800cffe:	f104 0919 	add.w	r9, r4, #25
 800d002:	e7f5      	b.n	800cff0 <_printf_i+0x1f8>
 800d004:	2b00      	cmp	r3, #0
 800d006:	d1ac      	bne.n	800cf62 <_printf_i+0x16a>
 800d008:	7803      	ldrb	r3, [r0, #0]
 800d00a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d00e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d012:	e76c      	b.n	800ceee <_printf_i+0xf6>
 800d014:	0800db79 	.word	0x0800db79
 800d018:	0800db8a 	.word	0x0800db8a

0800d01c <memmove>:
 800d01c:	4288      	cmp	r0, r1
 800d01e:	b510      	push	{r4, lr}
 800d020:	eb01 0302 	add.w	r3, r1, r2
 800d024:	d807      	bhi.n	800d036 <memmove+0x1a>
 800d026:	1e42      	subs	r2, r0, #1
 800d028:	4299      	cmp	r1, r3
 800d02a:	d00a      	beq.n	800d042 <memmove+0x26>
 800d02c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d030:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d034:	e7f8      	b.n	800d028 <memmove+0xc>
 800d036:	4283      	cmp	r3, r0
 800d038:	d9f5      	bls.n	800d026 <memmove+0xa>
 800d03a:	1881      	adds	r1, r0, r2
 800d03c:	1ad2      	subs	r2, r2, r3
 800d03e:	42d3      	cmn	r3, r2
 800d040:	d100      	bne.n	800d044 <memmove+0x28>
 800d042:	bd10      	pop	{r4, pc}
 800d044:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d048:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d04c:	e7f7      	b.n	800d03e <memmove+0x22>
	...

0800d050 <_free_r>:
 800d050:	b538      	push	{r3, r4, r5, lr}
 800d052:	4605      	mov	r5, r0
 800d054:	2900      	cmp	r1, #0
 800d056:	d045      	beq.n	800d0e4 <_free_r+0x94>
 800d058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d05c:	1f0c      	subs	r4, r1, #4
 800d05e:	2b00      	cmp	r3, #0
 800d060:	bfb8      	it	lt
 800d062:	18e4      	addlt	r4, r4, r3
 800d064:	f000 f8d2 	bl	800d20c <__malloc_lock>
 800d068:	4a1f      	ldr	r2, [pc, #124]	; (800d0e8 <_free_r+0x98>)
 800d06a:	6813      	ldr	r3, [r2, #0]
 800d06c:	4610      	mov	r0, r2
 800d06e:	b933      	cbnz	r3, 800d07e <_free_r+0x2e>
 800d070:	6063      	str	r3, [r4, #4]
 800d072:	6014      	str	r4, [r2, #0]
 800d074:	4628      	mov	r0, r5
 800d076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d07a:	f000 b8c8 	b.w	800d20e <__malloc_unlock>
 800d07e:	42a3      	cmp	r3, r4
 800d080:	d90c      	bls.n	800d09c <_free_r+0x4c>
 800d082:	6821      	ldr	r1, [r4, #0]
 800d084:	1862      	adds	r2, r4, r1
 800d086:	4293      	cmp	r3, r2
 800d088:	bf04      	itt	eq
 800d08a:	681a      	ldreq	r2, [r3, #0]
 800d08c:	685b      	ldreq	r3, [r3, #4]
 800d08e:	6063      	str	r3, [r4, #4]
 800d090:	bf04      	itt	eq
 800d092:	1852      	addeq	r2, r2, r1
 800d094:	6022      	streq	r2, [r4, #0]
 800d096:	6004      	str	r4, [r0, #0]
 800d098:	e7ec      	b.n	800d074 <_free_r+0x24>
 800d09a:	4613      	mov	r3, r2
 800d09c:	685a      	ldr	r2, [r3, #4]
 800d09e:	b10a      	cbz	r2, 800d0a4 <_free_r+0x54>
 800d0a0:	42a2      	cmp	r2, r4
 800d0a2:	d9fa      	bls.n	800d09a <_free_r+0x4a>
 800d0a4:	6819      	ldr	r1, [r3, #0]
 800d0a6:	1858      	adds	r0, r3, r1
 800d0a8:	42a0      	cmp	r0, r4
 800d0aa:	d10b      	bne.n	800d0c4 <_free_r+0x74>
 800d0ac:	6820      	ldr	r0, [r4, #0]
 800d0ae:	4401      	add	r1, r0
 800d0b0:	1858      	adds	r0, r3, r1
 800d0b2:	4282      	cmp	r2, r0
 800d0b4:	6019      	str	r1, [r3, #0]
 800d0b6:	d1dd      	bne.n	800d074 <_free_r+0x24>
 800d0b8:	6810      	ldr	r0, [r2, #0]
 800d0ba:	6852      	ldr	r2, [r2, #4]
 800d0bc:	605a      	str	r2, [r3, #4]
 800d0be:	4401      	add	r1, r0
 800d0c0:	6019      	str	r1, [r3, #0]
 800d0c2:	e7d7      	b.n	800d074 <_free_r+0x24>
 800d0c4:	d902      	bls.n	800d0cc <_free_r+0x7c>
 800d0c6:	230c      	movs	r3, #12
 800d0c8:	602b      	str	r3, [r5, #0]
 800d0ca:	e7d3      	b.n	800d074 <_free_r+0x24>
 800d0cc:	6820      	ldr	r0, [r4, #0]
 800d0ce:	1821      	adds	r1, r4, r0
 800d0d0:	428a      	cmp	r2, r1
 800d0d2:	bf04      	itt	eq
 800d0d4:	6811      	ldreq	r1, [r2, #0]
 800d0d6:	6852      	ldreq	r2, [r2, #4]
 800d0d8:	6062      	str	r2, [r4, #4]
 800d0da:	bf04      	itt	eq
 800d0dc:	1809      	addeq	r1, r1, r0
 800d0de:	6021      	streq	r1, [r4, #0]
 800d0e0:	605c      	str	r4, [r3, #4]
 800d0e2:	e7c7      	b.n	800d074 <_free_r+0x24>
 800d0e4:	bd38      	pop	{r3, r4, r5, pc}
 800d0e6:	bf00      	nop
 800d0e8:	200015e4 	.word	0x200015e4

0800d0ec <_malloc_r>:
 800d0ec:	b570      	push	{r4, r5, r6, lr}
 800d0ee:	1ccd      	adds	r5, r1, #3
 800d0f0:	f025 0503 	bic.w	r5, r5, #3
 800d0f4:	3508      	adds	r5, #8
 800d0f6:	2d0c      	cmp	r5, #12
 800d0f8:	bf38      	it	cc
 800d0fa:	250c      	movcc	r5, #12
 800d0fc:	2d00      	cmp	r5, #0
 800d0fe:	4606      	mov	r6, r0
 800d100:	db01      	blt.n	800d106 <_malloc_r+0x1a>
 800d102:	42a9      	cmp	r1, r5
 800d104:	d903      	bls.n	800d10e <_malloc_r+0x22>
 800d106:	230c      	movs	r3, #12
 800d108:	6033      	str	r3, [r6, #0]
 800d10a:	2000      	movs	r0, #0
 800d10c:	bd70      	pop	{r4, r5, r6, pc}
 800d10e:	f000 f87d 	bl	800d20c <__malloc_lock>
 800d112:	4a21      	ldr	r2, [pc, #132]	; (800d198 <_malloc_r+0xac>)
 800d114:	6814      	ldr	r4, [r2, #0]
 800d116:	4621      	mov	r1, r4
 800d118:	b991      	cbnz	r1, 800d140 <_malloc_r+0x54>
 800d11a:	4c20      	ldr	r4, [pc, #128]	; (800d19c <_malloc_r+0xb0>)
 800d11c:	6823      	ldr	r3, [r4, #0]
 800d11e:	b91b      	cbnz	r3, 800d128 <_malloc_r+0x3c>
 800d120:	4630      	mov	r0, r6
 800d122:	f000 f863 	bl	800d1ec <_sbrk_r>
 800d126:	6020      	str	r0, [r4, #0]
 800d128:	4629      	mov	r1, r5
 800d12a:	4630      	mov	r0, r6
 800d12c:	f000 f85e 	bl	800d1ec <_sbrk_r>
 800d130:	1c43      	adds	r3, r0, #1
 800d132:	d124      	bne.n	800d17e <_malloc_r+0x92>
 800d134:	230c      	movs	r3, #12
 800d136:	6033      	str	r3, [r6, #0]
 800d138:	4630      	mov	r0, r6
 800d13a:	f000 f868 	bl	800d20e <__malloc_unlock>
 800d13e:	e7e4      	b.n	800d10a <_malloc_r+0x1e>
 800d140:	680b      	ldr	r3, [r1, #0]
 800d142:	1b5b      	subs	r3, r3, r5
 800d144:	d418      	bmi.n	800d178 <_malloc_r+0x8c>
 800d146:	2b0b      	cmp	r3, #11
 800d148:	d90f      	bls.n	800d16a <_malloc_r+0x7e>
 800d14a:	600b      	str	r3, [r1, #0]
 800d14c:	50cd      	str	r5, [r1, r3]
 800d14e:	18cc      	adds	r4, r1, r3
 800d150:	4630      	mov	r0, r6
 800d152:	f000 f85c 	bl	800d20e <__malloc_unlock>
 800d156:	f104 000b 	add.w	r0, r4, #11
 800d15a:	1d23      	adds	r3, r4, #4
 800d15c:	f020 0007 	bic.w	r0, r0, #7
 800d160:	1ac3      	subs	r3, r0, r3
 800d162:	d0d3      	beq.n	800d10c <_malloc_r+0x20>
 800d164:	425a      	negs	r2, r3
 800d166:	50e2      	str	r2, [r4, r3]
 800d168:	e7d0      	b.n	800d10c <_malloc_r+0x20>
 800d16a:	428c      	cmp	r4, r1
 800d16c:	684b      	ldr	r3, [r1, #4]
 800d16e:	bf16      	itet	ne
 800d170:	6063      	strne	r3, [r4, #4]
 800d172:	6013      	streq	r3, [r2, #0]
 800d174:	460c      	movne	r4, r1
 800d176:	e7eb      	b.n	800d150 <_malloc_r+0x64>
 800d178:	460c      	mov	r4, r1
 800d17a:	6849      	ldr	r1, [r1, #4]
 800d17c:	e7cc      	b.n	800d118 <_malloc_r+0x2c>
 800d17e:	1cc4      	adds	r4, r0, #3
 800d180:	f024 0403 	bic.w	r4, r4, #3
 800d184:	42a0      	cmp	r0, r4
 800d186:	d005      	beq.n	800d194 <_malloc_r+0xa8>
 800d188:	1a21      	subs	r1, r4, r0
 800d18a:	4630      	mov	r0, r6
 800d18c:	f000 f82e 	bl	800d1ec <_sbrk_r>
 800d190:	3001      	adds	r0, #1
 800d192:	d0cf      	beq.n	800d134 <_malloc_r+0x48>
 800d194:	6025      	str	r5, [r4, #0]
 800d196:	e7db      	b.n	800d150 <_malloc_r+0x64>
 800d198:	200015e4 	.word	0x200015e4
 800d19c:	200015e8 	.word	0x200015e8

0800d1a0 <_realloc_r>:
 800d1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1a2:	4607      	mov	r7, r0
 800d1a4:	4614      	mov	r4, r2
 800d1a6:	460e      	mov	r6, r1
 800d1a8:	b921      	cbnz	r1, 800d1b4 <_realloc_r+0x14>
 800d1aa:	4611      	mov	r1, r2
 800d1ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d1b0:	f7ff bf9c 	b.w	800d0ec <_malloc_r>
 800d1b4:	b922      	cbnz	r2, 800d1c0 <_realloc_r+0x20>
 800d1b6:	f7ff ff4b 	bl	800d050 <_free_r>
 800d1ba:	4625      	mov	r5, r4
 800d1bc:	4628      	mov	r0, r5
 800d1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1c0:	f000 f826 	bl	800d210 <_malloc_usable_size_r>
 800d1c4:	42a0      	cmp	r0, r4
 800d1c6:	d20f      	bcs.n	800d1e8 <_realloc_r+0x48>
 800d1c8:	4621      	mov	r1, r4
 800d1ca:	4638      	mov	r0, r7
 800d1cc:	f7ff ff8e 	bl	800d0ec <_malloc_r>
 800d1d0:	4605      	mov	r5, r0
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	d0f2      	beq.n	800d1bc <_realloc_r+0x1c>
 800d1d6:	4631      	mov	r1, r6
 800d1d8:	4622      	mov	r2, r4
 800d1da:	f7ff fc11 	bl	800ca00 <memcpy>
 800d1de:	4631      	mov	r1, r6
 800d1e0:	4638      	mov	r0, r7
 800d1e2:	f7ff ff35 	bl	800d050 <_free_r>
 800d1e6:	e7e9      	b.n	800d1bc <_realloc_r+0x1c>
 800d1e8:	4635      	mov	r5, r6
 800d1ea:	e7e7      	b.n	800d1bc <_realloc_r+0x1c>

0800d1ec <_sbrk_r>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	4c06      	ldr	r4, [pc, #24]	; (800d208 <_sbrk_r+0x1c>)
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	4605      	mov	r5, r0
 800d1f4:	4608      	mov	r0, r1
 800d1f6:	6023      	str	r3, [r4, #0]
 800d1f8:	f7ff fafc 	bl	800c7f4 <_sbrk>
 800d1fc:	1c43      	adds	r3, r0, #1
 800d1fe:	d102      	bne.n	800d206 <_sbrk_r+0x1a>
 800d200:	6823      	ldr	r3, [r4, #0]
 800d202:	b103      	cbz	r3, 800d206 <_sbrk_r+0x1a>
 800d204:	602b      	str	r3, [r5, #0]
 800d206:	bd38      	pop	{r3, r4, r5, pc}
 800d208:	20001f88 	.word	0x20001f88

0800d20c <__malloc_lock>:
 800d20c:	4770      	bx	lr

0800d20e <__malloc_unlock>:
 800d20e:	4770      	bx	lr

0800d210 <_malloc_usable_size_r>:
 800d210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d214:	1f18      	subs	r0, r3, #4
 800d216:	2b00      	cmp	r3, #0
 800d218:	bfbc      	itt	lt
 800d21a:	580b      	ldrlt	r3, [r1, r0]
 800d21c:	18c0      	addlt	r0, r0, r3
 800d21e:	4770      	bx	lr

0800d220 <_init>:
 800d220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d222:	bf00      	nop
 800d224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d226:	bc08      	pop	{r3}
 800d228:	469e      	mov	lr, r3
 800d22a:	4770      	bx	lr

0800d22c <_fini>:
 800d22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d22e:	bf00      	nop
 800d230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d232:	bc08      	pop	{r3}
 800d234:	469e      	mov	lr, r3
 800d236:	4770      	bx	lr
